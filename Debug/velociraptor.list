
velociraptor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb68  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800bc78  0800bc78  0001bc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c120  0800c120  0002024c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c120  0800c120  0002024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c120  0800c120  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c120  0800c120  0001c120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c124  0800c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800c128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  2000024c  0800c374  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  0800c374  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY
 13 .debug_info   000117f8  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b85  00000000  00000000  00031ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00034638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d3c  00000000  00000000  00035738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019bba  00000000  00000000  00036474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013697  00000000  00000000  0005002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093238  00000000  00000000  000636c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cb0  00000000  00000000  000f6900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000fc5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000024c 	.word	0x2000024c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bc60 	.word	0x0800bc60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000250 	.word	0x20000250
 800014c:	0800bc60 	.word	0x0800bc60

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2uiz>:
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	d20e      	bcs.n	800115e <__aeabi_f2uiz+0x22>
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30b      	bcc.n	800115e <__aeabi_f2uiz+0x22>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d409      	bmi.n	8001164 <__aeabi_f2uiz+0x28>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2uiz+0x32>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d102      	bne.n	8001174 <__aeabi_f2uiz+0x38>
 800116e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001172:	4770      	bx	lr
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <__aeabi_d2lz>:
 800117c:	b538      	push	{r3, r4, r5, lr}
 800117e:	4605      	mov	r5, r0
 8001180:	460c      	mov	r4, r1
 8001182:	2200      	movs	r2, #0
 8001184:	2300      	movs	r3, #0
 8001186:	4628      	mov	r0, r5
 8001188:	4621      	mov	r1, r4
 800118a:	f7ff fc17 	bl	80009bc <__aeabi_dcmplt>
 800118e:	b928      	cbnz	r0, 800119c <__aeabi_d2lz+0x20>
 8001190:	4628      	mov	r0, r5
 8001192:	4621      	mov	r1, r4
 8001194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001198:	f000 b80a 	b.w	80011b0 <__aeabi_d2ulz>
 800119c:	4628      	mov	r0, r5
 800119e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011a2:	f000 f805 	bl	80011b0 <__aeabi_d2ulz>
 80011a6:	4240      	negs	r0, r0
 80011a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011ac:	bd38      	pop	{r3, r4, r5, pc}
 80011ae:	bf00      	nop

080011b0 <__aeabi_d2ulz>:
 80011b0:	b5d0      	push	{r4, r6, r7, lr}
 80011b2:	2200      	movs	r2, #0
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <__aeabi_d2ulz+0x34>)
 80011b6:	4606      	mov	r6, r0
 80011b8:	460f      	mov	r7, r1
 80011ba:	f7ff f98d 	bl	80004d8 <__aeabi_dmul>
 80011be:	f7ff fc63 	bl	8000a88 <__aeabi_d2uiz>
 80011c2:	4604      	mov	r4, r0
 80011c4:	f7ff f90e 	bl	80003e4 <__aeabi_ui2d>
 80011c8:	2200      	movs	r2, #0
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <__aeabi_d2ulz+0x38>)
 80011cc:	f7ff f984 	bl	80004d8 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4630      	mov	r0, r6
 80011d6:	4639      	mov	r1, r7
 80011d8:	f7fe ffc6 	bl	8000168 <__aeabi_dsub>
 80011dc:	f7ff fc54 	bl	8000a88 <__aeabi_d2uiz>
 80011e0:	4621      	mov	r1, r4
 80011e2:	bdd0      	pop	{r4, r6, r7, pc}
 80011e4:	3df00000 	.word	0x3df00000
 80011e8:	41f00000 	.word	0x41f00000

080011ec <ADXL345_Select>:

adxl_data_t adxl_data;
adxl_data2_t adxl_data2;
//adxl_data2_t adxl_data2;

void ADXL345_Select(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADXL345_SPI_CS_PORT, ADXL345_SPI_CS_PIN, GPIO_PIN_RESET); // CS low
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f6:	4802      	ldr	r0, [pc, #8]	; (8001200 <ADXL345_Select+0x14>)
 80011f8:	f003 f927 	bl	800444a <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40010800 	.word	0x40010800

08001204 <ADXL345_Deselect>:

void ADXL345_Deselect(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADXL345_SPI_CS_PORT, ADXL345_SPI_CS_PIN, GPIO_PIN_SET); // CS high
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120e:	4802      	ldr	r0, [pc, #8]	; (8001218 <ADXL345_Deselect+0x14>)
 8001210:	f003 f91b 	bl	800444a <HAL_GPIO_WritePin>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40010800 	.word	0x40010800

0800121c <ADXL345_Init>:

void ADXL345_Init(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	ADXL345_WriteRegister(0x2D, 0x08); // POWER_CTL register (0x2D): Set to measurement mode
 8001220:	2108      	movs	r1, #8
 8001222:	202d      	movs	r0, #45	; 0x2d
 8001224:	f000 f84e 	bl	80012c4 <ADXL345_WriteRegister>

	// Set the output data rate (ODR) and range
	ADXL345_WriteRegister(0x2C, 0x09); // BW_RATE register (0x2C): Set ODR to 100 Hz (0x0A)
 8001228:	2109      	movs	r1, #9
 800122a:	202c      	movs	r0, #44	; 0x2c
 800122c:	f000 f84a 	bl	80012c4 <ADXL345_WriteRegister>

	// Set the full-scale range
	ADXL345_WriteRegister(0x31, 0x09); // DATA_FORMAT register (0x31): Full-resolution, ±16g (0x0B)
 8001230:	2109      	movs	r1, #9
 8001232:	2031      	movs	r0, #49	; 0x31
 8001234:	f000 f846 	bl	80012c4 <ADXL345_WriteRegister>

	// Ensure FIFO is in bypass mode
	ADXL345_WriteRegister(0x38, 0x00); // FIFO_CTL register (0x38): FIFO in bypass mode
 8001238:	2100      	movs	r1, #0
 800123a:	2038      	movs	r0, #56	; 0x38
 800123c:	f000 f842 	bl	80012c4 <ADXL345_WriteRegister>

	// Enable Data Ready interrupt
	ADXL345_WriteRegister(0x2E, 0x80); // INT_ENABLE register (0x2E): Enable Data Ready interrupt
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	202e      	movs	r0, #46	; 0x2e
 8001244:	f000 f83e 	bl	80012c4 <ADXL345_WriteRegister>

	// Map Data Ready interrupt to INT1
	ADXL345_WriteRegister(0x2F, 0x00); // INT_MAP register (0x2F): Route Data Ready to INT1 (bit 0 = 0)
 8001248:	2100      	movs	r1, #0
 800124a:	202f      	movs	r0, #47	; 0x2f
 800124c:	f000 f83a 	bl	80012c4 <ADXL345_WriteRegister>

	// lectura inicial para disparar el modo continuo (si no no anda!)
	ADXL345_ReadXYZ(&(adxl_data.accel[0].x), &(adxl_data.accel[0].y), &(adxl_data.accel[0].z));
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <ADXL345_Init+0x50>)
 8001252:	4907      	ldr	r1, [pc, #28]	; (8001270 <ADXL345_Init+0x54>)
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <ADXL345_Init+0x58>)
 8001256:	f000 f853 	bl	8001300 <ADXL345_ReadXYZ>

	adxl_data2.ptr = 0;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <ADXL345_Init+0x5c>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
	adxl_data2.x_avg = 0;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <ADXL345_Init+0x5c>)
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000026e 	.word	0x2000026e
 8001270:	2000026c 	.word	0x2000026c
 8001274:	2000026a 	.word	0x2000026a
 8001278:	20000278 	.word	0x20000278

0800127c <ADXL345_ReadRegister>:

uint8_t ADXL345_ReadRegister(uint8_t reg) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
    uint8_t receivedData;
    reg |= 0x80; // Set MSB to 1 for read operation
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800128c:	b2db      	uxtb	r3, r3
 800128e:	71fb      	strb	r3, [r7, #7]

    ADXL345_Select();
 8001290:	f7ff ffac 	bl	80011ec <ADXL345_Select>
    HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);   // Send register address
 8001294:	1df9      	adds	r1, r7, #7
 8001296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129a:	2201      	movs	r2, #1
 800129c:	4808      	ldr	r0, [pc, #32]	; (80012c0 <ADXL345_ReadRegister+0x44>)
 800129e:	f003 fe59 	bl	8004f54 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY); // Read register value
 80012a2:	f107 010f 	add.w	r1, r7, #15
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012aa:	2201      	movs	r2, #1
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <ADXL345_ReadRegister+0x44>)
 80012ae:	f003 ff95 	bl	80051dc <HAL_SPI_Receive>
    ADXL345_Deselect();
 80012b2:	f7ff ffa7 	bl	8001204 <ADXL345_Deselect>

    return receivedData;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002f0 	.word	0x200002f0

080012c4 <ADXL345_WriteRegister>:

void ADXL345_WriteRegister(uint8_t reg, uint8_t value) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2];

    // Combine register address and value into a transmission array
    txData[0] = reg;       // Register address
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	733b      	strb	r3, [r7, #12]
    txData[1] = value;     // Data to write
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	737b      	strb	r3, [r7, #13]

    ADXL345_Select();
 80012dc:	f7ff ff86 	bl	80011ec <ADXL345_Select>
    HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY); // Transmit register address and data
 80012e0:	f107 010c 	add.w	r1, r7, #12
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e8:	2202      	movs	r2, #2
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <ADXL345_WriteRegister+0x38>)
 80012ec:	f003 fe32 	bl	8004f54 <HAL_SPI_Transmit>
    ADXL345_Deselect();
 80012f0:	f7ff ff88 	bl	8001204 <ADXL345_Deselect>
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200002f0 	.word	0x200002f0

08001300 <ADXL345_ReadXYZ>:

void ADXL345_ReadXYZ(int16_t *x, int16_t *y, int16_t *z) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
    uint8_t x0, x1, y0, y1, z0, z1;

    // Read X-axis
    x0 = ADXL345_ReadRegister(0x32); // X0
 800130c:	2032      	movs	r0, #50	; 0x32
 800130e:	f7ff ffb5 	bl	800127c <ADXL345_ReadRegister>
 8001312:	4603      	mov	r3, r0
 8001314:	75fb      	strb	r3, [r7, #23]
    x1 = ADXL345_ReadRegister(0x33); // X1
 8001316:	2033      	movs	r0, #51	; 0x33
 8001318:	f7ff ffb0 	bl	800127c <ADXL345_ReadRegister>
 800131c:	4603      	mov	r3, r0
 800131e:	75bb      	strb	r3, [r7, #22]

    // Read Y-axis
    y0 = ADXL345_ReadRegister(0x34); // Y0
 8001320:	2034      	movs	r0, #52	; 0x34
 8001322:	f7ff ffab 	bl	800127c <ADXL345_ReadRegister>
 8001326:	4603      	mov	r3, r0
 8001328:	757b      	strb	r3, [r7, #21]
    y1 = ADXL345_ReadRegister(0x35); // Y1
 800132a:	2035      	movs	r0, #53	; 0x35
 800132c:	f7ff ffa6 	bl	800127c <ADXL345_ReadRegister>
 8001330:	4603      	mov	r3, r0
 8001332:	753b      	strb	r3, [r7, #20]

    // Read Z-axis
    z0 = ADXL345_ReadRegister(0x36); // Z0
 8001334:	2036      	movs	r0, #54	; 0x36
 8001336:	f7ff ffa1 	bl	800127c <ADXL345_ReadRegister>
 800133a:	4603      	mov	r3, r0
 800133c:	74fb      	strb	r3, [r7, #19]
    z1 = ADXL345_ReadRegister(0x37); // Z1
 800133e:	2037      	movs	r0, #55	; 0x37
 8001340:	f7ff ff9c 	bl	800127c <ADXL345_ReadRegister>
 8001344:	4603      	mov	r3, r0
 8001346:	74bb      	strb	r3, [r7, #18]

    // Combine high and low bytes
    *x = (int16_t)((x1 << 8) | x0);
 8001348:	7dbb      	ldrb	r3, [r7, #22]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b21a      	sxth	r2, r3
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21a      	sxth	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((y1 << 8) | y0);
 800135a:	7d3b      	ldrb	r3, [r7, #20]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	b21a      	sxth	r2, r3
 8001360:	7d7b      	ldrb	r3, [r7, #21]
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21a      	sxth	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((z1 << 8) | z0);
 800136c:	7cbb      	ldrb	r3, [r7, #18]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	7cfb      	ldrb	r3, [r7, #19]
 8001374:	b21b      	sxth	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b21a      	sxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	801a      	strh	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <ADXL345_ReadX>:

void ADXL345_ReadX(int16_t *x)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	uint8_t x0, x1;
	x0 = ADXL345_ReadRegister(0x32); // X0
 800138e:	2032      	movs	r0, #50	; 0x32
 8001390:	f7ff ff74 	bl	800127c <ADXL345_ReadRegister>
 8001394:	4603      	mov	r3, r0
 8001396:	73fb      	strb	r3, [r7, #15]
	x1 = ADXL345_ReadRegister(0x33); // X1
 8001398:	2033      	movs	r0, #51	; 0x33
 800139a:	f7ff ff6f 	bl	800127c <ADXL345_ReadRegister>
 800139e:	4603      	mov	r3, r0
 80013a0:	73bb      	strb	r3, [r7, #14]
	*x = (int16_t) ((x1 << 8) | x0);
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	801a      	strh	r2, [r3, #0]
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <ADXL345_CheckDevice>:

uint8_t ADXL345_CheckDevice(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
    uint8_t deviceID = ADXL345_ReadRegister(0x00); // 0x00 is the DEVID register
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff ff5a 	bl	800127c <ADXL345_ReadRegister>
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
    if (deviceID == 0xE5) {
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2be5      	cmp	r3, #229	; 0xe5
 80013d0:	d101      	bne.n	80013d6 <ADXL345_CheckDevice+0x1a>
        return 1; // Device is present and responding correctly
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <ADXL345_CheckDevice+0x1c>
    } else {
        return 0; // Device is not responding
 80013d6:	2300      	movs	r3, #0
    }
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <ADXL345_IRQHandler>:

void ADXL345_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

	ADXL345_ReadXYZ(x, y, z);

	adxl_data.active_buffer = !adxl_data.active_buffer;*/

	ADXL345_ReadX(&(adxl_data2.x_read[adxl_data2.ptr]));
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <ADXL345_IRQHandler+0x84>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <ADXL345_IRQHandler+0x84>)
 80013ee:	4413      	add	r3, r2
 80013f0:	3302      	adds	r3, #2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ffc7 	bl	8001386 <ADXL345_ReadX>

	adxl_data2.ptr++;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <ADXL345_IRQHandler+0x84>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <ADXL345_IRQHandler+0x84>)
 8001402:	701a      	strb	r2, [r3, #0]
	adxl_data2.ptr %= BUF_LEN;
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <ADXL345_IRQHandler+0x84>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <ADXL345_IRQHandler+0x84>)
 8001410:	701a      	strb	r2, [r3, #0]

	int16_t accum = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	80fb      	strh	r3, [r7, #6]
	for(uint8_t n_sample = 0; n_sample < BUF_LEN; n_sample++)
 8001416:	2300      	movs	r3, #0
 8001418:	717b      	strb	r3, [r7, #5]
 800141a:	e00d      	b.n	8001438 <ADXL345_IRQHandler+0x58>
	{
		accum += adxl_data2.x_read[n_sample];
 800141c:	797b      	ldrb	r3, [r7, #5]
 800141e:	4a11      	ldr	r2, [pc, #68]	; (8001464 <ADXL345_IRQHandler+0x84>)
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001428:	b29a      	uxth	r2, r3
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	4413      	add	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	80fb      	strh	r3, [r7, #6]
	for(uint8_t n_sample = 0; n_sample < BUF_LEN; n_sample++)
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	3301      	adds	r3, #1
 8001436:	717b      	strb	r3, [r7, #5]
 8001438:	797b      	ldrb	r3, [r7, #5]
 800143a:	2b1f      	cmp	r3, #31
 800143c:	d9ee      	bls.n	800141c <ADXL345_IRQHandler+0x3c>
	}
	adxl_data2.x_avg = (float) accum / (float) BUF_LEN;
 800143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc4a 	bl	8000cdc <__aeabi_i2f>
 8001448:	4603      	mov	r3, r0
 800144a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fd4c 	bl	8000eec <__aeabi_fdiv>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <ADXL345_IRQHandler+0x84>)
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000278 	.word	0x20000278

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146c:	f001 fef6 	bl	800325c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 f815 	bl	800149e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f000 fa64 	bl	8001940 <MX_GPIO_Init>
  MX_DMA_Init();
 8001478:	f000 fa3c 	bl	80018f4 <MX_DMA_Init>
  MX_TIM4_Init();
 800147c:	f000 f978 	bl	8001770 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001480:	f000 fa0e 	bl	80018a0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001484:	f000 f926 	bl	80016d4 <MX_TIM3_Init>
  MX_ADC2_Init();
 8001488:	f000 f864 	bl	8001554 <MX_ADC2_Init>
  MX_TIM2_Init();
 800148c:	f000 f8d6 	bl	800163c <MX_TIM2_Init>
  MX_SPI1_Init();
 8001490:	f000 f89e 	bl	80015d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  velociraptor3_init();
 8001494:	f000 fe64 	bl	8002160 <velociraptor3_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	velociraptor3_main_loop();
 8001498:	f000 ff9c 	bl	80023d4 <velociraptor3_main_loop>
 800149c:	e7fc      	b.n	8001498 <main+0x30>

0800149e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b094      	sub	sp, #80	; 0x50
 80014a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a8:	2228      	movs	r2, #40	; 0x28
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f007 fe1f 	bl	80090f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ce:	2301      	movs	r3, #1
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	2301      	movs	r3, #1
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e0:	2302      	movs	r3, #2
 80014e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 ffe3 	bl	80044c0 <HAL_RCC_OscConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001500:	f000 face 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001504:	230f      	movs	r3, #15
 8001506:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001514:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	2102      	movs	r1, #2
 8001520:	4618      	mov	r0, r3
 8001522:	f003 fa4f 	bl	80049c4 <HAL_RCC_ClockConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800152c:	f000 fab8 	bl	8001aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001530:	2302      	movs	r3, #2
 8001532:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001538:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fbcf 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001548:	f000 faaa 	bl	8001aa0 <Error_Handler>
  }
}
 800154c:	bf00      	nop
 800154e:	3750      	adds	r7, #80	; 0x50
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_ADC2_Init+0x74>)
 8001566:	4a19      	ldr	r2, [pc, #100]	; (80015cc <MX_ADC2_Init+0x78>)
 8001568:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_ADC2_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_ADC2_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_ADC2_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_ADC2_Init+0x74>)
 800157e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001582:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_ADC2_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_ADC2_Init+0x74>)
 800158c:	2201      	movs	r2, #1
 800158e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_ADC2_Init+0x74>)
 8001592:	f001 fee9 	bl	8003368 <HAL_ADC_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800159c:	f000 fa80 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015a4:	2301      	movs	r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_ADC2_Init+0x74>)
 80015b2:	f002 f86b 	bl	800368c <HAL_ADC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80015bc:	f000 fa70 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200002c0 	.word	0x200002c0
 80015cc:	40012800 	.word	0x40012800

080015d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_SPI1_Init+0x64>)
 80015d6:	4a18      	ldr	r2, [pc, #96]	; (8001638 <MX_SPI1_Init+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_SPI1_Init+0x64>)
 80015dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_SPI1_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_SPI1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_SPI1_Init+0x64>)
 80015f0:	2202      	movs	r2, #2
 80015f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_SPI1_Init+0x64>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_SPI1_Init+0x64>)
 80015fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001600:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_SPI1_Init+0x64>)
 8001604:	2218      	movs	r2, #24
 8001606:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <MX_SPI1_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_SPI1_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <MX_SPI1_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_SPI1_Init+0x64>)
 800161c:	220a      	movs	r2, #10
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_SPI1_Init+0x64>)
 8001622:	f003 fc13 	bl	8004e4c <HAL_SPI_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800162c:	f000 fa38 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200002f0 	.word	0x200002f0
 8001638:	40013000 	.word	0x40013000

0800163c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	463b      	mov	r3, r7
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MX_TIM2_Init+0x94>)
 800165a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800165e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_TIM2_Init+0x94>)
 8001662:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001666:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_TIM2_Init+0x94>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_TIM2_Init+0x94>)
 8001670:	2209      	movs	r2, #9
 8001672:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_TIM2_Init+0x94>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_TIM2_Init+0x94>)
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001680:	4813      	ldr	r0, [pc, #76]	; (80016d0 <MX_TIM2_Init+0x94>)
 8001682:	f004 f978 	bl	8005976 <HAL_TIM_Base_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800168c:	f000 fa08 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4619      	mov	r1, r3
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <MX_TIM2_Init+0x94>)
 800169e:	f004 fcb7 	bl	8006010 <HAL_TIM_ConfigClockSource>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016a8:	f000 f9fa 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016b4:	463b      	mov	r3, r7
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_TIM2_Init+0x94>)
 80016ba:	f005 f84d 	bl	8006758 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016c4:	f000 f9ec 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000348 	.word	0x20000348

080016d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <MX_TIM3_Init+0x94>)
 80016f2:	4a1e      	ldr	r2, [pc, #120]	; (800176c <MX_TIM3_Init+0x98>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <MX_TIM3_Init+0x94>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_TIM3_Init+0x94>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1080-1;
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_TIM3_Init+0x94>)
 8001704:	f240 4237 	movw	r2, #1079	; 0x437
 8001708:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_TIM3_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <MX_TIM3_Init+0x94>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001716:	4814      	ldr	r0, [pc, #80]	; (8001768 <MX_TIM3_Init+0x94>)
 8001718:	f004 f92d 	bl	8005976 <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001722:	f000 f9bd 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_TIM3_Init+0x94>)
 8001734:	f004 fc6c 	bl	8006010 <HAL_TIM_ConfigClockSource>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800173e:	f000 f9af 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001742:	2320      	movs	r3, #32
 8001744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <MX_TIM3_Init+0x94>)
 8001750:	f005 f802 	bl	8006758 <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800175a:	f000 f9a1 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000390 	.word	0x20000390
 800176c:	40000400 	.word	0x40000400

08001770 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	; 0x38
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	f107 0320 	add.w	r3, r7, #32
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	615a      	str	r2, [r3, #20]
 800179e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017a0:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <MX_TIM4_Init+0x128>)
 80017a2:	4a3e      	ldr	r2, [pc, #248]	; (800189c <MX_TIM4_Init+0x12c>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017a6:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <MX_TIM4_Init+0x128>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <MX_TIM4_Init+0x128>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 720-1;
 80017b2:	4b39      	ldr	r3, [pc, #228]	; (8001898 <MX_TIM4_Init+0x128>)
 80017b4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80017b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <MX_TIM4_Init+0x128>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <MX_TIM4_Init+0x128>)
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017c6:	4834      	ldr	r0, [pc, #208]	; (8001898 <MX_TIM4_Init+0x128>)
 80017c8:	f004 f8d5 	bl	8005976 <HAL_TIM_Base_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80017d2:	f000 f965 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e0:	4619      	mov	r1, r3
 80017e2:	482d      	ldr	r0, [pc, #180]	; (8001898 <MX_TIM4_Init+0x128>)
 80017e4:	f004 fc14 	bl	8006010 <HAL_TIM_ConfigClockSource>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80017ee:	f000 f957 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017f2:	4829      	ldr	r0, [pc, #164]	; (8001898 <MX_TIM4_Init+0x128>)
 80017f4:	f004 f960 	bl	8005ab8 <HAL_TIM_PWM_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80017fe:	f000 f94f 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800180a:	f107 0320 	add.w	r3, r7, #32
 800180e:	4619      	mov	r1, r3
 8001810:	4821      	ldr	r0, [pc, #132]	; (8001898 <MX_TIM4_Init+0x128>)
 8001812:	f004 ffa1 	bl	8006758 <HAL_TIMEx_MasterConfigSynchronization>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800181c:	f000 f940 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001820:	2360      	movs	r3, #96	; 0x60
 8001822:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	4619      	mov	r1, r3
 8001836:	4818      	ldr	r0, [pc, #96]	; (8001898 <MX_TIM4_Init+0x128>)
 8001838:	f004 fb28 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001842:	f000 f92d 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2204      	movs	r2, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4812      	ldr	r0, [pc, #72]	; (8001898 <MX_TIM4_Init+0x128>)
 800184e:	f004 fb1d 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001858:	f000 f922 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2208      	movs	r2, #8
 8001860:	4619      	mov	r1, r3
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_TIM4_Init+0x128>)
 8001864:	f004 fb12 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800186e:	f000 f917 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	220c      	movs	r2, #12
 8001876:	4619      	mov	r1, r3
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <MX_TIM4_Init+0x128>)
 800187a:	f004 fb07 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001884:	f000 f90c 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <MX_TIM4_Init+0x128>)
 800188a:	f000 fa23 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 800188e:	bf00      	nop
 8001890:	3738      	adds	r7, #56	; 0x38
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200003d8 	.word	0x200003d8
 800189c:	40000800 	.word	0x40000800

080018a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_USART1_UART_Init+0x50>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018d8:	f004 ffae 	bl	8006838 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018e2:	f000 f8dd 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000420 	.word	0x20000420
 80018f0:	40013800 	.word	0x40013800

080018f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <MX_DMA_Init+0x48>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	4a0f      	ldr	r2, [pc, #60]	; (800193c <MX_DMA_Init+0x48>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6153      	str	r3, [r2, #20]
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <MX_DMA_Init+0x48>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	200e      	movs	r0, #14
 8001918:	f002 f923 	bl	8003b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800191c:	200e      	movs	r0, #14
 800191e:	f002 f93c 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	200f      	movs	r0, #15
 8001928:	f002 f91b 	bl	8003b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800192c:	200f      	movs	r0, #15
 800192e:	f002 f934 	bl	8003b9a <HAL_NVIC_EnableIRQ>

}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000

08001940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001954:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <MX_GPIO_Init+0x14c>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a4c      	ldr	r2, [pc, #304]	; (8001a8c <MX_GPIO_Init+0x14c>)
 800195a:	f043 0310 	orr.w	r3, r3, #16
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <MX_GPIO_Init+0x14c>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <MX_GPIO_Init+0x14c>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a46      	ldr	r2, [pc, #280]	; (8001a8c <MX_GPIO_Init+0x14c>)
 8001972:	f043 0320 	orr.w	r3, r3, #32
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <MX_GPIO_Init+0x14c>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <MX_GPIO_Init+0x14c>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a40      	ldr	r2, [pc, #256]	; (8001a8c <MX_GPIO_Init+0x14c>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b3e      	ldr	r3, [pc, #248]	; (8001a8c <MX_GPIO_Init+0x14c>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <MX_GPIO_Init+0x14c>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a3a      	ldr	r2, [pc, #232]	; (8001a8c <MX_GPIO_Init+0x14c>)
 80019a2:	f043 0308 	orr.w	r3, r3, #8
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <MX_GPIO_Init+0x14c>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ba:	4835      	ldr	r0, [pc, #212]	; (8001a90 <MX_GPIO_Init+0x150>)
 80019bc:	f002 fd45 	bl	800444a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80019c0:	2200      	movs	r2, #0
 80019c2:	f248 111e 	movw	r1, #33054	; 0x811e
 80019c6:	4833      	ldr	r0, [pc, #204]	; (8001a94 <MX_GPIO_Init+0x154>)
 80019c8:	f002 fd3f 	bl	800444a <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2302      	movs	r3, #2
 80019dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019de:	f107 0310 	add.w	r3, r7, #16
 80019e2:	4619      	mov	r1, r3
 80019e4:	482a      	ldr	r0, [pc, #168]	; (8001a90 <MX_GPIO_Init+0x150>)
 80019e6:	f002 fb95 	bl	8004114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4619      	mov	r1, r3
 80019fe:	4824      	ldr	r0, [pc, #144]	; (8001a90 <MX_GPIO_Init+0x150>)
 8001a00:	f002 fb88 	bl	8004114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001a04:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8001a08:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	481d      	ldr	r0, [pc, #116]	; (8001a94 <MX_GPIO_Init+0x154>)
 8001a1e:	f002 fb79 	bl	8004114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	4619      	mov	r1, r3
 8001a36:	4818      	ldr	r0, [pc, #96]	; (8001a98 <MX_GPIO_Init+0x158>)
 8001a38:	f002 fb6c 	bl	8004114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_GPIO_Init+0x15c>)
 8001a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4810      	ldr	r0, [pc, #64]	; (8001a94 <MX_GPIO_Init+0x154>)
 8001a52:	f002 fb5f 	bl	8004114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <MX_GPIO_Init+0x154>)
 8001a70:	f002 fb50 	bl	8004114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	2028      	movs	r0, #40	; 0x28
 8001a7a:	f002 f872 	bl	8003b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a7e:	2028      	movs	r0, #40	; 0x28
 8001a80:	f002 f88b 	bl	8003b9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40011000 	.word	0x40011000
 8001a94:	40010800 	.word	0x40010800
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	10110000 	.word	0x10110000

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>
	...

08001aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_MspInit+0x5c>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <HAL_MspInit+0x5c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6193      	str	r3, [r2, #24]
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_MspInit+0x5c>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <HAL_MspInit+0x5c>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <HAL_MspInit+0x5c>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <HAL_MspInit+0x5c>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_MspInit+0x60>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_MspInit+0x60>)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010000 	.word	0x40010000

08001b10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_ADC_MspInit+0x6c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d121      	bne.n	8001b74 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_ADC_MspInit+0x70>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <HAL_ADC_MspInit+0x70>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_ADC_MspInit+0x70>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_ADC_MspInit+0x70>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <HAL_ADC_MspInit+0x70>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_ADC_MspInit+0x70>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0-WKUP     ------> ADC2_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b60:	2301      	movs	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b64:	2303      	movs	r3, #3
 8001b66:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <HAL_ADC_MspInit+0x74>)
 8001b70:	f002 fad0 	bl	8004114 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40012800 	.word	0x40012800
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40010800 	.word	0x40010800

08001b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a22      	ldr	r2, [pc, #136]	; (8001c2c <HAL_SPI_MspInit+0xa4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d13d      	bne.n	8001c24 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_SPI_MspInit+0xa8>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a20      	ldr	r2, [pc, #128]	; (8001c30 <HAL_SPI_MspInit+0xa8>)
 8001bae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_SPI_MspInit+0xa8>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_SPI_MspInit+0xa8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	; (8001c30 <HAL_SPI_MspInit+0xa8>)
 8001bc6:	f043 0308 	orr.w	r3, r3, #8
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_SPI_MspInit+0xa8>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001bd8:	2328      	movs	r3, #40	; 0x28
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4812      	ldr	r0, [pc, #72]	; (8001c34 <HAL_SPI_MspInit+0xac>)
 8001bec:	f002 fa92 	bl	8004114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4619      	mov	r1, r3
 8001c02:	480c      	ldr	r0, [pc, #48]	; (8001c34 <HAL_SPI_MspInit+0xac>)
 8001c04:	f002 fa86 	bl	8004114 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_SPI_MspInit+0xb0>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1e:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <HAL_SPI_MspInit+0xb0>)
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40013000 	.word	0x40013000
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010c00 	.word	0x40010c00
 8001c38:	40010000 	.word	0x40010000

08001c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4c:	d114      	bne.n	8001c78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	201c      	movs	r0, #28
 8001c6c:	f001 ff79 	bl	8003b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c70:	201c      	movs	r0, #28
 8001c72:	f001 ff92 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c76:	e022      	b.n	8001cbe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <HAL_TIM_Base_MspInit+0x90>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10c      	bne.n	8001c9c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	61d3      	str	r3, [r2, #28]
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
}
 8001c9a:	e010      	b.n	8001cbe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <HAL_TIM_Base_MspInit+0x94>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10b      	bne.n	8001cbe <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_TIM_Base_MspInit+0x8c>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_TIM_Base_MspInit+0x8c>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_TIM_Base_MspInit+0x8c>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40000800 	.word	0x40000800

08001cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <HAL_TIM_MspPostInit+0x5c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d118      	bne.n	8001d26 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_TIM_MspPostInit+0x60>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <HAL_TIM_MspPostInit+0x60>)
 8001cfa:	f043 0308 	orr.w	r3, r3, #8
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_TIM_MspPostInit+0x60>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d0c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_TIM_MspPostInit+0x64>)
 8001d22:	f002 f9f7 	bl	8004114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40000800 	.word	0x40000800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010c00 	.word	0x40010c00

08001d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a47      	ldr	r2, [pc, #284]	; (8001e74 <HAL_UART_MspInit+0x138>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	f040 8086 	bne.w	8001e6a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d5e:	4b46      	ldr	r3, [pc, #280]	; (8001e78 <HAL_UART_MspInit+0x13c>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	4a45      	ldr	r2, [pc, #276]	; (8001e78 <HAL_UART_MspInit+0x13c>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d68:	6193      	str	r3, [r2, #24]
 8001d6a:	4b43      	ldr	r3, [pc, #268]	; (8001e78 <HAL_UART_MspInit+0x13c>)
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <HAL_UART_MspInit+0x13c>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	4a3f      	ldr	r2, [pc, #252]	; (8001e78 <HAL_UART_MspInit+0x13c>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6193      	str	r3, [r2, #24]
 8001d82:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_UART_MspInit+0x13c>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4619      	mov	r1, r3
 8001da2:	4836      	ldr	r0, [pc, #216]	; (8001e7c <HAL_UART_MspInit+0x140>)
 8001da4:	f002 f9b6 	bl	8004114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	482f      	ldr	r0, [pc, #188]	; (8001e7c <HAL_UART_MspInit+0x140>)
 8001dbe:	f002 f9a9 	bl	8004114 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_UART_MspInit+0x144>)
 8001dc4:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <HAL_UART_MspInit+0x148>)
 8001dc6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_UART_MspInit+0x144>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dce:	4b2c      	ldr	r3, [pc, #176]	; (8001e80 <HAL_UART_MspInit+0x144>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_UART_MspInit+0x144>)
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_UART_MspInit+0x144>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_UART_MspInit+0x144>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_UART_MspInit+0x144>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_UART_MspInit+0x144>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001df2:	4823      	ldr	r0, [pc, #140]	; (8001e80 <HAL_UART_MspInit+0x144>)
 8001df4:	f001 feec 	bl	8003bd0 <HAL_DMA_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001dfe:	f7ff fe4f 	bl	8001aa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <HAL_UART_MspInit+0x144>)
 8001e06:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e08:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_UART_MspInit+0x144>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_UART_MspInit+0x14c>)
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_UART_MspInit+0x150>)
 8001e12:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_UART_MspInit+0x14c>)
 8001e16:	2210      	movs	r2, #16
 8001e18:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_UART_MspInit+0x14c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_UART_MspInit+0x14c>)
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_UART_MspInit+0x14c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_UART_MspInit+0x14c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_UART_MspInit+0x14c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_UART_MspInit+0x14c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e3e:	4812      	ldr	r0, [pc, #72]	; (8001e88 <HAL_UART_MspInit+0x14c>)
 8001e40:	f001 fec6 	bl	8003bd0 <HAL_DMA_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001e4a:	f7ff fe29 	bl	8001aa0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <HAL_UART_MspInit+0x14c>)
 8001e52:	639a      	str	r2, [r3, #56]	; 0x38
 8001e54:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <HAL_UART_MspInit+0x14c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2025      	movs	r0, #37	; 0x25
 8001e60:	f001 fe7f 	bl	8003b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e64:	2025      	movs	r0, #37	; 0x25
 8001e66:	f001 fe98 	bl	8003b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3720      	adds	r7, #32
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40013800 	.word	0x40013800
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010800 	.word	0x40010800
 8001e80:	20000468 	.word	0x20000468
 8001e84:	40020058 	.word	0x40020058
 8001e88:	200004ac 	.word	0x200004ac
 8001e8c:	40020044 	.word	0x40020044

08001e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <NMI_Handler+0x4>

08001e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <HardFault_Handler+0x4>

08001e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <MemManage_Handler+0x4>

08001ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <BusFault_Handler+0x4>

08001ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <UsageFault_Handler+0x4>

08001eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(led_parp_flag)
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <SysTick_Handler+0x7c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d02a      	beq.n	8001f36 <SysTick_Handler+0x62>
  {
	  led_parp_cnt++;
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <SysTick_Handler+0x80>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <SysTick_Handler+0x80>)
 8001eea:	801a      	strh	r2, [r3, #0]
	  led_parp_cnt %= 500;
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <SysTick_Handler+0x80>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <SysTick_Handler+0x84>)
 8001ef2:	fba2 1203 	umull	r1, r2, r2, r3
 8001ef6:	0952      	lsrs	r2, r2, #5
 8001ef8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001efc:	fb01 f202 	mul.w	r2, r1, r2
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <SysTick_Handler+0x80>)
 8001f06:	801a      	strh	r2, [r3, #0]
	  if(!led_parp_cnt)
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <SysTick_Handler+0x80>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d118      	bne.n	8001f42 <SysTick_Handler+0x6e>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_parp_state);
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <SysTick_Handler+0x88>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f1a:	4811      	ldr	r0, [pc, #68]	; (8001f60 <SysTick_Handler+0x8c>)
 8001f1c:	f002 fa95 	bl	800444a <HAL_GPIO_WritePin>
		  led_parp_state = !led_parp_state;
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <SysTick_Handler+0x88>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <SysTick_Handler+0x88>)
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e005      	b.n	8001f42 <SysTick_Handler+0x6e>
	  }
  }
  else
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001f36:	2201      	movs	r2, #1
 8001f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f3c:	4808      	ldr	r0, [pc, #32]	; (8001f60 <SysTick_Handler+0x8c>)
 8001f3e:	f002 fa84 	bl	800444a <HAL_GPIO_WritePin>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f42:	f001 f9d1 	bl	80032e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  velociraptor3_debounce_loop();
 8001f46:	f000 fe6d 	bl	8002c24 <velociraptor3_debounce_loop>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200004f0 	.word	0x200004f0
 8001f54:	200004f2 	.word	0x200004f2
 8001f58:	10624dd3 	.word	0x10624dd3
 8001f5c:	200004f4 	.word	0x200004f4
 8001f60:	40011000 	.word	0x40011000

08001f64 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <DMA1_Channel4_IRQHandler+0x10>)
 8001f6a:	f001 ff9f 	bl	8003eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200004ac 	.word	0x200004ac

08001f78 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <DMA1_Channel5_IRQHandler+0x14>)
 8001f7e:	f001 ff95 	bl	8003eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  rx_flag = 1;
 8001f82:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <DMA1_Channel5_IRQHandler+0x18>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000468 	.word	0x20000468
 8001f90:	200005b0 	.word	0x200005b0

08001f94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <TIM2_IRQHandler+0x14>)
 8001f9a:	f003 fe87 	bl	8005cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  velociraptor3_timer_handler();
 8001f9e:	f000 fb0b 	bl	80025b8 <velociraptor3_timer_handler>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000348 	.word	0x20000348

08001fac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <USART1_IRQHandler+0x10>)
 8001fb2:	f004 fd27 	bl	8006a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000420 	.word	0x20000420

08001fc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001fc4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001fc8:	f002 fa58 	bl	800447c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  ADXL345_IRQHandler();
 8001fcc:	f7ff fa08 	bl	80013e0 <ADXL345_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <_kill>:

int _kill(int pid, int sig)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fec:	f007 f88c 	bl	8009108 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2216      	movs	r2, #22
 8001ff4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_exit>:

void _exit (int status)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800200a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffe7 	bl	8001fe2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002014:	e7fe      	b.n	8002014 <_exit+0x12>

08002016 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e00a      	b.n	800203e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002028:	f3af 8000 	nop.w
 800202c:	4601      	mov	r1, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	60ba      	str	r2, [r7, #8]
 8002034:	b2ca      	uxtb	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	dbf0      	blt.n	8002028 <_read+0x12>
  }

  return len;
 8002046:	687b      	ldr	r3, [r7, #4]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e009      	b.n	8002076 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	60ba      	str	r2, [r7, #8]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	3301      	adds	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	dbf1      	blt.n	8002062 <_write+0x12>
  }
  return len;
 800207e:	687b      	ldr	r3, [r7, #4]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_close>:

int _close(int file)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ae:	605a      	str	r2, [r3, #4]
  return 0;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <_isatty>:

int _isatty(int file)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020c4:	2301      	movs	r3, #1
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <_sbrk+0x5c>)
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <_sbrk+0x60>)
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <_sbrk+0x64>)
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <_sbrk+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	429a      	cmp	r2, r3
 8002116:	d207      	bcs.n	8002128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002118:	f006 fff6 	bl	8009108 <__errno>
 800211c:	4603      	mov	r3, r0
 800211e:	220c      	movs	r2, #12
 8002120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002126:	e009      	b.n	800213c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	4a05      	ldr	r2, [pc, #20]	; (800214c <_sbrk+0x64>)
 8002138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20005000 	.word	0x20005000
 8002148:	00000400 	.word	0x00000400
 800214c:	200004f8 	.word	0x200004f8
 8002150:	20000728 	.word	0x20000728

08002154 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <velociraptor3_init>:
	float l_speed, r_speed;
	float brake_factor;
} speed;

void velociraptor3_init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
	ADXL345_Deselect();
 8002166:	f7ff f84d 	bl	8001204 <ADXL345_Deselect>
	if (ADXL345_CheckDevice())
 800216a:	f7ff f927 	bl	80013bc <ADXL345_CheckDevice>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01b      	beq.n	80021ac <velociraptor3_init+0x4c>
	{
		for(uint8_t i = 0; i < 2; i++)
 8002174:	2300      	movs	r3, #0
 8002176:	71fb      	strb	r3, [r7, #7]
 8002178:	e014      	b.n	80021a4 <velociraptor3_init+0x44>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002180:	481b      	ldr	r0, [pc, #108]	; (80021f0 <velociraptor3_init+0x90>)
 8002182:	f002 f962 	bl	800444a <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8002186:	2032      	movs	r0, #50	; 0x32
 8002188:	f001 f8ca 	bl	8003320 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002192:	4817      	ldr	r0, [pc, #92]	; (80021f0 <velociraptor3_init+0x90>)
 8002194:	f002 f959 	bl	800444a <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8002198:	2032      	movs	r0, #50	; 0x32
 800219a:	f001 f8c1 	bl	8003320 <HAL_Delay>
		for(uint8_t i = 0; i < 2; i++)
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	3301      	adds	r3, #1
 80021a2:	71fb      	strb	r3, [r7, #7]
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d9e7      	bls.n	800217a <velociraptor3_init+0x1a>
 80021aa:	e00e      	b.n	80021ca <velociraptor3_init+0x6a>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b2:	480f      	ldr	r0, [pc, #60]	; (80021f0 <velociraptor3_init+0x90>)
 80021b4:	f002 f949 	bl	800444a <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80021b8:	2032      	movs	r0, #50	; 0x32
 80021ba:	f001 f8b1 	bl	8003320 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c4:	480a      	ldr	r0, [pc, #40]	; (80021f0 <velociraptor3_init+0x90>)
 80021c6:	f002 f940 	bl	800444a <HAL_GPIO_WritePin>
	}
	ADXL345_Init();
 80021ca:	f7ff f827 	bl	800121c <ADXL345_Init>

	velociraptor3_debounce_init();
 80021ce:	f000 f82f 	bl	8002230 <velociraptor3_debounce_init>
	velociraptor3_sensors_init();
 80021d2:	f000 f8c3 	bl	800235c <velociraptor3_sensors_init>
	velociraptor3_pid_init();
 80021d6:	f000 f89b 	bl	8002310 <velociraptor3_pid_init>
	velociraptor3_speed_init();
 80021da:	f000 f885 	bl	80022e8 <velociraptor3_speed_init>
	velociraptor3_timers_init();
 80021de:	f000 f80b 	bl	80021f8 <velociraptor3_timers_init>

	led_parp_flag = 0;
 80021e2:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <velociraptor3_init+0x94>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40010800 	.word	0x40010800
 80021f4:	200004f0 	.word	0x200004f0

080021f8 <velociraptor3_timers_init>:

void velociraptor3_timers_init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	// Timer ADC
	HAL_TIM_Base_Start_IT(&htim2);
 80021fc:	480a      	ldr	r0, [pc, #40]	; (8002228 <velociraptor3_timers_init+0x30>)
 80021fe:	f003 fc09 	bl	8005a14 <HAL_TIM_Base_Start_IT>

	// Timer Motores
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002202:	2100      	movs	r1, #0
 8002204:	4809      	ldr	r0, [pc, #36]	; (800222c <velociraptor3_timers_init+0x34>)
 8002206:	f003 fcaf 	bl	8005b68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800220a:	2104      	movs	r1, #4
 800220c:	4807      	ldr	r0, [pc, #28]	; (800222c <velociraptor3_timers_init+0x34>)
 800220e:	f003 fcab 	bl	8005b68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002212:	2108      	movs	r1, #8
 8002214:	4805      	ldr	r0, [pc, #20]	; (800222c <velociraptor3_timers_init+0x34>)
 8002216:	f003 fca7 	bl	8005b68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800221a:	210c      	movs	r1, #12
 800221c:	4803      	ldr	r0, [pc, #12]	; (800222c <velociraptor3_timers_init+0x34>)
 800221e:	f003 fca3 	bl	8005b68 <HAL_TIM_PWM_Start>
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000348 	.word	0x20000348
 800222c:	200003d8 	.word	0x200003d8

08002230 <velociraptor3_debounce_init>:

void velociraptor3_debounce_init(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
	debounce[0].gpio = GPIOB;
 8002236:	4b29      	ldr	r3, [pc, #164]	; (80022dc <velociraptor3_debounce_init+0xac>)
 8002238:	4a29      	ldr	r2, [pc, #164]	; (80022e0 <velociraptor3_debounce_init+0xb0>)
 800223a:	601a      	str	r2, [r3, #0]
	debounce[1].gpio = GPIOB;
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <velociraptor3_debounce_init+0xac>)
 800223e:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <velociraptor3_debounce_init+0xb0>)
 8002240:	60da      	str	r2, [r3, #12]
	debounce[2].gpio = GPIOC;
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <velociraptor3_debounce_init+0xac>)
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <velociraptor3_debounce_init+0xb4>)
 8002246:	619a      	str	r2, [r3, #24]
	debounce[3].gpio = GPIOC;
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <velociraptor3_debounce_init+0xac>)
 800224a:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <velociraptor3_debounce_init+0xb4>)
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
	debounce[0].pin = GPIO_PIN_11;
 800224e:	4b23      	ldr	r3, [pc, #140]	; (80022dc <velociraptor3_debounce_init+0xac>)
 8002250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002254:	809a      	strh	r2, [r3, #4]
	debounce[1].pin = GPIO_PIN_10;
 8002256:	4b21      	ldr	r3, [pc, #132]	; (80022dc <velociraptor3_debounce_init+0xac>)
 8002258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800225c:	821a      	strh	r2, [r3, #16]
	debounce[2].pin = GPIO_PIN_15;
 800225e:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <velociraptor3_debounce_init+0xac>)
 8002260:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002264:	839a      	strh	r2, [r3, #28]
	debounce[3].pin = GPIO_PIN_14;
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <velociraptor3_debounce_init+0xac>)
 8002268:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800226c:	851a      	strh	r2, [r3, #40]	; 0x28

	for(uint8_t i = 0; i < 4; i++)
 800226e:	2300      	movs	r3, #0
 8002270:	71fb      	strb	r3, [r7, #7]
 8002272:	e02a      	b.n	80022ca <velociraptor3_debounce_init+0x9a>
	{
		debounce[i].state = GPIO_PIN_SET;
 8002274:	79fa      	ldrb	r2, [r7, #7]
 8002276:	4919      	ldr	r1, [pc, #100]	; (80022dc <velociraptor3_debounce_init+0xac>)
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	3306      	adds	r3, #6
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
		debounce[i].prev_state = GPIO_PIN_SET;
 8002288:	79fa      	ldrb	r2, [r7, #7]
 800228a:	4914      	ldr	r1, [pc, #80]	; (80022dc <velociraptor3_debounce_init+0xac>)
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	3307      	adds	r3, #7
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
		debounce[i].flag = 0;
 800229c:	79fa      	ldrb	r2, [r7, #7]
 800229e:	490f      	ldr	r1, [pc, #60]	; (80022dc <velociraptor3_debounce_init+0xac>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	3308      	adds	r3, #8
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
		debounce[i].ticks = 0;
 80022b0:	79fa      	ldrb	r2, [r7, #7]
 80022b2:	490a      	ldr	r1, [pc, #40]	; (80022dc <velociraptor3_debounce_init+0xac>)
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	3309      	adds	r3, #9
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	3301      	adds	r3, #1
 80022c8:	71fb      	strb	r3, [r7, #7]
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d9d1      	bls.n	8002274 <velociraptor3_debounce_init+0x44>
	}
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	20000500 	.word	0x20000500
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	40011000 	.word	0x40011000

080022e8 <velociraptor3_speed_init>:

void velociraptor3_speed_init(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
	speed.max_speed = 1.0f;
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <velociraptor3_speed_init+0x24>)
 80022ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022f2:	601a      	str	r2, [r3, #0]
	speed.brake_factor = 1.0f;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <velociraptor3_speed_init+0x24>)
 80022f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022fa:	615a      	str	r2, [r3, #20]
	speed.slope_correction = 0.0f;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <velociraptor3_speed_init+0x24>)
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	2000057c 	.word	0x2000057c

08002310 <velociraptor3_pid_init>:

void velociraptor3_pid_init(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
	pid.correction = 0.f;
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <velociraptor3_pid_init+0x40>)
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
	pid.error_dv = 0.f;
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <velociraptor3_pid_init+0x40>)
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	60da      	str	r2, [r3, #12]
	pid.error_int = 0.f;
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <velociraptor3_pid_init+0x40>)
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	609a      	str	r2, [r3, #8]

	// TODO: cargar desde mem
	pid.kp = 1.f;
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <velociraptor3_pid_init+0x40>)
 800232e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002332:	611a      	str	r2, [r3, #16]
	pid.ki = 0.001f;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <velociraptor3_pid_init+0x40>)
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <velociraptor3_pid_init+0x44>)
 8002338:	619a      	str	r2, [r3, #24]
	pid.kd = .7f;
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <velociraptor3_pid_init+0x40>)
 800233c:	4a06      	ldr	r2, [pc, #24]	; (8002358 <velociraptor3_pid_init+0x48>)
 800233e:	615a      	str	r2, [r3, #20]

	pid.prev_error = 0.f;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <velociraptor3_pid_init+0x40>)
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	605a      	str	r2, [r3, #4]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000530 	.word	0x20000530
 8002354:	3a83126f 	.word	0x3a83126f
 8002358:	3f333333 	.word	0x3f333333

0800235c <velociraptor3_sensors_init>:

void velociraptor3_sensors_init(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	sensors.active_sensor = 0;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2020 	strb.w	r2, [r3, #32]
	sensors.active_buffer = BUFFER_0;
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 800236a:	2200      	movs	r2, #0
 800236c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	sensors.flag_data_ready = 0;
 8002370:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	sensors.prev_error = 0.f;
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
	sensors.track_color = W_OVER_B;		// TODO: cargar desde mem
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 8002382:	2200      	movs	r2, #0
 8002384:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	
	sensors.threshold[0] = 1000;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 800238a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800238e:	821a      	strh	r2, [r3, #16]
	sensors.threshold[1] = 1500;
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 8002392:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002396:	825a      	strh	r2, [r3, #18]
	sensors.threshold[2] = 1500;
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 800239a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800239e:	829a      	strh	r2, [r3, #20]
	sensors.threshold[3] = 1800;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 80023a2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80023a6:	82da      	strh	r2, [r3, #22]
	sensors.threshold[4] = 2000;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 80023aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80023ae:	831a      	strh	r2, [r3, #24]
	sensors.threshold[5] = 1500;
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 80023b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023b6:	835a      	strh	r2, [r3, #26]
	sensors.threshold[6] = 1500;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 80023ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023be:	839a      	strh	r2, [r3, #28]
	sensors.threshold[7] = 1500;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <velociraptor3_sensors_init+0x74>)
 80023c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80023c6:	83da      	strh	r2, [r3, #30]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	2000054c 	.word	0x2000054c

080023d4 <velociraptor3_main_loop>:

void velociraptor3_main_loop(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	switch(robot_state)
 80023d8:	4b70      	ldr	r3, [pc, #448]	; (800259c <velociraptor3_main_loop+0x1c8>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	f200 80db 	bhi.w	8002598 <velociraptor3_main_loop+0x1c4>
 80023e2:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <velociraptor3_main_loop+0x14>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	0800252f 	.word	0x0800252f
 80023f0:	080024b9 	.word	0x080024b9
 80023f4:	080024fd 	.word	0x080024fd
	{
	case stopped:

		if(debounce[2].flag && !debounce[2].state)
 80023f8:	4b69      	ldr	r3, [pc, #420]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 80023fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d012      	beq.n	8002428 <velociraptor3_main_loop+0x54>
 8002402:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 8002404:	7f9b      	ldrb	r3, [r3, #30]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10e      	bne.n	8002428 <velociraptor3_main_loop+0x54>
		{
			debounce[2].flag = 0;
 800240a:	4b65      	ldr	r3, [pc, #404]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2020 	strb.w	r2, [r3, #32]
			pid.error_int = 0.f;
 8002412:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <velociraptor3_main_loop+0x1d0>)
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
			led_parp_flag = 1;
 800241a:	4b63      	ldr	r3, [pc, #396]	; (80025a8 <velociraptor3_main_loop+0x1d4>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
			robot_state = running;
 8002420:	4b5e      	ldr	r3, [pc, #376]	; (800259c <velociraptor3_main_loop+0x1c8>)
 8002422:	2202      	movs	r2, #2
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	e046      	b.n	80024b6 <velociraptor3_main_loop+0xe2>
		}
		else if(debounce[1].flag && !debounce[1].state)
 8002428:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 800242a:	7d1b      	ldrb	r3, [r3, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d014      	beq.n	800245a <velociraptor3_main_loop+0x86>
 8002430:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 8002432:	7c9b      	ldrb	r3, [r3, #18]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d110      	bne.n	800245a <velociraptor3_main_loop+0x86>
		{
			debounce[1].flag = 0;
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 800243a:	2200      	movs	r2, #0
 800243c:	751a      	strb	r2, [r3, #20]
			speed.l_speed = 1.0f;
 800243e:	4b5b      	ldr	r3, [pc, #364]	; (80025ac <velociraptor3_main_loop+0x1d8>)
 8002440:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002444:	60da      	str	r2, [r3, #12]
			speed.r_speed = 1.0f;
 8002446:	4b59      	ldr	r3, [pc, #356]	; (80025ac <velociraptor3_main_loop+0x1d8>)
 8002448:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800244c:	611a      	str	r2, [r3, #16]
			velociraptor3_setpwm();
 800244e:	f000 faf1 	bl	8002a34 <velociraptor3_setpwm>
			robot_state = cleaning;
 8002452:	4b52      	ldr	r3, [pc, #328]	; (800259c <velociraptor3_main_loop+0x1c8>)
 8002454:	2203      	movs	r2, #3
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e02d      	b.n	80024b6 <velociraptor3_main_loop+0xe2>
		}
		else if(debounce[0].flag && !debounce[0].state)
 800245a:	4b51      	ldr	r3, [pc, #324]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 800245c:	7a1b      	ldrb	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8093 	beq.w	800258a <velociraptor3_main_loop+0x1b6>
 8002464:	4b4e      	ldr	r3, [pc, #312]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 8002466:	799b      	ldrb	r3, [r3, #6]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 808e 	bne.w	800258a <velociraptor3_main_loop+0x1b6>
		{
			debounce[0].flag = 0;
 800246e:	4b4c      	ldr	r3, [pc, #304]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 8002470:	2200      	movs	r2, #0
 8002472:	721a      	strb	r2, [r3, #8]
			robot_state = comms;
 8002474:	4b49      	ldr	r3, [pc, #292]	; (800259c <velociraptor3_main_loop+0x1c8>)
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]

			memory_data.kp = pid.kp;
 800247a:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <velociraptor3_main_loop+0x1d0>)
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	4a4c      	ldr	r2, [pc, #304]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 8002480:	60d3      	str	r3, [r2, #12]
			memory_data.ki = pid.ki;
 8002482:	4b48      	ldr	r3, [pc, #288]	; (80025a4 <velociraptor3_main_loop+0x1d0>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 8002488:	6113      	str	r3, [r2, #16]
			memory_data.kd = pid.kd;
 800248a:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <velociraptor3_main_loop+0x1d0>)
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	4a48      	ldr	r2, [pc, #288]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 8002490:	6153      	str	r3, [r2, #20]
			memory_data.brake_factor = speed.brake_factor;
 8002492:	4b46      	ldr	r3, [pc, #280]	; (80025ac <velociraptor3_main_loop+0x1d8>)
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	4a46      	ldr	r2, [pc, #280]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 8002498:	6093      	str	r3, [r2, #8]
			memory_data.max_speed = speed.max_speed;
 800249a:	4b44      	ldr	r3, [pc, #272]	; (80025ac <velociraptor3_main_loop+0x1d8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a44      	ldr	r2, [pc, #272]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 80024a0:	6013      	str	r3, [r2, #0]
			memory_data.slope_correction_factor = speed.slope_correction;
 80024a2:	4b42      	ldr	r3, [pc, #264]	; (80025ac <velociraptor3_main_loop+0x1d8>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4a42      	ldr	r2, [pc, #264]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 80024a8:	6053      	str	r3, [r2, #4]
			memory_data.track_color = sensors.track_color;
 80024aa:	4b42      	ldr	r3, [pc, #264]	; (80025b4 <velociraptor3_main_loop+0x1e0>)
 80024ac:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80024b0:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 80024b2:	761a      	strb	r2, [r3, #24]
		}
		
		break;
 80024b4:	e069      	b.n	800258a <velociraptor3_main_loop+0x1b6>
 80024b6:	e068      	b.n	800258a <velociraptor3_main_loop+0x1b6>

	case running:
		
		if(sensors.flag_data_ready)
 80024b8:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <velociraptor3_main_loop+0x1e0>)
 80024ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <velociraptor3_main_loop+0xfa>
		{
			sensors.flag_data_ready = 0;
 80024c2:	4b3c      	ldr	r3, [pc, #240]	; (80025b4 <velociraptor3_main_loop+0x1e0>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			velociraptor3_motors_pid();
 80024ca:	f000 f8f1 	bl	80026b0 <velociraptor3_motors_pid>
		}
		
		if(debounce[3].flag && !debounce[3].state)
 80024ce:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 80024d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d05a      	beq.n	800258e <velociraptor3_main_loop+0x1ba>
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 80024da:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d155      	bne.n	800258e <velociraptor3_main_loop+0x1ba>
		{
			debounce[3].flag = 0;
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			velociraptor3_brake();
 80024ea:	f000 fa85 	bl	80029f8 <velociraptor3_brake>
			led_parp_flag = 0;
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <velociraptor3_main_loop+0x1d4>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
			robot_state = stopped;
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <velociraptor3_main_loop+0x1c8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
		}

		break;
 80024fa:	e048      	b.n	800258e <velociraptor3_main_loop+0x1ba>

	case cleaning:

		if(debounce[1].flag && debounce[1].state)
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 80024fe:	7d1b      	ldrb	r3, [r3, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d046      	beq.n	8002592 <velociraptor3_main_loop+0x1be>
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 8002506:	7c9b      	ldrb	r3, [r3, #18]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d042      	beq.n	8002592 <velociraptor3_main_loop+0x1be>
		{
			debounce[1].flag = 0;
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 800250e:	2200      	movs	r2, #0
 8002510:	751a      	strb	r2, [r3, #20]
			speed.l_speed = 0.0f;
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <velociraptor3_main_loop+0x1d8>)
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
			speed.r_speed = 0.0f;
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <velociraptor3_main_loop+0x1d8>)
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
			velociraptor3_setpwm();
 8002522:	f000 fa87 	bl	8002a34 <velociraptor3_setpwm>
			robot_state = stopped;
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <velociraptor3_main_loop+0x1c8>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
		}

		break;
 800252c:	e031      	b.n	8002592 <velociraptor3_main_loop+0x1be>

	case comms:

		velociraptor3_comms_loop();
 800252e:	f000 fc01 	bl	8002d34 <velociraptor3_comms_loop>

		if(debounce[0].flag && !debounce[0].state)
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 8002534:	7a1b      	ldrb	r3, [r3, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d02d      	beq.n	8002596 <velociraptor3_main_loop+0x1c2>
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 800253c:	799b      	ldrb	r3, [r3, #6]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d129      	bne.n	8002596 <velociraptor3_main_loop+0x1c2>
		{
			debounce[0].flag = 0;
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <velociraptor3_main_loop+0x1cc>)
 8002544:	2200      	movs	r2, #0
 8002546:	721a      	strb	r2, [r3, #8]
			robot_state = stopped;
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <velociraptor3_main_loop+0x1c8>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]

			pid.kp = memory_data.kp;
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <velociraptor3_main_loop+0x1d0>)
 8002554:	6113      	str	r3, [r2, #16]
			pid.ki = memory_data.ki;
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <velociraptor3_main_loop+0x1d0>)
 800255c:	6193      	str	r3, [r2, #24]
			pid.kd = memory_data.kd;
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <velociraptor3_main_loop+0x1d0>)
 8002564:	6153      	str	r3, [r2, #20]
			speed.brake_factor = memory_data.brake_factor;
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <velociraptor3_main_loop+0x1d8>)
 800256c:	6153      	str	r3, [r2, #20]
			speed.max_speed = memory_data.max_speed;
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <velociraptor3_main_loop+0x1d8>)
 8002574:	6013      	str	r3, [r2, #0]
			speed.slope_correction = memory_data.slope_correction_factor;
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <velociraptor3_main_loop+0x1d8>)
 800257c:	6093      	str	r3, [r2, #8]
			sensors.track_color = memory_data.track_color;
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <velociraptor3_main_loop+0x1dc>)
 8002580:	7e1a      	ldrb	r2, [r3, #24]
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <velociraptor3_main_loop+0x1e0>)
 8002584:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}

		break;
 8002588:	e005      	b.n	8002596 <velociraptor3_main_loop+0x1c2>
		break;
 800258a:	bf00      	nop
 800258c:	e004      	b.n	8002598 <velociraptor3_main_loop+0x1c4>
		break;
 800258e:	bf00      	nop
 8002590:	e002      	b.n	8002598 <velociraptor3_main_loop+0x1c4>
		break;
 8002592:	bf00      	nop
 8002594:	e000      	b.n	8002598 <velociraptor3_main_loop+0x1c4>
		break;
 8002596:	bf00      	nop
	}
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200004fc 	.word	0x200004fc
 80025a0:	20000500 	.word	0x20000500
 80025a4:	20000530 	.word	0x20000530
 80025a8:	200004f0 	.word	0x200004f0
 80025ac:	2000057c 	.word	0x2000057c
 80025b0:	20000594 	.word	0x20000594
 80025b4:	2000054c 	.word	0x2000054c

080025b8 <velociraptor3_timer_handler>:

void velociraptor3_timer_handler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	velociraptor3_sensors_routine();
 80025bc:	f000 f802 	bl	80025c4 <velociraptor3_sensors_routine>
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <velociraptor3_sensors_routine>:

void velociraptor3_sensors_routine(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
	uint16_t adc_read = HAL_ADC_GetValue(&hadc2);
 80025ca:	4836      	ldr	r0, [pc, #216]	; (80026a4 <velociraptor3_sensors_routine+0xe0>)
 80025cc:	f001 f852 	bl	8003674 <HAL_ADC_GetValue>
 80025d0:	4603      	mov	r3, r0
 80025d2:	80fb      	strh	r3, [r7, #6]
	sensors.sensor_val[sensors.active_sensor] = (uint8_t) (adc_read > sensors.threshold[sensors.active_sensor % 8]);
 80025d4:	4b34      	ldr	r3, [pc, #208]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 80025d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	4a32      	ldr	r2, [pc, #200]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 80025e0:	3308      	adds	r3, #8
 80025e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	bf8c      	ite	hi
 80025ec:	2301      	movhi	r3, #1
 80025ee:	2300      	movls	r3, #0
 80025f0:	b2d9      	uxtb	r1, r3
 80025f2:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 80025f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 80025fc:	5499      	strb	r1, [r3, r2]

	sensors.active_sensor += 1;
 80025fe:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 8002600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002604:	3301      	adds	r3, #1
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 800260a:	f883 2020 	strb.w	r2, [r3, #32]
	sensors.active_sensor %= 16;
 800260e:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 8002610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 800261c:	f883 2020 	strb.w	r2, [r3, #32]

	if(!(sensors.active_sensor % 8))
 8002620:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 8002622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d111      	bne.n	8002654 <velociraptor3_sensors_routine+0x90>
	{
		if(!sensors.active_sensor) sensors.active_buffer = BUFFER_0;
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 8002632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d104      	bne.n	8002644 <velociraptor3_sensors_routine+0x80>
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 800263c:	2200      	movs	r2, #0
 800263e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002642:	e003      	b.n	800264c <velociraptor3_sensors_routine+0x88>
		else sensors.active_buffer = BUFFER_1;
 8002644:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 8002646:	2201      	movs	r2, #1
 8002648:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		sensors.flag_data_ready = 1;
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, sensors.active_sensor & 1);
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 8002656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	2102      	movs	r1, #2
 8002664:	4811      	ldr	r0, [pc, #68]	; (80026ac <velociraptor3_sensors_routine+0xe8>)
 8002666:	f001 fef0 	bl	800444a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, sensors.active_sensor & 2);
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 800266c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	2104      	movs	r1, #4
 800267a:	480c      	ldr	r0, [pc, #48]	; (80026ac <velociraptor3_sensors_routine+0xe8>)
 800267c:	f001 fee5 	bl	800444a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, sensors.active_sensor & 4);
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <velociraptor3_sensors_routine+0xe4>)
 8002682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	2108      	movs	r1, #8
 8002690:	4806      	ldr	r0, [pc, #24]	; (80026ac <velociraptor3_sensors_routine+0xe8>)
 8002692:	f001 feda 	bl	800444a <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc2);
 8002696:	4803      	ldr	r0, [pc, #12]	; (80026a4 <velociraptor3_sensors_routine+0xe0>)
 8002698:	f000 ff3e 	bl	8003518 <HAL_ADC_Start>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200002c0 	.word	0x200002c0
 80026a8:	2000054c 	.word	0x2000054c
 80026ac:	40010800 	.word	0x40010800

080026b0 <velociraptor3_motors_pid>:

void velociraptor3_motors_pid(void)
{
 80026b0:	b598      	push	{r3, r4, r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	velociraptor3_calc_error();
 80026b4:	f000 f8fe 	bl	80028b4 <velociraptor3_calc_error>
	velociraptor3_calc_slope();
 80026b8:	f000 f8c2 	bl	8002840 <velociraptor3_calc_slope>

	pid.error_int += sensors.error;
 80026bc:	4b5d      	ldr	r3, [pc, #372]	; (8002834 <velociraptor3_motors_pid+0x184>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a5d      	ldr	r2, [pc, #372]	; (8002838 <velociraptor3_motors_pid+0x188>)
 80026c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fa54 	bl	8000b74 <__addsf3>
 80026cc:	4603      	mov	r3, r0
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b58      	ldr	r3, [pc, #352]	; (8002834 <velociraptor3_motors_pid+0x184>)
 80026d2:	609a      	str	r2, [r3, #8]
	pid.error_dv = sensors.error - pid.prev_error;
 80026d4:	4b58      	ldr	r3, [pc, #352]	; (8002838 <velociraptor3_motors_pid+0x188>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	4a56      	ldr	r2, [pc, #344]	; (8002834 <velociraptor3_motors_pid+0x184>)
 80026da:	6852      	ldr	r2, [r2, #4]
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fa46 	bl	8000b70 <__aeabi_fsub>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b52      	ldr	r3, [pc, #328]	; (8002834 <velociraptor3_motors_pid+0x184>)
 80026ea:	60da      	str	r2, [r3, #12]

	pid.correction = pid.kp * sensors.error;
 80026ec:	4b51      	ldr	r3, [pc, #324]	; (8002834 <velociraptor3_motors_pid+0x184>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	4a51      	ldr	r2, [pc, #324]	; (8002838 <velociraptor3_motors_pid+0x188>)
 80026f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fb44 	bl	8000d84 <__aeabi_fmul>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461a      	mov	r2, r3
 8002700:	4b4c      	ldr	r3, [pc, #304]	; (8002834 <velociraptor3_motors_pid+0x184>)
 8002702:	601a      	str	r2, [r3, #0]
	pid.correction += pid.ki * pid.error_int;
 8002704:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <velociraptor3_motors_pid+0x184>)
 8002706:	681c      	ldr	r4, [r3, #0]
 8002708:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <velociraptor3_motors_pid+0x184>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4a49      	ldr	r2, [pc, #292]	; (8002834 <velociraptor3_motors_pid+0x184>)
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fb36 	bl	8000d84 <__aeabi_fmul>
 8002718:	4603      	mov	r3, r0
 800271a:	4619      	mov	r1, r3
 800271c:	4620      	mov	r0, r4
 800271e:	f7fe fa29 	bl	8000b74 <__addsf3>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	4b43      	ldr	r3, [pc, #268]	; (8002834 <velociraptor3_motors_pid+0x184>)
 8002728:	601a      	str	r2, [r3, #0]
	pid.correction += pid.kd * pid.error_dv;
 800272a:	4b42      	ldr	r3, [pc, #264]	; (8002834 <velociraptor3_motors_pid+0x184>)
 800272c:	681c      	ldr	r4, [r3, #0]
 800272e:	4b41      	ldr	r3, [pc, #260]	; (8002834 <velociraptor3_motors_pid+0x184>)
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	4a40      	ldr	r2, [pc, #256]	; (8002834 <velociraptor3_motors_pid+0x184>)
 8002734:	68d2      	ldr	r2, [r2, #12]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fb23 	bl	8000d84 <__aeabi_fmul>
 800273e:	4603      	mov	r3, r0
 8002740:	4619      	mov	r1, r3
 8002742:	4620      	mov	r0, r4
 8002744:	f7fe fa16 	bl	8000b74 <__addsf3>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	4b39      	ldr	r3, [pc, #228]	; (8002834 <velociraptor3_motors_pid+0x184>)
 800274e:	601a      	str	r2, [r3, #0]

	speed.base_speed = 1.0f;
 8002750:	4b3a      	ldr	r3, [pc, #232]	; (800283c <velociraptor3_motors_pid+0x18c>)
 8002752:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002756:	605a      	str	r2, [r3, #4]
	if(pid.correction > 0.0f)
 8002758:	4b36      	ldr	r3, [pc, #216]	; (8002834 <velociraptor3_motors_pid+0x184>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f04f 0100 	mov.w	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fccb 	bl	80010fc <__aeabi_fcmpgt>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <velociraptor3_motors_pid+0xe4>
	{
		speed.base_speed -= pid.correction * speed.brake_factor;
 800276c:	4b33      	ldr	r3, [pc, #204]	; (800283c <velociraptor3_motors_pid+0x18c>)
 800276e:	685c      	ldr	r4, [r3, #4]
 8002770:	4b30      	ldr	r3, [pc, #192]	; (8002834 <velociraptor3_motors_pid+0x184>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <velociraptor3_motors_pid+0x18c>)
 8002776:	6952      	ldr	r2, [r2, #20]
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fb02 	bl	8000d84 <__aeabi_fmul>
 8002780:	4603      	mov	r3, r0
 8002782:	4619      	mov	r1, r3
 8002784:	4620      	mov	r0, r4
 8002786:	f7fe f9f3 	bl	8000b70 <__aeabi_fsub>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	4b2b      	ldr	r3, [pc, #172]	; (800283c <velociraptor3_motors_pid+0x18c>)
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	e012      	b.n	80027ba <velociraptor3_motors_pid+0x10a>
	}
	else
	{
		speed.base_speed += pid.correction * speed.brake_factor;
 8002794:	4b29      	ldr	r3, [pc, #164]	; (800283c <velociraptor3_motors_pid+0x18c>)
 8002796:	685c      	ldr	r4, [r3, #4]
 8002798:	4b26      	ldr	r3, [pc, #152]	; (8002834 <velociraptor3_motors_pid+0x184>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a27      	ldr	r2, [pc, #156]	; (800283c <velociraptor3_motors_pid+0x18c>)
 800279e:	6952      	ldr	r2, [r2, #20]
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe faee 	bl	8000d84 <__aeabi_fmul>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4619      	mov	r1, r3
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7fe f9e1 	bl	8000b74 <__addsf3>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <velociraptor3_motors_pid+0x18c>)
 80027b8:	605a      	str	r2, [r3, #4]
	}
	speed.base_speed *= (1.0f - speed.slope_correction);
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <velociraptor3_motors_pid+0x18c>)
 80027bc:	685c      	ldr	r4, [r3, #4]
 80027be:	4b1f      	ldr	r3, [pc, #124]	; (800283c <velociraptor3_motors_pid+0x18c>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4619      	mov	r1, r3
 80027c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80027c8:	f7fe f9d2 	bl	8000b70 <__aeabi_fsub>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4619      	mov	r1, r3
 80027d0:	4620      	mov	r0, r4
 80027d2:	f7fe fad7 	bl	8000d84 <__aeabi_fmul>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <velociraptor3_motors_pid+0x18c>)
 80027dc:	605a      	str	r2, [r3, #4]

	speed.l_speed = speed.max_speed * (speed.base_speed + pid.correction);
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <velociraptor3_motors_pid+0x18c>)
 80027e0:	681c      	ldr	r4, [r3, #0]
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <velociraptor3_motors_pid+0x18c>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a13      	ldr	r2, [pc, #76]	; (8002834 <velociraptor3_motors_pid+0x184>)
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe f9c1 	bl	8000b74 <__addsf3>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4619      	mov	r1, r3
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7fe fac4 	bl	8000d84 <__aeabi_fmul>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461a      	mov	r2, r3
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <velociraptor3_motors_pid+0x18c>)
 8002802:	60da      	str	r2, [r3, #12]
	speed.r_speed = speed.max_speed * (speed.base_speed - pid.correction);
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <velociraptor3_motors_pid+0x18c>)
 8002806:	681c      	ldr	r4, [r3, #0]
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <velociraptor3_motors_pid+0x18c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a09      	ldr	r2, [pc, #36]	; (8002834 <velociraptor3_motors_pid+0x184>)
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe f9ac 	bl	8000b70 <__aeabi_fsub>
 8002818:	4603      	mov	r3, r0
 800281a:	4619      	mov	r1, r3
 800281c:	4620      	mov	r0, r4
 800281e:	f7fe fab1 	bl	8000d84 <__aeabi_fmul>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <velociraptor3_motors_pid+0x18c>)
 8002828:	611a      	str	r2, [r3, #16]

	velociraptor3_setpwm();
 800282a:	f000 f903 	bl	8002a34 <velociraptor3_setpwm>
}
 800282e:	bf00      	nop
 8002830:	bd98      	pop	{r3, r4, r7, pc}
 8002832:	bf00      	nop
 8002834:	20000530 	.word	0x20000530
 8002838:	2000054c 	.word	0x2000054c
 800283c:	2000057c 	.word	0x2000057c

08002840 <velociraptor3_calc_slope>:

void velociraptor3_calc_slope(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
	if(adxl_data2.x_avg > 80.f)
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <velociraptor3_calc_slope+0x60>)
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	4916      	ldr	r1, [pc, #88]	; (80028a4 <velociraptor3_calc_slope+0x64>)
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fc56 	bl	80010fc <__aeabi_fcmpgt>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <velociraptor3_calc_slope+0x20>
	{
		speed.slope_correction = 1.0f;
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <velociraptor3_calc_slope+0x68>)
 8002858:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800285c:	609a      	str	r2, [r3, #8]
	}
	else
	{
		speed.slope_correction = 0.0f;
	}
}
 800285e:	e01c      	b.n	800289a <velociraptor3_calc_slope+0x5a>
	else if(adxl_data2.x_avg > 30.f)
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <velociraptor3_calc_slope+0x60>)
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	4911      	ldr	r1, [pc, #68]	; (80028ac <velociraptor3_calc_slope+0x6c>)
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fc48 	bl	80010fc <__aeabi_fcmpgt>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00f      	beq.n	8002892 <velociraptor3_calc_slope+0x52>
		speed.slope_correction = (adxl_data2.x_avg - 30.f) * 0.02f;
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <velociraptor3_calc_slope+0x60>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	490d      	ldr	r1, [pc, #52]	; (80028ac <velociraptor3_calc_slope+0x6c>)
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe f979 	bl	8000b70 <__aeabi_fsub>
 800287e:	4603      	mov	r3, r0
 8002880:	490b      	ldr	r1, [pc, #44]	; (80028b0 <velociraptor3_calc_slope+0x70>)
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fa7e 	bl	8000d84 <__aeabi_fmul>
 8002888:	4603      	mov	r3, r0
 800288a:	461a      	mov	r2, r3
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <velociraptor3_calc_slope+0x68>)
 800288e:	609a      	str	r2, [r3, #8]
}
 8002890:	e003      	b.n	800289a <velociraptor3_calc_slope+0x5a>
		speed.slope_correction = 0.0f;
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <velociraptor3_calc_slope+0x68>)
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000278 	.word	0x20000278
 80028a4:	42a00000 	.word	0x42a00000
 80028a8:	2000057c 	.word	0x2000057c
 80028ac:	41f00000 	.word	0x41f00000
 80028b0:	3ca3d70a 	.word	0x3ca3d70a

080028b4 <velociraptor3_calc_error>:

void velociraptor3_calc_error(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
	uint8_t * buffer_ptr;
	uint8_t white_count = 0, black_count;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75fb      	strb	r3, [r7, #23]
	float white_sum = 0, black_sum = 0;
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]

	// buffer apuntando a la posición de lectura (buffer inact.)
	buffer_ptr = sensors.sensor_val;
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 80028cc:	607b      	str	r3, [r7, #4]
	buffer_ptr += 8 * (sensors.active_buffer == BUFFER_1);
 80028ce:	4b48      	ldr	r3, [pc, #288]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 80028d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <velociraptor3_calc_error+0x28>
 80028d8:	2308      	movs	r3, #8
 80028da:	e000      	b.n	80028de <velociraptor3_calc_error+0x2a>
 80028dc:	2300      	movs	r3, #0
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	607b      	str	r3, [r7, #4]

	// análisis de sensores
	for(uint8_t n = 0; n < 8; n++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	72fb      	strb	r3, [r7, #11]
 80028e8:	e02e      	b.n	8002948 <velociraptor3_calc_error+0x94>
	{
		white_count += sensors.sensor_val[n];
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	4a40      	ldr	r2, [pc, #256]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 80028ee:	5cd2      	ldrb	r2, [r2, r3]
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	4413      	add	r3, r2
 80028f4:	75fb      	strb	r3, [r7, #23]
		
		if(!sensors.sensor_val[n]) black_sum += ((float) n - 3.5f);
 80028f6:	7afb      	ldrb	r3, [r7, #11]
 80028f8:	4a3d      	ldr	r2, [pc, #244]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 80028fa:	5cd3      	ldrb	r3, [r2, r3]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d110      	bne.n	8002922 <velociraptor3_calc_error+0x6e>
 8002900:	7afb      	ldrb	r3, [r7, #11]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe f9e6 	bl	8000cd4 <__aeabi_ui2f>
 8002908:	4603      	mov	r3, r0
 800290a:	493a      	ldr	r1, [pc, #232]	; (80029f4 <velociraptor3_calc_error+0x140>)
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe f92f 	bl	8000b70 <__aeabi_fsub>
 8002912:	4603      	mov	r3, r0
 8002914:	4619      	mov	r1, r3
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7fe f92c 	bl	8000b74 <__addsf3>
 800291c:	4603      	mov	r3, r0
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	e00f      	b.n	8002942 <velociraptor3_calc_error+0x8e>
		else white_sum += ((float) n - 3.5f);
 8002922:	7afb      	ldrb	r3, [r7, #11]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f9d5 	bl	8000cd4 <__aeabi_ui2f>
 800292a:	4603      	mov	r3, r0
 800292c:	4931      	ldr	r1, [pc, #196]	; (80029f4 <velociraptor3_calc_error+0x140>)
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe f91e 	bl	8000b70 <__aeabi_fsub>
 8002934:	4603      	mov	r3, r0
 8002936:	4619      	mov	r1, r3
 8002938:	6938      	ldr	r0, [r7, #16]
 800293a:	f7fe f91b 	bl	8000b74 <__addsf3>
 800293e:	4603      	mov	r3, r0
 8002940:	613b      	str	r3, [r7, #16]
	for(uint8_t n = 0; n < 8; n++)
 8002942:	7afb      	ldrb	r3, [r7, #11]
 8002944:	3301      	adds	r3, #1
 8002946:	72fb      	strb	r3, [r7, #11]
 8002948:	7afb      	ldrb	r3, [r7, #11]
 800294a:	2b07      	cmp	r3, #7
 800294c:	d9cd      	bls.n	80028ea <velociraptor3_calc_error+0x36>
	}

	// auxiliar nomá
	black_count = 8 - white_count;
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	f1c3 0308 	rsb	r3, r3, #8
 8002954:	70fb      	strb	r3, [r7, #3]

	// división sólo si hay sensores activos!!!
	if(sensors.track_color == W_OVER_B || (sensors.track_color == AUTO && white_count < 4))
 8002956:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 8002958:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <velociraptor3_calc_error+0xbc>
 8002960:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 8002962:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002966:	2b02      	cmp	r3, #2
 8002968:	d118      	bne.n	800299c <velociraptor3_calc_error+0xe8>
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d815      	bhi.n	800299c <velociraptor3_calc_error+0xe8>
	{
		if(white_count > 0) sensors.error = (float) white_sum / ((float) white_count * 3.5f);
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d034      	beq.n	80029e0 <velociraptor3_calc_error+0x12c>
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe f9ab 	bl	8000cd4 <__aeabi_ui2f>
 800297e:	4603      	mov	r3, r0
 8002980:	491c      	ldr	r1, [pc, #112]	; (80029f4 <velociraptor3_calc_error+0x140>)
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe f9fe 	bl	8000d84 <__aeabi_fmul>
 8002988:	4603      	mov	r3, r0
 800298a:	4619      	mov	r1, r3
 800298c:	6938      	ldr	r0, [r7, #16]
 800298e:	f7fe faad 	bl	8000eec <__aeabi_fdiv>
 8002992:	4603      	mov	r3, r0
 8002994:	461a      	mov	r2, r3
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
 800299a:	e021      	b.n	80029e0 <velociraptor3_calc_error+0x12c>
	}
	else if(sensors.track_color == B_OVER_W || (sensors.track_color == AUTO && black_count < 4))
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 800299e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d007      	beq.n	80029b6 <velociraptor3_calc_error+0x102>
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 80029a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d117      	bne.n	80029e0 <velociraptor3_calc_error+0x12c>
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d814      	bhi.n	80029e0 <velociraptor3_calc_error+0x12c>
	{
		if(black_count > 0) sensors.error = (float) black_sum / ((float) black_count * 3.5f);
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d011      	beq.n	80029e0 <velociraptor3_calc_error+0x12c>
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f988 	bl	8000cd4 <__aeabi_ui2f>
 80029c4:	4603      	mov	r3, r0
 80029c6:	490b      	ldr	r1, [pc, #44]	; (80029f4 <velociraptor3_calc_error+0x140>)
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe f9db 	bl	8000d84 <__aeabi_fmul>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4619      	mov	r1, r3
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7fe fa8a 	bl	8000eec <__aeabi_fdiv>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 80029de:	625a      	str	r2, [r3, #36]	; 0x24
	}

	sensors.prev_error = sensors.error;
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	4a02      	ldr	r2, [pc, #8]	; (80029f0 <velociraptor3_calc_error+0x13c>)
 80029e6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	2000054c 	.word	0x2000054c
 80029f4:	40600000 	.word	0x40600000

080029f8 <velociraptor3_brake>:

void velociraptor3_brake(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
	uint32_t aux_arrel = __HAL_TIM_GET_AUTORELOAD(&htim4);
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <velociraptor3_brake+0x38>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, aux_arrel);
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <velociraptor3_brake+0x38>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, aux_arrel);
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <velociraptor3_brake+0x38>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, aux_arrel);
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <velociraptor3_brake+0x38>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, aux_arrel);
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <velociraptor3_brake+0x38>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	200003d8 	.word	0x200003d8

08002a34 <velociraptor3_setpwm>:

void velociraptor3_setpwm(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
	float local_speed;
	const float lower_lim = (float) MIN_SPEED / (float) MAX_SPEED;
 8002a3a:	4b75      	ldr	r3, [pc, #468]	; (8002c10 <velociraptor3_setpwm+0x1dc>)
 8002a3c:	607b      	str	r3, [r7, #4]

	for(uint8_t n_motor = MOTOR_L; n_motor <= MOTOR_R; n_motor++)
 8002a3e:	2301      	movs	r3, #1
 8002a40:	72fb      	strb	r3, [r7, #11]
 8002a42:	e0db      	b.n	8002bfc <velociraptor3_setpwm+0x1c8>
	{
		local_speed = (n_motor == MOTOR_L) ? speed.l_speed : speed.r_speed;
 8002a44:	7afb      	ldrb	r3, [r7, #11]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <velociraptor3_setpwm+0x1c>
 8002a4a:	4b72      	ldr	r3, [pc, #456]	; (8002c14 <velociraptor3_setpwm+0x1e0>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	e001      	b.n	8002a54 <velociraptor3_setpwm+0x20>
 8002a50:	4b70      	ldr	r3, [pc, #448]	; (8002c14 <velociraptor3_setpwm+0x1e0>)
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	60fb      	str	r3, [r7, #12]

		if(local_speed > 1.0f) local_speed = 1.0f;
 8002a56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7fe fb4e 	bl	80010fc <__aeabi_fcmpgt>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <velociraptor3_setpwm+0x38>
 8002a66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a6a:	60fb      	str	r3, [r7, #12]
		if(local_speed < -1.0f) local_speed = -1.0f;
 8002a6c:	496a      	ldr	r1, [pc, #424]	; (8002c18 <velociraptor3_setpwm+0x1e4>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7fe fb26 	bl	80010c0 <__aeabi_fcmplt>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <velociraptor3_setpwm+0x4a>
 8002a7a:	4b67      	ldr	r3, [pc, #412]	; (8002c18 <velociraptor3_setpwm+0x1e4>)
 8002a7c:	60fb      	str	r3, [r7, #12]

		if(local_speed < 0.0f)
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f7fe fb1c 	bl	80010c0 <__aeabi_fcmplt>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d04a      	beq.n	8002b24 <velociraptor3_setpwm+0xf0>
		{
			local_speed *= -1;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a94:	60fb      	str	r3, [r7, #12]
			local_speed *= (1.0f - lower_lim);
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002a9c:	f7fe f868 	bl	8000b70 <__aeabi_fsub>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7fe f96d 	bl	8000d84 <__aeabi_fmul>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	60fb      	str	r3, [r7, #12]
			local_speed += lower_lim;
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7fe f85f 	bl	8000b74 <__addsf3>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	60fb      	str	r3, [r7, #12]
			local_speed *= (MAX_SPEED - 1);
 8002aba:	4958      	ldr	r1, [pc, #352]	; (8002c1c <velociraptor3_setpwm+0x1e8>)
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f7fe f961 	bl	8000d84 <__aeabi_fmul>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	60fb      	str	r3, [r7, #12]

			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_3 : TIM_CHANNEL_2, (uint16_t) local_speed);
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d008      	beq.n	8002ade <velociraptor3_setpwm+0xaa>
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7fe fb35 	bl	800113c <__aeabi_f2uiz>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	4b52      	ldr	r3, [pc, #328]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
 8002adc:	e015      	b.n	8002b0a <velociraptor3_setpwm+0xd6>
 8002ade:	7afb      	ldrb	r3, [r7, #11]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d109      	bne.n	8002af8 <velociraptor3_setpwm+0xc4>
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f7fe fb29 	bl	800113c <__aeabi_f2uiz>
 8002aea:	4603      	mov	r3, r0
 8002aec:	b299      	uxth	r1, r3
 8002aee:	4b4c      	ldr	r3, [pc, #304]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	460b      	mov	r3, r1
 8002af4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002af6:	e008      	b.n	8002b0a <velociraptor3_setpwm+0xd6>
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7fe fb1f 	bl	800113c <__aeabi_f2uiz>
 8002afe:	4603      	mov	r3, r0
 8002b00:	b299      	uxth	r1, r3
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	460b      	mov	r3, r1
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_4 : TIM_CHANNEL_1, 0);
 8002b0a:	7afb      	ldrb	r3, [r7, #11]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d004      	beq.n	8002b1a <velociraptor3_setpwm+0xe6>
 8002b10:	4b43      	ldr	r3, [pc, #268]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2200      	movs	r2, #0
 8002b16:	635a      	str	r2, [r3, #52]	; 0x34
 8002b18:	e06d      	b.n	8002bf6 <velociraptor3_setpwm+0x1c2>
 8002b1a:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
 8002b22:	e068      	b.n	8002bf6 <velociraptor3_setpwm+0x1c2>
		}
		else if(local_speed > 0.0f)
 8002b24:	f04f 0100 	mov.w	r1, #0
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7fe fae7 	bl	80010fc <__aeabi_fcmpgt>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d040      	beq.n	8002bb6 <velociraptor3_setpwm+0x182>
		{
			local_speed *= (1.0f - lower_lim);
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002b3a:	f7fe f819 	bl	8000b70 <__aeabi_fsub>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4619      	mov	r1, r3
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f7fe f91e 	bl	8000d84 <__aeabi_fmul>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	60fb      	str	r3, [r7, #12]
			local_speed += lower_lim;
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f7fe f810 	bl	8000b74 <__addsf3>
 8002b54:	4603      	mov	r3, r0
 8002b56:	60fb      	str	r3, [r7, #12]
			local_speed *= (MAX_SPEED - 1);
 8002b58:	4930      	ldr	r1, [pc, #192]	; (8002c1c <velociraptor3_setpwm+0x1e8>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7fe f912 	bl	8000d84 <__aeabi_fmul>
 8002b60:	4603      	mov	r3, r0
 8002b62:	60fb      	str	r3, [r7, #12]

			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_4 : TIM_CHANNEL_1, (uint16_t) local_speed);
 8002b64:	7afb      	ldrb	r3, [r7, #11]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d008      	beq.n	8002b7c <velociraptor3_setpwm+0x148>
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7fe fae6 	bl	800113c <__aeabi_f2uiz>
 8002b70:	4603      	mov	r3, r0
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
 8002b7a:	e007      	b.n	8002b8c <velociraptor3_setpwm+0x158>
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f7fe fadd 	bl	800113c <__aeabi_f2uiz>
 8002b82:	4603      	mov	r3, r0
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_3 : TIM_CHANNEL_2, 0);
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d004      	beq.n	8002b9c <velociraptor3_setpwm+0x168>
 8002b92:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2200      	movs	r2, #0
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
 8002b9a:	e02c      	b.n	8002bf6 <velociraptor3_setpwm+0x1c2>
 8002b9c:	7afb      	ldrb	r3, [r7, #11]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d104      	bne.n	8002bac <velociraptor3_setpwm+0x178>
 8002ba2:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002baa:	e024      	b.n	8002bf6 <velociraptor3_setpwm+0x1c2>
 8002bac:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb4:	e01f      	b.n	8002bf6 <velociraptor3_setpwm+0x1c2>
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_1 : TIM_CHANNEL_3, 0);
 8002bb6:	7afb      	ldrb	r3, [r7, #11]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d104      	bne.n	8002bc6 <velociraptor3_setpwm+0x192>
 8002bbc:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc4:	e00b      	b.n	8002bde <velociraptor3_setpwm+0x1aa>
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d004      	beq.n	8002bd6 <velociraptor3_setpwm+0x1a2>
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002bd4:	e003      	b.n	8002bde <velociraptor3_setpwm+0x1aa>
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_2 : TIM_CHANNEL_4, 0);
 8002bde:	7afb      	ldrb	r3, [r7, #11]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d104      	bne.n	8002bee <velociraptor3_setpwm+0x1ba>
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38
 8002bec:	e003      	b.n	8002bf6 <velociraptor3_setpwm+0x1c2>
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <velociraptor3_setpwm+0x1ec>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
	for(uint8_t n_motor = MOTOR_L; n_motor <= MOTOR_R; n_motor++)
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	72fb      	strb	r3, [r7, #11]
 8002bfc:	7afb      	ldrb	r3, [r7, #11]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	f67f af20 	bls.w	8002a44 <velociraptor3_setpwm+0x10>
		}
	}
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	3ef8e38e 	.word	0x3ef8e38e
 8002c14:	2000057c 	.word	0x2000057c
 8002c18:	bf800000 	.word	0xbf800000
 8002c1c:	4433c000 	.word	0x4433c000
 8002c20:	200003d8 	.word	0x200003d8

08002c24 <velociraptor3_debounce_loop>:

void velociraptor3_debounce_loop(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	71fb      	strb	r3, [r7, #7]
 8002c2e:	e076      	b.n	8002d1e <velociraptor3_debounce_loop+0xfa>
	{
		GPIO_PinState current_state = HAL_GPIO_ReadPin(debounce[i].gpio, debounce[i].pin);
 8002c30:	79fa      	ldrb	r2, [r7, #7]
 8002c32:	493f      	ldr	r1, [pc, #252]	; (8002d30 <velociraptor3_debounce_loop+0x10c>)
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	79fa      	ldrb	r2, [r7, #7]
 8002c42:	493b      	ldr	r1, [pc, #236]	; (8002d30 <velociraptor3_debounce_loop+0x10c>)
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3304      	adds	r3, #4
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	4619      	mov	r1, r3
 8002c54:	f001 fbe2 	bl	800441c <HAL_GPIO_ReadPin>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	71bb      	strb	r3, [r7, #6]
		if(current_state != debounce[i].prev_state)
 8002c5c:	79fa      	ldrb	r2, [r7, #7]
 8002c5e:	4934      	ldr	r1, [pc, #208]	; (8002d30 <velociraptor3_debounce_loop+0x10c>)
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3307      	adds	r3, #7
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	79ba      	ldrb	r2, [r7, #6]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d013      	beq.n	8002c9c <velociraptor3_debounce_loop+0x78>
		{
			debounce[i].prev_state = current_state;
 8002c74:	79fa      	ldrb	r2, [r7, #7]
 8002c76:	492e      	ldr	r1, [pc, #184]	; (8002d30 <velociraptor3_debounce_loop+0x10c>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	3307      	adds	r3, #7
 8002c84:	79ba      	ldrb	r2, [r7, #6]
 8002c86:	701a      	strb	r2, [r3, #0]
			debounce[i].ticks = DEBOUNCE_TICKS;
 8002c88:	79fa      	ldrb	r2, [r7, #7]
 8002c8a:	4929      	ldr	r1, [pc, #164]	; (8002d30 <velociraptor3_debounce_loop+0x10c>)
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3309      	adds	r3, #9
 8002c98:	2214      	movs	r2, #20
 8002c9a:	701a      	strb	r2, [r3, #0]
		}
		if(debounce[i].ticks)
 8002c9c:	79fa      	ldrb	r2, [r7, #7]
 8002c9e:	4924      	ldr	r1, [pc, #144]	; (8002d30 <velociraptor3_debounce_loop+0x10c>)
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	3309      	adds	r3, #9
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d032      	beq.n	8002d18 <velociraptor3_debounce_loop+0xf4>
		{
			debounce[i].ticks--;
 8002cb2:	79fa      	ldrb	r2, [r7, #7]
 8002cb4:	491e      	ldr	r1, [pc, #120]	; (8002d30 <velociraptor3_debounce_loop+0x10c>)
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3309      	adds	r3, #9
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b2d8      	uxtb	r0, r3
 8002cc8:	4919      	ldr	r1, [pc, #100]	; (8002d30 <velociraptor3_debounce_loop+0x10c>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3309      	adds	r3, #9
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	701a      	strb	r2, [r3, #0]
			if(!debounce[i].ticks)
 8002cda:	79fa      	ldrb	r2, [r7, #7]
 8002cdc:	4914      	ldr	r1, [pc, #80]	; (8002d30 <velociraptor3_debounce_loop+0x10c>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3309      	adds	r3, #9
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d113      	bne.n	8002d18 <velociraptor3_debounce_loop+0xf4>
			{
				debounce[i].state = current_state;
 8002cf0:	79fa      	ldrb	r2, [r7, #7]
 8002cf2:	490f      	ldr	r1, [pc, #60]	; (8002d30 <velociraptor3_debounce_loop+0x10c>)
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3306      	adds	r3, #6
 8002d00:	79ba      	ldrb	r2, [r7, #6]
 8002d02:	701a      	strb	r2, [r3, #0]
				debounce[i].flag = 1;
 8002d04:	79fa      	ldrb	r2, [r7, #7]
 8002d06:	490a      	ldr	r1, [pc, #40]	; (8002d30 <velociraptor3_debounce_loop+0x10c>)
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	3308      	adds	r3, #8
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	71fb      	strb	r3, [r7, #7]
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d985      	bls.n	8002c30 <velociraptor3_debounce_loop+0xc>
			}
		}
	}
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000500 	.word	0x20000500

08002d34 <velociraptor3_comms_loop>:

uint8_t sel_option = 0;
uint8_t rx_pos = 0;

void velociraptor3_comms_loop(void)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
	switch(comms_state)
 8002d3a:	4b85      	ldr	r3, [pc, #532]	; (8002f50 <velociraptor3_comms_loop+0x21c>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	f200 8245 	bhi.w	80031ce <velociraptor3_comms_loop+0x49a>
 8002d44:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <velociraptor3_comms_loop+0x18>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002d5d 	.word	0x08002d5d
 8002d50:	08002dbb 	.word	0x08002dbb
 8002d54:	08002fe3 	.word	0x08002fe3
 8002d58:	0800304d 	.word	0x0800304d
	{
	case idle:
		for(uint8_t i = 0; i < 8; i++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	e01f      	b.n	8002da2 <velociraptor3_comms_loop+0x6e>
		{
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *) mensajes_menu[i], strlen(mensajes_menu[i]));
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	4a7a      	ldr	r2, [pc, #488]	; (8002f54 <velociraptor3_comms_loop+0x220>)
 8002d6c:	189c      	adds	r4, r3, r2
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	4a77      	ldr	r2, [pc, #476]	; (8002f54 <velociraptor3_comms_loop+0x220>)
 8002d78:	4413      	add	r3, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd f9e8 	bl	8000150 <strlen>
 8002d80:	4603      	mov	r3, r0
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	4621      	mov	r1, r4
 8002d88:	4873      	ldr	r0, [pc, #460]	; (8002f58 <velociraptor3_comms_loop+0x224>)
 8002d8a:	f003 fda5 	bl	80068d8 <HAL_UART_Transmit_DMA>
			while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 8002d8e:	bf00      	nop
 8002d90:	4871      	ldr	r0, [pc, #452]	; (8002f58 <velociraptor3_comms_loop+0x224>)
 8002d92:	f004 f901 	bl	8006f98 <HAL_UART_GetState>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b21      	cmp	r3, #33	; 0x21
 8002d9a:	d0f9      	beq.n	8002d90 <velociraptor3_comms_loop+0x5c>
		for(uint8_t i = 0; i < 8; i++)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b07      	cmp	r3, #7
 8002da6:	d9dc      	bls.n	8002d62 <velociraptor3_comms_loop+0x2e>
		}
		HAL_UART_Receive_DMA(&huart1, (uint8_t *) rx_buffer, 1);
 8002da8:	2201      	movs	r2, #1
 8002daa:	496c      	ldr	r1, [pc, #432]	; (8002f5c <velociraptor3_comms_loop+0x228>)
 8002dac:	486a      	ldr	r0, [pc, #424]	; (8002f58 <velociraptor3_comms_loop+0x224>)
 8002dae:	f003 fe03 	bl	80069b8 <HAL_UART_Receive_DMA>
		comms_state = validate_rx;
 8002db2:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <velociraptor3_comms_loop+0x21c>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
		break;
 8002db8:	e210      	b.n	80031dc <velociraptor3_comms_loop+0x4a8>
	case validate_rx:
		if(rx_flag)
 8002dba:	4b69      	ldr	r3, [pc, #420]	; (8002f60 <velociraptor3_comms_loop+0x22c>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 810f 	beq.w	8002fe2 <velociraptor3_comms_loop+0x2ae>
		{
			rx_flag = 0;
 8002dc4:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <velociraptor3_comms_loop+0x22c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]

			sel_option = atoi(&rx_buffer[0]);
 8002dca:	4864      	ldr	r0, [pc, #400]	; (8002f5c <velociraptor3_comms_loop+0x228>)
 8002dcc:	f004 fd44 	bl	8007858 <atoi>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	4b63      	ldr	r3, [pc, #396]	; (8002f64 <velociraptor3_comms_loop+0x230>)
 8002dd6:	701a      	strb	r2, [r3, #0]
			if (sel_option == 0 || sel_option > 7)
 8002dd8:	4b62      	ldr	r3, [pc, #392]	; (8002f64 <velociraptor3_comms_loop+0x230>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <velociraptor3_comms_loop+0xb4>
 8002de0:	4b60      	ldr	r3, [pc, #384]	; (8002f64 <velociraptor3_comms_loop+0x230>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b07      	cmp	r3, #7
 8002de6:	d91b      	bls.n	8002e20 <velociraptor3_comms_loop+0xec>
			{
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) "invalido\n", 9);
 8002de8:	2209      	movs	r2, #9
 8002dea:	495f      	ldr	r1, [pc, #380]	; (8002f68 <velociraptor3_comms_loop+0x234>)
 8002dec:	485a      	ldr	r0, [pc, #360]	; (8002f58 <velociraptor3_comms_loop+0x224>)
 8002dee:	f003 fd73 	bl	80068d8 <HAL_UART_Transmit_DMA>
				while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 8002df2:	bf00      	nop
 8002df4:	4858      	ldr	r0, [pc, #352]	; (8002f58 <velociraptor3_comms_loop+0x224>)
 8002df6:	f004 f8cf 	bl	8006f98 <HAL_UART_GetState>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b21      	cmp	r3, #33	; 0x21
 8002dfe:	d0f9      	beq.n	8002df4 <velociraptor3_comms_loop+0xc0>
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) "\n======\n", 8);
 8002e00:	2208      	movs	r2, #8
 8002e02:	495a      	ldr	r1, [pc, #360]	; (8002f6c <velociraptor3_comms_loop+0x238>)
 8002e04:	4854      	ldr	r0, [pc, #336]	; (8002f58 <velociraptor3_comms_loop+0x224>)
 8002e06:	f003 fd67 	bl	80068d8 <HAL_UART_Transmit_DMA>
				while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 8002e0a:	bf00      	nop
 8002e0c:	4852      	ldr	r0, [pc, #328]	; (8002f58 <velociraptor3_comms_loop+0x224>)
 8002e0e:	f004 f8c3 	bl	8006f98 <HAL_UART_GetState>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b21      	cmp	r3, #33	; 0x21
 8002e16:	d0f9      	beq.n	8002e0c <velociraptor3_comms_loop+0xd8>
				comms_state = idle;
 8002e18:	4b4d      	ldr	r3, [pc, #308]	; (8002f50 <velociraptor3_comms_loop+0x21c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e0e0      	b.n	8002fe2 <velociraptor3_comms_loop+0x2ae>
			}
			else
			{
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) "\n", 1);
 8002e20:	2201      	movs	r2, #1
 8002e22:	4953      	ldr	r1, [pc, #332]	; (8002f70 <velociraptor3_comms_loop+0x23c>)
 8002e24:	484c      	ldr	r0, [pc, #304]	; (8002f58 <velociraptor3_comms_loop+0x224>)
 8002e26:	f003 fd57 	bl	80068d8 <HAL_UART_Transmit_DMA>
				while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 8002e2a:	bf00      	nop
 8002e2c:	484a      	ldr	r0, [pc, #296]	; (8002f58 <velociraptor3_comms_loop+0x224>)
 8002e2e:	f004 f8b3 	bl	8006f98 <HAL_UART_GetState>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b21      	cmp	r3, #33	; 0x21
 8002e36:	d0f9      	beq.n	8002e2c <velociraptor3_comms_loop+0xf8>
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) "actual: ", 8);
 8002e38:	2208      	movs	r2, #8
 8002e3a:	494e      	ldr	r1, [pc, #312]	; (8002f74 <velociraptor3_comms_loop+0x240>)
 8002e3c:	4846      	ldr	r0, [pc, #280]	; (8002f58 <velociraptor3_comms_loop+0x224>)
 8002e3e:	f003 fd4b 	bl	80068d8 <HAL_UART_Transmit_DMA>
				while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 8002e42:	bf00      	nop
 8002e44:	4844      	ldr	r0, [pc, #272]	; (8002f58 <velociraptor3_comms_loop+0x224>)
 8002e46:	f004 f8a7 	bl	8006f98 <HAL_UART_GetState>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b21      	cmp	r3, #33	; 0x21
 8002e4e:	d0f9      	beq.n	8002e44 <velociraptor3_comms_loop+0x110>
				switch(sel_option)
 8002e50:	4b44      	ldr	r3, [pc, #272]	; (8002f64 <velociraptor3_comms_loop+0x230>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d876      	bhi.n	8002f48 <velociraptor3_comms_loop+0x214>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <velociraptor3_comms_loop+0x12c>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002e7d 	.word	0x08002e7d
 8002e64:	08002e95 	.word	0x08002e95
 8002e68:	08002ead 	.word	0x08002ead
 8002e6c:	08002ec5 	.word	0x08002ec5
 8002e70:	08002edd 	.word	0x08002edd
 8002e74:	08002ef5 	.word	0x08002ef5
 8002e78:	08002f0d 	.word	0x08002f0d
				{
				case 1:
					sprintf(tx_buffer, "%.6f", memory_data.kp);
 8002e7c:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <velociraptor3_comms_loop+0x244>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fad1 	bl	8000428 <__aeabi_f2d>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	493c      	ldr	r1, [pc, #240]	; (8002f7c <velociraptor3_comms_loop+0x248>)
 8002e8c:	483c      	ldr	r0, [pc, #240]	; (8002f80 <velociraptor3_comms_loop+0x24c>)
 8002e8e:	f005 f945 	bl	800811c <siprintf>
					break;
 8002e92:	e07e      	b.n	8002f92 <velociraptor3_comms_loop+0x25e>
				case 2:
					sprintf(tx_buffer, "%.6f", memory_data.ki);
 8002e94:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <velociraptor3_comms_loop+0x244>)
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fac5 	bl	8000428 <__aeabi_f2d>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4936      	ldr	r1, [pc, #216]	; (8002f7c <velociraptor3_comms_loop+0x248>)
 8002ea4:	4836      	ldr	r0, [pc, #216]	; (8002f80 <velociraptor3_comms_loop+0x24c>)
 8002ea6:	f005 f939 	bl	800811c <siprintf>
					break;
 8002eaa:	e072      	b.n	8002f92 <velociraptor3_comms_loop+0x25e>
				case 3:
					sprintf(tx_buffer, "%.6f", memory_data.kd);
 8002eac:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <velociraptor3_comms_loop+0x244>)
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fab9 	bl	8000428 <__aeabi_f2d>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4930      	ldr	r1, [pc, #192]	; (8002f7c <velociraptor3_comms_loop+0x248>)
 8002ebc:	4830      	ldr	r0, [pc, #192]	; (8002f80 <velociraptor3_comms_loop+0x24c>)
 8002ebe:	f005 f92d 	bl	800811c <siprintf>
					break;
 8002ec2:	e066      	b.n	8002f92 <velociraptor3_comms_loop+0x25e>
				case 4:
					sprintf(tx_buffer, "%.6f", memory_data.brake_factor);
 8002ec4:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <velociraptor3_comms_loop+0x244>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd faad 	bl	8000428 <__aeabi_f2d>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	492a      	ldr	r1, [pc, #168]	; (8002f7c <velociraptor3_comms_loop+0x248>)
 8002ed4:	482a      	ldr	r0, [pc, #168]	; (8002f80 <velociraptor3_comms_loop+0x24c>)
 8002ed6:	f005 f921 	bl	800811c <siprintf>
					break;
 8002eda:	e05a      	b.n	8002f92 <velociraptor3_comms_loop+0x25e>
				case 5:
					sprintf(tx_buffer, "%.6f", memory_data.max_speed);
 8002edc:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <velociraptor3_comms_loop+0x244>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd faa1 	bl	8000428 <__aeabi_f2d>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4924      	ldr	r1, [pc, #144]	; (8002f7c <velociraptor3_comms_loop+0x248>)
 8002eec:	4824      	ldr	r0, [pc, #144]	; (8002f80 <velociraptor3_comms_loop+0x24c>)
 8002eee:	f005 f915 	bl	800811c <siprintf>
					break;
 8002ef2:	e04e      	b.n	8002f92 <velociraptor3_comms_loop+0x25e>
				case 6:
					sprintf(tx_buffer, "%.6f", memory_data.slope_correction_factor);
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <velociraptor3_comms_loop+0x244>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fa95 	bl	8000428 <__aeabi_f2d>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	491e      	ldr	r1, [pc, #120]	; (8002f7c <velociraptor3_comms_loop+0x248>)
 8002f04:	481e      	ldr	r0, [pc, #120]	; (8002f80 <velociraptor3_comms_loop+0x24c>)
 8002f06:	f005 f909 	bl	800811c <siprintf>
					break;
 8002f0a:	e042      	b.n	8002f92 <velociraptor3_comms_loop+0x25e>
				case 7:
					if(memory_data.track_color == 0) 		strcpy(tx_buffer, "N (negro)");
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <velociraptor3_comms_loop+0x244>)
 8002f0e:	7e1b      	ldrb	r3, [r3, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <velociraptor3_comms_loop+0x1ec>
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <velociraptor3_comms_loop+0x24c>)
 8002f16:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <velociraptor3_comms_loop+0x250>)
 8002f18:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f1a:	c303      	stmia	r3!, {r0, r1}
 8002f1c:	801a      	strh	r2, [r3, #0]
					else if(memory_data.track_color == 1) 	strcpy(tx_buffer, "B (blanc)");
					else if(memory_data.track_color == 2) 	strcpy(tx_buffer, "A (autom)");
					break;
 8002f1e:	e037      	b.n	8002f90 <velociraptor3_comms_loop+0x25c>
					else if(memory_data.track_color == 1) 	strcpy(tx_buffer, "B (blanc)");
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <velociraptor3_comms_loop+0x244>)
 8002f22:	7e1b      	ldrb	r3, [r3, #24]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <velociraptor3_comms_loop+0x200>
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <velociraptor3_comms_loop+0x24c>)
 8002f2a:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <velociraptor3_comms_loop+0x254>)
 8002f2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f2e:	c303      	stmia	r3!, {r0, r1}
 8002f30:	801a      	strh	r2, [r3, #0]
					break;
 8002f32:	e02d      	b.n	8002f90 <velociraptor3_comms_loop+0x25c>
					else if(memory_data.track_color == 2) 	strcpy(tx_buffer, "A (autom)");
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <velociraptor3_comms_loop+0x244>)
 8002f36:	7e1b      	ldrb	r3, [r3, #24]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d129      	bne.n	8002f90 <velociraptor3_comms_loop+0x25c>
 8002f3c:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <velociraptor3_comms_loop+0x24c>)
 8002f3e:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <velociraptor3_comms_loop+0x258>)
 8002f40:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f42:	c303      	stmia	r3!, {r0, r1}
 8002f44:	801a      	strh	r2, [r3, #0]
					break;
 8002f46:	e023      	b.n	8002f90 <velociraptor3_comms_loop+0x25c>
				default:
					comms_state = idle;
 8002f48:	4b01      	ldr	r3, [pc, #4]	; (8002f50 <velociraptor3_comms_loop+0x21c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e020      	b.n	8002f92 <velociraptor3_comms_loop+0x25e>
 8002f50:	200005d2 	.word	0x200005d2
 8002f54:	20000004 	.word	0x20000004
 8002f58:	20000420 	.word	0x20000420
 8002f5c:	200005b4 	.word	0x200005b4
 8002f60:	200005b0 	.word	0x200005b0
 8002f64:	200005d3 	.word	0x200005d3
 8002f68:	0800bc78 	.word	0x0800bc78
 8002f6c:	0800bc84 	.word	0x0800bc84
 8002f70:	0800bc90 	.word	0x0800bc90
 8002f74:	0800bc94 	.word	0x0800bc94
 8002f78:	20000594 	.word	0x20000594
 8002f7c:	0800bca0 	.word	0x0800bca0
 8002f80:	200005c8 	.word	0x200005c8
 8002f84:	0800bca8 	.word	0x0800bca8
 8002f88:	0800bcb4 	.word	0x0800bcb4
 8002f8c:	0800bcc0 	.word	0x0800bcc0
					break;
 8002f90:	bf00      	nop
				}
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) tx_buffer, 10);
 8002f92:	220a      	movs	r2, #10
 8002f94:	4993      	ldr	r1, [pc, #588]	; (80031e4 <velociraptor3_comms_loop+0x4b0>)
 8002f96:	4894      	ldr	r0, [pc, #592]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 8002f98:	f003 fc9e 	bl	80068d8 <HAL_UART_Transmit_DMA>
				while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 8002f9c:	bf00      	nop
 8002f9e:	4892      	ldr	r0, [pc, #584]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 8002fa0:	f003 fffa 	bl	8006f98 <HAL_UART_GetState>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b21      	cmp	r3, #33	; 0x21
 8002fa8:	d0f9      	beq.n	8002f9e <velociraptor3_comms_loop+0x26a>
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) "\n======\n", 8);
 8002faa:	2208      	movs	r2, #8
 8002fac:	498f      	ldr	r1, [pc, #572]	; (80031ec <velociraptor3_comms_loop+0x4b8>)
 8002fae:	488e      	ldr	r0, [pc, #568]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 8002fb0:	f003 fc92 	bl	80068d8 <HAL_UART_Transmit_DMA>
				while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 8002fb4:	bf00      	nop
 8002fb6:	488c      	ldr	r0, [pc, #560]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 8002fb8:	f003 ffee 	bl	8006f98 <HAL_UART_GetState>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b21      	cmp	r3, #33	; 0x21
 8002fc0:	d0f9      	beq.n	8002fb6 <velociraptor3_comms_loop+0x282>
				comms_state = recv_val;
 8002fc2:	4b8b      	ldr	r3, [pc, #556]	; (80031f0 <velociraptor3_comms_loop+0x4bc>)
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	701a      	strb	r2, [r3, #0]
				rx_pos = 0;
 8002fc8:	4b8a      	ldr	r3, [pc, #552]	; (80031f4 <velociraptor3_comms_loop+0x4c0>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(&huart1, &(rx_buffer[rx_pos]), 1);
 8002fce:	4b89      	ldr	r3, [pc, #548]	; (80031f4 <velociraptor3_comms_loop+0x4c0>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b88      	ldr	r3, [pc, #544]	; (80031f8 <velociraptor3_comms_loop+0x4c4>)
 8002fd6:	4413      	add	r3, r2
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4882      	ldr	r0, [pc, #520]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 8002fde:	f003 fceb 	bl	80069b8 <HAL_UART_Receive_DMA>
			}
		}
	case recv_val:

		if(rx_flag)
 8002fe2:	4b86      	ldr	r3, [pc, #536]	; (80031fc <velociraptor3_comms_loop+0x4c8>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80f5 	beq.w	80031d6 <velociraptor3_comms_loop+0x4a2>
		{
			rx_flag = 0;
 8002fec:	4b83      	ldr	r3, [pc, #524]	; (80031fc <velociraptor3_comms_loop+0x4c8>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]

			if(rx_buffer[rx_pos] != '\n' && rx_buffer[rx_pos] != '\0' && rx_pos < 9)
 8002ff2:	4b80      	ldr	r3, [pc, #512]	; (80031f4 <velociraptor3_comms_loop+0x4c0>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b7f      	ldr	r3, [pc, #508]	; (80031f8 <velociraptor3_comms_loop+0x4c4>)
 8002ffa:	5c9b      	ldrb	r3, [r3, r2]
 8002ffc:	2b0a      	cmp	r3, #10
 8002ffe:	d01b      	beq.n	8003038 <velociraptor3_comms_loop+0x304>
 8003000:	4b7c      	ldr	r3, [pc, #496]	; (80031f4 <velociraptor3_comms_loop+0x4c0>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	4b7c      	ldr	r3, [pc, #496]	; (80031f8 <velociraptor3_comms_loop+0x4c4>)
 8003008:	5c9b      	ldrb	r3, [r3, r2]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d014      	beq.n	8003038 <velociraptor3_comms_loop+0x304>
 800300e:	4b79      	ldr	r3, [pc, #484]	; (80031f4 <velociraptor3_comms_loop+0x4c0>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d810      	bhi.n	8003038 <velociraptor3_comms_loop+0x304>
			{
				rx_pos++;
 8003016:	4b77      	ldr	r3, [pc, #476]	; (80031f4 <velociraptor3_comms_loop+0x4c0>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b75      	ldr	r3, [pc, #468]	; (80031f4 <velociraptor3_comms_loop+0x4c0>)
 8003020:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_DMA(&huart1, &(rx_buffer[rx_pos]), 1);
 8003022:	4b74      	ldr	r3, [pc, #464]	; (80031f4 <velociraptor3_comms_loop+0x4c0>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	4b73      	ldr	r3, [pc, #460]	; (80031f8 <velociraptor3_comms_loop+0x4c4>)
 800302a:	4413      	add	r3, r2
 800302c:	2201      	movs	r2, #1
 800302e:	4619      	mov	r1, r3
 8003030:	486d      	ldr	r0, [pc, #436]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 8003032:	f003 fcc1 	bl	80069b8 <HAL_UART_Receive_DMA>
			{
				rx_buffer[rx_pos] = '\0';
				comms_state = validate_val;
			}
		}
		break;
 8003036:	e0ce      	b.n	80031d6 <velociraptor3_comms_loop+0x4a2>
				rx_buffer[rx_pos] = '\0';
 8003038:	4b6e      	ldr	r3, [pc, #440]	; (80031f4 <velociraptor3_comms_loop+0x4c0>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b6e      	ldr	r3, [pc, #440]	; (80031f8 <velociraptor3_comms_loop+0x4c4>)
 8003040:	2100      	movs	r1, #0
 8003042:	5499      	strb	r1, [r3, r2]
				comms_state = validate_val;
 8003044:	4b6a      	ldr	r3, [pc, #424]	; (80031f0 <velociraptor3_comms_loop+0x4bc>)
 8003046:	2203      	movs	r2, #3
 8003048:	701a      	strb	r2, [r3, #0]
		break;
 800304a:	e0c4      	b.n	80031d6 <velociraptor3_comms_loop+0x4a2>

	case validate_val:
		float aux;

		if(sel_option != 7)
 800304c:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <velociraptor3_comms_loop+0x4cc>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b07      	cmp	r3, #7
 8003052:	d029      	beq.n	80030a8 <velociraptor3_comms_loop+0x374>
		{
			uint8_t * end_ptr;
			aux = strtof(rx_buffer, &end_ptr);
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	4619      	mov	r1, r3
 8003058:	4867      	ldr	r0, [pc, #412]	; (80031f8 <velociraptor3_comms_loop+0x4c4>)
 800305a:	f005 ff39 	bl	8008ed0 <strtof>
 800305e:	60b8      	str	r0, [r7, #8]

			if(end_ptr == rx_buffer || *end_ptr != '\0')
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a65      	ldr	r2, [pc, #404]	; (80031f8 <velociraptor3_comms_loop+0x4c4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <velociraptor3_comms_loop+0x33c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d042      	beq.n	80030f6 <velociraptor3_comms_loop+0x3c2>
			{
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) "invalido\n", 9);
 8003070:	2209      	movs	r2, #9
 8003072:	4964      	ldr	r1, [pc, #400]	; (8003204 <velociraptor3_comms_loop+0x4d0>)
 8003074:	485c      	ldr	r0, [pc, #368]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 8003076:	f003 fc2f 	bl	80068d8 <HAL_UART_Transmit_DMA>
				while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 800307a:	bf00      	nop
 800307c:	485a      	ldr	r0, [pc, #360]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 800307e:	f003 ff8b 	bl	8006f98 <HAL_UART_GetState>
 8003082:	4603      	mov	r3, r0
 8003084:	2b21      	cmp	r3, #33	; 0x21
 8003086:	d0f9      	beq.n	800307c <velociraptor3_comms_loop+0x348>
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) "\n======\n", 8);
 8003088:	2208      	movs	r2, #8
 800308a:	4958      	ldr	r1, [pc, #352]	; (80031ec <velociraptor3_comms_loop+0x4b8>)
 800308c:	4856      	ldr	r0, [pc, #344]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 800308e:	f003 fc23 	bl	80068d8 <HAL_UART_Transmit_DMA>
				while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 8003092:	bf00      	nop
 8003094:	4854      	ldr	r0, [pc, #336]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 8003096:	f003 ff7f 	bl	8006f98 <HAL_UART_GetState>
 800309a:	4603      	mov	r3, r0
 800309c:	2b21      	cmp	r3, #33	; 0x21
 800309e:	d0f9      	beq.n	8003094 <velociraptor3_comms_loop+0x360>
				comms_state = idle;
 80030a0:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <velociraptor3_comms_loop+0x4bc>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e026      	b.n	80030f6 <velociraptor3_comms_loop+0x3c2>
			}
		}
		else
		{
			if(rx_buffer[0] != 'B' && rx_buffer[0] != 'N' && rx_buffer[0] != 'A')
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <velociraptor3_comms_loop+0x4c4>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b42      	cmp	r3, #66	; 0x42
 80030ae:	d022      	beq.n	80030f6 <velociraptor3_comms_loop+0x3c2>
 80030b0:	4b51      	ldr	r3, [pc, #324]	; (80031f8 <velociraptor3_comms_loop+0x4c4>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b4e      	cmp	r3, #78	; 0x4e
 80030b6:	d01e      	beq.n	80030f6 <velociraptor3_comms_loop+0x3c2>
 80030b8:	4b4f      	ldr	r3, [pc, #316]	; (80031f8 <velociraptor3_comms_loop+0x4c4>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b41      	cmp	r3, #65	; 0x41
 80030be:	d01a      	beq.n	80030f6 <velociraptor3_comms_loop+0x3c2>
			{
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) "invalido\n", 9);
 80030c0:	2209      	movs	r2, #9
 80030c2:	4950      	ldr	r1, [pc, #320]	; (8003204 <velociraptor3_comms_loop+0x4d0>)
 80030c4:	4848      	ldr	r0, [pc, #288]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 80030c6:	f003 fc07 	bl	80068d8 <HAL_UART_Transmit_DMA>
				while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 80030ca:	bf00      	nop
 80030cc:	4846      	ldr	r0, [pc, #280]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 80030ce:	f003 ff63 	bl	8006f98 <HAL_UART_GetState>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b21      	cmp	r3, #33	; 0x21
 80030d6:	d0f9      	beq.n	80030cc <velociraptor3_comms_loop+0x398>
				HAL_UART_Transmit_DMA(&huart1, (uint8_t*) "\n======\n", 8);
 80030d8:	2208      	movs	r2, #8
 80030da:	4944      	ldr	r1, [pc, #272]	; (80031ec <velociraptor3_comms_loop+0x4b8>)
 80030dc:	4842      	ldr	r0, [pc, #264]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 80030de:	f003 fbfb 	bl	80068d8 <HAL_UART_Transmit_DMA>
				while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 80030e2:	bf00      	nop
 80030e4:	4840      	ldr	r0, [pc, #256]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 80030e6:	f003 ff57 	bl	8006f98 <HAL_UART_GetState>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b21      	cmp	r3, #33	; 0x21
 80030ee:	d0f9      	beq.n	80030e4 <velociraptor3_comms_loop+0x3b0>
				comms_state = idle;
 80030f0:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <velociraptor3_comms_loop+0x4bc>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
			}
		}
		if(comms_state != idle)
 80030f6:	4b3e      	ldr	r3, [pc, #248]	; (80031f0 <velociraptor3_comms_loop+0x4bc>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d06d      	beq.n	80031da <velociraptor3_comms_loop+0x4a6>
		{
			switch(sel_option)
 80030fe:	4b40      	ldr	r3, [pc, #256]	; (8003200 <velociraptor3_comms_loop+0x4cc>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	3b01      	subs	r3, #1
 8003104:	2b06      	cmp	r3, #6
 8003106:	d841      	bhi.n	800318c <velociraptor3_comms_loop+0x458>
 8003108:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <velociraptor3_comms_loop+0x3dc>)
 800310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310e:	bf00      	nop
 8003110:	0800312d 	.word	0x0800312d
 8003114:	08003135 	.word	0x08003135
 8003118:	0800313d 	.word	0x0800313d
 800311c:	08003145 	.word	0x08003145
 8003120:	0800314d 	.word	0x0800314d
 8003124:	08003155 	.word	0x08003155
 8003128:	0800315d 	.word	0x0800315d
			{
			case 1:
				memory_data.kp = aux;
 800312c:	4a36      	ldr	r2, [pc, #216]	; (8003208 <velociraptor3_comms_loop+0x4d4>)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	60d3      	str	r3, [r2, #12]
				break;
 8003132:	e030      	b.n	8003196 <velociraptor3_comms_loop+0x462>
			case 2:
				memory_data.ki = aux;
 8003134:	4a34      	ldr	r2, [pc, #208]	; (8003208 <velociraptor3_comms_loop+0x4d4>)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	6113      	str	r3, [r2, #16]
				break;
 800313a:	e02c      	b.n	8003196 <velociraptor3_comms_loop+0x462>
			case 3:
				memory_data.kd = aux;
 800313c:	4a32      	ldr	r2, [pc, #200]	; (8003208 <velociraptor3_comms_loop+0x4d4>)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	6153      	str	r3, [r2, #20]
				break;
 8003142:	e028      	b.n	8003196 <velociraptor3_comms_loop+0x462>
			case 4:
				memory_data.brake_factor = aux;
 8003144:	4a30      	ldr	r2, [pc, #192]	; (8003208 <velociraptor3_comms_loop+0x4d4>)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	6093      	str	r3, [r2, #8]
				break;
 800314a:	e024      	b.n	8003196 <velociraptor3_comms_loop+0x462>
			case 5:
				memory_data.max_speed = aux;
 800314c:	4a2e      	ldr	r2, [pc, #184]	; (8003208 <velociraptor3_comms_loop+0x4d4>)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	6013      	str	r3, [r2, #0]
				break;
 8003152:	e020      	b.n	8003196 <velociraptor3_comms_loop+0x462>
			case 6:
				memory_data.slope_correction_factor = aux;
 8003154:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <velociraptor3_comms_loop+0x4d4>)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	6053      	str	r3, [r2, #4]
				break;
 800315a:	e01c      	b.n	8003196 <velociraptor3_comms_loop+0x462>
			case 7:
				switch(rx_buffer[0])
 800315c:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <velociraptor3_comms_loop+0x4c4>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b4e      	cmp	r3, #78	; 0x4e
 8003162:	d006      	beq.n	8003172 <velociraptor3_comms_loop+0x43e>
 8003164:	2b4e      	cmp	r3, #78	; 0x4e
 8003166:	dc15      	bgt.n	8003194 <velociraptor3_comms_loop+0x460>
 8003168:	2b41      	cmp	r3, #65	; 0x41
 800316a:	d00a      	beq.n	8003182 <velociraptor3_comms_loop+0x44e>
 800316c:	2b42      	cmp	r3, #66	; 0x42
 800316e:	d004      	beq.n	800317a <velociraptor3_comms_loop+0x446>
					break;
				case 'A':
					memory_data.track_color = 2;
					break;
				}
				break;
 8003170:	e010      	b.n	8003194 <velociraptor3_comms_loop+0x460>
					memory_data.track_color = 0;
 8003172:	4b25      	ldr	r3, [pc, #148]	; (8003208 <velociraptor3_comms_loop+0x4d4>)
 8003174:	2200      	movs	r2, #0
 8003176:	761a      	strb	r2, [r3, #24]
					break;
 8003178:	e007      	b.n	800318a <velociraptor3_comms_loop+0x456>
					memory_data.track_color = 1;
 800317a:	4b23      	ldr	r3, [pc, #140]	; (8003208 <velociraptor3_comms_loop+0x4d4>)
 800317c:	2201      	movs	r2, #1
 800317e:	761a      	strb	r2, [r3, #24]
					break;
 8003180:	e003      	b.n	800318a <velociraptor3_comms_loop+0x456>
					memory_data.track_color = 2;
 8003182:	4b21      	ldr	r3, [pc, #132]	; (8003208 <velociraptor3_comms_loop+0x4d4>)
 8003184:	2202      	movs	r2, #2
 8003186:	761a      	strb	r2, [r3, #24]
					break;
 8003188:	bf00      	nop
				break;
 800318a:	e003      	b.n	8003194 <velociraptor3_comms_loop+0x460>
			default:
				comms_state = idle;
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <velociraptor3_comms_loop+0x4bc>)
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e000      	b.n	8003196 <velociraptor3_comms_loop+0x462>
				break;
 8003194:	bf00      	nop
			}

			HAL_UART_Transmit_DMA(&huart1, (uint8_t*) "aplicado\n", 9);
 8003196:	2209      	movs	r2, #9
 8003198:	491c      	ldr	r1, [pc, #112]	; (800320c <velociraptor3_comms_loop+0x4d8>)
 800319a:	4813      	ldr	r0, [pc, #76]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 800319c:	f003 fb9c 	bl	80068d8 <HAL_UART_Transmit_DMA>
			while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 80031a0:	bf00      	nop
 80031a2:	4811      	ldr	r0, [pc, #68]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 80031a4:	f003 fef8 	bl	8006f98 <HAL_UART_GetState>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b21      	cmp	r3, #33	; 0x21
 80031ac:	d0f9      	beq.n	80031a2 <velociraptor3_comms_loop+0x46e>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*) "\n======\n", 8);
 80031ae:	2208      	movs	r2, #8
 80031b0:	490e      	ldr	r1, [pc, #56]	; (80031ec <velociraptor3_comms_loop+0x4b8>)
 80031b2:	480d      	ldr	r0, [pc, #52]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 80031b4:	f003 fb90 	bl	80068d8 <HAL_UART_Transmit_DMA>
			while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX);
 80031b8:	bf00      	nop
 80031ba:	480b      	ldr	r0, [pc, #44]	; (80031e8 <velociraptor3_comms_loop+0x4b4>)
 80031bc:	f003 feec 	bl	8006f98 <HAL_UART_GetState>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b21      	cmp	r3, #33	; 0x21
 80031c4:	d0f9      	beq.n	80031ba <velociraptor3_comms_loop+0x486>
			comms_state = idle;
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <velociraptor3_comms_loop+0x4bc>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
		}

		break;
 80031cc:	e005      	b.n	80031da <velociraptor3_comms_loop+0x4a6>

	default:

		comms_state = idle;
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <velociraptor3_comms_loop+0x4bc>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
		break;
 80031d4:	e002      	b.n	80031dc <velociraptor3_comms_loop+0x4a8>
		break;
 80031d6:	bf00      	nop
 80031d8:	e000      	b.n	80031dc <velociraptor3_comms_loop+0x4a8>
		break;
 80031da:	bf00      	nop
	}
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}
 80031e4:	200005c8 	.word	0x200005c8
 80031e8:	20000420 	.word	0x20000420
 80031ec:	0800bc84 	.word	0x0800bc84
 80031f0:	200005d2 	.word	0x200005d2
 80031f4:	200005d4 	.word	0x200005d4
 80031f8:	200005b4 	.word	0x200005b4
 80031fc:	200005b0 	.word	0x200005b0
 8003200:	200005d3 	.word	0x200005d3
 8003204:	0800bc78 	.word	0x0800bc78
 8003208:	20000594 	.word	0x20000594
 800320c:	0800bccc 	.word	0x0800bccc

08003210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003210:	f7fe ffa0 	bl	8002154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003214:	480b      	ldr	r0, [pc, #44]	; (8003244 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003216:	490c      	ldr	r1, [pc, #48]	; (8003248 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003218:	4a0c      	ldr	r2, [pc, #48]	; (800324c <LoopFillZerobss+0x16>)
  movs r3, #0
 800321a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800321c:	e002      	b.n	8003224 <LoopCopyDataInit>

0800321e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800321e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003222:	3304      	adds	r3, #4

08003224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003228:	d3f9      	bcc.n	800321e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800322c:	4c09      	ldr	r4, [pc, #36]	; (8003254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003230:	e001      	b.n	8003236 <LoopFillZerobss>

08003232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003234:	3204      	adds	r2, #4

08003236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003238:	d3fb      	bcc.n	8003232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800323a:	f005 ff6b 	bl	8009114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800323e:	f7fe f913 	bl	8001468 <main>
  bx lr
 8003242:	4770      	bx	lr
  ldr r0, =_sdata
 8003244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003248:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 800324c:	0800c128 	.word	0x0800c128
  ldr r2, =_sbss
 8003250:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8003254:	20000728 	.word	0x20000728

08003258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003258:	e7fe      	b.n	8003258 <ADC1_2_IRQHandler>
	...

0800325c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HAL_Init+0x28>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a07      	ldr	r2, [pc, #28]	; (8003284 <HAL_Init+0x28>)
 8003266:	f043 0310 	orr.w	r3, r3, #16
 800326a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800326c:	2003      	movs	r0, #3
 800326e:	f000 fc6d 	bl	8003b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003272:	200f      	movs	r0, #15
 8003274:	f000 f808 	bl	8003288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003278:	f7fe fc18 	bl	8001aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40022000 	.word	0x40022000

08003288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003290:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_InitTick+0x54>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_InitTick+0x58>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	4619      	mov	r1, r3
 800329a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800329e:	fbb3 f3f1 	udiv	r3, r3, r1
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fc85 	bl	8003bb6 <HAL_SYSTICK_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00e      	b.n	80032d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b0f      	cmp	r3, #15
 80032ba:	d80a      	bhi.n	80032d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032bc:	2200      	movs	r2, #0
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032c4:	f000 fc4d 	bl	8003b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032c8:	4a06      	ldr	r2, [pc, #24]	; (80032e4 <HAL_InitTick+0x5c>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000000 	.word	0x20000000
 80032e0:	20000080 	.word	0x20000080
 80032e4:	2000007c 	.word	0x2000007c

080032e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_IncTick+0x1c>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_IncTick+0x20>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	4a03      	ldr	r2, [pc, #12]	; (8003308 <HAL_IncTick+0x20>)
 80032fa:	6013      	str	r3, [r2, #0]
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	20000080 	.word	0x20000080
 8003308:	200005d8 	.word	0x200005d8

0800330c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return uwTick;
 8003310:	4b02      	ldr	r3, [pc, #8]	; (800331c <HAL_GetTick+0x10>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	200005d8 	.word	0x200005d8

08003320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7ff fff0 	bl	800330c <HAL_GetTick>
 800332c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003338:	d005      	beq.n	8003346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <HAL_Delay+0x44>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003346:	bf00      	nop
 8003348:	f7ff ffe0 	bl	800330c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	429a      	cmp	r2, r3
 8003356:	d8f7      	bhi.n	8003348 <HAL_Delay+0x28>
  {
  }
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000080 	.word	0x20000080

08003368 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e0be      	b.n	8003508 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe fbb2 	bl	8001b10 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fabf 	bl	8003930 <ADC_ConversionStop_Disable>
 80033b2:	4603      	mov	r3, r0
 80033b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 8099 	bne.w	80034f6 <HAL_ADC_Init+0x18e>
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 8095 	bne.w	80034f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033d4:	f023 0302 	bic.w	r3, r3, #2
 80033d8:	f043 0202 	orr.w	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	7b1b      	ldrb	r3, [r3, #12]
 80033ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003400:	d003      	beq.n	800340a <HAL_ADC_Init+0xa2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d102      	bne.n	8003410 <HAL_ADC_Init+0xa8>
 800340a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800340e:	e000      	b.n	8003412 <HAL_ADC_Init+0xaa>
 8003410:	2300      	movs	r3, #0
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7d1b      	ldrb	r3, [r3, #20]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d119      	bne.n	8003454 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7b1b      	ldrb	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	3b01      	subs	r3, #1
 800342e:	035a      	lsls	r2, r3, #13
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	e00b      	b.n	8003454 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	430a      	orrs	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <HAL_ADC_Init+0x1a8>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	430b      	orrs	r3, r1
 800347a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003484:	d003      	beq.n	800348e <HAL_ADC_Init+0x126>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d104      	bne.n	8003498 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	3b01      	subs	r3, #1
 8003494:	051b      	lsls	r3, r3, #20
 8003496:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	4b18      	ldr	r3, [pc, #96]	; (8003514 <HAL_ADC_Init+0x1ac>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d10b      	bne.n	80034d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	f023 0303 	bic.w	r3, r3, #3
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034d2:	e018      	b.n	8003506 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f023 0312 	bic.w	r3, r3, #18
 80034dc:	f043 0210 	orr.w	r2, r3, #16
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034f4:	e007      	b.n	8003506 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	f043 0210 	orr.w	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003506:	7dfb      	ldrb	r3, [r7, #23]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	ffe1f7fd 	.word	0xffe1f7fd
 8003514:	ff1f0efe 	.word	0xff1f0efe

08003518 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_ADC_Start+0x1a>
 800352e:	2302      	movs	r3, #2
 8003530:	e098      	b.n	8003664 <HAL_ADC_Start+0x14c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f99e 	bl	800387c <ADC_Enable>
 8003540:	4603      	mov	r3, r0
 8003542:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f040 8087 	bne.w	800365a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a41      	ldr	r2, [pc, #260]	; (800366c <HAL_ADC_Start+0x154>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d105      	bne.n	8003576 <HAL_ADC_Start+0x5e>
 800356a:	4b41      	ldr	r3, [pc, #260]	; (8003670 <HAL_ADC_Start+0x158>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d026      	beq.n	80035de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003598:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035a0:	e01d      	b.n	80035de <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <HAL_ADC_Start+0x158>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_ADC_Start+0xaa>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2b      	ldr	r2, [pc, #172]	; (800366c <HAL_ADC_Start+0x154>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d10d      	bne.n	80035de <HAL_ADC_Start+0xc6>
 80035c2:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_ADC_Start+0x158>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d006      	beq.n	80035f8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f023 0206 	bic.w	r2, r3, #6
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80035f6:	e002      	b.n	80035fe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f06f 0202 	mvn.w	r2, #2
 800360e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800361a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800361e:	d113      	bne.n	8003648 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003624:	4a11      	ldr	r2, [pc, #68]	; (800366c <HAL_ADC_Start+0x154>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d105      	bne.n	8003636 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_ADC_Start+0x158>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003644:	609a      	str	r2, [r3, #8]
 8003646:	e00c      	b.n	8003662 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	e003      	b.n	8003662 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40012800 	.word	0x40012800
 8003670:	40012400 	.word	0x40012400

08003674 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x20>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0dc      	b.n	8003866 <HAL_ADC_ConfigChannel+0x1da>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b06      	cmp	r3, #6
 80036ba:	d81c      	bhi.n	80036f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	3b05      	subs	r3, #5
 80036ce:	221f      	movs	r2, #31
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	4019      	ands	r1, r3
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	3b05      	subs	r3, #5
 80036e8:	fa00 f203 	lsl.w	r2, r0, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	635a      	str	r2, [r3, #52]	; 0x34
 80036f4:	e03c      	b.n	8003770 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d81c      	bhi.n	8003738 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	3b23      	subs	r3, #35	; 0x23
 8003710:	221f      	movs	r2, #31
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	4019      	ands	r1, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	3b23      	subs	r3, #35	; 0x23
 800372a:	fa00 f203 	lsl.w	r2, r0, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
 8003736:	e01b      	b.n	8003770 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	3b41      	subs	r3, #65	; 0x41
 800374a:	221f      	movs	r2, #31
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	4019      	ands	r1, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	3b41      	subs	r3, #65	; 0x41
 8003764:	fa00 f203 	lsl.w	r2, r0, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b09      	cmp	r3, #9
 8003776:	d91c      	bls.n	80037b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68d9      	ldr	r1, [r3, #12]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	3b1e      	subs	r3, #30
 800378a:	2207      	movs	r2, #7
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	4019      	ands	r1, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6898      	ldr	r0, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	3b1e      	subs	r3, #30
 80037a4:	fa00 f203 	lsl.w	r2, r0, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	60da      	str	r2, [r3, #12]
 80037b0:	e019      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6919      	ldr	r1, [r3, #16]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4413      	add	r3, r2
 80037c2:	2207      	movs	r2, #7
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	4019      	ands	r1, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6898      	ldr	r0, [r3, #8]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	fa00 f203 	lsl.w	r2, r0, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d003      	beq.n	80037f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037f2:	2b11      	cmp	r3, #17
 80037f4:	d132      	bne.n	800385c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <HAL_ADC_ConfigChannel+0x1e4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d125      	bne.n	800384c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d126      	bne.n	800385c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800381c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b10      	cmp	r3, #16
 8003824:	d11a      	bne.n	800385c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_ADC_ConfigChannel+0x1e8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a13      	ldr	r2, [pc, #76]	; (8003878 <HAL_ADC_ConfigChannel+0x1ec>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	0c9a      	lsrs	r2, r3, #18
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800383c:	e002      	b.n	8003844 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3b01      	subs	r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f9      	bne.n	800383e <HAL_ADC_ConfigChannel+0x1b2>
 800384a:	e007      	b.n	800385c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	40012400 	.word	0x40012400
 8003874:	20000000 	.word	0x20000000
 8003878:	431bde83 	.word	0x431bde83

0800387c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d040      	beq.n	800391c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0201 	orr.w	r2, r2, #1
 80038a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038aa:	4b1f      	ldr	r3, [pc, #124]	; (8003928 <ADC_Enable+0xac>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	; (800392c <ADC_Enable+0xb0>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	0c9b      	lsrs	r3, r3, #18
 80038b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038b8:	e002      	b.n	80038c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	3b01      	subs	r3, #1
 80038be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f9      	bne.n	80038ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038c6:	f7ff fd21 	bl	800330c <HAL_GetTick>
 80038ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038cc:	e01f      	b.n	800390e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038ce:	f7ff fd1d 	bl	800330c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d918      	bls.n	800390e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d011      	beq.n	800390e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e007      	b.n	800391e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d1d8      	bne.n	80038ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000000 	.word	0x20000000
 800392c:	431bde83 	.word	0x431bde83

08003930 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b01      	cmp	r3, #1
 8003948:	d12e      	bne.n	80039a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800395a:	f7ff fcd7 	bl	800330c <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003960:	e01b      	b.n	800399a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003962:	f7ff fcd3 	bl	800330c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d914      	bls.n	800399a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d10d      	bne.n	800399a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	f043 0210 	orr.w	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e007      	b.n	80039aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d0dc      	beq.n	8003962 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039d0:	4013      	ands	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e6:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	60d3      	str	r3, [r2, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <__NVIC_GetPriorityGrouping+0x18>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f003 0307 	and.w	r3, r3, #7
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	db0b      	blt.n	8003a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	4906      	ldr	r1, [pc, #24]	; (8003a4c <__NVIC_EnableIRQ+0x34>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	2001      	movs	r0, #1
 8003a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	e000e100 	.word	0xe000e100

08003a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	db0a      	blt.n	8003a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	490c      	ldr	r1, [pc, #48]	; (8003a9c <__NVIC_SetPriority+0x4c>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	440b      	add	r3, r1
 8003a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a78:	e00a      	b.n	8003a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4908      	ldr	r1, [pc, #32]	; (8003aa0 <__NVIC_SetPriority+0x50>)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	3b04      	subs	r3, #4
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	761a      	strb	r2, [r3, #24]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	e000e100 	.word	0xe000e100
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	; 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f1c3 0307 	rsb	r3, r3, #7
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	bf28      	it	cs
 8003ac2:	2304      	movcs	r3, #4
 8003ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d902      	bls.n	8003ad4 <NVIC_EncodePriority+0x30>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3b03      	subs	r3, #3
 8003ad2:	e000      	b.n	8003ad6 <NVIC_EncodePriority+0x32>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa01 f303 	lsl.w	r3, r1, r3
 8003af6:	43d9      	mvns	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	4313      	orrs	r3, r2
         );
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b18:	d301      	bcc.n	8003b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e00f      	b.n	8003b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b1e:	4a0a      	ldr	r2, [pc, #40]	; (8003b48 <SysTick_Config+0x40>)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b26:	210f      	movs	r1, #15
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b2c:	f7ff ff90 	bl	8003a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <SysTick_Config+0x40>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b36:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <SysTick_Config+0x40>)
 8003b38:	2207      	movs	r2, #7
 8003b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	e000e010 	.word	0xe000e010

08003b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff2d 	bl	80039b4 <__NVIC_SetPriorityGrouping>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	4603      	mov	r3, r0
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b74:	f7ff ff42 	bl	80039fc <__NVIC_GetPriorityGrouping>
 8003b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	6978      	ldr	r0, [r7, #20]
 8003b80:	f7ff ff90 	bl	8003aa4 <NVIC_EncodePriority>
 8003b84:	4602      	mov	r2, r0
 8003b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ff5f 	bl	8003a50 <__NVIC_SetPriority>
}
 8003b92:	bf00      	nop
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff35 	bl	8003a18 <__NVIC_EnableIRQ>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff ffa2 	bl	8003b08 <SysTick_Config>
 8003bc4:	4603      	mov	r3, r0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e043      	b.n	8003c6e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_DMA_Init+0xa8>)
 8003bee:	4413      	add	r3, r2
 8003bf0:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <HAL_DMA_Init+0xac>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	091b      	lsrs	r3, r3, #4
 8003bf8:	009a      	lsls	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <HAL_DMA_Init+0xb0>)
 8003c02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	bffdfff8 	.word	0xbffdfff8
 8003c7c:	cccccccd 	.word	0xcccccccd
 8003c80:	40020000 	.word	0x40020000

08003c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_DMA_Start_IT+0x20>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e04b      	b.n	8003d3c <HAL_DMA_Start_IT+0xb8>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d13a      	bne.n	8003d2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f9eb 	bl	80040b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 020e 	orr.w	r2, r2, #14
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e00f      	b.n	8003d1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0204 	bic.w	r2, r2, #4
 8003d0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 020a 	orr.w	r2, r2, #10
 8003d1a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	e005      	b.n	8003d3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
 8003d38:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d008      	beq.n	8003d6e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2204      	movs	r2, #4
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e020      	b.n	8003db0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 020e 	bic.w	r2, r2, #14
 8003d7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	2101      	movs	r1, #1
 8003d98:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
	...

08003dbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d005      	beq.n	8003de0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
 8003dde:	e051      	b.n	8003e84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 020e 	bic.w	r2, r2, #14
 8003dee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <HAL_DMA_Abort_IT+0xd4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d029      	beq.n	8003e5e <HAL_DMA_Abort_IT+0xa2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a21      	ldr	r2, [pc, #132]	; (8003e94 <HAL_DMA_Abort_IT+0xd8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d022      	beq.n	8003e5a <HAL_DMA_Abort_IT+0x9e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <HAL_DMA_Abort_IT+0xdc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01a      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x98>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <HAL_DMA_Abort_IT+0xe0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d012      	beq.n	8003e4e <HAL_DMA_Abort_IT+0x92>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <HAL_DMA_Abort_IT+0xe4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00a      	beq.n	8003e48 <HAL_DMA_Abort_IT+0x8c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <HAL_DMA_Abort_IT+0xe8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d102      	bne.n	8003e42 <HAL_DMA_Abort_IT+0x86>
 8003e3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e40:	e00e      	b.n	8003e60 <HAL_DMA_Abort_IT+0xa4>
 8003e42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e46:	e00b      	b.n	8003e60 <HAL_DMA_Abort_IT+0xa4>
 8003e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e4c:	e008      	b.n	8003e60 <HAL_DMA_Abort_IT+0xa4>
 8003e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e52:	e005      	b.n	8003e60 <HAL_DMA_Abort_IT+0xa4>
 8003e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e58:	e002      	b.n	8003e60 <HAL_DMA_Abort_IT+0xa4>
 8003e5a:	2310      	movs	r3, #16
 8003e5c:	e000      	b.n	8003e60 <HAL_DMA_Abort_IT+0xa4>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4a11      	ldr	r2, [pc, #68]	; (8003ea8 <HAL_DMA_Abort_IT+0xec>)
 8003e62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
    } 
  }
  return status;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40020008 	.word	0x40020008
 8003e94:	4002001c 	.word	0x4002001c
 8003e98:	40020030 	.word	0x40020030
 8003e9c:	40020044 	.word	0x40020044
 8003ea0:	40020058 	.word	0x40020058
 8003ea4:	4002006c 	.word	0x4002006c
 8003ea8:	40020000 	.word	0x40020000

08003eac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	2204      	movs	r2, #4
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d04f      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc8>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d04a      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d107      	bne.n	8003efc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0204 	bic.w	r2, r2, #4
 8003efa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a66      	ldr	r2, [pc, #408]	; (800409c <HAL_DMA_IRQHandler+0x1f0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d029      	beq.n	8003f5a <HAL_DMA_IRQHandler+0xae>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a65      	ldr	r2, [pc, #404]	; (80040a0 <HAL_DMA_IRQHandler+0x1f4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d022      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xaa>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a63      	ldr	r2, [pc, #396]	; (80040a4 <HAL_DMA_IRQHandler+0x1f8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01a      	beq.n	8003f50 <HAL_DMA_IRQHandler+0xa4>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a62      	ldr	r2, [pc, #392]	; (80040a8 <HAL_DMA_IRQHandler+0x1fc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d012      	beq.n	8003f4a <HAL_DMA_IRQHandler+0x9e>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a60      	ldr	r2, [pc, #384]	; (80040ac <HAL_DMA_IRQHandler+0x200>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00a      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x98>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a5f      	ldr	r2, [pc, #380]	; (80040b0 <HAL_DMA_IRQHandler+0x204>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d102      	bne.n	8003f3e <HAL_DMA_IRQHandler+0x92>
 8003f38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f3c:	e00e      	b.n	8003f5c <HAL_DMA_IRQHandler+0xb0>
 8003f3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f42:	e00b      	b.n	8003f5c <HAL_DMA_IRQHandler+0xb0>
 8003f44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f48:	e008      	b.n	8003f5c <HAL_DMA_IRQHandler+0xb0>
 8003f4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f4e:	e005      	b.n	8003f5c <HAL_DMA_IRQHandler+0xb0>
 8003f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f54:	e002      	b.n	8003f5c <HAL_DMA_IRQHandler+0xb0>
 8003f56:	2340      	movs	r3, #64	; 0x40
 8003f58:	e000      	b.n	8003f5c <HAL_DMA_IRQHandler+0xb0>
 8003f5a:	2304      	movs	r3, #4
 8003f5c:	4a55      	ldr	r2, [pc, #340]	; (80040b4 <HAL_DMA_IRQHandler+0x208>)
 8003f5e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8094 	beq.w	8004092 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003f72:	e08e      	b.n	8004092 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2202      	movs	r2, #2
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d056      	beq.n	8004032 <HAL_DMA_IRQHandler+0x186>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d051      	beq.n	8004032 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 020a 	bic.w	r2, r2, #10
 8003faa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a38      	ldr	r2, [pc, #224]	; (800409c <HAL_DMA_IRQHandler+0x1f0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d029      	beq.n	8004012 <HAL_DMA_IRQHandler+0x166>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a37      	ldr	r2, [pc, #220]	; (80040a0 <HAL_DMA_IRQHandler+0x1f4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_IRQHandler+0x162>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a35      	ldr	r2, [pc, #212]	; (80040a4 <HAL_DMA_IRQHandler+0x1f8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01a      	beq.n	8004008 <HAL_DMA_IRQHandler+0x15c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a34      	ldr	r2, [pc, #208]	; (80040a8 <HAL_DMA_IRQHandler+0x1fc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d012      	beq.n	8004002 <HAL_DMA_IRQHandler+0x156>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a32      	ldr	r2, [pc, #200]	; (80040ac <HAL_DMA_IRQHandler+0x200>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00a      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x150>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a31      	ldr	r2, [pc, #196]	; (80040b0 <HAL_DMA_IRQHandler+0x204>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d102      	bne.n	8003ff6 <HAL_DMA_IRQHandler+0x14a>
 8003ff0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ff4:	e00e      	b.n	8004014 <HAL_DMA_IRQHandler+0x168>
 8003ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ffa:	e00b      	b.n	8004014 <HAL_DMA_IRQHandler+0x168>
 8003ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004000:	e008      	b.n	8004014 <HAL_DMA_IRQHandler+0x168>
 8004002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004006:	e005      	b.n	8004014 <HAL_DMA_IRQHandler+0x168>
 8004008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800400c:	e002      	b.n	8004014 <HAL_DMA_IRQHandler+0x168>
 800400e:	2320      	movs	r3, #32
 8004010:	e000      	b.n	8004014 <HAL_DMA_IRQHandler+0x168>
 8004012:	2302      	movs	r3, #2
 8004014:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <HAL_DMA_IRQHandler+0x208>)
 8004016:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	d034      	beq.n	8004092 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004030:	e02f      	b.n	8004092 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2208      	movs	r2, #8
 8004038:	409a      	lsls	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4013      	ands	r3, r2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d028      	beq.n	8004094 <HAL_DMA_IRQHandler+0x1e8>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d023      	beq.n	8004094 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 020e 	bic.w	r2, r2, #14
 800405a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	2101      	movs	r1, #1
 8004066:	fa01 f202 	lsl.w	r2, r1, r2
 800406a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
    }
  }
  return;
 8004092:	bf00      	nop
 8004094:	bf00      	nop
}
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40020008 	.word	0x40020008
 80040a0:	4002001c 	.word	0x4002001c
 80040a4:	40020030 	.word	0x40020030
 80040a8:	40020044 	.word	0x40020044
 80040ac:	40020058 	.word	0x40020058
 80040b0:	4002006c 	.word	0x4002006c
 80040b4:	40020000 	.word	0x40020000

080040b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	2101      	movs	r1, #1
 80040d0:	fa01 f202 	lsl.w	r2, r1, r2
 80040d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d108      	bne.n	80040f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040f6:	e007      	b.n	8004108 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
	...

08004114 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004114:	b480      	push	{r7}
 8004116:	b08b      	sub	sp, #44	; 0x2c
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004122:	2300      	movs	r3, #0
 8004124:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004126:	e169      	b.n	80043fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004128:	2201      	movs	r2, #1
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	429a      	cmp	r2, r3
 8004142:	f040 8158 	bne.w	80043f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4a9a      	ldr	r2, [pc, #616]	; (80043b4 <HAL_GPIO_Init+0x2a0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d05e      	beq.n	800420e <HAL_GPIO_Init+0xfa>
 8004150:	4a98      	ldr	r2, [pc, #608]	; (80043b4 <HAL_GPIO_Init+0x2a0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d875      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 8004156:	4a98      	ldr	r2, [pc, #608]	; (80043b8 <HAL_GPIO_Init+0x2a4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d058      	beq.n	800420e <HAL_GPIO_Init+0xfa>
 800415c:	4a96      	ldr	r2, [pc, #600]	; (80043b8 <HAL_GPIO_Init+0x2a4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d86f      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 8004162:	4a96      	ldr	r2, [pc, #600]	; (80043bc <HAL_GPIO_Init+0x2a8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d052      	beq.n	800420e <HAL_GPIO_Init+0xfa>
 8004168:	4a94      	ldr	r2, [pc, #592]	; (80043bc <HAL_GPIO_Init+0x2a8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d869      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 800416e:	4a94      	ldr	r2, [pc, #592]	; (80043c0 <HAL_GPIO_Init+0x2ac>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d04c      	beq.n	800420e <HAL_GPIO_Init+0xfa>
 8004174:	4a92      	ldr	r2, [pc, #584]	; (80043c0 <HAL_GPIO_Init+0x2ac>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d863      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 800417a:	4a92      	ldr	r2, [pc, #584]	; (80043c4 <HAL_GPIO_Init+0x2b0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d046      	beq.n	800420e <HAL_GPIO_Init+0xfa>
 8004180:	4a90      	ldr	r2, [pc, #576]	; (80043c4 <HAL_GPIO_Init+0x2b0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d85d      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 8004186:	2b12      	cmp	r3, #18
 8004188:	d82a      	bhi.n	80041e0 <HAL_GPIO_Init+0xcc>
 800418a:	2b12      	cmp	r3, #18
 800418c:	d859      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <HAL_GPIO_Init+0x80>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	0800420f 	.word	0x0800420f
 8004198:	080041e9 	.word	0x080041e9
 800419c:	080041fb 	.word	0x080041fb
 80041a0:	0800423d 	.word	0x0800423d
 80041a4:	08004243 	.word	0x08004243
 80041a8:	08004243 	.word	0x08004243
 80041ac:	08004243 	.word	0x08004243
 80041b0:	08004243 	.word	0x08004243
 80041b4:	08004243 	.word	0x08004243
 80041b8:	08004243 	.word	0x08004243
 80041bc:	08004243 	.word	0x08004243
 80041c0:	08004243 	.word	0x08004243
 80041c4:	08004243 	.word	0x08004243
 80041c8:	08004243 	.word	0x08004243
 80041cc:	08004243 	.word	0x08004243
 80041d0:	08004243 	.word	0x08004243
 80041d4:	08004243 	.word	0x08004243
 80041d8:	080041f1 	.word	0x080041f1
 80041dc:	08004205 	.word	0x08004205
 80041e0:	4a79      	ldr	r2, [pc, #484]	; (80043c8 <HAL_GPIO_Init+0x2b4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041e6:	e02c      	b.n	8004242 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	623b      	str	r3, [r7, #32]
          break;
 80041ee:	e029      	b.n	8004244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	3304      	adds	r3, #4
 80041f6:	623b      	str	r3, [r7, #32]
          break;
 80041f8:	e024      	b.n	8004244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	3308      	adds	r3, #8
 8004200:	623b      	str	r3, [r7, #32]
          break;
 8004202:	e01f      	b.n	8004244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	330c      	adds	r3, #12
 800420a:	623b      	str	r3, [r7, #32]
          break;
 800420c:	e01a      	b.n	8004244 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004216:	2304      	movs	r3, #4
 8004218:	623b      	str	r3, [r7, #32]
          break;
 800421a:	e013      	b.n	8004244 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d105      	bne.n	8004230 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004224:	2308      	movs	r3, #8
 8004226:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	611a      	str	r2, [r3, #16]
          break;
 800422e:	e009      	b.n	8004244 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004230:	2308      	movs	r3, #8
 8004232:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	615a      	str	r2, [r3, #20]
          break;
 800423a:	e003      	b.n	8004244 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800423c:	2300      	movs	r3, #0
 800423e:	623b      	str	r3, [r7, #32]
          break;
 8004240:	e000      	b.n	8004244 <HAL_GPIO_Init+0x130>
          break;
 8004242:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2bff      	cmp	r3, #255	; 0xff
 8004248:	d801      	bhi.n	800424e <HAL_GPIO_Init+0x13a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	e001      	b.n	8004252 <HAL_GPIO_Init+0x13e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2bff      	cmp	r3, #255	; 0xff
 8004258:	d802      	bhi.n	8004260 <HAL_GPIO_Init+0x14c>
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	e002      	b.n	8004266 <HAL_GPIO_Init+0x152>
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	3b08      	subs	r3, #8
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	210f      	movs	r1, #15
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	fa01 f303 	lsl.w	r3, r1, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	401a      	ands	r2, r3
 8004278:	6a39      	ldr	r1, [r7, #32]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	431a      	orrs	r2, r3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80b1 	beq.w	80043f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004294:	4b4d      	ldr	r3, [pc, #308]	; (80043cc <HAL_GPIO_Init+0x2b8>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	4a4c      	ldr	r2, [pc, #304]	; (80043cc <HAL_GPIO_Init+0x2b8>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6193      	str	r3, [r2, #24]
 80042a0:	4b4a      	ldr	r3, [pc, #296]	; (80043cc <HAL_GPIO_Init+0x2b8>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042ac:	4a48      	ldr	r2, [pc, #288]	; (80043d0 <HAL_GPIO_Init+0x2bc>)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	089b      	lsrs	r3, r3, #2
 80042b2:	3302      	adds	r3, #2
 80042b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	220f      	movs	r2, #15
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4013      	ands	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a40      	ldr	r2, [pc, #256]	; (80043d4 <HAL_GPIO_Init+0x2c0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <HAL_GPIO_Init+0x1ec>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a3f      	ldr	r2, [pc, #252]	; (80043d8 <HAL_GPIO_Init+0x2c4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00d      	beq.n	80042fc <HAL_GPIO_Init+0x1e8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a3e      	ldr	r2, [pc, #248]	; (80043dc <HAL_GPIO_Init+0x2c8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d007      	beq.n	80042f8 <HAL_GPIO_Init+0x1e4>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a3d      	ldr	r2, [pc, #244]	; (80043e0 <HAL_GPIO_Init+0x2cc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d101      	bne.n	80042f4 <HAL_GPIO_Init+0x1e0>
 80042f0:	2303      	movs	r3, #3
 80042f2:	e006      	b.n	8004302 <HAL_GPIO_Init+0x1ee>
 80042f4:	2304      	movs	r3, #4
 80042f6:	e004      	b.n	8004302 <HAL_GPIO_Init+0x1ee>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e002      	b.n	8004302 <HAL_GPIO_Init+0x1ee>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <HAL_GPIO_Init+0x1ee>
 8004300:	2300      	movs	r3, #0
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	f002 0203 	and.w	r2, r2, #3
 8004308:	0092      	lsls	r2, r2, #2
 800430a:	4093      	lsls	r3, r2
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004312:	492f      	ldr	r1, [pc, #188]	; (80043d0 <HAL_GPIO_Init+0x2bc>)
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	089b      	lsrs	r3, r3, #2
 8004318:	3302      	adds	r3, #2
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d006      	beq.n	800433a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800432c:	4b2d      	ldr	r3, [pc, #180]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	492c      	ldr	r1, [pc, #176]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	4313      	orrs	r3, r2
 8004336:	608b      	str	r3, [r1, #8]
 8004338:	e006      	b.n	8004348 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800433a:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	43db      	mvns	r3, r3
 8004342:	4928      	ldr	r1, [pc, #160]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 8004344:	4013      	ands	r3, r2
 8004346:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d006      	beq.n	8004362 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004354:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	4922      	ldr	r1, [pc, #136]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	4313      	orrs	r3, r2
 800435e:	60cb      	str	r3, [r1, #12]
 8004360:	e006      	b.n	8004370 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004362:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	43db      	mvns	r3, r3
 800436a:	491e      	ldr	r1, [pc, #120]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 800436c:	4013      	ands	r3, r2
 800436e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d006      	beq.n	800438a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	4918      	ldr	r1, [pc, #96]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
 8004388:	e006      	b.n	8004398 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800438a:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	43db      	mvns	r3, r3
 8004392:	4914      	ldr	r1, [pc, #80]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 8004394:	4013      	ands	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d021      	beq.n	80043e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	490e      	ldr	r1, [pc, #56]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]
 80043b0:	e021      	b.n	80043f6 <HAL_GPIO_Init+0x2e2>
 80043b2:	bf00      	nop
 80043b4:	10320000 	.word	0x10320000
 80043b8:	10310000 	.word	0x10310000
 80043bc:	10220000 	.word	0x10220000
 80043c0:	10210000 	.word	0x10210000
 80043c4:	10120000 	.word	0x10120000
 80043c8:	10110000 	.word	0x10110000
 80043cc:	40021000 	.word	0x40021000
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40010800 	.word	0x40010800
 80043d8:	40010c00 	.word	0x40010c00
 80043dc:	40011000 	.word	0x40011000
 80043e0:	40011400 	.word	0x40011400
 80043e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_GPIO_Init+0x304>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	4909      	ldr	r1, [pc, #36]	; (8004418 <HAL_GPIO_Init+0x304>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	3301      	adds	r3, #1
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	fa22 f303 	lsr.w	r3, r2, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	f47f ae8e 	bne.w	8004128 <HAL_GPIO_Init+0x14>
  }
}
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	372c      	adds	r7, #44	; 0x2c
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr
 8004418:	40010400 	.word	0x40010400

0800441c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	887b      	ldrh	r3, [r7, #2]
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	e001      	b.n	800443e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800443e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	460b      	mov	r3, r1
 8004454:	807b      	strh	r3, [r7, #2]
 8004456:	4613      	mov	r3, r2
 8004458:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800445a:	787b      	ldrb	r3, [r7, #1]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004460:	887a      	ldrh	r2, [r7, #2]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004466:	e003      	b.n	8004470 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004468:	887b      	ldrh	r3, [r7, #2]
 800446a:	041a      	lsls	r2, r3, #16
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	611a      	str	r2, [r3, #16]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
	...

0800447c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004492:	4a05      	ldr	r2, [pc, #20]	; (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f806 	bl	80044ac <HAL_GPIO_EXTI_Callback>
  }
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40010400 	.word	0x40010400

080044ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e272      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8087 	beq.w	80045ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044e0:	4b92      	ldr	r3, [pc, #584]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d00c      	beq.n	8004506 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044ec:	4b8f      	ldr	r3, [pc, #572]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d112      	bne.n	800451e <HAL_RCC_OscConfig+0x5e>
 80044f8:	4b8c      	ldr	r3, [pc, #560]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004504:	d10b      	bne.n	800451e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004506:	4b89      	ldr	r3, [pc, #548]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d06c      	beq.n	80045ec <HAL_RCC_OscConfig+0x12c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d168      	bne.n	80045ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e24c      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d106      	bne.n	8004536 <HAL_RCC_OscConfig+0x76>
 8004528:	4b80      	ldr	r3, [pc, #512]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a7f      	ldr	r2, [pc, #508]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800452e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	e02e      	b.n	8004594 <HAL_RCC_OscConfig+0xd4>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0x98>
 800453e:	4b7b      	ldr	r3, [pc, #492]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a7a      	ldr	r2, [pc, #488]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b78      	ldr	r3, [pc, #480]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a77      	ldr	r2, [pc, #476]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e01d      	b.n	8004594 <HAL_RCC_OscConfig+0xd4>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004560:	d10c      	bne.n	800457c <HAL_RCC_OscConfig+0xbc>
 8004562:	4b72      	ldr	r3, [pc, #456]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a71      	ldr	r2, [pc, #452]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b6f      	ldr	r3, [pc, #444]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a6e      	ldr	r2, [pc, #440]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e00b      	b.n	8004594 <HAL_RCC_OscConfig+0xd4>
 800457c:	4b6b      	ldr	r3, [pc, #428]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a6a      	ldr	r2, [pc, #424]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	4b68      	ldr	r3, [pc, #416]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a67      	ldr	r2, [pc, #412]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800458e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004592:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d013      	beq.n	80045c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fe feb6 	bl	800330c <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fe feb2 	bl	800330c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e200      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b6:	4b5d      	ldr	r3, [pc, #372]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0xe4>
 80045c2:	e014      	b.n	80045ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fe fea2 	bl	800330c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fe fe9e 	bl	800330c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e1ec      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045de:	4b53      	ldr	r3, [pc, #332]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x10c>
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d063      	beq.n	80046c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045fa:	4b4c      	ldr	r3, [pc, #304]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004606:	4b49      	ldr	r3, [pc, #292]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b08      	cmp	r3, #8
 8004610:	d11c      	bne.n	800464c <HAL_RCC_OscConfig+0x18c>
 8004612:	4b46      	ldr	r3, [pc, #280]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d116      	bne.n	800464c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461e:	4b43      	ldr	r3, [pc, #268]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_RCC_OscConfig+0x176>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d001      	beq.n	8004636 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e1c0      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004636:	4b3d      	ldr	r3, [pc, #244]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4939      	ldr	r1, [pc, #228]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464a:	e03a      	b.n	80046c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004654:	4b36      	ldr	r3, [pc, #216]	; (8004730 <HAL_RCC_OscConfig+0x270>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465a:	f7fe fe57 	bl	800330c <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004662:	f7fe fe53 	bl	800330c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e1a1      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004674:	4b2d      	ldr	r3, [pc, #180]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004680:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	4927      	ldr	r1, [pc, #156]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004690:	4313      	orrs	r3, r2
 8004692:	600b      	str	r3, [r1, #0]
 8004694:	e015      	b.n	80046c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004696:	4b26      	ldr	r3, [pc, #152]	; (8004730 <HAL_RCC_OscConfig+0x270>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fe fe36 	bl	800330c <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a4:	f7fe fe32 	bl	800330c <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e180      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d03a      	beq.n	8004744 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d019      	beq.n	800470a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d6:	4b17      	ldr	r3, [pc, #92]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046dc:	f7fe fe16 	bl	800330c <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e4:	f7fe fe12 	bl	800330c <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e160      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f6:	4b0d      	ldr	r3, [pc, #52]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004702:	2001      	movs	r0, #1
 8004704:	f000 face 	bl	8004ca4 <RCC_Delay>
 8004708:	e01c      	b.n	8004744 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004710:	f7fe fdfc 	bl	800330c <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004716:	e00f      	b.n	8004738 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004718:	f7fe fdf8 	bl	800330c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d908      	bls.n	8004738 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e146      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	42420000 	.word	0x42420000
 8004734:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	4b92      	ldr	r3, [pc, #584]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e9      	bne.n	8004718 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80a6 	beq.w	800489e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004756:	4b8b      	ldr	r3, [pc, #556]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10d      	bne.n	800477e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	4a87      	ldr	r2, [pc, #540]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476c:	61d3      	str	r3, [r2, #28]
 800476e:	4b85      	ldr	r3, [pc, #532]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477a:	2301      	movs	r3, #1
 800477c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477e:	4b82      	ldr	r3, [pc, #520]	; (8004988 <HAL_RCC_OscConfig+0x4c8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d118      	bne.n	80047bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800478a:	4b7f      	ldr	r3, [pc, #508]	; (8004988 <HAL_RCC_OscConfig+0x4c8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a7e      	ldr	r2, [pc, #504]	; (8004988 <HAL_RCC_OscConfig+0x4c8>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004796:	f7fe fdb9 	bl	800330c <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479e:	f7fe fdb5 	bl	800330c <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b64      	cmp	r3, #100	; 0x64
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e103      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b0:	4b75      	ldr	r3, [pc, #468]	; (8004988 <HAL_RCC_OscConfig+0x4c8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d106      	bne.n	80047d2 <HAL_RCC_OscConfig+0x312>
 80047c4:	4b6f      	ldr	r3, [pc, #444]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4a6e      	ldr	r2, [pc, #440]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6213      	str	r3, [r2, #32]
 80047d0:	e02d      	b.n	800482e <HAL_RCC_OscConfig+0x36e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x334>
 80047da:	4b6a      	ldr	r3, [pc, #424]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	4a69      	ldr	r2, [pc, #420]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	f023 0301 	bic.w	r3, r3, #1
 80047e4:	6213      	str	r3, [r2, #32]
 80047e6:	4b67      	ldr	r3, [pc, #412]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4a66      	ldr	r2, [pc, #408]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	f023 0304 	bic.w	r3, r3, #4
 80047f0:	6213      	str	r3, [r2, #32]
 80047f2:	e01c      	b.n	800482e <HAL_RCC_OscConfig+0x36e>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d10c      	bne.n	8004816 <HAL_RCC_OscConfig+0x356>
 80047fc:	4b61      	ldr	r3, [pc, #388]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	4a60      	ldr	r2, [pc, #384]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	6213      	str	r3, [r2, #32]
 8004808:	4b5e      	ldr	r3, [pc, #376]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	4a5d      	ldr	r2, [pc, #372]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6213      	str	r3, [r2, #32]
 8004814:	e00b      	b.n	800482e <HAL_RCC_OscConfig+0x36e>
 8004816:	4b5b      	ldr	r3, [pc, #364]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	4a5a      	ldr	r2, [pc, #360]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	6213      	str	r3, [r2, #32]
 8004822:	4b58      	ldr	r3, [pc, #352]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	4a57      	ldr	r2, [pc, #348]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004828:	f023 0304 	bic.w	r3, r3, #4
 800482c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d015      	beq.n	8004862 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004836:	f7fe fd69 	bl	800330c <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483c:	e00a      	b.n	8004854 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fe fd65 	bl	800330c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e0b1      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004854:	4b4b      	ldr	r3, [pc, #300]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ee      	beq.n	800483e <HAL_RCC_OscConfig+0x37e>
 8004860:	e014      	b.n	800488c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004862:	f7fe fd53 	bl	800330c <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004868:	e00a      	b.n	8004880 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fe fd4f 	bl	800330c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	; 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e09b      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004880:	4b40      	ldr	r3, [pc, #256]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1ee      	bne.n	800486a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d105      	bne.n	800489e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004892:	4b3c      	ldr	r3, [pc, #240]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	4a3b      	ldr	r2, [pc, #236]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8087 	beq.w	80049b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a8:	4b36      	ldr	r3, [pc, #216]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d061      	beq.n	8004978 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d146      	bne.n	800494a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048bc:	4b33      	ldr	r3, [pc, #204]	; (800498c <HAL_RCC_OscConfig+0x4cc>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c2:	f7fe fd23 	bl	800330c <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ca:	f7fe fd1f 	bl	800330c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e06d      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048dc:	4b29      	ldr	r3, [pc, #164]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f0      	bne.n	80048ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f0:	d108      	bne.n	8004904 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048f2:	4b24      	ldr	r3, [pc, #144]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	4921      	ldr	r1, [pc, #132]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004900:	4313      	orrs	r3, r2
 8004902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004904:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a19      	ldr	r1, [r3, #32]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	430b      	orrs	r3, r1
 8004916:	491b      	ldr	r1, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_OscConfig+0x4cc>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fe fcf3 	bl	800330c <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492a:	f7fe fcef 	bl	800330c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e03d      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x46a>
 8004948:	e035      	b.n	80049b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCC_OscConfig+0x4cc>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fe fcdc 	bl	800330c <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004958:	f7fe fcd8 	bl	800330c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e026      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x498>
 8004976:	e01e      	b.n	80049b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e019      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
 8004984:	40021000 	.word	0x40021000
 8004988:	40007000 	.word	0x40007000
 800498c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_OscConfig+0x500>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d106      	bne.n	80049b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d001      	beq.n	80049b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000

080049c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0d0      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049d8:	4b6a      	ldr	r3, [pc, #424]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d910      	bls.n	8004a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e6:	4b67      	ldr	r3, [pc, #412]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 0207 	bic.w	r2, r3, #7
 80049ee:	4965      	ldr	r1, [pc, #404]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	4b63      	ldr	r3, [pc, #396]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0b8      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d020      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a20:	4b59      	ldr	r3, [pc, #356]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4a58      	ldr	r2, [pc, #352]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a38:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4a52      	ldr	r2, [pc, #328]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a44:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	494d      	ldr	r1, [pc, #308]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d040      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d107      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6a:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d115      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e07f      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d107      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a82:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e073      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a92:	4b3d      	ldr	r3, [pc, #244]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e06b      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa2:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f023 0203 	bic.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4936      	ldr	r1, [pc, #216]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab4:	f7fe fc2a 	bl	800330c <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abc:	f7fe fc26 	bl	800330c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e053      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad2:	4b2d      	ldr	r3, [pc, #180]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f003 020c 	and.w	r2, r3, #12
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d1eb      	bne.n	8004abc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d210      	bcs.n	8004b14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b24      	ldr	r3, [pc, #144]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 0207 	bic.w	r2, r3, #7
 8004afa:	4922      	ldr	r1, [pc, #136]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b02:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e032      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b20:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4916      	ldr	r1, [pc, #88]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	490e      	ldr	r1, [pc, #56]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b52:	f000 f821 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8004b56:	4602      	mov	r2, r0
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	490a      	ldr	r1, [pc, #40]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b64:	5ccb      	ldrb	r3, [r1, r3]
 8004b66:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <HAL_RCC_ClockConfig+0x1cc>)
 8004b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_RCC_ClockConfig+0x1d0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe fb88 	bl	8003288 <HAL_InitTick>

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40022000 	.word	0x40022000
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	0800bcd8 	.word	0x0800bcd8
 8004b90:	20000000 	.word	0x20000000
 8004b94:	2000007c 	.word	0x2000007c

08004b98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bb2:	4b1e      	ldr	r3, [pc, #120]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x94>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d002      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x30>
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x36>
 8004bc6:	e027      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bc8:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bca:	613b      	str	r3, [r7, #16]
      break;
 8004bcc:	e027      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	0c9b      	lsrs	r3, r3, #18
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	4a17      	ldr	r2, [pc, #92]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bd8:	5cd3      	ldrb	r3, [r2, r3]
 8004bda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d010      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004be6:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x94>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	0c5b      	lsrs	r3, r3, #17
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	4a11      	ldr	r2, [pc, #68]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004bf2:	5cd3      	ldrb	r3, [r2, r3]
 8004bf4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a0d      	ldr	r2, [pc, #52]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bfa:	fb03 f202 	mul.w	r2, r3, r2
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	e004      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a0c      	ldr	r2, [pc, #48]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	613b      	str	r3, [r7, #16]
      break;
 8004c16:	e002      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c1a:	613b      	str	r3, [r7, #16]
      break;
 8004c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c1e:	693b      	ldr	r3, [r7, #16]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	007a1200 	.word	0x007a1200
 8004c34:	0800bcf0 	.word	0x0800bcf0
 8004c38:	0800bd00 	.word	0x0800bd00
 8004c3c:	003d0900 	.word	0x003d0900

08004c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c44:	4b02      	ldr	r3, [pc, #8]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c46:	681b      	ldr	r3, [r3, #0]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr
 8004c50:	20000000 	.word	0x20000000

08004c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c58:	f7ff fff2 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	0a1b      	lsrs	r3, r3, #8
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4903      	ldr	r1, [pc, #12]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6a:	5ccb      	ldrb	r3, [r1, r3]
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40021000 	.word	0x40021000
 8004c78:	0800bce8 	.word	0x0800bce8

08004c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c80:	f7ff ffde 	bl	8004c40 <HAL_RCC_GetHCLKFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	0adb      	lsrs	r3, r3, #11
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4903      	ldr	r1, [pc, #12]	; (8004ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	0800bce8 	.word	0x0800bce8

08004ca4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <RCC_Delay+0x34>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <RCC_Delay+0x38>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	0a5b      	lsrs	r3, r3, #9
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cc0:	bf00      	nop
  }
  while (Delay --);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1e5a      	subs	r2, r3, #1
 8004cc6:	60fa      	str	r2, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f9      	bne.n	8004cc0 <RCC_Delay+0x1c>
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	20000000 	.word	0x20000000
 8004cdc:	10624dd3 	.word	0x10624dd3

08004ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d07d      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d00:	4b4f      	ldr	r3, [pc, #316]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10d      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d0c:	4b4c      	ldr	r3, [pc, #304]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	4a4b      	ldr	r2, [pc, #300]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d16:	61d3      	str	r3, [r2, #28]
 8004d18:	4b49      	ldr	r3, [pc, #292]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d24:	2301      	movs	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d28:	4b46      	ldr	r3, [pc, #280]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d118      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d34:	4b43      	ldr	r3, [pc, #268]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a42      	ldr	r2, [pc, #264]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d40:	f7fe fae4 	bl	800330c <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	e008      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d48:	f7fe fae0 	bl	800330c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e06d      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5a:	4b3a      	ldr	r3, [pc, #232]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d66:	4b36      	ldr	r3, [pc, #216]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d02e      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d027      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d84:	4b2e      	ldr	r3, [pc, #184]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d8e:	4b2e      	ldr	r3, [pc, #184]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d94:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d9a:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d014      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004daa:	f7fe faaf 	bl	800330c <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db2:	f7fe faab 	bl	800330c <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e036      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ee      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4917      	ldr	r1, [pc, #92]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d105      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dec:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e04:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	490b      	ldr	r1, [pc, #44]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d008      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e22:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	4904      	ldr	r1, [pc, #16]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40007000 	.word	0x40007000
 8004e48:	42420440 	.word	0x42420440

08004e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e076      	b.n	8004f4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e6e:	d009      	beq.n	8004e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	61da      	str	r2, [r3, #28]
 8004e76:	e005      	b.n	8004e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc fe72 	bl	8001b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f08:	ea42 0103 	orr.w	r1, r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	0c1a      	lsrs	r2, r3, #16
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f002 0204 	and.w	r2, r2, #4
 8004f2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69da      	ldr	r2, [r3, #28]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f64:	f7fe f9d2 	bl	800330c <HAL_GetTick>
 8004f68:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d001      	beq.n	8004f7e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e12a      	b.n	80051d4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_SPI_Transmit+0x36>
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e122      	b.n	80051d4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_SPI_Transmit+0x48>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e11b      	b.n	80051d4 <HAL_SPI_Transmit+0x280>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	88fa      	ldrh	r2, [r7, #6]
 8004fbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	88fa      	ldrh	r2, [r7, #6]
 8004fc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fea:	d10f      	bne.n	800500c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005016:	2b40      	cmp	r3, #64	; 0x40
 8005018:	d007      	beq.n	800502a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005028:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005032:	d152      	bne.n	80050da <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_SPI_Transmit+0xee>
 800503c:	8b7b      	ldrh	r3, [r7, #26]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d145      	bne.n	80050ce <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	881a      	ldrh	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	1c9a      	adds	r2, r3, #2
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005066:	e032      	b.n	80050ce <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b02      	cmp	r3, #2
 8005074:	d112      	bne.n	800509c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	881a      	ldrh	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	1c9a      	adds	r2, r3, #2
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	86da      	strh	r2, [r3, #54]	; 0x36
 800509a:	e018      	b.n	80050ce <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800509c:	f7fe f936 	bl	800330c <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d803      	bhi.n	80050b4 <HAL_SPI_Transmit+0x160>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b2:	d102      	bne.n	80050ba <HAL_SPI_Transmit+0x166>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e082      	b.n	80051d4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1c7      	bne.n	8005068 <HAL_SPI_Transmit+0x114>
 80050d8:	e053      	b.n	8005182 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <HAL_SPI_Transmit+0x194>
 80050e2:	8b7b      	ldrh	r3, [r7, #26]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d147      	bne.n	8005178 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	330c      	adds	r3, #12
 80050f2:	7812      	ldrb	r2, [r2, #0]
 80050f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800510e:	e033      	b.n	8005178 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d113      	bne.n	8005146 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	7812      	ldrb	r2, [r2, #0]
 800512a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	86da      	strh	r2, [r3, #54]	; 0x36
 8005144:	e018      	b.n	8005178 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005146:	f7fe f8e1 	bl	800330c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d803      	bhi.n	800515e <HAL_SPI_Transmit+0x20a>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800515c:	d102      	bne.n	8005164 <HAL_SPI_Transmit+0x210>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e02d      	b.n	80051d4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1c6      	bne.n	8005110 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fbc4 	bl	8005914 <SPI_EndRxTxTransaction>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80051d2:	2300      	movs	r3, #0
  }
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	4613      	mov	r3, r2
 80051ea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d001      	beq.n	80051fc <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80051f8:	2302      	movs	r3, #2
 80051fa:	e104      	b.n	8005406 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005204:	d112      	bne.n	800522c <HAL_SPI_Receive+0x50>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10e      	bne.n	800522c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2204      	movs	r2, #4
 8005212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f8f3 	bl	800540e <HAL_SPI_TransmitReceive>
 8005228:	4603      	mov	r3, r0
 800522a:	e0ec      	b.n	8005406 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800522c:	f7fe f86e 	bl	800330c <HAL_GetTick>
 8005230:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_SPI_Receive+0x62>
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e0e1      	b.n	8005406 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_SPI_Receive+0x74>
 800524c:	2302      	movs	r3, #2
 800524e:	e0da      	b.n	8005406 <HAL_SPI_Receive+0x22a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2204      	movs	r2, #4
 800525c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529e:	d10f      	bne.n	80052c0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d007      	beq.n	80052de <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d170      	bne.n	80053c8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052e6:	e035      	b.n	8005354 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d115      	bne.n	8005322 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f103 020c 	add.w	r2, r3, #12
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	7812      	ldrb	r2, [r2, #0]
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005320:	e018      	b.n	8005354 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005322:	f7fd fff3 	bl	800330c <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d803      	bhi.n	800533a <HAL_SPI_Receive+0x15e>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005338:	d102      	bne.n	8005340 <HAL_SPI_Receive+0x164>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d109      	bne.n	8005354 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e058      	b.n	8005406 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1c4      	bne.n	80052e8 <HAL_SPI_Receive+0x10c>
 800535e:	e038      	b.n	80053d2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b01      	cmp	r3, #1
 800536c:	d113      	bne.n	8005396 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	b292      	uxth	r2, r2
 800537a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	1c9a      	adds	r2, r3, #2
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005394:	e018      	b.n	80053c8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005396:	f7fd ffb9 	bl	800330c <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d803      	bhi.n	80053ae <HAL_SPI_Receive+0x1d2>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ac:	d102      	bne.n	80053b4 <HAL_SPI_Receive+0x1d8>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e01e      	b.n	8005406 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1c6      	bne.n	8005360 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fa4a 	bl	8005870 <SPI_EndRxTransaction>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005404:	2300      	movs	r3, #0
  }
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b08a      	sub	sp, #40	; 0x28
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800541c:	2301      	movs	r3, #1
 800541e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005420:	f7fd ff74 	bl	800330c <HAL_GetTick>
 8005424:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800542c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005434:	887b      	ldrh	r3, [r7, #2]
 8005436:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005438:	7ffb      	ldrb	r3, [r7, #31]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d00c      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x4a>
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005444:	d106      	bne.n	8005454 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d102      	bne.n	8005454 <HAL_SPI_TransmitReceive+0x46>
 800544e:	7ffb      	ldrb	r3, [r7, #31]
 8005450:	2b04      	cmp	r3, #4
 8005452:	d001      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005454:	2302      	movs	r3, #2
 8005456:	e17f      	b.n	8005758 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <HAL_SPI_TransmitReceive+0x5c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_SPI_TransmitReceive+0x5c>
 8005464:	887b      	ldrh	r3, [r7, #2]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e174      	b.n	8005758 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_SPI_TransmitReceive+0x6e>
 8005478:	2302      	movs	r3, #2
 800547a:	e16d      	b.n	8005758 <HAL_SPI_TransmitReceive+0x34a>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b04      	cmp	r3, #4
 800548e:	d003      	beq.n	8005498 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2205      	movs	r2, #5
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	887a      	ldrh	r2, [r7, #2]
 80054a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	887a      	ldrh	r2, [r7, #2]
 80054ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	887a      	ldrh	r2, [r7, #2]
 80054ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	887a      	ldrh	r2, [r7, #2]
 80054c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d007      	beq.n	80054ec <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f4:	d17e      	bne.n	80055f4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <HAL_SPI_TransmitReceive+0xf6>
 80054fe:	8afb      	ldrh	r3, [r7, #22]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d16c      	bne.n	80055de <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	881a      	ldrh	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	1c9a      	adds	r2, r3, #2
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005528:	e059      	b.n	80055de <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b02      	cmp	r3, #2
 8005536:	d11b      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x162>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d016      	beq.n	8005570 <HAL_SPI_TransmitReceive+0x162>
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	2b01      	cmp	r3, #1
 8005546:	d113      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	881a      	ldrh	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	1c9a      	adds	r2, r3, #2
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b01      	cmp	r3, #1
 800557c:	d119      	bne.n	80055b2 <HAL_SPI_TransmitReceive+0x1a4>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d014      	beq.n	80055b2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	b292      	uxth	r2, r2
 8005594:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	1c9a      	adds	r2, r3, #2
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055ae:	2301      	movs	r3, #1
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055b2:	f7fd feab 	bl	800330c <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055be:	429a      	cmp	r2, r3
 80055c0:	d80d      	bhi.n	80055de <HAL_SPI_TransmitReceive+0x1d0>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c8:	d009      	beq.n	80055de <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e0bc      	b.n	8005758 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1a0      	bne.n	800552a <HAL_SPI_TransmitReceive+0x11c>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d19b      	bne.n	800552a <HAL_SPI_TransmitReceive+0x11c>
 80055f2:	e082      	b.n	80056fa <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_SPI_TransmitReceive+0x1f4>
 80055fc:	8afb      	ldrh	r3, [r7, #22]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d171      	bne.n	80056e6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	330c      	adds	r3, #12
 800560c:	7812      	ldrb	r2, [r2, #0]
 800560e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561e:	b29b      	uxth	r3, r3
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005628:	e05d      	b.n	80056e6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b02      	cmp	r3, #2
 8005636:	d11c      	bne.n	8005672 <HAL_SPI_TransmitReceive+0x264>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d017      	beq.n	8005672 <HAL_SPI_TransmitReceive+0x264>
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	2b01      	cmp	r3, #1
 8005646:	d114      	bne.n	8005672 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	7812      	ldrb	r2, [r2, #0]
 8005654:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d119      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x2a6>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d014      	beq.n	80056b4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056b0:	2301      	movs	r3, #1
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056b4:	f7fd fe2a 	bl	800330c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d803      	bhi.n	80056cc <HAL_SPI_TransmitReceive+0x2be>
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ca:	d102      	bne.n	80056d2 <HAL_SPI_TransmitReceive+0x2c4>
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d109      	bne.n	80056e6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e038      	b.n	8005758 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d19c      	bne.n	800562a <HAL_SPI_TransmitReceive+0x21c>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d197      	bne.n	800562a <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056fa:	6a3a      	ldr	r2, [r7, #32]
 80056fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f908 	bl	8005914 <SPI_EndRxTxTransaction>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e01d      	b.n	8005758 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005724:	2300      	movs	r3, #0
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005756:	2300      	movs	r3, #0
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	3728      	adds	r7, #40	; 0x28
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005770:	f7fd fdcc 	bl	800330c <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	4413      	add	r3, r2
 800577e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005780:	f7fd fdc4 	bl	800330c <HAL_GetTick>
 8005784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005786:	4b39      	ldr	r3, [pc, #228]	; (800586c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	015b      	lsls	r3, r3, #5
 800578c:	0d1b      	lsrs	r3, r3, #20
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	fb02 f303 	mul.w	r3, r2, r3
 8005794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005796:	e054      	b.n	8005842 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800579e:	d050      	beq.n	8005842 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057a0:	f7fd fdb4 	bl	800330c <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d902      	bls.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d13d      	bne.n	8005832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ce:	d111      	bne.n	80057f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d8:	d004      	beq.n	80057e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e2:	d107      	bne.n	80057f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fc:	d10f      	bne.n	800581e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800581c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e017      	b.n	8005862 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	3b01      	subs	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4013      	ands	r3, r2
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	429a      	cmp	r2, r3
 8005850:	bf0c      	ite	eq
 8005852:	2301      	moveq	r3, #1
 8005854:	2300      	movne	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	429a      	cmp	r2, r3
 800585e:	d19b      	bne.n	8005798 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3720      	adds	r7, #32
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000000 	.word	0x20000000

08005870 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af02      	add	r7, sp, #8
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005884:	d111      	bne.n	80058aa <SPI_EndRxTransaction+0x3a>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800588e:	d004      	beq.n	800589a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005898:	d107      	bne.n	80058aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b2:	d117      	bne.n	80058e4 <SPI_EndRxTransaction+0x74>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d112      	bne.n	80058e4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2101      	movs	r1, #1
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff ff49 	bl	8005760 <SPI_WaitFlagStateUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01a      	beq.n	800590a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d8:	f043 0220 	orr.w	r2, r3, #32
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e013      	b.n	800590c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2200      	movs	r2, #0
 80058ec:	2180      	movs	r1, #128	; 0x80
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7ff ff36 	bl	8005760 <SPI_WaitFlagStateUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e000      	b.n	800590c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af02      	add	r7, sp, #8
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2201      	movs	r2, #1
 8005928:	2102      	movs	r1, #2
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff ff18 	bl	8005760 <SPI_WaitFlagStateUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e013      	b.n	800596e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	2180      	movs	r1, #128	; 0x80
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff ff05 	bl	8005760 <SPI_WaitFlagStateUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e000      	b.n	800596e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e041      	b.n	8005a0c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7fc f94d 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f000 fc1f 	bl	80061f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d001      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e03a      	b.n	8005aa2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a18      	ldr	r2, [pc, #96]	; (8005aac <HAL_TIM_Base_Start_IT+0x98>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00e      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x58>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a56:	d009      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x58>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a14      	ldr	r2, [pc, #80]	; (8005ab0 <HAL_TIM_Base_Start_IT+0x9c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x58>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d111      	bne.n	8005a90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b06      	cmp	r3, #6
 8005a7c:	d010      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8e:	e007      	b.n	8005aa0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	40012c00 	.word	0x40012c00
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800

08005ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e041      	b.n	8005b4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f839 	bl	8005b56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f000 fb7e 	bl	80061f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d109      	bne.n	8005b8c <HAL_TIM_PWM_Start+0x24>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	e022      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x6a>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d109      	bne.n	8005ba6 <HAL_TIM_PWM_Start+0x3e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	bf14      	ite	ne
 8005b9e:	2301      	movne	r3, #1
 8005ba0:	2300      	moveq	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	e015      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x6a>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d109      	bne.n	8005bc0 <HAL_TIM_PWM_Start+0x58>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	bf14      	ite	ne
 8005bb8:	2301      	movne	r3, #1
 8005bba:	2300      	moveq	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	e008      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x6a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e05e      	b.n	8005c98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <HAL_TIM_PWM_Start+0x82>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be8:	e013      	b.n	8005c12 <HAL_TIM_PWM_Start+0xaa>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_PWM_Start+0x92>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf8:	e00b      	b.n	8005c12 <HAL_TIM_PWM_Start+0xaa>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_PWM_Start+0xa2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c08:	e003      	b.n	8005c12 <HAL_TIM_PWM_Start+0xaa>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2201      	movs	r2, #1
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fd78 	bl	8006710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1e      	ldr	r2, [pc, #120]	; (8005ca0 <HAL_TIM_PWM_Start+0x138>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d107      	bne.n	8005c3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <HAL_TIM_PWM_Start+0x138>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00e      	beq.n	8005c62 <HAL_TIM_PWM_Start+0xfa>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4c:	d009      	beq.n	8005c62 <HAL_TIM_PWM_Start+0xfa>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a14      	ldr	r2, [pc, #80]	; (8005ca4 <HAL_TIM_PWM_Start+0x13c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d004      	beq.n	8005c62 <HAL_TIM_PWM_Start+0xfa>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a12      	ldr	r2, [pc, #72]	; (8005ca8 <HAL_TIM_PWM_Start+0x140>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d111      	bne.n	8005c86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b06      	cmp	r3, #6
 8005c72:	d010      	beq.n	8005c96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c84:	e007      	b.n	8005c96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800

08005cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d020      	beq.n	8005d10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01b      	beq.n	8005d10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0202 	mvn.w	r2, #2
 8005ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa63 	bl	80061c2 <HAL_TIM_IC_CaptureCallback>
 8005cfc:	e005      	b.n	8005d0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa56 	bl	80061b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fa65 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d020      	beq.n	8005d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01b      	beq.n	8005d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0204 	mvn.w	r2, #4
 8005d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fa3d 	bl	80061c2 <HAL_TIM_IC_CaptureCallback>
 8005d48:	e005      	b.n	8005d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa30 	bl	80061b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fa3f 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d020      	beq.n	8005da8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01b      	beq.n	8005da8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0208 	mvn.w	r2, #8
 8005d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa17 	bl	80061c2 <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa0a 	bl	80061b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fa19 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d020      	beq.n	8005df4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f003 0310 	and.w	r3, r3, #16
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01b      	beq.n	8005df4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0210 	mvn.w	r2, #16
 8005dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2208      	movs	r2, #8
 8005dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f9f1 	bl	80061c2 <HAL_TIM_IC_CaptureCallback>
 8005de0:	e005      	b.n	8005dee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f9e4 	bl	80061b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f9f3 	bl	80061d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00c      	beq.n	8005e18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0201 	mvn.w	r2, #1
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f9c3 	bl	800619e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00c      	beq.n	8005e3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fcf5 	bl	8006826 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00c      	beq.n	8005e60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d007      	beq.n	8005e60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f9c3 	bl	80061e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00c      	beq.n	8005e84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d007      	beq.n	8005e84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0220 	mvn.w	r2, #32
 8005e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fcc8 	bl	8006814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e0ae      	b.n	8006008 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b0c      	cmp	r3, #12
 8005eb6:	f200 809f 	bhi.w	8005ff8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005eba:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005ef5 	.word	0x08005ef5
 8005ec4:	08005ff9 	.word	0x08005ff9
 8005ec8:	08005ff9 	.word	0x08005ff9
 8005ecc:	08005ff9 	.word	0x08005ff9
 8005ed0:	08005f35 	.word	0x08005f35
 8005ed4:	08005ff9 	.word	0x08005ff9
 8005ed8:	08005ff9 	.word	0x08005ff9
 8005edc:	08005ff9 	.word	0x08005ff9
 8005ee0:	08005f77 	.word	0x08005f77
 8005ee4:	08005ff9 	.word	0x08005ff9
 8005ee8:	08005ff9 	.word	0x08005ff9
 8005eec:	08005ff9 	.word	0x08005ff9
 8005ef0:	08005fb7 	.word	0x08005fb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 f9ea 	bl	80062d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0208 	orr.w	r2, r2, #8
 8005f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0204 	bic.w	r2, r2, #4
 8005f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6999      	ldr	r1, [r3, #24]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	619a      	str	r2, [r3, #24]
      break;
 8005f32:	e064      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fa30 	bl	80063a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6999      	ldr	r1, [r3, #24]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	021a      	lsls	r2, r3, #8
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	619a      	str	r2, [r3, #24]
      break;
 8005f74:	e043      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fa79 	bl	8006474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f042 0208 	orr.w	r2, r2, #8
 8005f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69da      	ldr	r2, [r3, #28]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0204 	bic.w	r2, r2, #4
 8005fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69d9      	ldr	r1, [r3, #28]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	61da      	str	r2, [r3, #28]
      break;
 8005fb4:	e023      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 fac3 	bl	8006548 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69da      	ldr	r2, [r3, #28]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69d9      	ldr	r1, [r3, #28]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	021a      	lsls	r2, r3, #8
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	61da      	str	r2, [r3, #28]
      break;
 8005ff6:	e002      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8005ffc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <HAL_TIM_ConfigClockSource+0x1c>
 8006028:	2302      	movs	r3, #2
 800602a:	e0b4      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x186>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800604a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006052:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006064:	d03e      	beq.n	80060e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800606a:	f200 8087 	bhi.w	800617c <HAL_TIM_ConfigClockSource+0x16c>
 800606e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006072:	f000 8086 	beq.w	8006182 <HAL_TIM_ConfigClockSource+0x172>
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607a:	d87f      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b70      	cmp	r3, #112	; 0x70
 800607e:	d01a      	beq.n	80060b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006080:	2b70      	cmp	r3, #112	; 0x70
 8006082:	d87b      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b60      	cmp	r3, #96	; 0x60
 8006086:	d050      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x11a>
 8006088:	2b60      	cmp	r3, #96	; 0x60
 800608a:	d877      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b50      	cmp	r3, #80	; 0x50
 800608e:	d03c      	beq.n	800610a <HAL_TIM_ConfigClockSource+0xfa>
 8006090:	2b50      	cmp	r3, #80	; 0x50
 8006092:	d873      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 8006094:	2b40      	cmp	r3, #64	; 0x40
 8006096:	d058      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x13a>
 8006098:	2b40      	cmp	r3, #64	; 0x40
 800609a:	d86f      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 800609c:	2b30      	cmp	r3, #48	; 0x30
 800609e:	d064      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x15a>
 80060a0:	2b30      	cmp	r3, #48	; 0x30
 80060a2:	d86b      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d060      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x15a>
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d867      	bhi.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d05c      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x15a>
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d05a      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x15a>
 80060b4:	e062      	b.n	800617c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060c6:	f000 fb04 	bl	80066d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	609a      	str	r2, [r3, #8]
      break;
 80060e2:	e04f      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060f4:	f000 faed 	bl	80066d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006106:	609a      	str	r2, [r3, #8]
      break;
 8006108:	e03c      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006116:	461a      	mov	r2, r3
 8006118:	f000 fa64 	bl	80065e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2150      	movs	r1, #80	; 0x50
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fabb 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 8006128:	e02c      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006136:	461a      	mov	r2, r3
 8006138:	f000 fa82 	bl	8006640 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2160      	movs	r1, #96	; 0x60
 8006142:	4618      	mov	r0, r3
 8006144:	f000 faab 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 8006148:	e01c      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006156:	461a      	mov	r2, r3
 8006158:	f000 fa44 	bl	80065e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2140      	movs	r1, #64	; 0x40
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fa9b 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 8006168:	e00c      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f000 fa92 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 800617a:	e003      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	73fb      	strb	r3, [r7, #15]
      break;
 8006180:	e000      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr

080061b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr

080061c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr

080061d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr

080061e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr

080061f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a2f      	ldr	r2, [pc, #188]	; (80062c8 <TIM_Base_SetConfig+0xd0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_Base_SetConfig+0x30>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006216:	d007      	beq.n	8006228 <TIM_Base_SetConfig+0x30>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a2c      	ldr	r2, [pc, #176]	; (80062cc <TIM_Base_SetConfig+0xd4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_Base_SetConfig+0x30>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a2b      	ldr	r2, [pc, #172]	; (80062d0 <TIM_Base_SetConfig+0xd8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a22      	ldr	r2, [pc, #136]	; (80062c8 <TIM_Base_SetConfig+0xd0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00b      	beq.n	800625a <TIM_Base_SetConfig+0x62>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006248:	d007      	beq.n	800625a <TIM_Base_SetConfig+0x62>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a1f      	ldr	r2, [pc, #124]	; (80062cc <TIM_Base_SetConfig+0xd4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_Base_SetConfig+0x62>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a1e      	ldr	r2, [pc, #120]	; (80062d0 <TIM_Base_SetConfig+0xd8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d108      	bne.n	800626c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a0d      	ldr	r2, [pc, #52]	; (80062c8 <TIM_Base_SetConfig+0xd0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d103      	bne.n	80062a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d005      	beq.n	80062be <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f023 0201 	bic.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	611a      	str	r2, [r3, #16]
  }
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr
 80062c8:	40012c00 	.word	0x40012c00
 80062cc:	40000400 	.word	0x40000400
 80062d0:	40000800 	.word	0x40000800

080062d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f023 0201 	bic.w	r2, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 0302 	bic.w	r3, r3, #2
 800631c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a1c      	ldr	r2, [pc, #112]	; (800639c <TIM_OC1_SetConfig+0xc8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10c      	bne.n	800634a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 0308 	bic.w	r3, r3, #8
 8006336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f023 0304 	bic.w	r3, r3, #4
 8006348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a13      	ldr	r2, [pc, #76]	; (800639c <TIM_OC1_SetConfig+0xc8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d111      	bne.n	8006376 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	621a      	str	r2, [r3, #32]
}
 8006390:	bf00      	nop
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40012c00 	.word	0x40012c00

080063a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	f023 0210 	bic.w	r2, r3, #16
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f023 0320 	bic.w	r3, r3, #32
 80063ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a1d      	ldr	r2, [pc, #116]	; (8006470 <TIM_OC2_SetConfig+0xd0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d10d      	bne.n	800641c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a14      	ldr	r2, [pc, #80]	; (8006470 <TIM_OC2_SetConfig+0xd0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d113      	bne.n	800644c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800642a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	bc80      	pop	{r7}
 800646e:	4770      	bx	lr
 8006470:	40012c00 	.word	0x40012c00

08006474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0303 	bic.w	r3, r3, #3
 80064aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	021b      	lsls	r3, r3, #8
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <TIM_OC3_SetConfig+0xd0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d10d      	bne.n	80064ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a14      	ldr	r2, [pc, #80]	; (8006544 <TIM_OC3_SetConfig+0xd0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d113      	bne.n	800651e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	621a      	str	r2, [r3, #32]
}
 8006538:	bf00      	nop
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40012c00 	.word	0x40012c00

08006548 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	021b      	lsls	r3, r3, #8
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	031b      	lsls	r3, r3, #12
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a0f      	ldr	r2, [pc, #60]	; (80065e0 <TIM_OC4_SetConfig+0x98>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d109      	bne.n	80065bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	019b      	lsls	r3, r3, #6
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	621a      	str	r2, [r3, #32]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr
 80065e0:	40012c00 	.word	0x40012c00

080065e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f023 0201 	bic.w	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800660e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f023 030a 	bic.w	r3, r3, #10
 8006620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	bc80      	pop	{r7}
 800663e:	4770      	bx	lr

08006640 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f023 0210 	bic.w	r2, r3, #16
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800666a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	031b      	lsls	r3, r3, #12
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800667c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	621a      	str	r2, [r3, #32]
}
 8006694:	bf00      	nop
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr

0800669e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	f043 0307 	orr.w	r3, r3, #7
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	609a      	str	r2, [r3, #8]
}
 80066c8:	bf00      	nop
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr

080066d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b087      	sub	sp, #28
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]
 80066de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	021a      	lsls	r2, r3, #8
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	431a      	orrs	r2, r3
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	609a      	str	r2, [r3, #8]
}
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr

08006710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	2201      	movs	r2, #1
 8006724:	fa02 f303 	lsl.w	r3, r2, r3
 8006728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a1a      	ldr	r2, [r3, #32]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	43db      	mvns	r3, r3
 8006732:	401a      	ands	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	fa01 f303 	lsl.w	r3, r1, r3
 8006748:	431a      	orrs	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800676c:	2302      	movs	r3, #2
 800676e:	e046      	b.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a16      	ldr	r2, [pc, #88]	; (8006808 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00e      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067bc:	d009      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a12      	ldr	r2, [pc, #72]	; (800680c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a10      	ldr	r2, [pc, #64]	; (8006810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d10c      	bne.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800

08006814 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr

08006826 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr

08006838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e042      	b.n	80068d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fb fa6c 	bl	8001d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800687a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 ff5d 	bl	800773c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695a      	ldr	r2, [r3, #20]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08c      	sub	sp, #48	; 0x30
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	4613      	mov	r3, r2
 80068e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d156      	bne.n	80069a0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_UART_Transmit_DMA+0x26>
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e04f      	b.n	80069a2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	88fa      	ldrh	r2, [r7, #6]
 800690c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	88fa      	ldrh	r2, [r7, #6]
 8006912:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2221      	movs	r2, #33	; 0x21
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	4a21      	ldr	r2, [pc, #132]	; (80069ac <HAL_UART_Transmit_DMA+0xd4>)
 8006928:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	4a20      	ldr	r2, [pc, #128]	; (80069b0 <HAL_UART_Transmit_DMA+0xd8>)
 8006930:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	4a1f      	ldr	r2, [pc, #124]	; (80069b4 <HAL_UART_Transmit_DMA+0xdc>)
 8006938:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693e:	2200      	movs	r2, #0
 8006940:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006942:	f107 0308 	add.w	r3, r7, #8
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	6819      	ldr	r1, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3304      	adds	r3, #4
 8006956:	461a      	mov	r2, r3
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	f7fd f993 	bl	8003c84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006966:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3314      	adds	r3, #20
 800696e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	617b      	str	r3, [r7, #20]
   return(result);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3314      	adds	r3, #20
 8006986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006988:	627a      	str	r2, [r7, #36]	; 0x24
 800698a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6a39      	ldr	r1, [r7, #32]
 800698e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	61fb      	str	r3, [r7, #28]
   return(result);
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e5      	bne.n	8006968 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	e000      	b.n	80069a2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80069a0:	2302      	movs	r3, #2
  }
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3730      	adds	r7, #48	; 0x30
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	08006fd3 	.word	0x08006fd3
 80069b0:	0800706d 	.word	0x0800706d
 80069b4:	080071f1 	.word	0x080071f1

080069b8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	4613      	mov	r3, r2
 80069c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d112      	bne.n	80069f8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <HAL_UART_Receive_DMA+0x26>
 80069d8:	88fb      	ldrh	r3, [r7, #6]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e00b      	b.n	80069fa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	461a      	mov	r2, r3
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 fc48 	bl	8007284 <UART_Start_Receive_DMA>
 80069f4:	4603      	mov	r3, r0
 80069f6:	e000      	b.n	80069fa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b0ba      	sub	sp, #232	; 0xe8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10f      	bne.n	8006a6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d009      	beq.n	8006a6a <HAL_UART_IRQHandler+0x66>
 8006a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fdac 	bl	80075c0 <UART_Receive_IT>
      return;
 8006a68:	e25b      	b.n	8006f22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 80de 	beq.w	8006c30 <HAL_UART_IRQHandler+0x22c>
 8006a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d106      	bne.n	8006a8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 80d1 	beq.w	8006c30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <HAL_UART_IRQHandler+0xae>
 8006a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	f043 0201 	orr.w	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xd2>
 8006abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ace:	f043 0202 	orr.w	r2, r3, #2
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <HAL_UART_IRQHandler+0xf6>
 8006ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af2:	f043 0204 	orr.w	r2, r3, #4
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d011      	beq.n	8006b2a <HAL_UART_IRQHandler+0x126>
 8006b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d105      	bne.n	8006b1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	f043 0208 	orr.w	r2, r3, #8
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 81f2 	beq.w	8006f18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d008      	beq.n	8006b52 <HAL_UART_IRQHandler+0x14e>
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fd37 	bl	80075c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bf14      	ite	ne
 8006b60:	2301      	movne	r3, #1
 8006b62:	2300      	moveq	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d103      	bne.n	8006b7e <HAL_UART_IRQHandler+0x17a>
 8006b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d04f      	beq.n	8006c1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fc41 	bl	8007406 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d041      	beq.n	8006c16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3314      	adds	r3, #20
 8006b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3314      	adds	r3, #20
 8006bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1d9      	bne.n	8006b92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d013      	beq.n	8006c0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bea:	4a7e      	ldr	r2, [pc, #504]	; (8006de4 <HAL_UART_IRQHandler+0x3e0>)
 8006bec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fd f8e2 	bl	8003dbc <HAL_DMA_Abort_IT>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d016      	beq.n	8006c2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0c:	e00e      	b.n	8006c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f9ae 	bl	8006f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c14:	e00a      	b.n	8006c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f9aa 	bl	8006f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	e006      	b.n	8006c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f9a6 	bl	8006f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006c2a:	e175      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2c:	bf00      	nop
    return;
 8006c2e:	e173      	b.n	8006f18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	f040 814f 	bne.w	8006ed8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3e:	f003 0310 	and.w	r3, r3, #16
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8148 	beq.w	8006ed8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8141 	beq.w	8006ed8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c56:	2300      	movs	r3, #0
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60bb      	str	r3, [r7, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	60bb      	str	r3, [r7, #8]
 8006c6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 80b6 	beq.w	8006de8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8145 	beq.w	8006f1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	f080 813e 	bcs.w	8006f1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ca6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	f000 8088 	beq.w	8006dc4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	330c      	adds	r3, #12
 8006cba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	330c      	adds	r3, #12
 8006cdc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ce0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ce4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1d9      	bne.n	8006cb4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3314      	adds	r3, #20
 8006d06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d12:	f023 0301 	bic.w	r3, r3, #1
 8006d16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3314      	adds	r3, #20
 8006d20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e1      	bne.n	8006d00 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3314      	adds	r3, #20
 8006d42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e3      	bne.n	8006d3c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	330c      	adds	r3, #12
 8006d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d94:	f023 0310 	bic.w	r3, r3, #16
 8006d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	330c      	adds	r3, #12
 8006da2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006da6:	65ba      	str	r2, [r7, #88]	; 0x58
 8006da8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e3      	bne.n	8006d82 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fc ffc0 	bl	8003d44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f8d1 	bl	8006f82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006de0:	e09c      	b.n	8006f1c <HAL_UART_IRQHandler+0x518>
 8006de2:	bf00      	nop
 8006de4:	080074cb 	.word	0x080074cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 808e 	beq.w	8006f20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8089 	beq.w	8006f20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	330c      	adds	r3, #12
 8006e14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e32:	647a      	str	r2, [r7, #68]	; 0x44
 8006e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e3      	bne.n	8006e0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3314      	adds	r3, #20
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	623b      	str	r3, [r7, #32]
   return(result);
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	f023 0301 	bic.w	r3, r3, #1
 8006e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3314      	adds	r3, #20
 8006e66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e6a:	633a      	str	r2, [r7, #48]	; 0x30
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e3      	bne.n	8006e46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	e853 3f00 	ldrex	r3, [r3]
 8006e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0310 	bic.w	r3, r3, #16
 8006ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	330c      	adds	r3, #12
 8006eac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006eb0:	61fa      	str	r2, [r7, #28]
 8006eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	69b9      	ldr	r1, [r7, #24]
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e3      	bne.n	8006e8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f856 	bl	8006f82 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ed6:	e023      	b.n	8006f20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d009      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x4f4>
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fafe 	bl	80074f2 <UART_Transmit_IT>
    return;
 8006ef6:	e014      	b.n	8006f22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00e      	beq.n	8006f22 <HAL_UART_IRQHandler+0x51e>
 8006f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fb3d 	bl	8007590 <UART_EndTransmit_IT>
    return;
 8006f16:	e004      	b.n	8006f22 <HAL_UART_IRQHandler+0x51e>
    return;
 8006f18:	bf00      	nop
 8006f1a:	e002      	b.n	8006f22 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f1c:	bf00      	nop
 8006f1e:	e000      	b.n	8006f22 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f20:	bf00      	nop
  }
}
 8006f22:	37e8      	adds	r7, #232	; 0xe8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr

08006f3a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr

08006f4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr

08006f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr

08006f82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr

08006f98 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	b2db      	uxtb	r3, r3
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bc80      	pop	{r7}
 8006fd0:	4770      	bx	lr

08006fd2 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b090      	sub	sp, #64	; 0x40
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d137      	bne.n	800705e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3314      	adds	r3, #20
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	623b      	str	r3, [r7, #32]
   return(result);
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800700a:	63bb      	str	r3, [r7, #56]	; 0x38
 800700c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3314      	adds	r3, #20
 8007012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007014:	633a      	str	r2, [r7, #48]	; 0x30
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800701a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e5      	bne.n	8006ff4 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	330c      	adds	r3, #12
 800702e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	60fb      	str	r3, [r7, #12]
   return(result);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800703e:	637b      	str	r3, [r7, #52]	; 0x34
 8007040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	330c      	adds	r3, #12
 8007046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007048:	61fa      	str	r2, [r7, #28]
 800704a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	69b9      	ldr	r1, [r7, #24]
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	617b      	str	r3, [r7, #20]
   return(result);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e5      	bne.n	8007028 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800705c:	e002      	b.n	8007064 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800705e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007060:	f7ff ff62 	bl	8006f28 <HAL_UART_TxCpltCallback>
}
 8007064:	bf00      	nop
 8007066:	3740      	adds	r7, #64	; 0x40
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f7ff ff5d 	bl	8006f3a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007080:	bf00      	nop
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b09c      	sub	sp, #112	; 0x70
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d172      	bne.n	800718a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80070a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a6:	2200      	movs	r2, #0
 80070a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	330c      	adds	r3, #12
 80070b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80070c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	330c      	adds	r3, #12
 80070c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80070cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e5      	bne.n	80070aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3314      	adds	r3, #20
 80070e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	f023 0301 	bic.w	r3, r3, #1
 80070f4:	667b      	str	r3, [r7, #100]	; 0x64
 80070f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3314      	adds	r3, #20
 80070fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070fe:	647a      	str	r2, [r7, #68]	; 0x44
 8007100:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800710c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e5      	bne.n	80070de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3314      	adds	r3, #20
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	623b      	str	r3, [r7, #32]
   return(result);
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007128:	663b      	str	r3, [r7, #96]	; 0x60
 800712a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3314      	adds	r3, #20
 8007130:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007132:	633a      	str	r2, [r7, #48]	; 0x30
 8007134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e5      	bne.n	8007112 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007148:	2220      	movs	r2, #32
 800714a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	2b01      	cmp	r3, #1
 8007154:	d119      	bne.n	800718a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	330c      	adds	r3, #12
 800715c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	60fb      	str	r3, [r7, #12]
   return(result);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f023 0310 	bic.w	r3, r3, #16
 800716c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800716e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007176:	61fa      	str	r2, [r7, #28]
 8007178:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	69b9      	ldr	r1, [r7, #24]
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	617b      	str	r3, [r7, #20]
   return(result);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e5      	bne.n	8007156 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800718a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718c:	2200      	movs	r2, #0
 800718e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007194:	2b01      	cmp	r3, #1
 8007196:	d106      	bne.n	80071a6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800719a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800719c:	4619      	mov	r1, r3
 800719e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80071a0:	f7ff feef 	bl	8006f82 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071a4:	e002      	b.n	80071ac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80071a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80071a8:	f7ff fed0 	bl	8006f4c <HAL_UART_RxCpltCallback>
}
 80071ac:	bf00      	nop
 80071ae:	3770      	adds	r7, #112	; 0x70
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d108      	bne.n	80071e2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071d4:	085b      	lsrs	r3, r3, #1
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	4619      	mov	r1, r3
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff fed1 	bl	8006f82 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071e0:	e002      	b.n	80071e8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f7ff febb 	bl	8006f5e <HAL_UART_RxHalfCpltCallback>
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720c:	2b00      	cmp	r3, #0
 800720e:	bf14      	ite	ne
 8007210:	2301      	movne	r3, #1
 8007212:	2300      	moveq	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b21      	cmp	r3, #33	; 0x21
 8007222:	d108      	bne.n	8007236 <UART_DMAError+0x46>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2200      	movs	r2, #0
 800722e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007230:	68b8      	ldr	r0, [r7, #8]
 8007232:	f000 f8c1 	bl	80073b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b22      	cmp	r3, #34	; 0x22
 8007256:	d108      	bne.n	800726a <UART_DMAError+0x7a>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2200      	movs	r2, #0
 8007262:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007264:	68b8      	ldr	r0, [r7, #8]
 8007266:	f000 f8ce 	bl	8007406 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	f043 0210 	orr.w	r2, r3, #16
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007276:	68b8      	ldr	r0, [r7, #8]
 8007278:	f7ff fe7a 	bl	8006f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800727c:	bf00      	nop
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b098      	sub	sp, #96	; 0x60
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	88fa      	ldrh	r2, [r7, #6]
 800729c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2222      	movs	r2, #34	; 0x22
 80072a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b0:	4a3e      	ldr	r2, [pc, #248]	; (80073ac <UART_Start_Receive_DMA+0x128>)
 80072b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b8:	4a3d      	ldr	r2, [pc, #244]	; (80073b0 <UART_Start_Receive_DMA+0x12c>)
 80072ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c0:	4a3c      	ldr	r2, [pc, #240]	; (80073b4 <UART_Start_Receive_DMA+0x130>)
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c8:	2200      	movs	r2, #0
 80072ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80072cc:	f107 0308 	add.w	r3, r7, #8
 80072d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3304      	adds	r3, #4
 80072dc:	4619      	mov	r1, r3
 80072de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	88fb      	ldrh	r3, [r7, #6]
 80072e4:	f7fc fcce 	bl	8003c84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80072e8:	2300      	movs	r3, #0
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d019      	beq.n	800733a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	330c      	adds	r3, #12
 800730c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800731c:	65bb      	str	r3, [r7, #88]	; 0x58
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	330c      	adds	r3, #12
 8007324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007326:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007328:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800732c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e5      	bne.n	8007306 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3314      	adds	r3, #20
 8007340:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	f043 0301 	orr.w	r3, r3, #1
 8007350:	657b      	str	r3, [r7, #84]	; 0x54
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3314      	adds	r3, #20
 8007358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800735a:	63ba      	str	r2, [r7, #56]	; 0x38
 800735c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e5      	bne.n	800733a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3314      	adds	r3, #20
 8007374:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	617b      	str	r3, [r7, #20]
   return(result);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007384:	653b      	str	r3, [r7, #80]	; 0x50
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3314      	adds	r3, #20
 800738c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800738e:	627a      	str	r2, [r7, #36]	; 0x24
 8007390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6a39      	ldr	r1, [r7, #32]
 8007394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	61fb      	str	r3, [r7, #28]
   return(result);
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e5      	bne.n	800736e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3760      	adds	r7, #96	; 0x60
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	08007089 	.word	0x08007089
 80073b0:	080071b5 	.word	0x080071b5
 80073b4:	080071f1 	.word	0x080071f1

080073b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b089      	sub	sp, #36	; 0x24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	330c      	adds	r3, #12
 80073c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	330c      	adds	r3, #12
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	61ba      	str	r2, [r7, #24]
 80073e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6979      	ldr	r1, [r7, #20]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	613b      	str	r3, [r7, #16]
   return(result);
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e5      	bne.n	80073c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80073fc:	bf00      	nop
 80073fe:	3724      	adds	r7, #36	; 0x24
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr

08007406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007406:	b480      	push	{r7}
 8007408:	b095      	sub	sp, #84	; 0x54
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007424:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	330c      	adds	r3, #12
 800742c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800742e:	643a      	str	r2, [r7, #64]	; 0x40
 8007430:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e5      	bne.n	800740e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3314      	adds	r3, #20
 8007448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	61fb      	str	r3, [r7, #28]
   return(result);
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	f023 0301 	bic.w	r3, r3, #1
 8007458:	64bb      	str	r3, [r7, #72]	; 0x48
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3314      	adds	r3, #20
 8007460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007464:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e5      	bne.n	8007442 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	2b01      	cmp	r3, #1
 800747c:	d119      	bne.n	80074b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	330c      	adds	r3, #12
 8007484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	60bb      	str	r3, [r7, #8]
   return(result);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f023 0310 	bic.w	r3, r3, #16
 8007494:	647b      	str	r3, [r7, #68]	; 0x44
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	330c      	adds	r3, #12
 800749c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800749e:	61ba      	str	r2, [r7, #24]
 80074a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a2:	6979      	ldr	r1, [r7, #20]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	613b      	str	r3, [r7, #16]
   return(result);
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1e5      	bne.n	800747e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074c0:	bf00      	nop
 80074c2:	3754      	adds	r7, #84	; 0x54
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr

080074ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f7ff fd43 	bl	8006f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074ea:	bf00      	nop
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b21      	cmp	r3, #33	; 0x21
 8007504:	d13e      	bne.n	8007584 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750e:	d114      	bne.n	800753a <UART_Transmit_IT+0x48>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d110      	bne.n	800753a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800752c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	1c9a      	adds	r2, r3, #2
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	621a      	str	r2, [r3, #32]
 8007538:	e008      	b.n	800754c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	1c59      	adds	r1, r3, #1
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6211      	str	r1, [r2, #32]
 8007544:	781a      	ldrb	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29b      	uxth	r3, r3
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	4619      	mov	r1, r3
 800755a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10f      	bne.n	8007580 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800756e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800757e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	e000      	b.n	8007586 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007584:	2302      	movs	r3, #2
  }
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr

08007590 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff fcb9 	bl	8006f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08c      	sub	sp, #48	; 0x30
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b22      	cmp	r3, #34	; 0x22
 80075d2:	f040 80ae 	bne.w	8007732 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075de:	d117      	bne.n	8007610 <UART_Receive_IT+0x50>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d113      	bne.n	8007610 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fe:	b29a      	uxth	r2, r3
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	1c9a      	adds	r2, r3, #2
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	629a      	str	r2, [r3, #40]	; 0x28
 800760e:	e026      	b.n	800765e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007622:	d007      	beq.n	8007634 <UART_Receive_IT+0x74>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <UART_Receive_IT+0x82>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	b2da      	uxtb	r2, r3
 800763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	e008      	b.n	8007654 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800764e:	b2da      	uxtb	r2, r3
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29b      	uxth	r3, r3
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	4619      	mov	r1, r3
 800766c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800766e:	2b00      	cmp	r3, #0
 8007670:	d15d      	bne.n	800772e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0220 	bic.w	r2, r2, #32
 8007680:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007690:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	695a      	ldr	r2, [r3, #20]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0201 	bic.w	r2, r2, #1
 80076a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d135      	bne.n	8007724 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	330c      	adds	r3, #12
 80076c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	613b      	str	r3, [r7, #16]
   return(result);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f023 0310 	bic.w	r3, r3, #16
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076de:	623a      	str	r2, [r7, #32]
 80076e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	69f9      	ldr	r1, [r7, #28]
 80076e4:	6a3a      	ldr	r2, [r7, #32]
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e5      	bne.n	80076be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b10      	cmp	r3, #16
 80076fe:	d10a      	bne.n	8007716 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007700:	2300      	movs	r3, #0
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff fc30 	bl	8006f82 <HAL_UARTEx_RxEventCallback>
 8007722:	e002      	b.n	800772a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff fc11 	bl	8006f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	e002      	b.n	8007734 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	e000      	b.n	8007734 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007732:	2302      	movs	r3, #2
  }
}
 8007734:	4618      	mov	r0, r3
 8007736:	3730      	adds	r7, #48	; 0x30
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	689a      	ldr	r2, [r3, #8]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007776:	f023 030c 	bic.w	r3, r3, #12
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	430b      	orrs	r3, r1
 8007782:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a2c      	ldr	r2, [pc, #176]	; (8007850 <UART_SetConfig+0x114>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d103      	bne.n	80077ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80077a4:	f7fd fa6a 	bl	8004c7c <HAL_RCC_GetPCLK2Freq>
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	e002      	b.n	80077b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80077ac:	f7fd fa52 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 80077b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	009a      	lsls	r2, r3, #2
 80077bc:	441a      	add	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c8:	4a22      	ldr	r2, [pc, #136]	; (8007854 <UART_SetConfig+0x118>)
 80077ca:	fba2 2303 	umull	r2, r3, r2, r3
 80077ce:	095b      	lsrs	r3, r3, #5
 80077d0:	0119      	lsls	r1, r3, #4
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	009a      	lsls	r2, r3, #2
 80077dc:	441a      	add	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80077e8:	4b1a      	ldr	r3, [pc, #104]	; (8007854 <UART_SetConfig+0x118>)
 80077ea:	fba3 0302 	umull	r0, r3, r3, r2
 80077ee:	095b      	lsrs	r3, r3, #5
 80077f0:	2064      	movs	r0, #100	; 0x64
 80077f2:	fb00 f303 	mul.w	r3, r0, r3
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	3332      	adds	r3, #50	; 0x32
 80077fc:	4a15      	ldr	r2, [pc, #84]	; (8007854 <UART_SetConfig+0x118>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007808:	4419      	add	r1, r3
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4613      	mov	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	009a      	lsls	r2, r3, #2
 8007814:	441a      	add	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007820:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <UART_SetConfig+0x118>)
 8007822:	fba3 0302 	umull	r0, r3, r3, r2
 8007826:	095b      	lsrs	r3, r3, #5
 8007828:	2064      	movs	r0, #100	; 0x64
 800782a:	fb00 f303 	mul.w	r3, r0, r3
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	3332      	adds	r3, #50	; 0x32
 8007834:	4a07      	ldr	r2, [pc, #28]	; (8007854 <UART_SetConfig+0x118>)
 8007836:	fba2 2303 	umull	r2, r3, r2, r3
 800783a:	095b      	lsrs	r3, r3, #5
 800783c:	f003 020f 	and.w	r2, r3, #15
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	440a      	add	r2, r1
 8007846:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007848:	bf00      	nop
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	40013800 	.word	0x40013800
 8007854:	51eb851f 	.word	0x51eb851f

08007858 <atoi>:
 8007858:	220a      	movs	r2, #10
 800785a:	2100      	movs	r1, #0
 800785c:	f001 bc0e 	b.w	800907c <strtol>

08007860 <__cvt>:
 8007860:	2b00      	cmp	r3, #0
 8007862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007866:	461f      	mov	r7, r3
 8007868:	bfbb      	ittet	lt
 800786a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800786e:	461f      	movlt	r7, r3
 8007870:	2300      	movge	r3, #0
 8007872:	232d      	movlt	r3, #45	; 0x2d
 8007874:	b088      	sub	sp, #32
 8007876:	4614      	mov	r4, r2
 8007878:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800787a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800787c:	7013      	strb	r3, [r2, #0]
 800787e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007880:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007884:	f023 0820 	bic.w	r8, r3, #32
 8007888:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800788c:	d005      	beq.n	800789a <__cvt+0x3a>
 800788e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007892:	d100      	bne.n	8007896 <__cvt+0x36>
 8007894:	3501      	adds	r5, #1
 8007896:	2302      	movs	r3, #2
 8007898:	e000      	b.n	800789c <__cvt+0x3c>
 800789a:	2303      	movs	r3, #3
 800789c:	aa07      	add	r2, sp, #28
 800789e:	9204      	str	r2, [sp, #16]
 80078a0:	aa06      	add	r2, sp, #24
 80078a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80078a6:	e9cd 3500 	strd	r3, r5, [sp]
 80078aa:	4622      	mov	r2, r4
 80078ac:	463b      	mov	r3, r7
 80078ae:	f001 fd0b 	bl	80092c8 <_dtoa_r>
 80078b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078b6:	4606      	mov	r6, r0
 80078b8:	d102      	bne.n	80078c0 <__cvt+0x60>
 80078ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078bc:	07db      	lsls	r3, r3, #31
 80078be:	d522      	bpl.n	8007906 <__cvt+0xa6>
 80078c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078c4:	eb06 0905 	add.w	r9, r6, r5
 80078c8:	d110      	bne.n	80078ec <__cvt+0x8c>
 80078ca:	7833      	ldrb	r3, [r6, #0]
 80078cc:	2b30      	cmp	r3, #48	; 0x30
 80078ce:	d10a      	bne.n	80078e6 <__cvt+0x86>
 80078d0:	2200      	movs	r2, #0
 80078d2:	2300      	movs	r3, #0
 80078d4:	4620      	mov	r0, r4
 80078d6:	4639      	mov	r1, r7
 80078d8:	f7f9 f866 	bl	80009a8 <__aeabi_dcmpeq>
 80078dc:	b918      	cbnz	r0, 80078e6 <__cvt+0x86>
 80078de:	f1c5 0501 	rsb	r5, r5, #1
 80078e2:	f8ca 5000 	str.w	r5, [sl]
 80078e6:	f8da 3000 	ldr.w	r3, [sl]
 80078ea:	4499      	add	r9, r3
 80078ec:	2200      	movs	r2, #0
 80078ee:	2300      	movs	r3, #0
 80078f0:	4620      	mov	r0, r4
 80078f2:	4639      	mov	r1, r7
 80078f4:	f7f9 f858 	bl	80009a8 <__aeabi_dcmpeq>
 80078f8:	b108      	cbz	r0, 80078fe <__cvt+0x9e>
 80078fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80078fe:	2230      	movs	r2, #48	; 0x30
 8007900:	9b07      	ldr	r3, [sp, #28]
 8007902:	454b      	cmp	r3, r9
 8007904:	d307      	bcc.n	8007916 <__cvt+0xb6>
 8007906:	4630      	mov	r0, r6
 8007908:	9b07      	ldr	r3, [sp, #28]
 800790a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800790c:	1b9b      	subs	r3, r3, r6
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	b008      	add	sp, #32
 8007912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007916:	1c59      	adds	r1, r3, #1
 8007918:	9107      	str	r1, [sp, #28]
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	e7f0      	b.n	8007900 <__cvt+0xa0>

0800791e <__exponent>:
 800791e:	4603      	mov	r3, r0
 8007920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007922:	2900      	cmp	r1, #0
 8007924:	f803 2b02 	strb.w	r2, [r3], #2
 8007928:	bfb6      	itet	lt
 800792a:	222d      	movlt	r2, #45	; 0x2d
 800792c:	222b      	movge	r2, #43	; 0x2b
 800792e:	4249      	neglt	r1, r1
 8007930:	2909      	cmp	r1, #9
 8007932:	7042      	strb	r2, [r0, #1]
 8007934:	dd2a      	ble.n	800798c <__exponent+0x6e>
 8007936:	f10d 0207 	add.w	r2, sp, #7
 800793a:	4617      	mov	r7, r2
 800793c:	260a      	movs	r6, #10
 800793e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007942:	4694      	mov	ip, r2
 8007944:	fb06 1415 	mls	r4, r6, r5, r1
 8007948:	3430      	adds	r4, #48	; 0x30
 800794a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800794e:	460c      	mov	r4, r1
 8007950:	2c63      	cmp	r4, #99	; 0x63
 8007952:	4629      	mov	r1, r5
 8007954:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007958:	dcf1      	bgt.n	800793e <__exponent+0x20>
 800795a:	3130      	adds	r1, #48	; 0x30
 800795c:	f1ac 0402 	sub.w	r4, ip, #2
 8007960:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007964:	4622      	mov	r2, r4
 8007966:	1c41      	adds	r1, r0, #1
 8007968:	42ba      	cmp	r2, r7
 800796a:	d30a      	bcc.n	8007982 <__exponent+0x64>
 800796c:	f10d 0209 	add.w	r2, sp, #9
 8007970:	eba2 020c 	sub.w	r2, r2, ip
 8007974:	42bc      	cmp	r4, r7
 8007976:	bf88      	it	hi
 8007978:	2200      	movhi	r2, #0
 800797a:	4413      	add	r3, r2
 800797c:	1a18      	subs	r0, r3, r0
 800797e:	b003      	add	sp, #12
 8007980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007982:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007986:	f801 5f01 	strb.w	r5, [r1, #1]!
 800798a:	e7ed      	b.n	8007968 <__exponent+0x4a>
 800798c:	2330      	movs	r3, #48	; 0x30
 800798e:	3130      	adds	r1, #48	; 0x30
 8007990:	7083      	strb	r3, [r0, #2]
 8007992:	70c1      	strb	r1, [r0, #3]
 8007994:	1d03      	adds	r3, r0, #4
 8007996:	e7f1      	b.n	800797c <__exponent+0x5e>

08007998 <_printf_float>:
 8007998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799c:	b091      	sub	sp, #68	; 0x44
 800799e:	460c      	mov	r4, r1
 80079a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80079a4:	4616      	mov	r6, r2
 80079a6:	461f      	mov	r7, r3
 80079a8:	4605      	mov	r5, r0
 80079aa:	f001 fba9 	bl	8009100 <_localeconv_r>
 80079ae:	6803      	ldr	r3, [r0, #0]
 80079b0:	4618      	mov	r0, r3
 80079b2:	9309      	str	r3, [sp, #36]	; 0x24
 80079b4:	f7f8 fbcc 	bl	8000150 <strlen>
 80079b8:	2300      	movs	r3, #0
 80079ba:	930e      	str	r3, [sp, #56]	; 0x38
 80079bc:	f8d8 3000 	ldr.w	r3, [r8]
 80079c0:	900a      	str	r0, [sp, #40]	; 0x28
 80079c2:	3307      	adds	r3, #7
 80079c4:	f023 0307 	bic.w	r3, r3, #7
 80079c8:	f103 0208 	add.w	r2, r3, #8
 80079cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80079d0:	f8d4 b000 	ldr.w	fp, [r4]
 80079d4:	f8c8 2000 	str.w	r2, [r8]
 80079d8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80079dc:	4652      	mov	r2, sl
 80079de:	4643      	mov	r3, r8
 80079e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079e4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80079e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80079ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079ee:	4650      	mov	r0, sl
 80079f0:	4b9c      	ldr	r3, [pc, #624]	; (8007c64 <_printf_float+0x2cc>)
 80079f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079f4:	f7f9 f80a 	bl	8000a0c <__aeabi_dcmpun>
 80079f8:	bb70      	cbnz	r0, 8007a58 <_printf_float+0xc0>
 80079fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079fe:	4650      	mov	r0, sl
 8007a00:	4b98      	ldr	r3, [pc, #608]	; (8007c64 <_printf_float+0x2cc>)
 8007a02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a04:	f7f8 ffe4 	bl	80009d0 <__aeabi_dcmple>
 8007a08:	bb30      	cbnz	r0, 8007a58 <_printf_float+0xc0>
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4650      	mov	r0, sl
 8007a10:	4641      	mov	r1, r8
 8007a12:	f7f8 ffd3 	bl	80009bc <__aeabi_dcmplt>
 8007a16:	b110      	cbz	r0, 8007a1e <_printf_float+0x86>
 8007a18:	232d      	movs	r3, #45	; 0x2d
 8007a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a1e:	4a92      	ldr	r2, [pc, #584]	; (8007c68 <_printf_float+0x2d0>)
 8007a20:	4b92      	ldr	r3, [pc, #584]	; (8007c6c <_printf_float+0x2d4>)
 8007a22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007a26:	bf94      	ite	ls
 8007a28:	4690      	movls	r8, r2
 8007a2a:	4698      	movhi	r8, r3
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	f04f 0a00 	mov.w	sl, #0
 8007a32:	6123      	str	r3, [r4, #16]
 8007a34:	f02b 0304 	bic.w	r3, fp, #4
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	4633      	mov	r3, r6
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	4628      	mov	r0, r5
 8007a40:	9700      	str	r7, [sp, #0]
 8007a42:	aa0f      	add	r2, sp, #60	; 0x3c
 8007a44:	f000 f9d6 	bl	8007df4 <_printf_common>
 8007a48:	3001      	adds	r0, #1
 8007a4a:	f040 8090 	bne.w	8007b6e <_printf_float+0x1d6>
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a52:	b011      	add	sp, #68	; 0x44
 8007a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a58:	4652      	mov	r2, sl
 8007a5a:	4643      	mov	r3, r8
 8007a5c:	4650      	mov	r0, sl
 8007a5e:	4641      	mov	r1, r8
 8007a60:	f7f8 ffd4 	bl	8000a0c <__aeabi_dcmpun>
 8007a64:	b148      	cbz	r0, 8007a7a <_printf_float+0xe2>
 8007a66:	f1b8 0f00 	cmp.w	r8, #0
 8007a6a:	bfb8      	it	lt
 8007a6c:	232d      	movlt	r3, #45	; 0x2d
 8007a6e:	4a80      	ldr	r2, [pc, #512]	; (8007c70 <_printf_float+0x2d8>)
 8007a70:	bfb8      	it	lt
 8007a72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a76:	4b7f      	ldr	r3, [pc, #508]	; (8007c74 <_printf_float+0x2dc>)
 8007a78:	e7d3      	b.n	8007a22 <_printf_float+0x8a>
 8007a7a:	6863      	ldr	r3, [r4, #4]
 8007a7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	d142      	bne.n	8007b0a <_printf_float+0x172>
 8007a84:	2306      	movs	r3, #6
 8007a86:	6063      	str	r3, [r4, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	9206      	str	r2, [sp, #24]
 8007a8c:	aa0e      	add	r2, sp, #56	; 0x38
 8007a8e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007a92:	aa0d      	add	r2, sp, #52	; 0x34
 8007a94:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007a98:	9203      	str	r2, [sp, #12]
 8007a9a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007a9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	6863      	ldr	r3, [r4, #4]
 8007aa6:	4652      	mov	r2, sl
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	4628      	mov	r0, r5
 8007aac:	4643      	mov	r3, r8
 8007aae:	910b      	str	r1, [sp, #44]	; 0x2c
 8007ab0:	f7ff fed6 	bl	8007860 <__cvt>
 8007ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ab6:	4680      	mov	r8, r0
 8007ab8:	2947      	cmp	r1, #71	; 0x47
 8007aba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007abc:	d108      	bne.n	8007ad0 <_printf_float+0x138>
 8007abe:	1cc8      	adds	r0, r1, #3
 8007ac0:	db02      	blt.n	8007ac8 <_printf_float+0x130>
 8007ac2:	6863      	ldr	r3, [r4, #4]
 8007ac4:	4299      	cmp	r1, r3
 8007ac6:	dd40      	ble.n	8007b4a <_printf_float+0x1b2>
 8007ac8:	f1a9 0902 	sub.w	r9, r9, #2
 8007acc:	fa5f f989 	uxtb.w	r9, r9
 8007ad0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007ad4:	d81f      	bhi.n	8007b16 <_printf_float+0x17e>
 8007ad6:	464a      	mov	r2, r9
 8007ad8:	3901      	subs	r1, #1
 8007ada:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ade:	910d      	str	r1, [sp, #52]	; 0x34
 8007ae0:	f7ff ff1d 	bl	800791e <__exponent>
 8007ae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ae6:	4682      	mov	sl, r0
 8007ae8:	1813      	adds	r3, r2, r0
 8007aea:	2a01      	cmp	r2, #1
 8007aec:	6123      	str	r3, [r4, #16]
 8007aee:	dc02      	bgt.n	8007af6 <_printf_float+0x15e>
 8007af0:	6822      	ldr	r2, [r4, #0]
 8007af2:	07d2      	lsls	r2, r2, #31
 8007af4:	d501      	bpl.n	8007afa <_printf_float+0x162>
 8007af6:	3301      	adds	r3, #1
 8007af8:	6123      	str	r3, [r4, #16]
 8007afa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d09b      	beq.n	8007a3a <_printf_float+0xa2>
 8007b02:	232d      	movs	r3, #45	; 0x2d
 8007b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b08:	e797      	b.n	8007a3a <_printf_float+0xa2>
 8007b0a:	2947      	cmp	r1, #71	; 0x47
 8007b0c:	d1bc      	bne.n	8007a88 <_printf_float+0xf0>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1ba      	bne.n	8007a88 <_printf_float+0xf0>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e7b7      	b.n	8007a86 <_printf_float+0xee>
 8007b16:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007b1a:	d118      	bne.n	8007b4e <_printf_float+0x1b6>
 8007b1c:	2900      	cmp	r1, #0
 8007b1e:	6863      	ldr	r3, [r4, #4]
 8007b20:	dd0b      	ble.n	8007b3a <_printf_float+0x1a2>
 8007b22:	6121      	str	r1, [r4, #16]
 8007b24:	b913      	cbnz	r3, 8007b2c <_printf_float+0x194>
 8007b26:	6822      	ldr	r2, [r4, #0]
 8007b28:	07d0      	lsls	r0, r2, #31
 8007b2a:	d502      	bpl.n	8007b32 <_printf_float+0x19a>
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	440b      	add	r3, r1
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	f04f 0a00 	mov.w	sl, #0
 8007b36:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b38:	e7df      	b.n	8007afa <_printf_float+0x162>
 8007b3a:	b913      	cbnz	r3, 8007b42 <_printf_float+0x1aa>
 8007b3c:	6822      	ldr	r2, [r4, #0]
 8007b3e:	07d2      	lsls	r2, r2, #31
 8007b40:	d501      	bpl.n	8007b46 <_printf_float+0x1ae>
 8007b42:	3302      	adds	r3, #2
 8007b44:	e7f4      	b.n	8007b30 <_printf_float+0x198>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e7f2      	b.n	8007b30 <_printf_float+0x198>
 8007b4a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b50:	4299      	cmp	r1, r3
 8007b52:	db05      	blt.n	8007b60 <_printf_float+0x1c8>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	6121      	str	r1, [r4, #16]
 8007b58:	07d8      	lsls	r0, r3, #31
 8007b5a:	d5ea      	bpl.n	8007b32 <_printf_float+0x19a>
 8007b5c:	1c4b      	adds	r3, r1, #1
 8007b5e:	e7e7      	b.n	8007b30 <_printf_float+0x198>
 8007b60:	2900      	cmp	r1, #0
 8007b62:	bfcc      	ite	gt
 8007b64:	2201      	movgt	r2, #1
 8007b66:	f1c1 0202 	rsble	r2, r1, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	e7e0      	b.n	8007b30 <_printf_float+0x198>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	055a      	lsls	r2, r3, #21
 8007b72:	d407      	bmi.n	8007b84 <_printf_float+0x1ec>
 8007b74:	6923      	ldr	r3, [r4, #16]
 8007b76:	4642      	mov	r2, r8
 8007b78:	4631      	mov	r1, r6
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	47b8      	blx	r7
 8007b7e:	3001      	adds	r0, #1
 8007b80:	d12b      	bne.n	8007bda <_printf_float+0x242>
 8007b82:	e764      	b.n	8007a4e <_printf_float+0xb6>
 8007b84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b88:	f240 80dd 	bls.w	8007d46 <_printf_float+0x3ae>
 8007b8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b90:	2200      	movs	r2, #0
 8007b92:	2300      	movs	r3, #0
 8007b94:	f7f8 ff08 	bl	80009a8 <__aeabi_dcmpeq>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d033      	beq.n	8007c04 <_printf_float+0x26c>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	4a35      	ldr	r2, [pc, #212]	; (8007c78 <_printf_float+0x2e0>)
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f43f af51 	beq.w	8007a4e <_printf_float+0xb6>
 8007bac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	db02      	blt.n	8007bba <_printf_float+0x222>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	07d8      	lsls	r0, r3, #31
 8007bb8:	d50f      	bpl.n	8007bda <_printf_float+0x242>
 8007bba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	47b8      	blx	r7
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	f43f af42 	beq.w	8007a4e <_printf_float+0xb6>
 8007bca:	f04f 0800 	mov.w	r8, #0
 8007bce:	f104 091a 	add.w	r9, r4, #26
 8007bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	4543      	cmp	r3, r8
 8007bd8:	dc09      	bgt.n	8007bee <_printf_float+0x256>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	079b      	lsls	r3, r3, #30
 8007bde:	f100 8104 	bmi.w	8007dea <_printf_float+0x452>
 8007be2:	68e0      	ldr	r0, [r4, #12]
 8007be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007be6:	4298      	cmp	r0, r3
 8007be8:	bfb8      	it	lt
 8007bea:	4618      	movlt	r0, r3
 8007bec:	e731      	b.n	8007a52 <_printf_float+0xba>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	464a      	mov	r2, r9
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	47b8      	blx	r7
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	f43f af28 	beq.w	8007a4e <_printf_float+0xb6>
 8007bfe:	f108 0801 	add.w	r8, r8, #1
 8007c02:	e7e6      	b.n	8007bd2 <_printf_float+0x23a>
 8007c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	dc38      	bgt.n	8007c7c <_printf_float+0x2e4>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4628      	mov	r0, r5
 8007c10:	4a19      	ldr	r2, [pc, #100]	; (8007c78 <_printf_float+0x2e0>)
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	f43f af1a 	beq.w	8007a4e <_printf_float+0xb6>
 8007c1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	d102      	bne.n	8007c28 <_printf_float+0x290>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	07d9      	lsls	r1, r3, #31
 8007c26:	d5d8      	bpl.n	8007bda <_printf_float+0x242>
 8007c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4628      	mov	r0, r5
 8007c30:	47b8      	blx	r7
 8007c32:	3001      	adds	r0, #1
 8007c34:	f43f af0b 	beq.w	8007a4e <_printf_float+0xb6>
 8007c38:	f04f 0900 	mov.w	r9, #0
 8007c3c:	f104 0a1a 	add.w	sl, r4, #26
 8007c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c42:	425b      	negs	r3, r3
 8007c44:	454b      	cmp	r3, r9
 8007c46:	dc01      	bgt.n	8007c4c <_printf_float+0x2b4>
 8007c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c4a:	e794      	b.n	8007b76 <_printf_float+0x1de>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4652      	mov	r2, sl
 8007c50:	4631      	mov	r1, r6
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b8      	blx	r7
 8007c56:	3001      	adds	r0, #1
 8007c58:	f43f aef9 	beq.w	8007a4e <_printf_float+0xb6>
 8007c5c:	f109 0901 	add.w	r9, r9, #1
 8007c60:	e7ee      	b.n	8007c40 <_printf_float+0x2a8>
 8007c62:	bf00      	nop
 8007c64:	7fefffff 	.word	0x7fefffff
 8007c68:	0800bd02 	.word	0x0800bd02
 8007c6c:	0800bd06 	.word	0x0800bd06
 8007c70:	0800bd0a 	.word	0x0800bd0a
 8007c74:	0800bd0e 	.word	0x0800bd0e
 8007c78:	0800bd12 	.word	0x0800bd12
 8007c7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c80:	429a      	cmp	r2, r3
 8007c82:	bfa8      	it	ge
 8007c84:	461a      	movge	r2, r3
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	4691      	mov	r9, r2
 8007c8a:	dc37      	bgt.n	8007cfc <_printf_float+0x364>
 8007c8c:	f04f 0b00 	mov.w	fp, #0
 8007c90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c94:	f104 021a 	add.w	r2, r4, #26
 8007c98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007c9c:	ebaa 0309 	sub.w	r3, sl, r9
 8007ca0:	455b      	cmp	r3, fp
 8007ca2:	dc33      	bgt.n	8007d0c <_printf_float+0x374>
 8007ca4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	db3b      	blt.n	8007d24 <_printf_float+0x38c>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	07da      	lsls	r2, r3, #31
 8007cb0:	d438      	bmi.n	8007d24 <_printf_float+0x38c>
 8007cb2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007cb6:	eba2 0903 	sub.w	r9, r2, r3
 8007cba:	eba2 020a 	sub.w	r2, r2, sl
 8007cbe:	4591      	cmp	r9, r2
 8007cc0:	bfa8      	it	ge
 8007cc2:	4691      	movge	r9, r2
 8007cc4:	f1b9 0f00 	cmp.w	r9, #0
 8007cc8:	dc34      	bgt.n	8007d34 <_printf_float+0x39c>
 8007cca:	f04f 0800 	mov.w	r8, #0
 8007cce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cd2:	f104 0a1a 	add.w	sl, r4, #26
 8007cd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007cda:	1a9b      	subs	r3, r3, r2
 8007cdc:	eba3 0309 	sub.w	r3, r3, r9
 8007ce0:	4543      	cmp	r3, r8
 8007ce2:	f77f af7a 	ble.w	8007bda <_printf_float+0x242>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4652      	mov	r2, sl
 8007cea:	4631      	mov	r1, r6
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b8      	blx	r7
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	f43f aeac 	beq.w	8007a4e <_printf_float+0xb6>
 8007cf6:	f108 0801 	add.w	r8, r8, #1
 8007cfa:	e7ec      	b.n	8007cd6 <_printf_float+0x33e>
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4642      	mov	r2, r8
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b8      	blx	r7
 8007d06:	3001      	adds	r0, #1
 8007d08:	d1c0      	bne.n	8007c8c <_printf_float+0x2f4>
 8007d0a:	e6a0      	b.n	8007a4e <_printf_float+0xb6>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4628      	mov	r0, r5
 8007d12:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d14:	47b8      	blx	r7
 8007d16:	3001      	adds	r0, #1
 8007d18:	f43f ae99 	beq.w	8007a4e <_printf_float+0xb6>
 8007d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d1e:	f10b 0b01 	add.w	fp, fp, #1
 8007d22:	e7b9      	b.n	8007c98 <_printf_float+0x300>
 8007d24:	4631      	mov	r1, r6
 8007d26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	47b8      	blx	r7
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d1bf      	bne.n	8007cb2 <_printf_float+0x31a>
 8007d32:	e68c      	b.n	8007a4e <_printf_float+0xb6>
 8007d34:	464b      	mov	r3, r9
 8007d36:	4631      	mov	r1, r6
 8007d38:	4628      	mov	r0, r5
 8007d3a:	eb08 020a 	add.w	r2, r8, sl
 8007d3e:	47b8      	blx	r7
 8007d40:	3001      	adds	r0, #1
 8007d42:	d1c2      	bne.n	8007cca <_printf_float+0x332>
 8007d44:	e683      	b.n	8007a4e <_printf_float+0xb6>
 8007d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d48:	2a01      	cmp	r2, #1
 8007d4a:	dc01      	bgt.n	8007d50 <_printf_float+0x3b8>
 8007d4c:	07db      	lsls	r3, r3, #31
 8007d4e:	d539      	bpl.n	8007dc4 <_printf_float+0x42c>
 8007d50:	2301      	movs	r3, #1
 8007d52:	4642      	mov	r2, r8
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f43f ae77 	beq.w	8007a4e <_printf_float+0xb6>
 8007d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d64:	4631      	mov	r1, r6
 8007d66:	4628      	mov	r0, r5
 8007d68:	47b8      	blx	r7
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	f43f ae6f 	beq.w	8007a4e <_printf_float+0xb6>
 8007d70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d74:	2200      	movs	r2, #0
 8007d76:	2300      	movs	r3, #0
 8007d78:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007d7c:	f7f8 fe14 	bl	80009a8 <__aeabi_dcmpeq>
 8007d80:	b9d8      	cbnz	r0, 8007dba <_printf_float+0x422>
 8007d82:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8007d86:	f108 0201 	add.w	r2, r8, #1
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	47b8      	blx	r7
 8007d90:	3001      	adds	r0, #1
 8007d92:	d10e      	bne.n	8007db2 <_printf_float+0x41a>
 8007d94:	e65b      	b.n	8007a4e <_printf_float+0xb6>
 8007d96:	2301      	movs	r3, #1
 8007d98:	464a      	mov	r2, r9
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	47b8      	blx	r7
 8007da0:	3001      	adds	r0, #1
 8007da2:	f43f ae54 	beq.w	8007a4e <_printf_float+0xb6>
 8007da6:	f108 0801 	add.w	r8, r8, #1
 8007daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dac:	3b01      	subs	r3, #1
 8007dae:	4543      	cmp	r3, r8
 8007db0:	dcf1      	bgt.n	8007d96 <_printf_float+0x3fe>
 8007db2:	4653      	mov	r3, sl
 8007db4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007db8:	e6de      	b.n	8007b78 <_printf_float+0x1e0>
 8007dba:	f04f 0800 	mov.w	r8, #0
 8007dbe:	f104 091a 	add.w	r9, r4, #26
 8007dc2:	e7f2      	b.n	8007daa <_printf_float+0x412>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	4642      	mov	r2, r8
 8007dc8:	e7df      	b.n	8007d8a <_printf_float+0x3f2>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	464a      	mov	r2, r9
 8007dce:	4631      	mov	r1, r6
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	47b8      	blx	r7
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	f43f ae3a 	beq.w	8007a4e <_printf_float+0xb6>
 8007dda:	f108 0801 	add.w	r8, r8, #1
 8007dde:	68e3      	ldr	r3, [r4, #12]
 8007de0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007de2:	1a5b      	subs	r3, r3, r1
 8007de4:	4543      	cmp	r3, r8
 8007de6:	dcf0      	bgt.n	8007dca <_printf_float+0x432>
 8007de8:	e6fb      	b.n	8007be2 <_printf_float+0x24a>
 8007dea:	f04f 0800 	mov.w	r8, #0
 8007dee:	f104 0919 	add.w	r9, r4, #25
 8007df2:	e7f4      	b.n	8007dde <_printf_float+0x446>

08007df4 <_printf_common>:
 8007df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	4616      	mov	r6, r2
 8007dfa:	4699      	mov	r9, r3
 8007dfc:	688a      	ldr	r2, [r1, #8]
 8007dfe:	690b      	ldr	r3, [r1, #16]
 8007e00:	4607      	mov	r7, r0
 8007e02:	4293      	cmp	r3, r2
 8007e04:	bfb8      	it	lt
 8007e06:	4613      	movlt	r3, r2
 8007e08:	6033      	str	r3, [r6, #0]
 8007e0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e0e:	460c      	mov	r4, r1
 8007e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e14:	b10a      	cbz	r2, 8007e1a <_printf_common+0x26>
 8007e16:	3301      	adds	r3, #1
 8007e18:	6033      	str	r3, [r6, #0]
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	0699      	lsls	r1, r3, #26
 8007e1e:	bf42      	ittt	mi
 8007e20:	6833      	ldrmi	r3, [r6, #0]
 8007e22:	3302      	addmi	r3, #2
 8007e24:	6033      	strmi	r3, [r6, #0]
 8007e26:	6825      	ldr	r5, [r4, #0]
 8007e28:	f015 0506 	ands.w	r5, r5, #6
 8007e2c:	d106      	bne.n	8007e3c <_printf_common+0x48>
 8007e2e:	f104 0a19 	add.w	sl, r4, #25
 8007e32:	68e3      	ldr	r3, [r4, #12]
 8007e34:	6832      	ldr	r2, [r6, #0]
 8007e36:	1a9b      	subs	r3, r3, r2
 8007e38:	42ab      	cmp	r3, r5
 8007e3a:	dc2b      	bgt.n	8007e94 <_printf_common+0xa0>
 8007e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e40:	1e13      	subs	r3, r2, #0
 8007e42:	6822      	ldr	r2, [r4, #0]
 8007e44:	bf18      	it	ne
 8007e46:	2301      	movne	r3, #1
 8007e48:	0692      	lsls	r2, r2, #26
 8007e4a:	d430      	bmi.n	8007eae <_printf_common+0xba>
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	4638      	mov	r0, r7
 8007e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e54:	47c0      	blx	r8
 8007e56:	3001      	adds	r0, #1
 8007e58:	d023      	beq.n	8007ea2 <_printf_common+0xae>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	6922      	ldr	r2, [r4, #16]
 8007e5e:	f003 0306 	and.w	r3, r3, #6
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	bf14      	ite	ne
 8007e66:	2500      	movne	r5, #0
 8007e68:	6833      	ldreq	r3, [r6, #0]
 8007e6a:	f04f 0600 	mov.w	r6, #0
 8007e6e:	bf08      	it	eq
 8007e70:	68e5      	ldreq	r5, [r4, #12]
 8007e72:	f104 041a 	add.w	r4, r4, #26
 8007e76:	bf08      	it	eq
 8007e78:	1aed      	subeq	r5, r5, r3
 8007e7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007e7e:	bf08      	it	eq
 8007e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e84:	4293      	cmp	r3, r2
 8007e86:	bfc4      	itt	gt
 8007e88:	1a9b      	subgt	r3, r3, r2
 8007e8a:	18ed      	addgt	r5, r5, r3
 8007e8c:	42b5      	cmp	r5, r6
 8007e8e:	d11a      	bne.n	8007ec6 <_printf_common+0xd2>
 8007e90:	2000      	movs	r0, #0
 8007e92:	e008      	b.n	8007ea6 <_printf_common+0xb2>
 8007e94:	2301      	movs	r3, #1
 8007e96:	4652      	mov	r2, sl
 8007e98:	4649      	mov	r1, r9
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	47c0      	blx	r8
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d103      	bne.n	8007eaa <_printf_common+0xb6>
 8007ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eaa:	3501      	adds	r5, #1
 8007eac:	e7c1      	b.n	8007e32 <_printf_common+0x3e>
 8007eae:	2030      	movs	r0, #48	; 0x30
 8007eb0:	18e1      	adds	r1, r4, r3
 8007eb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ebc:	4422      	add	r2, r4
 8007ebe:	3302      	adds	r3, #2
 8007ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ec4:	e7c2      	b.n	8007e4c <_printf_common+0x58>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4622      	mov	r2, r4
 8007eca:	4649      	mov	r1, r9
 8007ecc:	4638      	mov	r0, r7
 8007ece:	47c0      	blx	r8
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d0e6      	beq.n	8007ea2 <_printf_common+0xae>
 8007ed4:	3601      	adds	r6, #1
 8007ed6:	e7d9      	b.n	8007e8c <_printf_common+0x98>

08007ed8 <_printf_i>:
 8007ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	7e0f      	ldrb	r7, [r1, #24]
 8007ede:	4691      	mov	r9, r2
 8007ee0:	2f78      	cmp	r7, #120	; 0x78
 8007ee2:	4680      	mov	r8, r0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	469a      	mov	sl, r3
 8007ee8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eee:	d807      	bhi.n	8007f00 <_printf_i+0x28>
 8007ef0:	2f62      	cmp	r7, #98	; 0x62
 8007ef2:	d80a      	bhi.n	8007f0a <_printf_i+0x32>
 8007ef4:	2f00      	cmp	r7, #0
 8007ef6:	f000 80d5 	beq.w	80080a4 <_printf_i+0x1cc>
 8007efa:	2f58      	cmp	r7, #88	; 0x58
 8007efc:	f000 80c1 	beq.w	8008082 <_printf_i+0x1aa>
 8007f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f08:	e03a      	b.n	8007f80 <_printf_i+0xa8>
 8007f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f0e:	2b15      	cmp	r3, #21
 8007f10:	d8f6      	bhi.n	8007f00 <_printf_i+0x28>
 8007f12:	a101      	add	r1, pc, #4	; (adr r1, 8007f18 <_printf_i+0x40>)
 8007f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f18:	08007f71 	.word	0x08007f71
 8007f1c:	08007f85 	.word	0x08007f85
 8007f20:	08007f01 	.word	0x08007f01
 8007f24:	08007f01 	.word	0x08007f01
 8007f28:	08007f01 	.word	0x08007f01
 8007f2c:	08007f01 	.word	0x08007f01
 8007f30:	08007f85 	.word	0x08007f85
 8007f34:	08007f01 	.word	0x08007f01
 8007f38:	08007f01 	.word	0x08007f01
 8007f3c:	08007f01 	.word	0x08007f01
 8007f40:	08007f01 	.word	0x08007f01
 8007f44:	0800808b 	.word	0x0800808b
 8007f48:	08007fb1 	.word	0x08007fb1
 8007f4c:	08008045 	.word	0x08008045
 8007f50:	08007f01 	.word	0x08007f01
 8007f54:	08007f01 	.word	0x08007f01
 8007f58:	080080ad 	.word	0x080080ad
 8007f5c:	08007f01 	.word	0x08007f01
 8007f60:	08007fb1 	.word	0x08007fb1
 8007f64:	08007f01 	.word	0x08007f01
 8007f68:	08007f01 	.word	0x08007f01
 8007f6c:	0800804d 	.word	0x0800804d
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	1d1a      	adds	r2, r3, #4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	602a      	str	r2, [r5, #0]
 8007f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f80:	2301      	movs	r3, #1
 8007f82:	e0a0      	b.n	80080c6 <_printf_i+0x1ee>
 8007f84:	6820      	ldr	r0, [r4, #0]
 8007f86:	682b      	ldr	r3, [r5, #0]
 8007f88:	0607      	lsls	r7, r0, #24
 8007f8a:	f103 0104 	add.w	r1, r3, #4
 8007f8e:	6029      	str	r1, [r5, #0]
 8007f90:	d501      	bpl.n	8007f96 <_printf_i+0xbe>
 8007f92:	681e      	ldr	r6, [r3, #0]
 8007f94:	e003      	b.n	8007f9e <_printf_i+0xc6>
 8007f96:	0646      	lsls	r6, r0, #25
 8007f98:	d5fb      	bpl.n	8007f92 <_printf_i+0xba>
 8007f9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f9e:	2e00      	cmp	r6, #0
 8007fa0:	da03      	bge.n	8007faa <_printf_i+0xd2>
 8007fa2:	232d      	movs	r3, #45	; 0x2d
 8007fa4:	4276      	negs	r6, r6
 8007fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007faa:	230a      	movs	r3, #10
 8007fac:	4859      	ldr	r0, [pc, #356]	; (8008114 <_printf_i+0x23c>)
 8007fae:	e012      	b.n	8007fd6 <_printf_i+0xfe>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	6820      	ldr	r0, [r4, #0]
 8007fb4:	1d19      	adds	r1, r3, #4
 8007fb6:	6029      	str	r1, [r5, #0]
 8007fb8:	0605      	lsls	r5, r0, #24
 8007fba:	d501      	bpl.n	8007fc0 <_printf_i+0xe8>
 8007fbc:	681e      	ldr	r6, [r3, #0]
 8007fbe:	e002      	b.n	8007fc6 <_printf_i+0xee>
 8007fc0:	0641      	lsls	r1, r0, #25
 8007fc2:	d5fb      	bpl.n	8007fbc <_printf_i+0xe4>
 8007fc4:	881e      	ldrh	r6, [r3, #0]
 8007fc6:	2f6f      	cmp	r7, #111	; 0x6f
 8007fc8:	bf0c      	ite	eq
 8007fca:	2308      	moveq	r3, #8
 8007fcc:	230a      	movne	r3, #10
 8007fce:	4851      	ldr	r0, [pc, #324]	; (8008114 <_printf_i+0x23c>)
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fd6:	6865      	ldr	r5, [r4, #4]
 8007fd8:	2d00      	cmp	r5, #0
 8007fda:	bfa8      	it	ge
 8007fdc:	6821      	ldrge	r1, [r4, #0]
 8007fde:	60a5      	str	r5, [r4, #8]
 8007fe0:	bfa4      	itt	ge
 8007fe2:	f021 0104 	bicge.w	r1, r1, #4
 8007fe6:	6021      	strge	r1, [r4, #0]
 8007fe8:	b90e      	cbnz	r6, 8007fee <_printf_i+0x116>
 8007fea:	2d00      	cmp	r5, #0
 8007fec:	d04b      	beq.n	8008086 <_printf_i+0x1ae>
 8007fee:	4615      	mov	r5, r2
 8007ff0:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ff4:	fb03 6711 	mls	r7, r3, r1, r6
 8007ff8:	5dc7      	ldrb	r7, [r0, r7]
 8007ffa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ffe:	4637      	mov	r7, r6
 8008000:	42bb      	cmp	r3, r7
 8008002:	460e      	mov	r6, r1
 8008004:	d9f4      	bls.n	8007ff0 <_printf_i+0x118>
 8008006:	2b08      	cmp	r3, #8
 8008008:	d10b      	bne.n	8008022 <_printf_i+0x14a>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	07de      	lsls	r6, r3, #31
 800800e:	d508      	bpl.n	8008022 <_printf_i+0x14a>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	6861      	ldr	r1, [r4, #4]
 8008014:	4299      	cmp	r1, r3
 8008016:	bfde      	ittt	le
 8008018:	2330      	movle	r3, #48	; 0x30
 800801a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800801e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008022:	1b52      	subs	r2, r2, r5
 8008024:	6122      	str	r2, [r4, #16]
 8008026:	464b      	mov	r3, r9
 8008028:	4621      	mov	r1, r4
 800802a:	4640      	mov	r0, r8
 800802c:	f8cd a000 	str.w	sl, [sp]
 8008030:	aa03      	add	r2, sp, #12
 8008032:	f7ff fedf 	bl	8007df4 <_printf_common>
 8008036:	3001      	adds	r0, #1
 8008038:	d14a      	bne.n	80080d0 <_printf_i+0x1f8>
 800803a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800803e:	b004      	add	sp, #16
 8008040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	f043 0320 	orr.w	r3, r3, #32
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	2778      	movs	r7, #120	; 0x78
 800804e:	4832      	ldr	r0, [pc, #200]	; (8008118 <_printf_i+0x240>)
 8008050:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	6829      	ldr	r1, [r5, #0]
 8008058:	061f      	lsls	r7, r3, #24
 800805a:	f851 6b04 	ldr.w	r6, [r1], #4
 800805e:	d402      	bmi.n	8008066 <_printf_i+0x18e>
 8008060:	065f      	lsls	r7, r3, #25
 8008062:	bf48      	it	mi
 8008064:	b2b6      	uxthmi	r6, r6
 8008066:	07df      	lsls	r7, r3, #31
 8008068:	bf48      	it	mi
 800806a:	f043 0320 	orrmi.w	r3, r3, #32
 800806e:	6029      	str	r1, [r5, #0]
 8008070:	bf48      	it	mi
 8008072:	6023      	strmi	r3, [r4, #0]
 8008074:	b91e      	cbnz	r6, 800807e <_printf_i+0x1a6>
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	f023 0320 	bic.w	r3, r3, #32
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	2310      	movs	r3, #16
 8008080:	e7a6      	b.n	8007fd0 <_printf_i+0xf8>
 8008082:	4824      	ldr	r0, [pc, #144]	; (8008114 <_printf_i+0x23c>)
 8008084:	e7e4      	b.n	8008050 <_printf_i+0x178>
 8008086:	4615      	mov	r5, r2
 8008088:	e7bd      	b.n	8008006 <_printf_i+0x12e>
 800808a:	682b      	ldr	r3, [r5, #0]
 800808c:	6826      	ldr	r6, [r4, #0]
 800808e:	1d18      	adds	r0, r3, #4
 8008090:	6961      	ldr	r1, [r4, #20]
 8008092:	6028      	str	r0, [r5, #0]
 8008094:	0635      	lsls	r5, r6, #24
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	d501      	bpl.n	800809e <_printf_i+0x1c6>
 800809a:	6019      	str	r1, [r3, #0]
 800809c:	e002      	b.n	80080a4 <_printf_i+0x1cc>
 800809e:	0670      	lsls	r0, r6, #25
 80080a0:	d5fb      	bpl.n	800809a <_printf_i+0x1c2>
 80080a2:	8019      	strh	r1, [r3, #0]
 80080a4:	2300      	movs	r3, #0
 80080a6:	4615      	mov	r5, r2
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	e7bc      	b.n	8008026 <_printf_i+0x14e>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	2100      	movs	r1, #0
 80080b0:	1d1a      	adds	r2, r3, #4
 80080b2:	602a      	str	r2, [r5, #0]
 80080b4:	681d      	ldr	r5, [r3, #0]
 80080b6:	6862      	ldr	r2, [r4, #4]
 80080b8:	4628      	mov	r0, r5
 80080ba:	f001 f852 	bl	8009162 <memchr>
 80080be:	b108      	cbz	r0, 80080c4 <_printf_i+0x1ec>
 80080c0:	1b40      	subs	r0, r0, r5
 80080c2:	6060      	str	r0, [r4, #4]
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	6123      	str	r3, [r4, #16]
 80080c8:	2300      	movs	r3, #0
 80080ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ce:	e7aa      	b.n	8008026 <_printf_i+0x14e>
 80080d0:	462a      	mov	r2, r5
 80080d2:	4649      	mov	r1, r9
 80080d4:	4640      	mov	r0, r8
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	47d0      	blx	sl
 80080da:	3001      	adds	r0, #1
 80080dc:	d0ad      	beq.n	800803a <_printf_i+0x162>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	079b      	lsls	r3, r3, #30
 80080e2:	d413      	bmi.n	800810c <_printf_i+0x234>
 80080e4:	68e0      	ldr	r0, [r4, #12]
 80080e6:	9b03      	ldr	r3, [sp, #12]
 80080e8:	4298      	cmp	r0, r3
 80080ea:	bfb8      	it	lt
 80080ec:	4618      	movlt	r0, r3
 80080ee:	e7a6      	b.n	800803e <_printf_i+0x166>
 80080f0:	2301      	movs	r3, #1
 80080f2:	4632      	mov	r2, r6
 80080f4:	4649      	mov	r1, r9
 80080f6:	4640      	mov	r0, r8
 80080f8:	47d0      	blx	sl
 80080fa:	3001      	adds	r0, #1
 80080fc:	d09d      	beq.n	800803a <_printf_i+0x162>
 80080fe:	3501      	adds	r5, #1
 8008100:	68e3      	ldr	r3, [r4, #12]
 8008102:	9903      	ldr	r1, [sp, #12]
 8008104:	1a5b      	subs	r3, r3, r1
 8008106:	42ab      	cmp	r3, r5
 8008108:	dcf2      	bgt.n	80080f0 <_printf_i+0x218>
 800810a:	e7eb      	b.n	80080e4 <_printf_i+0x20c>
 800810c:	2500      	movs	r5, #0
 800810e:	f104 0619 	add.w	r6, r4, #25
 8008112:	e7f5      	b.n	8008100 <_printf_i+0x228>
 8008114:	0800bd14 	.word	0x0800bd14
 8008118:	0800bd25 	.word	0x0800bd25

0800811c <siprintf>:
 800811c:	b40e      	push	{r1, r2, r3}
 800811e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008122:	b500      	push	{lr}
 8008124:	b09c      	sub	sp, #112	; 0x70
 8008126:	ab1d      	add	r3, sp, #116	; 0x74
 8008128:	9002      	str	r0, [sp, #8]
 800812a:	9006      	str	r0, [sp, #24]
 800812c:	9107      	str	r1, [sp, #28]
 800812e:	9104      	str	r1, [sp, #16]
 8008130:	4808      	ldr	r0, [pc, #32]	; (8008154 <siprintf+0x38>)
 8008132:	4909      	ldr	r1, [pc, #36]	; (8008158 <siprintf+0x3c>)
 8008134:	f853 2b04 	ldr.w	r2, [r3], #4
 8008138:	9105      	str	r1, [sp, #20]
 800813a:	6800      	ldr	r0, [r0, #0]
 800813c:	a902      	add	r1, sp, #8
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	f002 fa5a 	bl	800a5f8 <_svfiprintf_r>
 8008144:	2200      	movs	r2, #0
 8008146:	9b02      	ldr	r3, [sp, #8]
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	b01c      	add	sp, #112	; 0x70
 800814c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008150:	b003      	add	sp, #12
 8008152:	4770      	bx	lr
 8008154:	20000248 	.word	0x20000248
 8008158:	ffff0208 	.word	0xffff0208

0800815c <std>:
 800815c:	2300      	movs	r3, #0
 800815e:	b510      	push	{r4, lr}
 8008160:	4604      	mov	r4, r0
 8008162:	e9c0 3300 	strd	r3, r3, [r0]
 8008166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800816a:	6083      	str	r3, [r0, #8]
 800816c:	8181      	strh	r1, [r0, #12]
 800816e:	6643      	str	r3, [r0, #100]	; 0x64
 8008170:	81c2      	strh	r2, [r0, #14]
 8008172:	6183      	str	r3, [r0, #24]
 8008174:	4619      	mov	r1, r3
 8008176:	2208      	movs	r2, #8
 8008178:	305c      	adds	r0, #92	; 0x5c
 800817a:	f000 ffb9 	bl	80090f0 <memset>
 800817e:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <std+0x58>)
 8008180:	6224      	str	r4, [r4, #32]
 8008182:	6263      	str	r3, [r4, #36]	; 0x24
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <std+0x5c>)
 8008186:	62a3      	str	r3, [r4, #40]	; 0x28
 8008188:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <std+0x60>)
 800818a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800818c:	4b0c      	ldr	r3, [pc, #48]	; (80081c0 <std+0x64>)
 800818e:	6323      	str	r3, [r4, #48]	; 0x30
 8008190:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <std+0x68>)
 8008192:	429c      	cmp	r4, r3
 8008194:	d006      	beq.n	80081a4 <std+0x48>
 8008196:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800819a:	4294      	cmp	r4, r2
 800819c:	d002      	beq.n	80081a4 <std+0x48>
 800819e:	33d0      	adds	r3, #208	; 0xd0
 80081a0:	429c      	cmp	r4, r3
 80081a2:	d105      	bne.n	80081b0 <std+0x54>
 80081a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ac:	f000 bfd6 	b.w	800915c <__retarget_lock_init_recursive>
 80081b0:	bd10      	pop	{r4, pc}
 80081b2:	bf00      	nop
 80081b4:	0800b40d 	.word	0x0800b40d
 80081b8:	0800b42f 	.word	0x0800b42f
 80081bc:	0800b467 	.word	0x0800b467
 80081c0:	0800b48b 	.word	0x0800b48b
 80081c4:	200005dc 	.word	0x200005dc

080081c8 <stdio_exit_handler>:
 80081c8:	4a02      	ldr	r2, [pc, #8]	; (80081d4 <stdio_exit_handler+0xc>)
 80081ca:	4903      	ldr	r1, [pc, #12]	; (80081d8 <stdio_exit_handler+0x10>)
 80081cc:	4803      	ldr	r0, [pc, #12]	; (80081dc <stdio_exit_handler+0x14>)
 80081ce:	f000 bf5f 	b.w	8009090 <_fwalk_sglue>
 80081d2:	bf00      	nop
 80081d4:	20000084 	.word	0x20000084
 80081d8:	0800aa6d 	.word	0x0800aa6d
 80081dc:	200001fc 	.word	0x200001fc

080081e0 <cleanup_stdio>:
 80081e0:	6841      	ldr	r1, [r0, #4]
 80081e2:	4b0c      	ldr	r3, [pc, #48]	; (8008214 <cleanup_stdio+0x34>)
 80081e4:	b510      	push	{r4, lr}
 80081e6:	4299      	cmp	r1, r3
 80081e8:	4604      	mov	r4, r0
 80081ea:	d001      	beq.n	80081f0 <cleanup_stdio+0x10>
 80081ec:	f002 fc3e 	bl	800aa6c <_fflush_r>
 80081f0:	68a1      	ldr	r1, [r4, #8]
 80081f2:	4b09      	ldr	r3, [pc, #36]	; (8008218 <cleanup_stdio+0x38>)
 80081f4:	4299      	cmp	r1, r3
 80081f6:	d002      	beq.n	80081fe <cleanup_stdio+0x1e>
 80081f8:	4620      	mov	r0, r4
 80081fa:	f002 fc37 	bl	800aa6c <_fflush_r>
 80081fe:	68e1      	ldr	r1, [r4, #12]
 8008200:	4b06      	ldr	r3, [pc, #24]	; (800821c <cleanup_stdio+0x3c>)
 8008202:	4299      	cmp	r1, r3
 8008204:	d004      	beq.n	8008210 <cleanup_stdio+0x30>
 8008206:	4620      	mov	r0, r4
 8008208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800820c:	f002 bc2e 	b.w	800aa6c <_fflush_r>
 8008210:	bd10      	pop	{r4, pc}
 8008212:	bf00      	nop
 8008214:	200005dc 	.word	0x200005dc
 8008218:	20000644 	.word	0x20000644
 800821c:	200006ac 	.word	0x200006ac

08008220 <global_stdio_init.part.0>:
 8008220:	b510      	push	{r4, lr}
 8008222:	4b0b      	ldr	r3, [pc, #44]	; (8008250 <global_stdio_init.part.0+0x30>)
 8008224:	4c0b      	ldr	r4, [pc, #44]	; (8008254 <global_stdio_init.part.0+0x34>)
 8008226:	4a0c      	ldr	r2, [pc, #48]	; (8008258 <global_stdio_init.part.0+0x38>)
 8008228:	4620      	mov	r0, r4
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	2104      	movs	r1, #4
 800822e:	2200      	movs	r2, #0
 8008230:	f7ff ff94 	bl	800815c <std>
 8008234:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008238:	2201      	movs	r2, #1
 800823a:	2109      	movs	r1, #9
 800823c:	f7ff ff8e 	bl	800815c <std>
 8008240:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008244:	2202      	movs	r2, #2
 8008246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800824a:	2112      	movs	r1, #18
 800824c:	f7ff bf86 	b.w	800815c <std>
 8008250:	20000714 	.word	0x20000714
 8008254:	200005dc 	.word	0x200005dc
 8008258:	080081c9 	.word	0x080081c9

0800825c <__sfp_lock_acquire>:
 800825c:	4801      	ldr	r0, [pc, #4]	; (8008264 <__sfp_lock_acquire+0x8>)
 800825e:	f000 bf7e 	b.w	800915e <__retarget_lock_acquire_recursive>
 8008262:	bf00      	nop
 8008264:	20000719 	.word	0x20000719

08008268 <__sfp_lock_release>:
 8008268:	4801      	ldr	r0, [pc, #4]	; (8008270 <__sfp_lock_release+0x8>)
 800826a:	f000 bf79 	b.w	8009160 <__retarget_lock_release_recursive>
 800826e:	bf00      	nop
 8008270:	20000719 	.word	0x20000719

08008274 <__sinit>:
 8008274:	b510      	push	{r4, lr}
 8008276:	4604      	mov	r4, r0
 8008278:	f7ff fff0 	bl	800825c <__sfp_lock_acquire>
 800827c:	6a23      	ldr	r3, [r4, #32]
 800827e:	b11b      	cbz	r3, 8008288 <__sinit+0x14>
 8008280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008284:	f7ff bff0 	b.w	8008268 <__sfp_lock_release>
 8008288:	4b04      	ldr	r3, [pc, #16]	; (800829c <__sinit+0x28>)
 800828a:	6223      	str	r3, [r4, #32]
 800828c:	4b04      	ldr	r3, [pc, #16]	; (80082a0 <__sinit+0x2c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1f5      	bne.n	8008280 <__sinit+0xc>
 8008294:	f7ff ffc4 	bl	8008220 <global_stdio_init.part.0>
 8008298:	e7f2      	b.n	8008280 <__sinit+0xc>
 800829a:	bf00      	nop
 800829c:	080081e1 	.word	0x080081e1
 80082a0:	20000714 	.word	0x20000714

080082a4 <sulp>:
 80082a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a8:	460f      	mov	r7, r1
 80082aa:	4690      	mov	r8, r2
 80082ac:	f002 ff7e 	bl	800b1ac <__ulp>
 80082b0:	4604      	mov	r4, r0
 80082b2:	460d      	mov	r5, r1
 80082b4:	f1b8 0f00 	cmp.w	r8, #0
 80082b8:	d011      	beq.n	80082de <sulp+0x3a>
 80082ba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80082be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dd0b      	ble.n	80082de <sulp+0x3a>
 80082c6:	2400      	movs	r4, #0
 80082c8:	051b      	lsls	r3, r3, #20
 80082ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80082ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80082d2:	4622      	mov	r2, r4
 80082d4:	462b      	mov	r3, r5
 80082d6:	f7f8 f8ff 	bl	80004d8 <__aeabi_dmul>
 80082da:	4604      	mov	r4, r0
 80082dc:	460d      	mov	r5, r1
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080082e8 <_strtod_l>:
 80082e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	b09f      	sub	sp, #124	; 0x7c
 80082ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80082f0:	2200      	movs	r2, #0
 80082f2:	4604      	mov	r4, r0
 80082f4:	921a      	str	r2, [sp, #104]	; 0x68
 80082f6:	460d      	mov	r5, r1
 80082f8:	f04f 0800 	mov.w	r8, #0
 80082fc:	f04f 0900 	mov.w	r9, #0
 8008300:	460a      	mov	r2, r1
 8008302:	9219      	str	r2, [sp, #100]	; 0x64
 8008304:	7811      	ldrb	r1, [r2, #0]
 8008306:	292b      	cmp	r1, #43	; 0x2b
 8008308:	d04a      	beq.n	80083a0 <_strtod_l+0xb8>
 800830a:	d838      	bhi.n	800837e <_strtod_l+0x96>
 800830c:	290d      	cmp	r1, #13
 800830e:	d832      	bhi.n	8008376 <_strtod_l+0x8e>
 8008310:	2908      	cmp	r1, #8
 8008312:	d832      	bhi.n	800837a <_strtod_l+0x92>
 8008314:	2900      	cmp	r1, #0
 8008316:	d03b      	beq.n	8008390 <_strtod_l+0xa8>
 8008318:	2200      	movs	r2, #0
 800831a:	920e      	str	r2, [sp, #56]	; 0x38
 800831c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800831e:	7832      	ldrb	r2, [r6, #0]
 8008320:	2a30      	cmp	r2, #48	; 0x30
 8008322:	f040 80b2 	bne.w	800848a <_strtod_l+0x1a2>
 8008326:	7872      	ldrb	r2, [r6, #1]
 8008328:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800832c:	2a58      	cmp	r2, #88	; 0x58
 800832e:	d16e      	bne.n	800840e <_strtod_l+0x126>
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008334:	4620      	mov	r0, r4
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	ab1a      	add	r3, sp, #104	; 0x68
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	4a8c      	ldr	r2, [pc, #560]	; (8008570 <_strtod_l+0x288>)
 800833e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008340:	a919      	add	r1, sp, #100	; 0x64
 8008342:	f001 fe0d 	bl	8009f60 <__gethex>
 8008346:	f010 070f 	ands.w	r7, r0, #15
 800834a:	4605      	mov	r5, r0
 800834c:	d005      	beq.n	800835a <_strtod_l+0x72>
 800834e:	2f06      	cmp	r7, #6
 8008350:	d128      	bne.n	80083a4 <_strtod_l+0xbc>
 8008352:	2300      	movs	r3, #0
 8008354:	3601      	adds	r6, #1
 8008356:	9619      	str	r6, [sp, #100]	; 0x64
 8008358:	930e      	str	r3, [sp, #56]	; 0x38
 800835a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 85a0 	bne.w	8008ea2 <_strtod_l+0xbba>
 8008362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008364:	b1cb      	cbz	r3, 800839a <_strtod_l+0xb2>
 8008366:	4642      	mov	r2, r8
 8008368:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800836c:	4610      	mov	r0, r2
 800836e:	4619      	mov	r1, r3
 8008370:	b01f      	add	sp, #124	; 0x7c
 8008372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008376:	2920      	cmp	r1, #32
 8008378:	d1ce      	bne.n	8008318 <_strtod_l+0x30>
 800837a:	3201      	adds	r2, #1
 800837c:	e7c1      	b.n	8008302 <_strtod_l+0x1a>
 800837e:	292d      	cmp	r1, #45	; 0x2d
 8008380:	d1ca      	bne.n	8008318 <_strtod_l+0x30>
 8008382:	2101      	movs	r1, #1
 8008384:	910e      	str	r1, [sp, #56]	; 0x38
 8008386:	1c51      	adds	r1, r2, #1
 8008388:	9119      	str	r1, [sp, #100]	; 0x64
 800838a:	7852      	ldrb	r2, [r2, #1]
 800838c:	2a00      	cmp	r2, #0
 800838e:	d1c5      	bne.n	800831c <_strtod_l+0x34>
 8008390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008392:	9519      	str	r5, [sp, #100]	; 0x64
 8008394:	2b00      	cmp	r3, #0
 8008396:	f040 8582 	bne.w	8008e9e <_strtod_l+0xbb6>
 800839a:	4642      	mov	r2, r8
 800839c:	464b      	mov	r3, r9
 800839e:	e7e5      	b.n	800836c <_strtod_l+0x84>
 80083a0:	2100      	movs	r1, #0
 80083a2:	e7ef      	b.n	8008384 <_strtod_l+0x9c>
 80083a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083a6:	b13a      	cbz	r2, 80083b8 <_strtod_l+0xd0>
 80083a8:	2135      	movs	r1, #53	; 0x35
 80083aa:	a81c      	add	r0, sp, #112	; 0x70
 80083ac:	f002 ffea 	bl	800b384 <__copybits>
 80083b0:	4620      	mov	r0, r4
 80083b2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80083b4:	f002 fbce 	bl	800ab54 <_Bfree>
 80083b8:	3f01      	subs	r7, #1
 80083ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80083bc:	2f04      	cmp	r7, #4
 80083be:	d806      	bhi.n	80083ce <_strtod_l+0xe6>
 80083c0:	e8df f007 	tbb	[pc, r7]
 80083c4:	201d0314 	.word	0x201d0314
 80083c8:	14          	.byte	0x14
 80083c9:	00          	.byte	0x00
 80083ca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80083ce:	05e9      	lsls	r1, r5, #23
 80083d0:	bf48      	it	mi
 80083d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80083d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083da:	0d1b      	lsrs	r3, r3, #20
 80083dc:	051b      	lsls	r3, r3, #20
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1bb      	bne.n	800835a <_strtod_l+0x72>
 80083e2:	f000 fe91 	bl	8009108 <__errno>
 80083e6:	2322      	movs	r3, #34	; 0x22
 80083e8:	6003      	str	r3, [r0, #0]
 80083ea:	e7b6      	b.n	800835a <_strtod_l+0x72>
 80083ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80083f0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80083f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80083f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80083fc:	e7e7      	b.n	80083ce <_strtod_l+0xe6>
 80083fe:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008574 <_strtod_l+0x28c>
 8008402:	e7e4      	b.n	80083ce <_strtod_l+0xe6>
 8008404:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008408:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800840c:	e7df      	b.n	80083ce <_strtod_l+0xe6>
 800840e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	9219      	str	r2, [sp, #100]	; 0x64
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	2b30      	cmp	r3, #48	; 0x30
 8008418:	d0f9      	beq.n	800840e <_strtod_l+0x126>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d09d      	beq.n	800835a <_strtod_l+0x72>
 800841e:	2301      	movs	r3, #1
 8008420:	f04f 0a00 	mov.w	sl, #0
 8008424:	220a      	movs	r2, #10
 8008426:	46d3      	mov	fp, sl
 8008428:	9305      	str	r3, [sp, #20]
 800842a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800842c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008430:	930b      	str	r3, [sp, #44]	; 0x2c
 8008432:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008434:	7806      	ldrb	r6, [r0, #0]
 8008436:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800843a:	b2d9      	uxtb	r1, r3
 800843c:	2909      	cmp	r1, #9
 800843e:	d926      	bls.n	800848e <_strtod_l+0x1a6>
 8008440:	2201      	movs	r2, #1
 8008442:	494d      	ldr	r1, [pc, #308]	; (8008578 <_strtod_l+0x290>)
 8008444:	f000 fe42 	bl	80090cc <strncmp>
 8008448:	2800      	cmp	r0, #0
 800844a:	d030      	beq.n	80084ae <_strtod_l+0x1c6>
 800844c:	2000      	movs	r0, #0
 800844e:	4632      	mov	r2, r6
 8008450:	4603      	mov	r3, r0
 8008452:	465e      	mov	r6, fp
 8008454:	9008      	str	r0, [sp, #32]
 8008456:	2a65      	cmp	r2, #101	; 0x65
 8008458:	d001      	beq.n	800845e <_strtod_l+0x176>
 800845a:	2a45      	cmp	r2, #69	; 0x45
 800845c:	d113      	bne.n	8008486 <_strtod_l+0x19e>
 800845e:	b91e      	cbnz	r6, 8008468 <_strtod_l+0x180>
 8008460:	9a05      	ldr	r2, [sp, #20]
 8008462:	4302      	orrs	r2, r0
 8008464:	d094      	beq.n	8008390 <_strtod_l+0xa8>
 8008466:	2600      	movs	r6, #0
 8008468:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800846a:	1c6a      	adds	r2, r5, #1
 800846c:	9219      	str	r2, [sp, #100]	; 0x64
 800846e:	786a      	ldrb	r2, [r5, #1]
 8008470:	2a2b      	cmp	r2, #43	; 0x2b
 8008472:	d074      	beq.n	800855e <_strtod_l+0x276>
 8008474:	2a2d      	cmp	r2, #45	; 0x2d
 8008476:	d078      	beq.n	800856a <_strtod_l+0x282>
 8008478:	f04f 0c00 	mov.w	ip, #0
 800847c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008480:	2909      	cmp	r1, #9
 8008482:	d97f      	bls.n	8008584 <_strtod_l+0x29c>
 8008484:	9519      	str	r5, [sp, #100]	; 0x64
 8008486:	2700      	movs	r7, #0
 8008488:	e09e      	b.n	80085c8 <_strtod_l+0x2e0>
 800848a:	2300      	movs	r3, #0
 800848c:	e7c8      	b.n	8008420 <_strtod_l+0x138>
 800848e:	f1bb 0f08 	cmp.w	fp, #8
 8008492:	bfd8      	it	le
 8008494:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008496:	f100 0001 	add.w	r0, r0, #1
 800849a:	bfd6      	itet	le
 800849c:	fb02 3301 	mlale	r3, r2, r1, r3
 80084a0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80084a4:	930a      	strle	r3, [sp, #40]	; 0x28
 80084a6:	f10b 0b01 	add.w	fp, fp, #1
 80084aa:	9019      	str	r0, [sp, #100]	; 0x64
 80084ac:	e7c1      	b.n	8008432 <_strtod_l+0x14a>
 80084ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	9219      	str	r2, [sp, #100]	; 0x64
 80084b4:	785a      	ldrb	r2, [r3, #1]
 80084b6:	f1bb 0f00 	cmp.w	fp, #0
 80084ba:	d037      	beq.n	800852c <_strtod_l+0x244>
 80084bc:	465e      	mov	r6, fp
 80084be:	9008      	str	r0, [sp, #32]
 80084c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80084c4:	2b09      	cmp	r3, #9
 80084c6:	d912      	bls.n	80084ee <_strtod_l+0x206>
 80084c8:	2301      	movs	r3, #1
 80084ca:	e7c4      	b.n	8008456 <_strtod_l+0x16e>
 80084cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084ce:	3001      	adds	r0, #1
 80084d0:	1c5a      	adds	r2, r3, #1
 80084d2:	9219      	str	r2, [sp, #100]	; 0x64
 80084d4:	785a      	ldrb	r2, [r3, #1]
 80084d6:	2a30      	cmp	r2, #48	; 0x30
 80084d8:	d0f8      	beq.n	80084cc <_strtod_l+0x1e4>
 80084da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80084de:	2b08      	cmp	r3, #8
 80084e0:	f200 84e4 	bhi.w	8008eac <_strtod_l+0xbc4>
 80084e4:	9008      	str	r0, [sp, #32]
 80084e6:	2000      	movs	r0, #0
 80084e8:	4606      	mov	r6, r0
 80084ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ee:	3a30      	subs	r2, #48	; 0x30
 80084f0:	f100 0301 	add.w	r3, r0, #1
 80084f4:	d014      	beq.n	8008520 <_strtod_l+0x238>
 80084f6:	9908      	ldr	r1, [sp, #32]
 80084f8:	eb00 0c06 	add.w	ip, r0, r6
 80084fc:	4419      	add	r1, r3
 80084fe:	9108      	str	r1, [sp, #32]
 8008500:	4633      	mov	r3, r6
 8008502:	210a      	movs	r1, #10
 8008504:	4563      	cmp	r3, ip
 8008506:	d113      	bne.n	8008530 <_strtod_l+0x248>
 8008508:	1833      	adds	r3, r6, r0
 800850a:	2b08      	cmp	r3, #8
 800850c:	f106 0601 	add.w	r6, r6, #1
 8008510:	4406      	add	r6, r0
 8008512:	dc1a      	bgt.n	800854a <_strtod_l+0x262>
 8008514:	230a      	movs	r3, #10
 8008516:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008518:	fb03 2301 	mla	r3, r3, r1, r2
 800851c:	930a      	str	r3, [sp, #40]	; 0x28
 800851e:	2300      	movs	r3, #0
 8008520:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008522:	4618      	mov	r0, r3
 8008524:	1c51      	adds	r1, r2, #1
 8008526:	9119      	str	r1, [sp, #100]	; 0x64
 8008528:	7852      	ldrb	r2, [r2, #1]
 800852a:	e7c9      	b.n	80084c0 <_strtod_l+0x1d8>
 800852c:	4658      	mov	r0, fp
 800852e:	e7d2      	b.n	80084d6 <_strtod_l+0x1ee>
 8008530:	2b08      	cmp	r3, #8
 8008532:	f103 0301 	add.w	r3, r3, #1
 8008536:	dc03      	bgt.n	8008540 <_strtod_l+0x258>
 8008538:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800853a:	434f      	muls	r7, r1
 800853c:	970a      	str	r7, [sp, #40]	; 0x28
 800853e:	e7e1      	b.n	8008504 <_strtod_l+0x21c>
 8008540:	2b10      	cmp	r3, #16
 8008542:	bfd8      	it	le
 8008544:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008548:	e7dc      	b.n	8008504 <_strtod_l+0x21c>
 800854a:	2e10      	cmp	r6, #16
 800854c:	bfdc      	itt	le
 800854e:	230a      	movle	r3, #10
 8008550:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008554:	e7e3      	b.n	800851e <_strtod_l+0x236>
 8008556:	2300      	movs	r3, #0
 8008558:	9308      	str	r3, [sp, #32]
 800855a:	2301      	movs	r3, #1
 800855c:	e780      	b.n	8008460 <_strtod_l+0x178>
 800855e:	f04f 0c00 	mov.w	ip, #0
 8008562:	1caa      	adds	r2, r5, #2
 8008564:	9219      	str	r2, [sp, #100]	; 0x64
 8008566:	78aa      	ldrb	r2, [r5, #2]
 8008568:	e788      	b.n	800847c <_strtod_l+0x194>
 800856a:	f04f 0c01 	mov.w	ip, #1
 800856e:	e7f8      	b.n	8008562 <_strtod_l+0x27a>
 8008570:	0800bd38 	.word	0x0800bd38
 8008574:	7ff00000 	.word	0x7ff00000
 8008578:	0800bd36 	.word	0x0800bd36
 800857c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800857e:	1c51      	adds	r1, r2, #1
 8008580:	9119      	str	r1, [sp, #100]	; 0x64
 8008582:	7852      	ldrb	r2, [r2, #1]
 8008584:	2a30      	cmp	r2, #48	; 0x30
 8008586:	d0f9      	beq.n	800857c <_strtod_l+0x294>
 8008588:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800858c:	2908      	cmp	r1, #8
 800858e:	f63f af7a 	bhi.w	8008486 <_strtod_l+0x19e>
 8008592:	3a30      	subs	r2, #48	; 0x30
 8008594:	9209      	str	r2, [sp, #36]	; 0x24
 8008596:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008598:	920c      	str	r2, [sp, #48]	; 0x30
 800859a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800859c:	1c57      	adds	r7, r2, #1
 800859e:	9719      	str	r7, [sp, #100]	; 0x64
 80085a0:	7852      	ldrb	r2, [r2, #1]
 80085a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80085a6:	f1be 0f09 	cmp.w	lr, #9
 80085aa:	d938      	bls.n	800861e <_strtod_l+0x336>
 80085ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80085ae:	1a7f      	subs	r7, r7, r1
 80085b0:	2f08      	cmp	r7, #8
 80085b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80085b6:	dc03      	bgt.n	80085c0 <_strtod_l+0x2d8>
 80085b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085ba:	428f      	cmp	r7, r1
 80085bc:	bfa8      	it	ge
 80085be:	460f      	movge	r7, r1
 80085c0:	f1bc 0f00 	cmp.w	ip, #0
 80085c4:	d000      	beq.n	80085c8 <_strtod_l+0x2e0>
 80085c6:	427f      	negs	r7, r7
 80085c8:	2e00      	cmp	r6, #0
 80085ca:	d14f      	bne.n	800866c <_strtod_l+0x384>
 80085cc:	9905      	ldr	r1, [sp, #20]
 80085ce:	4301      	orrs	r1, r0
 80085d0:	f47f aec3 	bne.w	800835a <_strtod_l+0x72>
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f47f aedb 	bne.w	8008390 <_strtod_l+0xa8>
 80085da:	2a69      	cmp	r2, #105	; 0x69
 80085dc:	d029      	beq.n	8008632 <_strtod_l+0x34a>
 80085de:	dc26      	bgt.n	800862e <_strtod_l+0x346>
 80085e0:	2a49      	cmp	r2, #73	; 0x49
 80085e2:	d026      	beq.n	8008632 <_strtod_l+0x34a>
 80085e4:	2a4e      	cmp	r2, #78	; 0x4e
 80085e6:	f47f aed3 	bne.w	8008390 <_strtod_l+0xa8>
 80085ea:	499a      	ldr	r1, [pc, #616]	; (8008854 <_strtod_l+0x56c>)
 80085ec:	a819      	add	r0, sp, #100	; 0x64
 80085ee:	f001 fef9 	bl	800a3e4 <__match>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	f43f aecc 	beq.w	8008390 <_strtod_l+0xa8>
 80085f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b28      	cmp	r3, #40	; 0x28
 80085fe:	d12f      	bne.n	8008660 <_strtod_l+0x378>
 8008600:	4995      	ldr	r1, [pc, #596]	; (8008858 <_strtod_l+0x570>)
 8008602:	aa1c      	add	r2, sp, #112	; 0x70
 8008604:	a819      	add	r0, sp, #100	; 0x64
 8008606:	f001 ff01 	bl	800a40c <__hexnan>
 800860a:	2805      	cmp	r0, #5
 800860c:	d128      	bne.n	8008660 <_strtod_l+0x378>
 800860e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008610:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008614:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008618:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800861c:	e69d      	b.n	800835a <_strtod_l+0x72>
 800861e:	210a      	movs	r1, #10
 8008620:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008622:	fb01 2107 	mla	r1, r1, r7, r2
 8008626:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800862a:	9209      	str	r2, [sp, #36]	; 0x24
 800862c:	e7b5      	b.n	800859a <_strtod_l+0x2b2>
 800862e:	2a6e      	cmp	r2, #110	; 0x6e
 8008630:	e7d9      	b.n	80085e6 <_strtod_l+0x2fe>
 8008632:	498a      	ldr	r1, [pc, #552]	; (800885c <_strtod_l+0x574>)
 8008634:	a819      	add	r0, sp, #100	; 0x64
 8008636:	f001 fed5 	bl	800a3e4 <__match>
 800863a:	2800      	cmp	r0, #0
 800863c:	f43f aea8 	beq.w	8008390 <_strtod_l+0xa8>
 8008640:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008642:	4987      	ldr	r1, [pc, #540]	; (8008860 <_strtod_l+0x578>)
 8008644:	3b01      	subs	r3, #1
 8008646:	a819      	add	r0, sp, #100	; 0x64
 8008648:	9319      	str	r3, [sp, #100]	; 0x64
 800864a:	f001 fecb 	bl	800a3e4 <__match>
 800864e:	b910      	cbnz	r0, 8008656 <_strtod_l+0x36e>
 8008650:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008652:	3301      	adds	r3, #1
 8008654:	9319      	str	r3, [sp, #100]	; 0x64
 8008656:	f04f 0800 	mov.w	r8, #0
 800865a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008864 <_strtod_l+0x57c>
 800865e:	e67c      	b.n	800835a <_strtod_l+0x72>
 8008660:	4881      	ldr	r0, [pc, #516]	; (8008868 <_strtod_l+0x580>)
 8008662:	f000 fd9b 	bl	800919c <nan>
 8008666:	4680      	mov	r8, r0
 8008668:	4689      	mov	r9, r1
 800866a:	e676      	b.n	800835a <_strtod_l+0x72>
 800866c:	9b08      	ldr	r3, [sp, #32]
 800866e:	f1bb 0f00 	cmp.w	fp, #0
 8008672:	bf08      	it	eq
 8008674:	46b3      	moveq	fp, r6
 8008676:	1afb      	subs	r3, r7, r3
 8008678:	2e10      	cmp	r6, #16
 800867a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800867c:	4635      	mov	r5, r6
 800867e:	9309      	str	r3, [sp, #36]	; 0x24
 8008680:	bfa8      	it	ge
 8008682:	2510      	movge	r5, #16
 8008684:	f7f7 feae 	bl	80003e4 <__aeabi_ui2d>
 8008688:	2e09      	cmp	r6, #9
 800868a:	4680      	mov	r8, r0
 800868c:	4689      	mov	r9, r1
 800868e:	dd13      	ble.n	80086b8 <_strtod_l+0x3d0>
 8008690:	4b76      	ldr	r3, [pc, #472]	; (800886c <_strtod_l+0x584>)
 8008692:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008696:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800869a:	f7f7 ff1d 	bl	80004d8 <__aeabi_dmul>
 800869e:	4680      	mov	r8, r0
 80086a0:	4650      	mov	r0, sl
 80086a2:	4689      	mov	r9, r1
 80086a4:	f7f7 fe9e 	bl	80003e4 <__aeabi_ui2d>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4640      	mov	r0, r8
 80086ae:	4649      	mov	r1, r9
 80086b0:	f7f7 fd5c 	bl	800016c <__adddf3>
 80086b4:	4680      	mov	r8, r0
 80086b6:	4689      	mov	r9, r1
 80086b8:	2e0f      	cmp	r6, #15
 80086ba:	dc36      	bgt.n	800872a <_strtod_l+0x442>
 80086bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f43f ae4b 	beq.w	800835a <_strtod_l+0x72>
 80086c4:	dd22      	ble.n	800870c <_strtod_l+0x424>
 80086c6:	2b16      	cmp	r3, #22
 80086c8:	dc09      	bgt.n	80086de <_strtod_l+0x3f6>
 80086ca:	4968      	ldr	r1, [pc, #416]	; (800886c <_strtod_l+0x584>)
 80086cc:	4642      	mov	r2, r8
 80086ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086d2:	464b      	mov	r3, r9
 80086d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086d8:	f7f7 fefe 	bl	80004d8 <__aeabi_dmul>
 80086dc:	e7c3      	b.n	8008666 <_strtod_l+0x37e>
 80086de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086e0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80086e4:	4293      	cmp	r3, r2
 80086e6:	db20      	blt.n	800872a <_strtod_l+0x442>
 80086e8:	4c60      	ldr	r4, [pc, #384]	; (800886c <_strtod_l+0x584>)
 80086ea:	f1c6 060f 	rsb	r6, r6, #15
 80086ee:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80086f2:	4642      	mov	r2, r8
 80086f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086f8:	464b      	mov	r3, r9
 80086fa:	f7f7 feed 	bl	80004d8 <__aeabi_dmul>
 80086fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008700:	1b9e      	subs	r6, r3, r6
 8008702:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008706:	e9d4 2300 	ldrd	r2, r3, [r4]
 800870a:	e7e5      	b.n	80086d8 <_strtod_l+0x3f0>
 800870c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870e:	3316      	adds	r3, #22
 8008710:	db0b      	blt.n	800872a <_strtod_l+0x442>
 8008712:	9b08      	ldr	r3, [sp, #32]
 8008714:	4640      	mov	r0, r8
 8008716:	1bdf      	subs	r7, r3, r7
 8008718:	4b54      	ldr	r3, [pc, #336]	; (800886c <_strtod_l+0x584>)
 800871a:	4649      	mov	r1, r9
 800871c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008724:	f7f8 f802 	bl	800072c <__aeabi_ddiv>
 8008728:	e79d      	b.n	8008666 <_strtod_l+0x37e>
 800872a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800872c:	1b75      	subs	r5, r6, r5
 800872e:	441d      	add	r5, r3
 8008730:	2d00      	cmp	r5, #0
 8008732:	dd70      	ble.n	8008816 <_strtod_l+0x52e>
 8008734:	f015 030f 	ands.w	r3, r5, #15
 8008738:	d00a      	beq.n	8008750 <_strtod_l+0x468>
 800873a:	494c      	ldr	r1, [pc, #304]	; (800886c <_strtod_l+0x584>)
 800873c:	4642      	mov	r2, r8
 800873e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008742:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008746:	464b      	mov	r3, r9
 8008748:	f7f7 fec6 	bl	80004d8 <__aeabi_dmul>
 800874c:	4680      	mov	r8, r0
 800874e:	4689      	mov	r9, r1
 8008750:	f035 050f 	bics.w	r5, r5, #15
 8008754:	d04d      	beq.n	80087f2 <_strtod_l+0x50a>
 8008756:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800875a:	dd22      	ble.n	80087a2 <_strtod_l+0x4ba>
 800875c:	2600      	movs	r6, #0
 800875e:	46b3      	mov	fp, r6
 8008760:	960b      	str	r6, [sp, #44]	; 0x2c
 8008762:	9608      	str	r6, [sp, #32]
 8008764:	2322      	movs	r3, #34	; 0x22
 8008766:	f04f 0800 	mov.w	r8, #0
 800876a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008864 <_strtod_l+0x57c>
 800876e:	6023      	str	r3, [r4, #0]
 8008770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008772:	2b00      	cmp	r3, #0
 8008774:	f43f adf1 	beq.w	800835a <_strtod_l+0x72>
 8008778:	4620      	mov	r0, r4
 800877a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800877c:	f002 f9ea 	bl	800ab54 <_Bfree>
 8008780:	4620      	mov	r0, r4
 8008782:	9908      	ldr	r1, [sp, #32]
 8008784:	f002 f9e6 	bl	800ab54 <_Bfree>
 8008788:	4659      	mov	r1, fp
 800878a:	4620      	mov	r0, r4
 800878c:	f002 f9e2 	bl	800ab54 <_Bfree>
 8008790:	4620      	mov	r0, r4
 8008792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008794:	f002 f9de 	bl	800ab54 <_Bfree>
 8008798:	4631      	mov	r1, r6
 800879a:	4620      	mov	r0, r4
 800879c:	f002 f9da 	bl	800ab54 <_Bfree>
 80087a0:	e5db      	b.n	800835a <_strtod_l+0x72>
 80087a2:	4b33      	ldr	r3, [pc, #204]	; (8008870 <_strtod_l+0x588>)
 80087a4:	4640      	mov	r0, r8
 80087a6:	9305      	str	r3, [sp, #20]
 80087a8:	2300      	movs	r3, #0
 80087aa:	4649      	mov	r1, r9
 80087ac:	469a      	mov	sl, r3
 80087ae:	112d      	asrs	r5, r5, #4
 80087b0:	2d01      	cmp	r5, #1
 80087b2:	dc21      	bgt.n	80087f8 <_strtod_l+0x510>
 80087b4:	b10b      	cbz	r3, 80087ba <_strtod_l+0x4d2>
 80087b6:	4680      	mov	r8, r0
 80087b8:	4689      	mov	r9, r1
 80087ba:	492d      	ldr	r1, [pc, #180]	; (8008870 <_strtod_l+0x588>)
 80087bc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80087c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80087c4:	4642      	mov	r2, r8
 80087c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ca:	464b      	mov	r3, r9
 80087cc:	f7f7 fe84 	bl	80004d8 <__aeabi_dmul>
 80087d0:	4b24      	ldr	r3, [pc, #144]	; (8008864 <_strtod_l+0x57c>)
 80087d2:	460a      	mov	r2, r1
 80087d4:	400b      	ands	r3, r1
 80087d6:	4927      	ldr	r1, [pc, #156]	; (8008874 <_strtod_l+0x58c>)
 80087d8:	4680      	mov	r8, r0
 80087da:	428b      	cmp	r3, r1
 80087dc:	d8be      	bhi.n	800875c <_strtod_l+0x474>
 80087de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80087e2:	428b      	cmp	r3, r1
 80087e4:	bf86      	itte	hi
 80087e6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80087ea:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008878 <_strtod_l+0x590>
 80087ee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80087f2:	2300      	movs	r3, #0
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	e07b      	b.n	80088f0 <_strtod_l+0x608>
 80087f8:	07ea      	lsls	r2, r5, #31
 80087fa:	d505      	bpl.n	8008808 <_strtod_l+0x520>
 80087fc:	9b05      	ldr	r3, [sp, #20]
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	f7f7 fe69 	bl	80004d8 <__aeabi_dmul>
 8008806:	2301      	movs	r3, #1
 8008808:	9a05      	ldr	r2, [sp, #20]
 800880a:	f10a 0a01 	add.w	sl, sl, #1
 800880e:	3208      	adds	r2, #8
 8008810:	106d      	asrs	r5, r5, #1
 8008812:	9205      	str	r2, [sp, #20]
 8008814:	e7cc      	b.n	80087b0 <_strtod_l+0x4c8>
 8008816:	d0ec      	beq.n	80087f2 <_strtod_l+0x50a>
 8008818:	426d      	negs	r5, r5
 800881a:	f015 020f 	ands.w	r2, r5, #15
 800881e:	d00a      	beq.n	8008836 <_strtod_l+0x54e>
 8008820:	4b12      	ldr	r3, [pc, #72]	; (800886c <_strtod_l+0x584>)
 8008822:	4640      	mov	r0, r8
 8008824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008828:	4649      	mov	r1, r9
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	f7f7 ff7d 	bl	800072c <__aeabi_ddiv>
 8008832:	4680      	mov	r8, r0
 8008834:	4689      	mov	r9, r1
 8008836:	112d      	asrs	r5, r5, #4
 8008838:	d0db      	beq.n	80087f2 <_strtod_l+0x50a>
 800883a:	2d1f      	cmp	r5, #31
 800883c:	dd1e      	ble.n	800887c <_strtod_l+0x594>
 800883e:	2600      	movs	r6, #0
 8008840:	46b3      	mov	fp, r6
 8008842:	960b      	str	r6, [sp, #44]	; 0x2c
 8008844:	9608      	str	r6, [sp, #32]
 8008846:	2322      	movs	r3, #34	; 0x22
 8008848:	f04f 0800 	mov.w	r8, #0
 800884c:	f04f 0900 	mov.w	r9, #0
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	e78d      	b.n	8008770 <_strtod_l+0x488>
 8008854:	0800bd0f 	.word	0x0800bd0f
 8008858:	0800bd4c 	.word	0x0800bd4c
 800885c:	0800bd07 	.word	0x0800bd07
 8008860:	0800be94 	.word	0x0800be94
 8008864:	7ff00000 	.word	0x7ff00000
 8008868:	0800c11f 	.word	0x0800c11f
 800886c:	0800c010 	.word	0x0800c010
 8008870:	0800bfe8 	.word	0x0800bfe8
 8008874:	7ca00000 	.word	0x7ca00000
 8008878:	7fefffff 	.word	0x7fefffff
 800887c:	f015 0310 	ands.w	r3, r5, #16
 8008880:	bf18      	it	ne
 8008882:	236a      	movne	r3, #106	; 0x6a
 8008884:	4640      	mov	r0, r8
 8008886:	9305      	str	r3, [sp, #20]
 8008888:	4649      	mov	r1, r9
 800888a:	2300      	movs	r3, #0
 800888c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008b58 <_strtod_l+0x870>
 8008890:	07ea      	lsls	r2, r5, #31
 8008892:	d504      	bpl.n	800889e <_strtod_l+0x5b6>
 8008894:	e9da 2300 	ldrd	r2, r3, [sl]
 8008898:	f7f7 fe1e 	bl	80004d8 <__aeabi_dmul>
 800889c:	2301      	movs	r3, #1
 800889e:	106d      	asrs	r5, r5, #1
 80088a0:	f10a 0a08 	add.w	sl, sl, #8
 80088a4:	d1f4      	bne.n	8008890 <_strtod_l+0x5a8>
 80088a6:	b10b      	cbz	r3, 80088ac <_strtod_l+0x5c4>
 80088a8:	4680      	mov	r8, r0
 80088aa:	4689      	mov	r9, r1
 80088ac:	9b05      	ldr	r3, [sp, #20]
 80088ae:	b1bb      	cbz	r3, 80088e0 <_strtod_l+0x5f8>
 80088b0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80088b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	4649      	mov	r1, r9
 80088bc:	dd10      	ble.n	80088e0 <_strtod_l+0x5f8>
 80088be:	2b1f      	cmp	r3, #31
 80088c0:	f340 8128 	ble.w	8008b14 <_strtod_l+0x82c>
 80088c4:	2b34      	cmp	r3, #52	; 0x34
 80088c6:	bfd8      	it	le
 80088c8:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80088cc:	f04f 0800 	mov.w	r8, #0
 80088d0:	bfcf      	iteee	gt
 80088d2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80088d6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80088da:	4093      	lslle	r3, r2
 80088dc:	ea03 0901 	andle.w	r9, r3, r1
 80088e0:	2200      	movs	r2, #0
 80088e2:	2300      	movs	r3, #0
 80088e4:	4640      	mov	r0, r8
 80088e6:	4649      	mov	r1, r9
 80088e8:	f7f8 f85e 	bl	80009a8 <__aeabi_dcmpeq>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d1a6      	bne.n	800883e <_strtod_l+0x556>
 80088f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f2:	465a      	mov	r2, fp
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	4620      	mov	r0, r4
 80088f8:	4633      	mov	r3, r6
 80088fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088fc:	f002 f992 	bl	800ac24 <__s2b>
 8008900:	900b      	str	r0, [sp, #44]	; 0x2c
 8008902:	2800      	cmp	r0, #0
 8008904:	f43f af2a 	beq.w	800875c <_strtod_l+0x474>
 8008908:	2600      	movs	r6, #0
 800890a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800890c:	9b08      	ldr	r3, [sp, #32]
 800890e:	2a00      	cmp	r2, #0
 8008910:	eba3 0307 	sub.w	r3, r3, r7
 8008914:	bfa8      	it	ge
 8008916:	2300      	movge	r3, #0
 8008918:	46b3      	mov	fp, r6
 800891a:	9312      	str	r3, [sp, #72]	; 0x48
 800891c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008920:	9316      	str	r3, [sp, #88]	; 0x58
 8008922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008924:	4620      	mov	r0, r4
 8008926:	6859      	ldr	r1, [r3, #4]
 8008928:	f002 f8d4 	bl	800aad4 <_Balloc>
 800892c:	9008      	str	r0, [sp, #32]
 800892e:	2800      	cmp	r0, #0
 8008930:	f43f af18 	beq.w	8008764 <_strtod_l+0x47c>
 8008934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008936:	300c      	adds	r0, #12
 8008938:	691a      	ldr	r2, [r3, #16]
 800893a:	f103 010c 	add.w	r1, r3, #12
 800893e:	3202      	adds	r2, #2
 8008940:	0092      	lsls	r2, r2, #2
 8008942:	f000 fc1c 	bl	800917e <memcpy>
 8008946:	ab1c      	add	r3, sp, #112	; 0x70
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	ab1b      	add	r3, sp, #108	; 0x6c
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	4642      	mov	r2, r8
 8008950:	464b      	mov	r3, r9
 8008952:	4620      	mov	r0, r4
 8008954:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008958:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800895c:	f002 fc8e 	bl	800b27c <__d2b>
 8008960:	901a      	str	r0, [sp, #104]	; 0x68
 8008962:	2800      	cmp	r0, #0
 8008964:	f43f aefe 	beq.w	8008764 <_strtod_l+0x47c>
 8008968:	2101      	movs	r1, #1
 800896a:	4620      	mov	r0, r4
 800896c:	f002 f9f2 	bl	800ad54 <__i2b>
 8008970:	4683      	mov	fp, r0
 8008972:	2800      	cmp	r0, #0
 8008974:	f43f aef6 	beq.w	8008764 <_strtod_l+0x47c>
 8008978:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800897a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800897c:	2f00      	cmp	r7, #0
 800897e:	bfab      	itete	ge
 8008980:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008982:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008984:	eb07 0a03 	addge.w	sl, r7, r3
 8008988:	1bdd      	sublt	r5, r3, r7
 800898a:	9b05      	ldr	r3, [sp, #20]
 800898c:	bfa8      	it	ge
 800898e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008990:	eba7 0703 	sub.w	r7, r7, r3
 8008994:	4417      	add	r7, r2
 8008996:	4b71      	ldr	r3, [pc, #452]	; (8008b5c <_strtod_l+0x874>)
 8008998:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 800899c:	bfb8      	it	lt
 800899e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80089a2:	429f      	cmp	r7, r3
 80089a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80089a8:	f280 80c7 	bge.w	8008b3a <_strtod_l+0x852>
 80089ac:	1bdb      	subs	r3, r3, r7
 80089ae:	2b1f      	cmp	r3, #31
 80089b0:	f04f 0101 	mov.w	r1, #1
 80089b4:	eba2 0203 	sub.w	r2, r2, r3
 80089b8:	f300 80b3 	bgt.w	8008b22 <_strtod_l+0x83a>
 80089bc:	fa01 f303 	lsl.w	r3, r1, r3
 80089c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80089c2:	2300      	movs	r3, #0
 80089c4:	9310      	str	r3, [sp, #64]	; 0x40
 80089c6:	eb0a 0702 	add.w	r7, sl, r2
 80089ca:	9b05      	ldr	r3, [sp, #20]
 80089cc:	45ba      	cmp	sl, r7
 80089ce:	4415      	add	r5, r2
 80089d0:	441d      	add	r5, r3
 80089d2:	4653      	mov	r3, sl
 80089d4:	bfa8      	it	ge
 80089d6:	463b      	movge	r3, r7
 80089d8:	42ab      	cmp	r3, r5
 80089da:	bfa8      	it	ge
 80089dc:	462b      	movge	r3, r5
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bfc2      	ittt	gt
 80089e2:	1aff      	subgt	r7, r7, r3
 80089e4:	1aed      	subgt	r5, r5, r3
 80089e6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80089ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dd17      	ble.n	8008a20 <_strtod_l+0x738>
 80089f0:	4659      	mov	r1, fp
 80089f2:	461a      	mov	r2, r3
 80089f4:	4620      	mov	r0, r4
 80089f6:	f002 fa6b 	bl	800aed0 <__pow5mult>
 80089fa:	4683      	mov	fp, r0
 80089fc:	2800      	cmp	r0, #0
 80089fe:	f43f aeb1 	beq.w	8008764 <_strtod_l+0x47c>
 8008a02:	4601      	mov	r1, r0
 8008a04:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a06:	4620      	mov	r0, r4
 8008a08:	f002 f9ba 	bl	800ad80 <__multiply>
 8008a0c:	900a      	str	r0, [sp, #40]	; 0x28
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f43f aea8 	beq.w	8008764 <_strtod_l+0x47c>
 8008a14:	4620      	mov	r0, r4
 8008a16:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a18:	f002 f89c 	bl	800ab54 <_Bfree>
 8008a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8008a20:	2f00      	cmp	r7, #0
 8008a22:	f300 808f 	bgt.w	8008b44 <_strtod_l+0x85c>
 8008a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	dd08      	ble.n	8008a3e <_strtod_l+0x756>
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a30:	9908      	ldr	r1, [sp, #32]
 8008a32:	f002 fa4d 	bl	800aed0 <__pow5mult>
 8008a36:	9008      	str	r0, [sp, #32]
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	f43f ae93 	beq.w	8008764 <_strtod_l+0x47c>
 8008a3e:	2d00      	cmp	r5, #0
 8008a40:	dd08      	ble.n	8008a54 <_strtod_l+0x76c>
 8008a42:	462a      	mov	r2, r5
 8008a44:	4620      	mov	r0, r4
 8008a46:	9908      	ldr	r1, [sp, #32]
 8008a48:	f002 fa9c 	bl	800af84 <__lshift>
 8008a4c:	9008      	str	r0, [sp, #32]
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f43f ae88 	beq.w	8008764 <_strtod_l+0x47c>
 8008a54:	f1ba 0f00 	cmp.w	sl, #0
 8008a58:	dd08      	ble.n	8008a6c <_strtod_l+0x784>
 8008a5a:	4659      	mov	r1, fp
 8008a5c:	4652      	mov	r2, sl
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f002 fa90 	bl	800af84 <__lshift>
 8008a64:	4683      	mov	fp, r0
 8008a66:	2800      	cmp	r0, #0
 8008a68:	f43f ae7c 	beq.w	8008764 <_strtod_l+0x47c>
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	9a08      	ldr	r2, [sp, #32]
 8008a70:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a72:	f002 fb0f 	bl	800b094 <__mdiff>
 8008a76:	4606      	mov	r6, r0
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	f43f ae73 	beq.w	8008764 <_strtod_l+0x47c>
 8008a7e:	2500      	movs	r5, #0
 8008a80:	68c3      	ldr	r3, [r0, #12]
 8008a82:	4659      	mov	r1, fp
 8008a84:	60c5      	str	r5, [r0, #12]
 8008a86:	930a      	str	r3, [sp, #40]	; 0x28
 8008a88:	f002 fae8 	bl	800b05c <__mcmp>
 8008a8c:	42a8      	cmp	r0, r5
 8008a8e:	da6b      	bge.n	8008b68 <_strtod_l+0x880>
 8008a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a92:	ea53 0308 	orrs.w	r3, r3, r8
 8008a96:	f040 808f 	bne.w	8008bb8 <_strtod_l+0x8d0>
 8008a9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f040 808a 	bne.w	8008bb8 <_strtod_l+0x8d0>
 8008aa4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008aa8:	0d1b      	lsrs	r3, r3, #20
 8008aaa:	051b      	lsls	r3, r3, #20
 8008aac:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008ab0:	f240 8082 	bls.w	8008bb8 <_strtod_l+0x8d0>
 8008ab4:	6973      	ldr	r3, [r6, #20]
 8008ab6:	b913      	cbnz	r3, 8008abe <_strtod_l+0x7d6>
 8008ab8:	6933      	ldr	r3, [r6, #16]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	dd7c      	ble.n	8008bb8 <_strtod_l+0x8d0>
 8008abe:	4631      	mov	r1, r6
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f002 fa5e 	bl	800af84 <__lshift>
 8008ac8:	4659      	mov	r1, fp
 8008aca:	4606      	mov	r6, r0
 8008acc:	f002 fac6 	bl	800b05c <__mcmp>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	dd71      	ble.n	8008bb8 <_strtod_l+0x8d0>
 8008ad4:	9905      	ldr	r1, [sp, #20]
 8008ad6:	464b      	mov	r3, r9
 8008ad8:	4a21      	ldr	r2, [pc, #132]	; (8008b60 <_strtod_l+0x878>)
 8008ada:	2900      	cmp	r1, #0
 8008adc:	f000 808d 	beq.w	8008bfa <_strtod_l+0x912>
 8008ae0:	ea02 0109 	and.w	r1, r2, r9
 8008ae4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008ae8:	f300 8087 	bgt.w	8008bfa <_strtod_l+0x912>
 8008aec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008af0:	f77f aea9 	ble.w	8008846 <_strtod_l+0x55e>
 8008af4:	4640      	mov	r0, r8
 8008af6:	4649      	mov	r1, r9
 8008af8:	4b1a      	ldr	r3, [pc, #104]	; (8008b64 <_strtod_l+0x87c>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	f7f7 fcec 	bl	80004d8 <__aeabi_dmul>
 8008b00:	4b17      	ldr	r3, [pc, #92]	; (8008b60 <_strtod_l+0x878>)
 8008b02:	4680      	mov	r8, r0
 8008b04:	400b      	ands	r3, r1
 8008b06:	4689      	mov	r9, r1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f47f ae35 	bne.w	8008778 <_strtod_l+0x490>
 8008b0e:	2322      	movs	r3, #34	; 0x22
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	e631      	b.n	8008778 <_strtod_l+0x490>
 8008b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b18:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1c:	ea03 0808 	and.w	r8, r3, r8
 8008b20:	e6de      	b.n	80088e0 <_strtod_l+0x5f8>
 8008b22:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008b26:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8008b2a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8008b2e:	37e2      	adds	r7, #226	; 0xe2
 8008b30:	fa01 f307 	lsl.w	r3, r1, r7
 8008b34:	9310      	str	r3, [sp, #64]	; 0x40
 8008b36:	9113      	str	r1, [sp, #76]	; 0x4c
 8008b38:	e745      	b.n	80089c6 <_strtod_l+0x6de>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9310      	str	r3, [sp, #64]	; 0x40
 8008b3e:	2301      	movs	r3, #1
 8008b40:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b42:	e740      	b.n	80089c6 <_strtod_l+0x6de>
 8008b44:	463a      	mov	r2, r7
 8008b46:	4620      	mov	r0, r4
 8008b48:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008b4a:	f002 fa1b 	bl	800af84 <__lshift>
 8008b4e:	901a      	str	r0, [sp, #104]	; 0x68
 8008b50:	2800      	cmp	r0, #0
 8008b52:	f47f af68 	bne.w	8008a26 <_strtod_l+0x73e>
 8008b56:	e605      	b.n	8008764 <_strtod_l+0x47c>
 8008b58:	0800bd60 	.word	0x0800bd60
 8008b5c:	fffffc02 	.word	0xfffffc02
 8008b60:	7ff00000 	.word	0x7ff00000
 8008b64:	39500000 	.word	0x39500000
 8008b68:	46ca      	mov	sl, r9
 8008b6a:	d165      	bne.n	8008c38 <_strtod_l+0x950>
 8008b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b72:	b352      	cbz	r2, 8008bca <_strtod_l+0x8e2>
 8008b74:	4a9e      	ldr	r2, [pc, #632]	; (8008df0 <_strtod_l+0xb08>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d12a      	bne.n	8008bd0 <_strtod_l+0x8e8>
 8008b7a:	9b05      	ldr	r3, [sp, #20]
 8008b7c:	4641      	mov	r1, r8
 8008b7e:	b1fb      	cbz	r3, 8008bc0 <_strtod_l+0x8d8>
 8008b80:	4b9c      	ldr	r3, [pc, #624]	; (8008df4 <_strtod_l+0xb0c>)
 8008b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b86:	ea09 0303 	and.w	r3, r9, r3
 8008b8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b8e:	d81a      	bhi.n	8008bc6 <_strtod_l+0x8de>
 8008b90:	0d1b      	lsrs	r3, r3, #20
 8008b92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b96:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9a:	4299      	cmp	r1, r3
 8008b9c:	d118      	bne.n	8008bd0 <_strtod_l+0x8e8>
 8008b9e:	4b96      	ldr	r3, [pc, #600]	; (8008df8 <_strtod_l+0xb10>)
 8008ba0:	459a      	cmp	sl, r3
 8008ba2:	d102      	bne.n	8008baa <_strtod_l+0x8c2>
 8008ba4:	3101      	adds	r1, #1
 8008ba6:	f43f addd 	beq.w	8008764 <_strtod_l+0x47c>
 8008baa:	f04f 0800 	mov.w	r8, #0
 8008bae:	4b91      	ldr	r3, [pc, #580]	; (8008df4 <_strtod_l+0xb0c>)
 8008bb0:	ea0a 0303 	and.w	r3, sl, r3
 8008bb4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008bb8:	9b05      	ldr	r3, [sp, #20]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d19a      	bne.n	8008af4 <_strtod_l+0x80c>
 8008bbe:	e5db      	b.n	8008778 <_strtod_l+0x490>
 8008bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bc4:	e7e9      	b.n	8008b9a <_strtod_l+0x8b2>
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	e7e7      	b.n	8008b9a <_strtod_l+0x8b2>
 8008bca:	ea53 0308 	orrs.w	r3, r3, r8
 8008bce:	d081      	beq.n	8008ad4 <_strtod_l+0x7ec>
 8008bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bd2:	b1e3      	cbz	r3, 8008c0e <_strtod_l+0x926>
 8008bd4:	ea13 0f0a 	tst.w	r3, sl
 8008bd8:	d0ee      	beq.n	8008bb8 <_strtod_l+0x8d0>
 8008bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bdc:	4640      	mov	r0, r8
 8008bde:	4649      	mov	r1, r9
 8008be0:	9a05      	ldr	r2, [sp, #20]
 8008be2:	b1c3      	cbz	r3, 8008c16 <_strtod_l+0x92e>
 8008be4:	f7ff fb5e 	bl	80082a4 <sulp>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008bee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008bf0:	f7f7 fabc 	bl	800016c <__adddf3>
 8008bf4:	4680      	mov	r8, r0
 8008bf6:	4689      	mov	r9, r1
 8008bf8:	e7de      	b.n	8008bb8 <_strtod_l+0x8d0>
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008c04:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008c08:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008c0c:	e7d4      	b.n	8008bb8 <_strtod_l+0x8d0>
 8008c0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c10:	ea13 0f08 	tst.w	r3, r8
 8008c14:	e7e0      	b.n	8008bd8 <_strtod_l+0x8f0>
 8008c16:	f7ff fb45 	bl	80082a4 <sulp>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c22:	f7f7 faa1 	bl	8000168 <__aeabi_dsub>
 8008c26:	2200      	movs	r2, #0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	4689      	mov	r9, r1
 8008c2e:	f7f7 febb 	bl	80009a8 <__aeabi_dcmpeq>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d0c0      	beq.n	8008bb8 <_strtod_l+0x8d0>
 8008c36:	e606      	b.n	8008846 <_strtod_l+0x55e>
 8008c38:	4659      	mov	r1, fp
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f002 fb74 	bl	800b328 <__ratio>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c4e:	f7f7 febf 	bl	80009d0 <__aeabi_dcmple>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d06f      	beq.n	8008d36 <_strtod_l+0xa4e>
 8008c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d17c      	bne.n	8008d56 <_strtod_l+0xa6e>
 8008c5c:	f1b8 0f00 	cmp.w	r8, #0
 8008c60:	d159      	bne.n	8008d16 <_strtod_l+0xa2e>
 8008c62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d17b      	bne.n	8008d62 <_strtod_l+0xa7a>
 8008c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c6e:	2200      	movs	r2, #0
 8008c70:	4b62      	ldr	r3, [pc, #392]	; (8008dfc <_strtod_l+0xb14>)
 8008c72:	f7f7 fea3 	bl	80009bc <__aeabi_dcmplt>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d15a      	bne.n	8008d30 <_strtod_l+0xa48>
 8008c7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c7e:	2200      	movs	r2, #0
 8008c80:	4b5f      	ldr	r3, [pc, #380]	; (8008e00 <_strtod_l+0xb18>)
 8008c82:	f7f7 fc29 	bl	80004d8 <__aeabi_dmul>
 8008c86:	4605      	mov	r5, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008c8e:	9506      	str	r5, [sp, #24]
 8008c90:	9307      	str	r3, [sp, #28]
 8008c92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008c9a:	4b56      	ldr	r3, [pc, #344]	; (8008df4 <_strtod_l+0xb0c>)
 8008c9c:	4a55      	ldr	r2, [pc, #340]	; (8008df4 <_strtod_l+0xb0c>)
 8008c9e:	ea0a 0303 	and.w	r3, sl, r3
 8008ca2:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ca4:	4b57      	ldr	r3, [pc, #348]	; (8008e04 <_strtod_l+0xb1c>)
 8008ca6:	ea0a 0202 	and.w	r2, sl, r2
 8008caa:	429a      	cmp	r2, r3
 8008cac:	f040 80b0 	bne.w	8008e10 <_strtod_l+0xb28>
 8008cb0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	f002 fa78 	bl	800b1ac <__ulp>
 8008cbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cc0:	f7f7 fc0a 	bl	80004d8 <__aeabi_dmul>
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	f7f7 fa50 	bl	800016c <__adddf3>
 8008ccc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008df4 <_strtod_l+0xb0c>
 8008cd0:	4a4d      	ldr	r2, [pc, #308]	; (8008e08 <_strtod_l+0xb20>)
 8008cd2:	ea01 0a0a 	and.w	sl, r1, sl
 8008cd6:	4592      	cmp	sl, r2
 8008cd8:	4680      	mov	r8, r0
 8008cda:	d948      	bls.n	8008d6e <_strtod_l+0xa86>
 8008cdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cde:	4b46      	ldr	r3, [pc, #280]	; (8008df8 <_strtod_l+0xb10>)
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d103      	bne.n	8008cec <_strtod_l+0xa04>
 8008ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	f43f ad3c 	beq.w	8008764 <_strtod_l+0x47c>
 8008cec:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008cf0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008df8 <_strtod_l+0xb10>
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008cf8:	f001 ff2c 	bl	800ab54 <_Bfree>
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	9908      	ldr	r1, [sp, #32]
 8008d00:	f001 ff28 	bl	800ab54 <_Bfree>
 8008d04:	4659      	mov	r1, fp
 8008d06:	4620      	mov	r0, r4
 8008d08:	f001 ff24 	bl	800ab54 <_Bfree>
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f001 ff20 	bl	800ab54 <_Bfree>
 8008d14:	e605      	b.n	8008922 <_strtod_l+0x63a>
 8008d16:	f1b8 0f01 	cmp.w	r8, #1
 8008d1a:	d103      	bne.n	8008d24 <_strtod_l+0xa3c>
 8008d1c:	f1b9 0f00 	cmp.w	r9, #0
 8008d20:	f43f ad91 	beq.w	8008846 <_strtod_l+0x55e>
 8008d24:	2200      	movs	r2, #0
 8008d26:	4b39      	ldr	r3, [pc, #228]	; (8008e0c <_strtod_l+0xb24>)
 8008d28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008d2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d2e:	e016      	b.n	8008d5e <_strtod_l+0xa76>
 8008d30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008d32:	4f33      	ldr	r7, [pc, #204]	; (8008e00 <_strtod_l+0xb18>)
 8008d34:	e7a9      	b.n	8008c8a <_strtod_l+0x9a2>
 8008d36:	4b32      	ldr	r3, [pc, #200]	; (8008e00 <_strtod_l+0xb18>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d3e:	f7f7 fbcb 	bl	80004d8 <__aeabi_dmul>
 8008d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d44:	4605      	mov	r5, r0
 8008d46:	460f      	mov	r7, r1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d09e      	beq.n	8008c8a <_strtod_l+0x9a2>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d54:	e79d      	b.n	8008c92 <_strtod_l+0x9aa>
 8008d56:	2200      	movs	r2, #0
 8008d58:	4b28      	ldr	r3, [pc, #160]	; (8008dfc <_strtod_l+0xb14>)
 8008d5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d5e:	4f27      	ldr	r7, [pc, #156]	; (8008dfc <_strtod_l+0xb14>)
 8008d60:	e797      	b.n	8008c92 <_strtod_l+0x9aa>
 8008d62:	2200      	movs	r2, #0
 8008d64:	4b29      	ldr	r3, [pc, #164]	; (8008e0c <_strtod_l+0xb24>)
 8008d66:	4645      	mov	r5, r8
 8008d68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d6c:	e7f7      	b.n	8008d5e <_strtod_l+0xa76>
 8008d6e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008d72:	9b05      	ldr	r3, [sp, #20]
 8008d74:	46ca      	mov	sl, r9
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1bc      	bne.n	8008cf4 <_strtod_l+0xa0c>
 8008d7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d80:	0d1b      	lsrs	r3, r3, #20
 8008d82:	051b      	lsls	r3, r3, #20
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d1b5      	bne.n	8008cf4 <_strtod_l+0xa0c>
 8008d88:	4628      	mov	r0, r5
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f8 f9f6 	bl	800117c <__aeabi_d2lz>
 8008d90:	f7f7 fb74 	bl	800047c <__aeabi_l2d>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4628      	mov	r0, r5
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 f9e4 	bl	8000168 <__aeabi_dsub>
 8008da0:	460b      	mov	r3, r1
 8008da2:	4602      	mov	r2, r0
 8008da4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008da8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dae:	ea4a 0a08 	orr.w	sl, sl, r8
 8008db2:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008db6:	d06c      	beq.n	8008e92 <_strtod_l+0xbaa>
 8008db8:	a309      	add	r3, pc, #36	; (adr r3, 8008de0 <_strtod_l+0xaf8>)
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	f7f7 fdfd 	bl	80009bc <__aeabi_dcmplt>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	f47f acd8 	bne.w	8008778 <_strtod_l+0x490>
 8008dc8:	a307      	add	r3, pc, #28	; (adr r3, 8008de8 <_strtod_l+0xb00>)
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008dd2:	f7f7 fe11 	bl	80009f8 <__aeabi_dcmpgt>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d08c      	beq.n	8008cf4 <_strtod_l+0xa0c>
 8008dda:	e4cd      	b.n	8008778 <_strtod_l+0x490>
 8008ddc:	f3af 8000 	nop.w
 8008de0:	94a03595 	.word	0x94a03595
 8008de4:	3fdfffff 	.word	0x3fdfffff
 8008de8:	35afe535 	.word	0x35afe535
 8008dec:	3fe00000 	.word	0x3fe00000
 8008df0:	000fffff 	.word	0x000fffff
 8008df4:	7ff00000 	.word	0x7ff00000
 8008df8:	7fefffff 	.word	0x7fefffff
 8008dfc:	3ff00000 	.word	0x3ff00000
 8008e00:	3fe00000 	.word	0x3fe00000
 8008e04:	7fe00000 	.word	0x7fe00000
 8008e08:	7c9fffff 	.word	0x7c9fffff
 8008e0c:	bff00000 	.word	0xbff00000
 8008e10:	9b05      	ldr	r3, [sp, #20]
 8008e12:	b333      	cbz	r3, 8008e62 <_strtod_l+0xb7a>
 8008e14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e1a:	d822      	bhi.n	8008e62 <_strtod_l+0xb7a>
 8008e1c:	a328      	add	r3, pc, #160	; (adr r3, 8008ec0 <_strtod_l+0xbd8>)
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	4628      	mov	r0, r5
 8008e24:	4639      	mov	r1, r7
 8008e26:	f7f7 fdd3 	bl	80009d0 <__aeabi_dcmple>
 8008e2a:	b1a0      	cbz	r0, 8008e56 <_strtod_l+0xb6e>
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f7f7 fe2a 	bl	8000a88 <__aeabi_d2uiz>
 8008e34:	2801      	cmp	r0, #1
 8008e36:	bf38      	it	cc
 8008e38:	2001      	movcc	r0, #1
 8008e3a:	f7f7 fad3 	bl	80003e4 <__aeabi_ui2d>
 8008e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e40:	4605      	mov	r5, r0
 8008e42:	460f      	mov	r7, r1
 8008e44:	bb03      	cbnz	r3, 8008e88 <_strtod_l+0xba0>
 8008e46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e4a:	9014      	str	r0, [sp, #80]	; 0x50
 8008e4c:	9315      	str	r3, [sp, #84]	; 0x54
 8008e4e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008e52:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008e56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e5a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008e5e:	1a9b      	subs	r3, r3, r2
 8008e60:	9311      	str	r3, [sp, #68]	; 0x44
 8008e62:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008e64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e66:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008e6a:	f002 f99f 	bl	800b1ac <__ulp>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	4640      	mov	r0, r8
 8008e74:	4649      	mov	r1, r9
 8008e76:	f7f7 fb2f 	bl	80004d8 <__aeabi_dmul>
 8008e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e7e:	f7f7 f975 	bl	800016c <__adddf3>
 8008e82:	4680      	mov	r8, r0
 8008e84:	4689      	mov	r9, r1
 8008e86:	e774      	b.n	8008d72 <_strtod_l+0xa8a>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008e90:	e7dd      	b.n	8008e4e <_strtod_l+0xb66>
 8008e92:	a30d      	add	r3, pc, #52	; (adr r3, 8008ec8 <_strtod_l+0xbe0>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	f7f7 fd90 	bl	80009bc <__aeabi_dcmplt>
 8008e9c:	e79b      	b.n	8008dd6 <_strtod_l+0xaee>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	930e      	str	r3, [sp, #56]	; 0x38
 8008ea2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ea4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	f7ff ba5b 	b.w	8008362 <_strtod_l+0x7a>
 8008eac:	2a65      	cmp	r2, #101	; 0x65
 8008eae:	f43f ab52 	beq.w	8008556 <_strtod_l+0x26e>
 8008eb2:	2a45      	cmp	r2, #69	; 0x45
 8008eb4:	f43f ab4f 	beq.w	8008556 <_strtod_l+0x26e>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f7ff bb87 	b.w	80085cc <_strtod_l+0x2e4>
 8008ebe:	bf00      	nop
 8008ec0:	ffc00000 	.word	0xffc00000
 8008ec4:	41dfffff 	.word	0x41dfffff
 8008ec8:	94a03595 	.word	0x94a03595
 8008ecc:	3fcfffff 	.word	0x3fcfffff

08008ed0 <strtof>:
 8008ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed4:	4f24      	ldr	r7, [pc, #144]	; (8008f68 <strtof+0x98>)
 8008ed6:	460a      	mov	r2, r1
 8008ed8:	4b24      	ldr	r3, [pc, #144]	; (8008f6c <strtof+0x9c>)
 8008eda:	4601      	mov	r1, r0
 8008edc:	6838      	ldr	r0, [r7, #0]
 8008ede:	f7ff fa03 	bl	80082e8 <_strtod_l>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	460c      	mov	r4, r1
 8008eea:	f7f7 fd8f 	bl	8000a0c <__aeabi_dcmpun>
 8008eee:	b168      	cbz	r0, 8008f0c <strtof+0x3c>
 8008ef0:	2c00      	cmp	r4, #0
 8008ef2:	481f      	ldr	r0, [pc, #124]	; (8008f70 <strtof+0xa0>)
 8008ef4:	da06      	bge.n	8008f04 <strtof+0x34>
 8008ef6:	f000 f957 	bl	80091a8 <nanf>
 8008efa:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8008efe:	4628      	mov	r0, r5
 8008f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	f000 b94e 	b.w	80091a8 <nanf>
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f7f7 fdda 	bl	8000ac8 <__aeabi_d2f>
 8008f14:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008f18:	4605      	mov	r5, r0
 8008f1a:	4916      	ldr	r1, [pc, #88]	; (8008f74 <strtof+0xa4>)
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	f7f8 f8f7 	bl	8001110 <__aeabi_fcmpun>
 8008f22:	b9b0      	cbnz	r0, 8008f52 <strtof+0x82>
 8008f24:	4640      	mov	r0, r8
 8008f26:	4913      	ldr	r1, [pc, #76]	; (8008f74 <strtof+0xa4>)
 8008f28:	f7f8 f8d4 	bl	80010d4 <__aeabi_fcmple>
 8008f2c:	b988      	cbnz	r0, 8008f52 <strtof+0x82>
 8008f2e:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 8008f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f36:	4630      	mov	r0, r6
 8008f38:	4641      	mov	r1, r8
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	; (8008f78 <strtof+0xa8>)
 8008f3c:	f7f7 fd66 	bl	8000a0c <__aeabi_dcmpun>
 8008f40:	b970      	cbnz	r0, 8008f60 <strtof+0x90>
 8008f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f46:	4630      	mov	r0, r6
 8008f48:	4641      	mov	r1, r8
 8008f4a:	4b0b      	ldr	r3, [pc, #44]	; (8008f78 <strtof+0xa8>)
 8008f4c:	f7f7 fd40 	bl	80009d0 <__aeabi_dcmple>
 8008f50:	b930      	cbnz	r0, 8008f60 <strtof+0x90>
 8008f52:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8008f56:	d1d2      	bne.n	8008efe <strtof+0x2e>
 8008f58:	4b08      	ldr	r3, [pc, #32]	; (8008f7c <strtof+0xac>)
 8008f5a:	4023      	ands	r3, r4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0ce      	beq.n	8008efe <strtof+0x2e>
 8008f60:	2222      	movs	r2, #34	; 0x22
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	e7ca      	b.n	8008efe <strtof+0x2e>
 8008f68:	20000248 	.word	0x20000248
 8008f6c:	20000090 	.word	0x20000090
 8008f70:	0800c11f 	.word	0x0800c11f
 8008f74:	7f7fffff 	.word	0x7f7fffff
 8008f78:	7fefffff 	.word	0x7fefffff
 8008f7c:	7ff00000 	.word	0x7ff00000

08008f80 <_strtol_l.constprop.0>:
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f86:	4686      	mov	lr, r0
 8008f88:	4690      	mov	r8, r2
 8008f8a:	d001      	beq.n	8008f90 <_strtol_l.constprop.0+0x10>
 8008f8c:	2b24      	cmp	r3, #36	; 0x24
 8008f8e:	d906      	bls.n	8008f9e <_strtol_l.constprop.0+0x1e>
 8008f90:	f000 f8ba 	bl	8009108 <__errno>
 8008f94:	2316      	movs	r3, #22
 8008f96:	6003      	str	r3, [r0, #0]
 8008f98:	2000      	movs	r0, #0
 8008f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9e:	460d      	mov	r5, r1
 8008fa0:	4835      	ldr	r0, [pc, #212]	; (8009078 <_strtol_l.constprop.0+0xf8>)
 8008fa2:	462a      	mov	r2, r5
 8008fa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fa8:	5d06      	ldrb	r6, [r0, r4]
 8008faa:	f016 0608 	ands.w	r6, r6, #8
 8008fae:	d1f8      	bne.n	8008fa2 <_strtol_l.constprop.0+0x22>
 8008fb0:	2c2d      	cmp	r4, #45	; 0x2d
 8008fb2:	d12e      	bne.n	8009012 <_strtol_l.constprop.0+0x92>
 8008fb4:	2601      	movs	r6, #1
 8008fb6:	782c      	ldrb	r4, [r5, #0]
 8008fb8:	1c95      	adds	r5, r2, #2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d057      	beq.n	800906e <_strtol_l.constprop.0+0xee>
 8008fbe:	2b10      	cmp	r3, #16
 8008fc0:	d109      	bne.n	8008fd6 <_strtol_l.constprop.0+0x56>
 8008fc2:	2c30      	cmp	r4, #48	; 0x30
 8008fc4:	d107      	bne.n	8008fd6 <_strtol_l.constprop.0+0x56>
 8008fc6:	782a      	ldrb	r2, [r5, #0]
 8008fc8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008fcc:	2a58      	cmp	r2, #88	; 0x58
 8008fce:	d149      	bne.n	8009064 <_strtol_l.constprop.0+0xe4>
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	786c      	ldrb	r4, [r5, #1]
 8008fd4:	3502      	adds	r5, #2
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008fdc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008fe0:	fbbc f9f3 	udiv	r9, ip, r3
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	fb03 ca19 	mls	sl, r3, r9, ip
 8008fea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008fee:	2f09      	cmp	r7, #9
 8008ff0:	d814      	bhi.n	800901c <_strtol_l.constprop.0+0x9c>
 8008ff2:	463c      	mov	r4, r7
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	dd20      	ble.n	800903a <_strtol_l.constprop.0+0xba>
 8008ff8:	1c57      	adds	r7, r2, #1
 8008ffa:	d007      	beq.n	800900c <_strtol_l.constprop.0+0x8c>
 8008ffc:	4581      	cmp	r9, r0
 8008ffe:	d319      	bcc.n	8009034 <_strtol_l.constprop.0+0xb4>
 8009000:	d101      	bne.n	8009006 <_strtol_l.constprop.0+0x86>
 8009002:	45a2      	cmp	sl, r4
 8009004:	db16      	blt.n	8009034 <_strtol_l.constprop.0+0xb4>
 8009006:	2201      	movs	r2, #1
 8009008:	fb00 4003 	mla	r0, r0, r3, r4
 800900c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009010:	e7eb      	b.n	8008fea <_strtol_l.constprop.0+0x6a>
 8009012:	2c2b      	cmp	r4, #43	; 0x2b
 8009014:	bf04      	itt	eq
 8009016:	782c      	ldrbeq	r4, [r5, #0]
 8009018:	1c95      	addeq	r5, r2, #2
 800901a:	e7ce      	b.n	8008fba <_strtol_l.constprop.0+0x3a>
 800901c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009020:	2f19      	cmp	r7, #25
 8009022:	d801      	bhi.n	8009028 <_strtol_l.constprop.0+0xa8>
 8009024:	3c37      	subs	r4, #55	; 0x37
 8009026:	e7e5      	b.n	8008ff4 <_strtol_l.constprop.0+0x74>
 8009028:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800902c:	2f19      	cmp	r7, #25
 800902e:	d804      	bhi.n	800903a <_strtol_l.constprop.0+0xba>
 8009030:	3c57      	subs	r4, #87	; 0x57
 8009032:	e7df      	b.n	8008ff4 <_strtol_l.constprop.0+0x74>
 8009034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009038:	e7e8      	b.n	800900c <_strtol_l.constprop.0+0x8c>
 800903a:	1c53      	adds	r3, r2, #1
 800903c:	d108      	bne.n	8009050 <_strtol_l.constprop.0+0xd0>
 800903e:	2322      	movs	r3, #34	; 0x22
 8009040:	4660      	mov	r0, ip
 8009042:	f8ce 3000 	str.w	r3, [lr]
 8009046:	f1b8 0f00 	cmp.w	r8, #0
 800904a:	d0a6      	beq.n	8008f9a <_strtol_l.constprop.0+0x1a>
 800904c:	1e69      	subs	r1, r5, #1
 800904e:	e006      	b.n	800905e <_strtol_l.constprop.0+0xde>
 8009050:	b106      	cbz	r6, 8009054 <_strtol_l.constprop.0+0xd4>
 8009052:	4240      	negs	r0, r0
 8009054:	f1b8 0f00 	cmp.w	r8, #0
 8009058:	d09f      	beq.n	8008f9a <_strtol_l.constprop.0+0x1a>
 800905a:	2a00      	cmp	r2, #0
 800905c:	d1f6      	bne.n	800904c <_strtol_l.constprop.0+0xcc>
 800905e:	f8c8 1000 	str.w	r1, [r8]
 8009062:	e79a      	b.n	8008f9a <_strtol_l.constprop.0+0x1a>
 8009064:	2430      	movs	r4, #48	; 0x30
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1b5      	bne.n	8008fd6 <_strtol_l.constprop.0+0x56>
 800906a:	2308      	movs	r3, #8
 800906c:	e7b3      	b.n	8008fd6 <_strtol_l.constprop.0+0x56>
 800906e:	2c30      	cmp	r4, #48	; 0x30
 8009070:	d0a9      	beq.n	8008fc6 <_strtol_l.constprop.0+0x46>
 8009072:	230a      	movs	r3, #10
 8009074:	e7af      	b.n	8008fd6 <_strtol_l.constprop.0+0x56>
 8009076:	bf00      	nop
 8009078:	0800bd91 	.word	0x0800bd91

0800907c <strtol>:
 800907c:	4613      	mov	r3, r2
 800907e:	460a      	mov	r2, r1
 8009080:	4601      	mov	r1, r0
 8009082:	4802      	ldr	r0, [pc, #8]	; (800908c <strtol+0x10>)
 8009084:	6800      	ldr	r0, [r0, #0]
 8009086:	f7ff bf7b 	b.w	8008f80 <_strtol_l.constprop.0>
 800908a:	bf00      	nop
 800908c:	20000248 	.word	0x20000248

08009090 <_fwalk_sglue>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	4607      	mov	r7, r0
 8009096:	4688      	mov	r8, r1
 8009098:	4614      	mov	r4, r2
 800909a:	2600      	movs	r6, #0
 800909c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090a0:	f1b9 0901 	subs.w	r9, r9, #1
 80090a4:	d505      	bpl.n	80090b2 <_fwalk_sglue+0x22>
 80090a6:	6824      	ldr	r4, [r4, #0]
 80090a8:	2c00      	cmp	r4, #0
 80090aa:	d1f7      	bne.n	800909c <_fwalk_sglue+0xc>
 80090ac:	4630      	mov	r0, r6
 80090ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b2:	89ab      	ldrh	r3, [r5, #12]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d907      	bls.n	80090c8 <_fwalk_sglue+0x38>
 80090b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090bc:	3301      	adds	r3, #1
 80090be:	d003      	beq.n	80090c8 <_fwalk_sglue+0x38>
 80090c0:	4629      	mov	r1, r5
 80090c2:	4638      	mov	r0, r7
 80090c4:	47c0      	blx	r8
 80090c6:	4306      	orrs	r6, r0
 80090c8:	3568      	adds	r5, #104	; 0x68
 80090ca:	e7e9      	b.n	80090a0 <_fwalk_sglue+0x10>

080090cc <strncmp>:
 80090cc:	b510      	push	{r4, lr}
 80090ce:	b16a      	cbz	r2, 80090ec <strncmp+0x20>
 80090d0:	3901      	subs	r1, #1
 80090d2:	1884      	adds	r4, r0, r2
 80090d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090dc:	429a      	cmp	r2, r3
 80090de:	d103      	bne.n	80090e8 <strncmp+0x1c>
 80090e0:	42a0      	cmp	r0, r4
 80090e2:	d001      	beq.n	80090e8 <strncmp+0x1c>
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	d1f5      	bne.n	80090d4 <strncmp+0x8>
 80090e8:	1ad0      	subs	r0, r2, r3
 80090ea:	bd10      	pop	{r4, pc}
 80090ec:	4610      	mov	r0, r2
 80090ee:	e7fc      	b.n	80090ea <strncmp+0x1e>

080090f0 <memset>:
 80090f0:	4603      	mov	r3, r0
 80090f2:	4402      	add	r2, r0
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d100      	bne.n	80090fa <memset+0xa>
 80090f8:	4770      	bx	lr
 80090fa:	f803 1b01 	strb.w	r1, [r3], #1
 80090fe:	e7f9      	b.n	80090f4 <memset+0x4>

08009100 <_localeconv_r>:
 8009100:	4800      	ldr	r0, [pc, #0]	; (8009104 <_localeconv_r+0x4>)
 8009102:	4770      	bx	lr
 8009104:	20000180 	.word	0x20000180

08009108 <__errno>:
 8009108:	4b01      	ldr	r3, [pc, #4]	; (8009110 <__errno+0x8>)
 800910a:	6818      	ldr	r0, [r3, #0]
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	20000248 	.word	0x20000248

08009114 <__libc_init_array>:
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	2600      	movs	r6, #0
 8009118:	4d0c      	ldr	r5, [pc, #48]	; (800914c <__libc_init_array+0x38>)
 800911a:	4c0d      	ldr	r4, [pc, #52]	; (8009150 <__libc_init_array+0x3c>)
 800911c:	1b64      	subs	r4, r4, r5
 800911e:	10a4      	asrs	r4, r4, #2
 8009120:	42a6      	cmp	r6, r4
 8009122:	d109      	bne.n	8009138 <__libc_init_array+0x24>
 8009124:	f002 fd9c 	bl	800bc60 <_init>
 8009128:	2600      	movs	r6, #0
 800912a:	4d0a      	ldr	r5, [pc, #40]	; (8009154 <__libc_init_array+0x40>)
 800912c:	4c0a      	ldr	r4, [pc, #40]	; (8009158 <__libc_init_array+0x44>)
 800912e:	1b64      	subs	r4, r4, r5
 8009130:	10a4      	asrs	r4, r4, #2
 8009132:	42a6      	cmp	r6, r4
 8009134:	d105      	bne.n	8009142 <__libc_init_array+0x2e>
 8009136:	bd70      	pop	{r4, r5, r6, pc}
 8009138:	f855 3b04 	ldr.w	r3, [r5], #4
 800913c:	4798      	blx	r3
 800913e:	3601      	adds	r6, #1
 8009140:	e7ee      	b.n	8009120 <__libc_init_array+0xc>
 8009142:	f855 3b04 	ldr.w	r3, [r5], #4
 8009146:	4798      	blx	r3
 8009148:	3601      	adds	r6, #1
 800914a:	e7f2      	b.n	8009132 <__libc_init_array+0x1e>
 800914c:	0800c120 	.word	0x0800c120
 8009150:	0800c120 	.word	0x0800c120
 8009154:	0800c120 	.word	0x0800c120
 8009158:	0800c124 	.word	0x0800c124

0800915c <__retarget_lock_init_recursive>:
 800915c:	4770      	bx	lr

0800915e <__retarget_lock_acquire_recursive>:
 800915e:	4770      	bx	lr

08009160 <__retarget_lock_release_recursive>:
 8009160:	4770      	bx	lr

08009162 <memchr>:
 8009162:	4603      	mov	r3, r0
 8009164:	b510      	push	{r4, lr}
 8009166:	b2c9      	uxtb	r1, r1
 8009168:	4402      	add	r2, r0
 800916a:	4293      	cmp	r3, r2
 800916c:	4618      	mov	r0, r3
 800916e:	d101      	bne.n	8009174 <memchr+0x12>
 8009170:	2000      	movs	r0, #0
 8009172:	e003      	b.n	800917c <memchr+0x1a>
 8009174:	7804      	ldrb	r4, [r0, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	428c      	cmp	r4, r1
 800917a:	d1f6      	bne.n	800916a <memchr+0x8>
 800917c:	bd10      	pop	{r4, pc}

0800917e <memcpy>:
 800917e:	440a      	add	r2, r1
 8009180:	4291      	cmp	r1, r2
 8009182:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009186:	d100      	bne.n	800918a <memcpy+0xc>
 8009188:	4770      	bx	lr
 800918a:	b510      	push	{r4, lr}
 800918c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009190:	4291      	cmp	r1, r2
 8009192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009196:	d1f9      	bne.n	800918c <memcpy+0xe>
 8009198:	bd10      	pop	{r4, pc}
	...

0800919c <nan>:
 800919c:	2000      	movs	r0, #0
 800919e:	4901      	ldr	r1, [pc, #4]	; (80091a4 <nan+0x8>)
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	7ff80000 	.word	0x7ff80000

080091a8 <nanf>:
 80091a8:	4800      	ldr	r0, [pc, #0]	; (80091ac <nanf+0x4>)
 80091aa:	4770      	bx	lr
 80091ac:	7fc00000 	.word	0x7fc00000

080091b0 <quorem>:
 80091b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	6903      	ldr	r3, [r0, #16]
 80091b6:	690c      	ldr	r4, [r1, #16]
 80091b8:	4607      	mov	r7, r0
 80091ba:	42a3      	cmp	r3, r4
 80091bc:	db7f      	blt.n	80092be <quorem+0x10e>
 80091be:	3c01      	subs	r4, #1
 80091c0:	f100 0514 	add.w	r5, r0, #20
 80091c4:	f101 0814 	add.w	r8, r1, #20
 80091c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091d6:	3301      	adds	r3, #1
 80091d8:	429a      	cmp	r2, r3
 80091da:	fbb2 f6f3 	udiv	r6, r2, r3
 80091de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80091e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091e6:	d331      	bcc.n	800924c <quorem+0x9c>
 80091e8:	f04f 0e00 	mov.w	lr, #0
 80091ec:	4640      	mov	r0, r8
 80091ee:	46ac      	mov	ip, r5
 80091f0:	46f2      	mov	sl, lr
 80091f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80091f6:	b293      	uxth	r3, r2
 80091f8:	fb06 e303 	mla	r3, r6, r3, lr
 80091fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009200:	0c1a      	lsrs	r2, r3, #16
 8009202:	b29b      	uxth	r3, r3
 8009204:	fb06 220e 	mla	r2, r6, lr, r2
 8009208:	ebaa 0303 	sub.w	r3, sl, r3
 800920c:	f8dc a000 	ldr.w	sl, [ip]
 8009210:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009214:	fa1f fa8a 	uxth.w	sl, sl
 8009218:	4453      	add	r3, sl
 800921a:	f8dc a000 	ldr.w	sl, [ip]
 800921e:	b292      	uxth	r2, r2
 8009220:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009228:	b29b      	uxth	r3, r3
 800922a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800922e:	4581      	cmp	r9, r0
 8009230:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009234:	f84c 3b04 	str.w	r3, [ip], #4
 8009238:	d2db      	bcs.n	80091f2 <quorem+0x42>
 800923a:	f855 300b 	ldr.w	r3, [r5, fp]
 800923e:	b92b      	cbnz	r3, 800924c <quorem+0x9c>
 8009240:	9b01      	ldr	r3, [sp, #4]
 8009242:	3b04      	subs	r3, #4
 8009244:	429d      	cmp	r5, r3
 8009246:	461a      	mov	r2, r3
 8009248:	d32d      	bcc.n	80092a6 <quorem+0xf6>
 800924a:	613c      	str	r4, [r7, #16]
 800924c:	4638      	mov	r0, r7
 800924e:	f001 ff05 	bl	800b05c <__mcmp>
 8009252:	2800      	cmp	r0, #0
 8009254:	db23      	blt.n	800929e <quorem+0xee>
 8009256:	4629      	mov	r1, r5
 8009258:	2000      	movs	r0, #0
 800925a:	3601      	adds	r6, #1
 800925c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009260:	f8d1 c000 	ldr.w	ip, [r1]
 8009264:	b293      	uxth	r3, r2
 8009266:	1ac3      	subs	r3, r0, r3
 8009268:	0c12      	lsrs	r2, r2, #16
 800926a:	fa1f f08c 	uxth.w	r0, ip
 800926e:	4403      	add	r3, r0
 8009270:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009278:	b29b      	uxth	r3, r3
 800927a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800927e:	45c1      	cmp	r9, r8
 8009280:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009284:	f841 3b04 	str.w	r3, [r1], #4
 8009288:	d2e8      	bcs.n	800925c <quorem+0xac>
 800928a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800928e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009292:	b922      	cbnz	r2, 800929e <quorem+0xee>
 8009294:	3b04      	subs	r3, #4
 8009296:	429d      	cmp	r5, r3
 8009298:	461a      	mov	r2, r3
 800929a:	d30a      	bcc.n	80092b2 <quorem+0x102>
 800929c:	613c      	str	r4, [r7, #16]
 800929e:	4630      	mov	r0, r6
 80092a0:	b003      	add	sp, #12
 80092a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a6:	6812      	ldr	r2, [r2, #0]
 80092a8:	3b04      	subs	r3, #4
 80092aa:	2a00      	cmp	r2, #0
 80092ac:	d1cd      	bne.n	800924a <quorem+0x9a>
 80092ae:	3c01      	subs	r4, #1
 80092b0:	e7c8      	b.n	8009244 <quorem+0x94>
 80092b2:	6812      	ldr	r2, [r2, #0]
 80092b4:	3b04      	subs	r3, #4
 80092b6:	2a00      	cmp	r2, #0
 80092b8:	d1f0      	bne.n	800929c <quorem+0xec>
 80092ba:	3c01      	subs	r4, #1
 80092bc:	e7eb      	b.n	8009296 <quorem+0xe6>
 80092be:	2000      	movs	r0, #0
 80092c0:	e7ee      	b.n	80092a0 <quorem+0xf0>
 80092c2:	0000      	movs	r0, r0
 80092c4:	0000      	movs	r0, r0
	...

080092c8 <_dtoa_r>:
 80092c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	4616      	mov	r6, r2
 80092ce:	461f      	mov	r7, r3
 80092d0:	69c4      	ldr	r4, [r0, #28]
 80092d2:	b099      	sub	sp, #100	; 0x64
 80092d4:	4605      	mov	r5, r0
 80092d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80092da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80092de:	b974      	cbnz	r4, 80092fe <_dtoa_r+0x36>
 80092e0:	2010      	movs	r0, #16
 80092e2:	f001 fa87 	bl	800a7f4 <malloc>
 80092e6:	4602      	mov	r2, r0
 80092e8:	61e8      	str	r0, [r5, #28]
 80092ea:	b920      	cbnz	r0, 80092f6 <_dtoa_r+0x2e>
 80092ec:	21ef      	movs	r1, #239	; 0xef
 80092ee:	4bac      	ldr	r3, [pc, #688]	; (80095a0 <_dtoa_r+0x2d8>)
 80092f0:	48ac      	ldr	r0, [pc, #688]	; (80095a4 <_dtoa_r+0x2dc>)
 80092f2:	f002 f97b 	bl	800b5ec <__assert_func>
 80092f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092fa:	6004      	str	r4, [r0, #0]
 80092fc:	60c4      	str	r4, [r0, #12]
 80092fe:	69eb      	ldr	r3, [r5, #28]
 8009300:	6819      	ldr	r1, [r3, #0]
 8009302:	b151      	cbz	r1, 800931a <_dtoa_r+0x52>
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	2301      	movs	r3, #1
 8009308:	4093      	lsls	r3, r2
 800930a:	604a      	str	r2, [r1, #4]
 800930c:	608b      	str	r3, [r1, #8]
 800930e:	4628      	mov	r0, r5
 8009310:	f001 fc20 	bl	800ab54 <_Bfree>
 8009314:	2200      	movs	r2, #0
 8009316:	69eb      	ldr	r3, [r5, #28]
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	1e3b      	subs	r3, r7, #0
 800931c:	bfaf      	iteee	ge
 800931e:	2300      	movge	r3, #0
 8009320:	2201      	movlt	r2, #1
 8009322:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009326:	9305      	strlt	r3, [sp, #20]
 8009328:	bfa8      	it	ge
 800932a:	f8c8 3000 	strge.w	r3, [r8]
 800932e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009332:	4b9d      	ldr	r3, [pc, #628]	; (80095a8 <_dtoa_r+0x2e0>)
 8009334:	bfb8      	it	lt
 8009336:	f8c8 2000 	strlt.w	r2, [r8]
 800933a:	ea33 0309 	bics.w	r3, r3, r9
 800933e:	d119      	bne.n	8009374 <_dtoa_r+0xac>
 8009340:	f242 730f 	movw	r3, #9999	; 0x270f
 8009344:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800934c:	4333      	orrs	r3, r6
 800934e:	f000 8589 	beq.w	8009e64 <_dtoa_r+0xb9c>
 8009352:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009354:	b953      	cbnz	r3, 800936c <_dtoa_r+0xa4>
 8009356:	4b95      	ldr	r3, [pc, #596]	; (80095ac <_dtoa_r+0x2e4>)
 8009358:	e023      	b.n	80093a2 <_dtoa_r+0xda>
 800935a:	4b95      	ldr	r3, [pc, #596]	; (80095b0 <_dtoa_r+0x2e8>)
 800935c:	9303      	str	r3, [sp, #12]
 800935e:	3308      	adds	r3, #8
 8009360:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	9803      	ldr	r0, [sp, #12]
 8009366:	b019      	add	sp, #100	; 0x64
 8009368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936c:	4b8f      	ldr	r3, [pc, #572]	; (80095ac <_dtoa_r+0x2e4>)
 800936e:	9303      	str	r3, [sp, #12]
 8009370:	3303      	adds	r3, #3
 8009372:	e7f5      	b.n	8009360 <_dtoa_r+0x98>
 8009374:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009378:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800937c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009380:	2200      	movs	r2, #0
 8009382:	2300      	movs	r3, #0
 8009384:	f7f7 fb10 	bl	80009a8 <__aeabi_dcmpeq>
 8009388:	4680      	mov	r8, r0
 800938a:	b160      	cbz	r0, 80093a6 <_dtoa_r+0xde>
 800938c:	2301      	movs	r3, #1
 800938e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 8562 	beq.w	8009e5e <_dtoa_r+0xb96>
 800939a:	4b86      	ldr	r3, [pc, #536]	; (80095b4 <_dtoa_r+0x2ec>)
 800939c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	9303      	str	r3, [sp, #12]
 80093a4:	e7de      	b.n	8009364 <_dtoa_r+0x9c>
 80093a6:	ab16      	add	r3, sp, #88	; 0x58
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	ab17      	add	r3, sp, #92	; 0x5c
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	4628      	mov	r0, r5
 80093b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80093b4:	f001 ff62 	bl	800b27c <__d2b>
 80093b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80093bc:	4682      	mov	sl, r0
 80093be:	2c00      	cmp	r4, #0
 80093c0:	d07e      	beq.n	80094c0 <_dtoa_r+0x1f8>
 80093c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093c8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80093cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093d0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80093d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80093d8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80093dc:	4619      	mov	r1, r3
 80093de:	2200      	movs	r2, #0
 80093e0:	4b75      	ldr	r3, [pc, #468]	; (80095b8 <_dtoa_r+0x2f0>)
 80093e2:	f7f6 fec1 	bl	8000168 <__aeabi_dsub>
 80093e6:	a368      	add	r3, pc, #416	; (adr r3, 8009588 <_dtoa_r+0x2c0>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f7f7 f874 	bl	80004d8 <__aeabi_dmul>
 80093f0:	a367      	add	r3, pc, #412	; (adr r3, 8009590 <_dtoa_r+0x2c8>)
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	f7f6 feb9 	bl	800016c <__adddf3>
 80093fa:	4606      	mov	r6, r0
 80093fc:	4620      	mov	r0, r4
 80093fe:	460f      	mov	r7, r1
 8009400:	f7f7 f800 	bl	8000404 <__aeabi_i2d>
 8009404:	a364      	add	r3, pc, #400	; (adr r3, 8009598 <_dtoa_r+0x2d0>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f7f7 f865 	bl	80004d8 <__aeabi_dmul>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4630      	mov	r0, r6
 8009414:	4639      	mov	r1, r7
 8009416:	f7f6 fea9 	bl	800016c <__adddf3>
 800941a:	4606      	mov	r6, r0
 800941c:	460f      	mov	r7, r1
 800941e:	f7f7 fb0b 	bl	8000a38 <__aeabi_d2iz>
 8009422:	2200      	movs	r2, #0
 8009424:	4683      	mov	fp, r0
 8009426:	2300      	movs	r3, #0
 8009428:	4630      	mov	r0, r6
 800942a:	4639      	mov	r1, r7
 800942c:	f7f7 fac6 	bl	80009bc <__aeabi_dcmplt>
 8009430:	b148      	cbz	r0, 8009446 <_dtoa_r+0x17e>
 8009432:	4658      	mov	r0, fp
 8009434:	f7f6 ffe6 	bl	8000404 <__aeabi_i2d>
 8009438:	4632      	mov	r2, r6
 800943a:	463b      	mov	r3, r7
 800943c:	f7f7 fab4 	bl	80009a8 <__aeabi_dcmpeq>
 8009440:	b908      	cbnz	r0, 8009446 <_dtoa_r+0x17e>
 8009442:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009446:	f1bb 0f16 	cmp.w	fp, #22
 800944a:	d857      	bhi.n	80094fc <_dtoa_r+0x234>
 800944c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009450:	4b5a      	ldr	r3, [pc, #360]	; (80095bc <_dtoa_r+0x2f4>)
 8009452:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	f7f7 faaf 	bl	80009bc <__aeabi_dcmplt>
 800945e:	2800      	cmp	r0, #0
 8009460:	d04e      	beq.n	8009500 <_dtoa_r+0x238>
 8009462:	2300      	movs	r3, #0
 8009464:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009468:	930f      	str	r3, [sp, #60]	; 0x3c
 800946a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800946c:	1b1b      	subs	r3, r3, r4
 800946e:	1e5a      	subs	r2, r3, #1
 8009470:	bf46      	itte	mi
 8009472:	f1c3 0901 	rsbmi	r9, r3, #1
 8009476:	2300      	movmi	r3, #0
 8009478:	f04f 0900 	movpl.w	r9, #0
 800947c:	9209      	str	r2, [sp, #36]	; 0x24
 800947e:	bf48      	it	mi
 8009480:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009482:	f1bb 0f00 	cmp.w	fp, #0
 8009486:	db3d      	blt.n	8009504 <_dtoa_r+0x23c>
 8009488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800948e:	445b      	add	r3, fp
 8009490:	9309      	str	r3, [sp, #36]	; 0x24
 8009492:	2300      	movs	r3, #0
 8009494:	930a      	str	r3, [sp, #40]	; 0x28
 8009496:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009498:	2b09      	cmp	r3, #9
 800949a:	d867      	bhi.n	800956c <_dtoa_r+0x2a4>
 800949c:	2b05      	cmp	r3, #5
 800949e:	bfc4      	itt	gt
 80094a0:	3b04      	subgt	r3, #4
 80094a2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80094a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094a6:	bfc8      	it	gt
 80094a8:	2400      	movgt	r4, #0
 80094aa:	f1a3 0302 	sub.w	r3, r3, #2
 80094ae:	bfd8      	it	le
 80094b0:	2401      	movle	r4, #1
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	f200 8086 	bhi.w	80095c4 <_dtoa_r+0x2fc>
 80094b8:	e8df f003 	tbb	[pc, r3]
 80094bc:	5637392c 	.word	0x5637392c
 80094c0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80094c4:	441c      	add	r4, r3
 80094c6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80094ca:	2b20      	cmp	r3, #32
 80094cc:	bfc1      	itttt	gt
 80094ce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80094d2:	fa09 f903 	lslgt.w	r9, r9, r3
 80094d6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80094da:	fa26 f303 	lsrgt.w	r3, r6, r3
 80094de:	bfd6      	itet	le
 80094e0:	f1c3 0320 	rsble	r3, r3, #32
 80094e4:	ea49 0003 	orrgt.w	r0, r9, r3
 80094e8:	fa06 f003 	lslle.w	r0, r6, r3
 80094ec:	f7f6 ff7a 	bl	80003e4 <__aeabi_ui2d>
 80094f0:	2201      	movs	r2, #1
 80094f2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80094f6:	3c01      	subs	r4, #1
 80094f8:	9213      	str	r2, [sp, #76]	; 0x4c
 80094fa:	e76f      	b.n	80093dc <_dtoa_r+0x114>
 80094fc:	2301      	movs	r3, #1
 80094fe:	e7b3      	b.n	8009468 <_dtoa_r+0x1a0>
 8009500:	900f      	str	r0, [sp, #60]	; 0x3c
 8009502:	e7b2      	b.n	800946a <_dtoa_r+0x1a2>
 8009504:	f1cb 0300 	rsb	r3, fp, #0
 8009508:	930a      	str	r3, [sp, #40]	; 0x28
 800950a:	2300      	movs	r3, #0
 800950c:	eba9 090b 	sub.w	r9, r9, fp
 8009510:	930e      	str	r3, [sp, #56]	; 0x38
 8009512:	e7c0      	b.n	8009496 <_dtoa_r+0x1ce>
 8009514:	2300      	movs	r3, #0
 8009516:	930b      	str	r3, [sp, #44]	; 0x2c
 8009518:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800951a:	2b00      	cmp	r3, #0
 800951c:	dc55      	bgt.n	80095ca <_dtoa_r+0x302>
 800951e:	2301      	movs	r3, #1
 8009520:	461a      	mov	r2, r3
 8009522:	9306      	str	r3, [sp, #24]
 8009524:	9308      	str	r3, [sp, #32]
 8009526:	9223      	str	r2, [sp, #140]	; 0x8c
 8009528:	e00b      	b.n	8009542 <_dtoa_r+0x27a>
 800952a:	2301      	movs	r3, #1
 800952c:	e7f3      	b.n	8009516 <_dtoa_r+0x24e>
 800952e:	2300      	movs	r3, #0
 8009530:	930b      	str	r3, [sp, #44]	; 0x2c
 8009532:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009534:	445b      	add	r3, fp
 8009536:	9306      	str	r3, [sp, #24]
 8009538:	3301      	adds	r3, #1
 800953a:	2b01      	cmp	r3, #1
 800953c:	9308      	str	r3, [sp, #32]
 800953e:	bfb8      	it	lt
 8009540:	2301      	movlt	r3, #1
 8009542:	2100      	movs	r1, #0
 8009544:	2204      	movs	r2, #4
 8009546:	69e8      	ldr	r0, [r5, #28]
 8009548:	f102 0614 	add.w	r6, r2, #20
 800954c:	429e      	cmp	r6, r3
 800954e:	d940      	bls.n	80095d2 <_dtoa_r+0x30a>
 8009550:	6041      	str	r1, [r0, #4]
 8009552:	4628      	mov	r0, r5
 8009554:	f001 fabe 	bl	800aad4 <_Balloc>
 8009558:	9003      	str	r0, [sp, #12]
 800955a:	2800      	cmp	r0, #0
 800955c:	d13c      	bne.n	80095d8 <_dtoa_r+0x310>
 800955e:	4602      	mov	r2, r0
 8009560:	f240 11af 	movw	r1, #431	; 0x1af
 8009564:	4b16      	ldr	r3, [pc, #88]	; (80095c0 <_dtoa_r+0x2f8>)
 8009566:	e6c3      	b.n	80092f0 <_dtoa_r+0x28>
 8009568:	2301      	movs	r3, #1
 800956a:	e7e1      	b.n	8009530 <_dtoa_r+0x268>
 800956c:	2401      	movs	r4, #1
 800956e:	2300      	movs	r3, #0
 8009570:	940b      	str	r4, [sp, #44]	; 0x2c
 8009572:	9322      	str	r3, [sp, #136]	; 0x88
 8009574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009578:	2200      	movs	r2, #0
 800957a:	9306      	str	r3, [sp, #24]
 800957c:	9308      	str	r3, [sp, #32]
 800957e:	2312      	movs	r3, #18
 8009580:	e7d1      	b.n	8009526 <_dtoa_r+0x25e>
 8009582:	bf00      	nop
 8009584:	f3af 8000 	nop.w
 8009588:	636f4361 	.word	0x636f4361
 800958c:	3fd287a7 	.word	0x3fd287a7
 8009590:	8b60c8b3 	.word	0x8b60c8b3
 8009594:	3fc68a28 	.word	0x3fc68a28
 8009598:	509f79fb 	.word	0x509f79fb
 800959c:	3fd34413 	.word	0x3fd34413
 80095a0:	0800be9e 	.word	0x0800be9e
 80095a4:	0800beb5 	.word	0x0800beb5
 80095a8:	7ff00000 	.word	0x7ff00000
 80095ac:	0800be9a 	.word	0x0800be9a
 80095b0:	0800be91 	.word	0x0800be91
 80095b4:	0800bd13 	.word	0x0800bd13
 80095b8:	3ff80000 	.word	0x3ff80000
 80095bc:	0800c010 	.word	0x0800c010
 80095c0:	0800bf0d 	.word	0x0800bf0d
 80095c4:	2301      	movs	r3, #1
 80095c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80095c8:	e7d4      	b.n	8009574 <_dtoa_r+0x2ac>
 80095ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095cc:	9306      	str	r3, [sp, #24]
 80095ce:	9308      	str	r3, [sp, #32]
 80095d0:	e7b7      	b.n	8009542 <_dtoa_r+0x27a>
 80095d2:	3101      	adds	r1, #1
 80095d4:	0052      	lsls	r2, r2, #1
 80095d6:	e7b7      	b.n	8009548 <_dtoa_r+0x280>
 80095d8:	69eb      	ldr	r3, [r5, #28]
 80095da:	9a03      	ldr	r2, [sp, #12]
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	9b08      	ldr	r3, [sp, #32]
 80095e0:	2b0e      	cmp	r3, #14
 80095e2:	f200 80a8 	bhi.w	8009736 <_dtoa_r+0x46e>
 80095e6:	2c00      	cmp	r4, #0
 80095e8:	f000 80a5 	beq.w	8009736 <_dtoa_r+0x46e>
 80095ec:	f1bb 0f00 	cmp.w	fp, #0
 80095f0:	dd34      	ble.n	800965c <_dtoa_r+0x394>
 80095f2:	4b9a      	ldr	r3, [pc, #616]	; (800985c <_dtoa_r+0x594>)
 80095f4:	f00b 020f 	and.w	r2, fp, #15
 80095f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009600:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009604:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009608:	ea4f 142b 	mov.w	r4, fp, asr #4
 800960c:	d016      	beq.n	800963c <_dtoa_r+0x374>
 800960e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009612:	4b93      	ldr	r3, [pc, #588]	; (8009860 <_dtoa_r+0x598>)
 8009614:	2703      	movs	r7, #3
 8009616:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800961a:	f7f7 f887 	bl	800072c <__aeabi_ddiv>
 800961e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009622:	f004 040f 	and.w	r4, r4, #15
 8009626:	4e8e      	ldr	r6, [pc, #568]	; (8009860 <_dtoa_r+0x598>)
 8009628:	b954      	cbnz	r4, 8009640 <_dtoa_r+0x378>
 800962a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800962e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009632:	f7f7 f87b 	bl	800072c <__aeabi_ddiv>
 8009636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800963a:	e029      	b.n	8009690 <_dtoa_r+0x3c8>
 800963c:	2702      	movs	r7, #2
 800963e:	e7f2      	b.n	8009626 <_dtoa_r+0x35e>
 8009640:	07e1      	lsls	r1, r4, #31
 8009642:	d508      	bpl.n	8009656 <_dtoa_r+0x38e>
 8009644:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009648:	e9d6 2300 	ldrd	r2, r3, [r6]
 800964c:	f7f6 ff44 	bl	80004d8 <__aeabi_dmul>
 8009650:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009654:	3701      	adds	r7, #1
 8009656:	1064      	asrs	r4, r4, #1
 8009658:	3608      	adds	r6, #8
 800965a:	e7e5      	b.n	8009628 <_dtoa_r+0x360>
 800965c:	f000 80a5 	beq.w	80097aa <_dtoa_r+0x4e2>
 8009660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009664:	f1cb 0400 	rsb	r4, fp, #0
 8009668:	4b7c      	ldr	r3, [pc, #496]	; (800985c <_dtoa_r+0x594>)
 800966a:	f004 020f 	and.w	r2, r4, #15
 800966e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f7f6 ff2f 	bl	80004d8 <__aeabi_dmul>
 800967a:	2702      	movs	r7, #2
 800967c:	2300      	movs	r3, #0
 800967e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009682:	4e77      	ldr	r6, [pc, #476]	; (8009860 <_dtoa_r+0x598>)
 8009684:	1124      	asrs	r4, r4, #4
 8009686:	2c00      	cmp	r4, #0
 8009688:	f040 8084 	bne.w	8009794 <_dtoa_r+0x4cc>
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1d2      	bne.n	8009636 <_dtoa_r+0x36e>
 8009690:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009694:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009698:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 8087 	beq.w	80097ae <_dtoa_r+0x4e6>
 80096a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096a4:	2200      	movs	r2, #0
 80096a6:	4b6f      	ldr	r3, [pc, #444]	; (8009864 <_dtoa_r+0x59c>)
 80096a8:	f7f7 f988 	bl	80009bc <__aeabi_dcmplt>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d07e      	beq.n	80097ae <_dtoa_r+0x4e6>
 80096b0:	9b08      	ldr	r3, [sp, #32]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d07b      	beq.n	80097ae <_dtoa_r+0x4e6>
 80096b6:	9b06      	ldr	r3, [sp, #24]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	dd38      	ble.n	800972e <_dtoa_r+0x466>
 80096bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096c0:	2200      	movs	r2, #0
 80096c2:	4b69      	ldr	r3, [pc, #420]	; (8009868 <_dtoa_r+0x5a0>)
 80096c4:	f7f6 ff08 	bl	80004d8 <__aeabi_dmul>
 80096c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096cc:	9c06      	ldr	r4, [sp, #24]
 80096ce:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 80096d2:	3701      	adds	r7, #1
 80096d4:	4638      	mov	r0, r7
 80096d6:	f7f6 fe95 	bl	8000404 <__aeabi_i2d>
 80096da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096de:	f7f6 fefb 	bl	80004d8 <__aeabi_dmul>
 80096e2:	2200      	movs	r2, #0
 80096e4:	4b61      	ldr	r3, [pc, #388]	; (800986c <_dtoa_r+0x5a4>)
 80096e6:	f7f6 fd41 	bl	800016c <__adddf3>
 80096ea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80096ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80096f2:	9611      	str	r6, [sp, #68]	; 0x44
 80096f4:	2c00      	cmp	r4, #0
 80096f6:	d15d      	bne.n	80097b4 <_dtoa_r+0x4ec>
 80096f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096fc:	2200      	movs	r2, #0
 80096fe:	4b5c      	ldr	r3, [pc, #368]	; (8009870 <_dtoa_r+0x5a8>)
 8009700:	f7f6 fd32 	bl	8000168 <__aeabi_dsub>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800970c:	4633      	mov	r3, r6
 800970e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009710:	f7f7 f972 	bl	80009f8 <__aeabi_dcmpgt>
 8009714:	2800      	cmp	r0, #0
 8009716:	f040 8295 	bne.w	8009c44 <_dtoa_r+0x97c>
 800971a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800971e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009720:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009724:	f7f7 f94a 	bl	80009bc <__aeabi_dcmplt>
 8009728:	2800      	cmp	r0, #0
 800972a:	f040 8289 	bne.w	8009c40 <_dtoa_r+0x978>
 800972e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009732:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009736:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009738:	2b00      	cmp	r3, #0
 800973a:	f2c0 8151 	blt.w	80099e0 <_dtoa_r+0x718>
 800973e:	f1bb 0f0e 	cmp.w	fp, #14
 8009742:	f300 814d 	bgt.w	80099e0 <_dtoa_r+0x718>
 8009746:	4b45      	ldr	r3, [pc, #276]	; (800985c <_dtoa_r+0x594>)
 8009748:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800974c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009750:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009754:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009756:	2b00      	cmp	r3, #0
 8009758:	f280 80da 	bge.w	8009910 <_dtoa_r+0x648>
 800975c:	9b08      	ldr	r3, [sp, #32]
 800975e:	2b00      	cmp	r3, #0
 8009760:	f300 80d6 	bgt.w	8009910 <_dtoa_r+0x648>
 8009764:	f040 826b 	bne.w	8009c3e <_dtoa_r+0x976>
 8009768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800976c:	2200      	movs	r2, #0
 800976e:	4b40      	ldr	r3, [pc, #256]	; (8009870 <_dtoa_r+0x5a8>)
 8009770:	f7f6 feb2 	bl	80004d8 <__aeabi_dmul>
 8009774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009778:	f7f7 f934 	bl	80009e4 <__aeabi_dcmpge>
 800977c:	9c08      	ldr	r4, [sp, #32]
 800977e:	4626      	mov	r6, r4
 8009780:	2800      	cmp	r0, #0
 8009782:	f040 8241 	bne.w	8009c08 <_dtoa_r+0x940>
 8009786:	2331      	movs	r3, #49	; 0x31
 8009788:	9f03      	ldr	r7, [sp, #12]
 800978a:	f10b 0b01 	add.w	fp, fp, #1
 800978e:	f807 3b01 	strb.w	r3, [r7], #1
 8009792:	e23d      	b.n	8009c10 <_dtoa_r+0x948>
 8009794:	07e2      	lsls	r2, r4, #31
 8009796:	d505      	bpl.n	80097a4 <_dtoa_r+0x4dc>
 8009798:	e9d6 2300 	ldrd	r2, r3, [r6]
 800979c:	f7f6 fe9c 	bl	80004d8 <__aeabi_dmul>
 80097a0:	2301      	movs	r3, #1
 80097a2:	3701      	adds	r7, #1
 80097a4:	1064      	asrs	r4, r4, #1
 80097a6:	3608      	adds	r6, #8
 80097a8:	e76d      	b.n	8009686 <_dtoa_r+0x3be>
 80097aa:	2702      	movs	r7, #2
 80097ac:	e770      	b.n	8009690 <_dtoa_r+0x3c8>
 80097ae:	46d8      	mov	r8, fp
 80097b0:	9c08      	ldr	r4, [sp, #32]
 80097b2:	e78f      	b.n	80096d4 <_dtoa_r+0x40c>
 80097b4:	9903      	ldr	r1, [sp, #12]
 80097b6:	4b29      	ldr	r3, [pc, #164]	; (800985c <_dtoa_r+0x594>)
 80097b8:	4421      	add	r1, r4
 80097ba:	9112      	str	r1, [sp, #72]	; 0x48
 80097bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097c2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80097c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097ca:	2900      	cmp	r1, #0
 80097cc:	d054      	beq.n	8009878 <_dtoa_r+0x5b0>
 80097ce:	2000      	movs	r0, #0
 80097d0:	4928      	ldr	r1, [pc, #160]	; (8009874 <_dtoa_r+0x5ac>)
 80097d2:	f7f6 ffab 	bl	800072c <__aeabi_ddiv>
 80097d6:	463b      	mov	r3, r7
 80097d8:	4632      	mov	r2, r6
 80097da:	f7f6 fcc5 	bl	8000168 <__aeabi_dsub>
 80097de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80097e2:	9f03      	ldr	r7, [sp, #12]
 80097e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097e8:	f7f7 f926 	bl	8000a38 <__aeabi_d2iz>
 80097ec:	4604      	mov	r4, r0
 80097ee:	f7f6 fe09 	bl	8000404 <__aeabi_i2d>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097fa:	f7f6 fcb5 	bl	8000168 <__aeabi_dsub>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	3430      	adds	r4, #48	; 0x30
 8009804:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800980c:	f807 4b01 	strb.w	r4, [r7], #1
 8009810:	f7f7 f8d4 	bl	80009bc <__aeabi_dcmplt>
 8009814:	2800      	cmp	r0, #0
 8009816:	d173      	bne.n	8009900 <_dtoa_r+0x638>
 8009818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800981c:	2000      	movs	r0, #0
 800981e:	4911      	ldr	r1, [pc, #68]	; (8009864 <_dtoa_r+0x59c>)
 8009820:	f7f6 fca2 	bl	8000168 <__aeabi_dsub>
 8009824:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009828:	f7f7 f8c8 	bl	80009bc <__aeabi_dcmplt>
 800982c:	2800      	cmp	r0, #0
 800982e:	f040 80b6 	bne.w	800999e <_dtoa_r+0x6d6>
 8009832:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009834:	429f      	cmp	r7, r3
 8009836:	f43f af7a 	beq.w	800972e <_dtoa_r+0x466>
 800983a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800983e:	2200      	movs	r2, #0
 8009840:	4b09      	ldr	r3, [pc, #36]	; (8009868 <_dtoa_r+0x5a0>)
 8009842:	f7f6 fe49 	bl	80004d8 <__aeabi_dmul>
 8009846:	2200      	movs	r2, #0
 8009848:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800984c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009850:	4b05      	ldr	r3, [pc, #20]	; (8009868 <_dtoa_r+0x5a0>)
 8009852:	f7f6 fe41 	bl	80004d8 <__aeabi_dmul>
 8009856:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800985a:	e7c3      	b.n	80097e4 <_dtoa_r+0x51c>
 800985c:	0800c010 	.word	0x0800c010
 8009860:	0800bfe8 	.word	0x0800bfe8
 8009864:	3ff00000 	.word	0x3ff00000
 8009868:	40240000 	.word	0x40240000
 800986c:	401c0000 	.word	0x401c0000
 8009870:	40140000 	.word	0x40140000
 8009874:	3fe00000 	.word	0x3fe00000
 8009878:	4630      	mov	r0, r6
 800987a:	4639      	mov	r1, r7
 800987c:	f7f6 fe2c 	bl	80004d8 <__aeabi_dmul>
 8009880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009882:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009886:	9c03      	ldr	r4, [sp, #12]
 8009888:	9314      	str	r3, [sp, #80]	; 0x50
 800988a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800988e:	f7f7 f8d3 	bl	8000a38 <__aeabi_d2iz>
 8009892:	9015      	str	r0, [sp, #84]	; 0x54
 8009894:	f7f6 fdb6 	bl	8000404 <__aeabi_i2d>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098a0:	f7f6 fc62 	bl	8000168 <__aeabi_dsub>
 80098a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098a6:	4606      	mov	r6, r0
 80098a8:	3330      	adds	r3, #48	; 0x30
 80098aa:	f804 3b01 	strb.w	r3, [r4], #1
 80098ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098b0:	460f      	mov	r7, r1
 80098b2:	429c      	cmp	r4, r3
 80098b4:	f04f 0200 	mov.w	r2, #0
 80098b8:	d124      	bne.n	8009904 <_dtoa_r+0x63c>
 80098ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80098be:	4baf      	ldr	r3, [pc, #700]	; (8009b7c <_dtoa_r+0x8b4>)
 80098c0:	f7f6 fc54 	bl	800016c <__adddf3>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4630      	mov	r0, r6
 80098ca:	4639      	mov	r1, r7
 80098cc:	f7f7 f894 	bl	80009f8 <__aeabi_dcmpgt>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d163      	bne.n	800999c <_dtoa_r+0x6d4>
 80098d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098d8:	2000      	movs	r0, #0
 80098da:	49a8      	ldr	r1, [pc, #672]	; (8009b7c <_dtoa_r+0x8b4>)
 80098dc:	f7f6 fc44 	bl	8000168 <__aeabi_dsub>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4630      	mov	r0, r6
 80098e6:	4639      	mov	r1, r7
 80098e8:	f7f7 f868 	bl	80009bc <__aeabi_dcmplt>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	f43f af1e 	beq.w	800972e <_dtoa_r+0x466>
 80098f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80098f4:	1e7b      	subs	r3, r7, #1
 80098f6:	9314      	str	r3, [sp, #80]	; 0x50
 80098f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80098fc:	2b30      	cmp	r3, #48	; 0x30
 80098fe:	d0f8      	beq.n	80098f2 <_dtoa_r+0x62a>
 8009900:	46c3      	mov	fp, r8
 8009902:	e03b      	b.n	800997c <_dtoa_r+0x6b4>
 8009904:	4b9e      	ldr	r3, [pc, #632]	; (8009b80 <_dtoa_r+0x8b8>)
 8009906:	f7f6 fde7 	bl	80004d8 <__aeabi_dmul>
 800990a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800990e:	e7bc      	b.n	800988a <_dtoa_r+0x5c2>
 8009910:	9f03      	ldr	r7, [sp, #12]
 8009912:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	f7f6 ff05 	bl	800072c <__aeabi_ddiv>
 8009922:	f7f7 f889 	bl	8000a38 <__aeabi_d2iz>
 8009926:	4604      	mov	r4, r0
 8009928:	f7f6 fd6c 	bl	8000404 <__aeabi_i2d>
 800992c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009930:	f7f6 fdd2 	bl	80004d8 <__aeabi_dmul>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4640      	mov	r0, r8
 800993a:	4649      	mov	r1, r9
 800993c:	f7f6 fc14 	bl	8000168 <__aeabi_dsub>
 8009940:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009944:	f807 6b01 	strb.w	r6, [r7], #1
 8009948:	9e03      	ldr	r6, [sp, #12]
 800994a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800994e:	1bbe      	subs	r6, r7, r6
 8009950:	45b4      	cmp	ip, r6
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	d136      	bne.n	80099c6 <_dtoa_r+0x6fe>
 8009958:	f7f6 fc08 	bl	800016c <__adddf3>
 800995c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009960:	4680      	mov	r8, r0
 8009962:	4689      	mov	r9, r1
 8009964:	f7f7 f848 	bl	80009f8 <__aeabi_dcmpgt>
 8009968:	bb58      	cbnz	r0, 80099c2 <_dtoa_r+0x6fa>
 800996a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800996e:	4640      	mov	r0, r8
 8009970:	4649      	mov	r1, r9
 8009972:	f7f7 f819 	bl	80009a8 <__aeabi_dcmpeq>
 8009976:	b108      	cbz	r0, 800997c <_dtoa_r+0x6b4>
 8009978:	07e3      	lsls	r3, r4, #31
 800997a:	d422      	bmi.n	80099c2 <_dtoa_r+0x6fa>
 800997c:	4651      	mov	r1, sl
 800997e:	4628      	mov	r0, r5
 8009980:	f001 f8e8 	bl	800ab54 <_Bfree>
 8009984:	2300      	movs	r3, #0
 8009986:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009988:	703b      	strb	r3, [r7, #0]
 800998a:	f10b 0301 	add.w	r3, fp, #1
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009992:	2b00      	cmp	r3, #0
 8009994:	f43f ace6 	beq.w	8009364 <_dtoa_r+0x9c>
 8009998:	601f      	str	r7, [r3, #0]
 800999a:	e4e3      	b.n	8009364 <_dtoa_r+0x9c>
 800999c:	4627      	mov	r7, r4
 800999e:	463b      	mov	r3, r7
 80099a0:	461f      	mov	r7, r3
 80099a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099a6:	2a39      	cmp	r2, #57	; 0x39
 80099a8:	d107      	bne.n	80099ba <_dtoa_r+0x6f2>
 80099aa:	9a03      	ldr	r2, [sp, #12]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d1f7      	bne.n	80099a0 <_dtoa_r+0x6d8>
 80099b0:	2230      	movs	r2, #48	; 0x30
 80099b2:	9903      	ldr	r1, [sp, #12]
 80099b4:	f108 0801 	add.w	r8, r8, #1
 80099b8:	700a      	strb	r2, [r1, #0]
 80099ba:	781a      	ldrb	r2, [r3, #0]
 80099bc:	3201      	adds	r2, #1
 80099be:	701a      	strb	r2, [r3, #0]
 80099c0:	e79e      	b.n	8009900 <_dtoa_r+0x638>
 80099c2:	46d8      	mov	r8, fp
 80099c4:	e7eb      	b.n	800999e <_dtoa_r+0x6d6>
 80099c6:	2200      	movs	r2, #0
 80099c8:	4b6d      	ldr	r3, [pc, #436]	; (8009b80 <_dtoa_r+0x8b8>)
 80099ca:	f7f6 fd85 	bl	80004d8 <__aeabi_dmul>
 80099ce:	2200      	movs	r2, #0
 80099d0:	2300      	movs	r3, #0
 80099d2:	4680      	mov	r8, r0
 80099d4:	4689      	mov	r9, r1
 80099d6:	f7f6 ffe7 	bl	80009a8 <__aeabi_dcmpeq>
 80099da:	2800      	cmp	r0, #0
 80099dc:	d09b      	beq.n	8009916 <_dtoa_r+0x64e>
 80099de:	e7cd      	b.n	800997c <_dtoa_r+0x6b4>
 80099e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099e2:	2a00      	cmp	r2, #0
 80099e4:	f000 80c4 	beq.w	8009b70 <_dtoa_r+0x8a8>
 80099e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099ea:	2a01      	cmp	r2, #1
 80099ec:	f300 80a8 	bgt.w	8009b40 <_dtoa_r+0x878>
 80099f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80099f2:	2a00      	cmp	r2, #0
 80099f4:	f000 80a0 	beq.w	8009b38 <_dtoa_r+0x870>
 80099f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80099fc:	464f      	mov	r7, r9
 80099fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a02:	2101      	movs	r1, #1
 8009a04:	441a      	add	r2, r3
 8009a06:	4628      	mov	r0, r5
 8009a08:	4499      	add	r9, r3
 8009a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a0c:	f001 f9a2 	bl	800ad54 <__i2b>
 8009a10:	4606      	mov	r6, r0
 8009a12:	b15f      	cbz	r7, 8009a2c <_dtoa_r+0x764>
 8009a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	dd08      	ble.n	8009a2c <_dtoa_r+0x764>
 8009a1a:	42bb      	cmp	r3, r7
 8009a1c:	bfa8      	it	ge
 8009a1e:	463b      	movge	r3, r7
 8009a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a22:	eba9 0903 	sub.w	r9, r9, r3
 8009a26:	1aff      	subs	r7, r7, r3
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2e:	b1f3      	cbz	r3, 8009a6e <_dtoa_r+0x7a6>
 8009a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 80a0 	beq.w	8009b78 <_dtoa_r+0x8b0>
 8009a38:	2c00      	cmp	r4, #0
 8009a3a:	dd10      	ble.n	8009a5e <_dtoa_r+0x796>
 8009a3c:	4631      	mov	r1, r6
 8009a3e:	4622      	mov	r2, r4
 8009a40:	4628      	mov	r0, r5
 8009a42:	f001 fa45 	bl	800aed0 <__pow5mult>
 8009a46:	4652      	mov	r2, sl
 8009a48:	4601      	mov	r1, r0
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f001 f997 	bl	800ad80 <__multiply>
 8009a52:	4680      	mov	r8, r0
 8009a54:	4651      	mov	r1, sl
 8009a56:	4628      	mov	r0, r5
 8009a58:	f001 f87c 	bl	800ab54 <_Bfree>
 8009a5c:	46c2      	mov	sl, r8
 8009a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a60:	1b1a      	subs	r2, r3, r4
 8009a62:	d004      	beq.n	8009a6e <_dtoa_r+0x7a6>
 8009a64:	4651      	mov	r1, sl
 8009a66:	4628      	mov	r0, r5
 8009a68:	f001 fa32 	bl	800aed0 <__pow5mult>
 8009a6c:	4682      	mov	sl, r0
 8009a6e:	2101      	movs	r1, #1
 8009a70:	4628      	mov	r0, r5
 8009a72:	f001 f96f 	bl	800ad54 <__i2b>
 8009a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a78:	4604      	mov	r4, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f340 8082 	ble.w	8009b84 <_dtoa_r+0x8bc>
 8009a80:	461a      	mov	r2, r3
 8009a82:	4601      	mov	r1, r0
 8009a84:	4628      	mov	r0, r5
 8009a86:	f001 fa23 	bl	800aed0 <__pow5mult>
 8009a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	dd7b      	ble.n	8009b8a <_dtoa_r+0x8c2>
 8009a92:	f04f 0800 	mov.w	r8, #0
 8009a96:	6923      	ldr	r3, [r4, #16]
 8009a98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a9c:	6918      	ldr	r0, [r3, #16]
 8009a9e:	f001 f90b 	bl	800acb8 <__hi0bits>
 8009aa2:	f1c0 0020 	rsb	r0, r0, #32
 8009aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa8:	4418      	add	r0, r3
 8009aaa:	f010 001f 	ands.w	r0, r0, #31
 8009aae:	f000 8092 	beq.w	8009bd6 <_dtoa_r+0x90e>
 8009ab2:	f1c0 0320 	rsb	r3, r0, #32
 8009ab6:	2b04      	cmp	r3, #4
 8009ab8:	f340 8085 	ble.w	8009bc6 <_dtoa_r+0x8fe>
 8009abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009abe:	f1c0 001c 	rsb	r0, r0, #28
 8009ac2:	4403      	add	r3, r0
 8009ac4:	4481      	add	r9, r0
 8009ac6:	4407      	add	r7, r0
 8009ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aca:	f1b9 0f00 	cmp.w	r9, #0
 8009ace:	dd05      	ble.n	8009adc <_dtoa_r+0x814>
 8009ad0:	4651      	mov	r1, sl
 8009ad2:	464a      	mov	r2, r9
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	f001 fa55 	bl	800af84 <__lshift>
 8009ada:	4682      	mov	sl, r0
 8009adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dd05      	ble.n	8009aee <_dtoa_r+0x826>
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	f001 fa4c 	bl	800af84 <__lshift>
 8009aec:	4604      	mov	r4, r0
 8009aee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d072      	beq.n	8009bda <_dtoa_r+0x912>
 8009af4:	4621      	mov	r1, r4
 8009af6:	4650      	mov	r0, sl
 8009af8:	f001 fab0 	bl	800b05c <__mcmp>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	da6c      	bge.n	8009bda <_dtoa_r+0x912>
 8009b00:	2300      	movs	r3, #0
 8009b02:	4651      	mov	r1, sl
 8009b04:	220a      	movs	r2, #10
 8009b06:	4628      	mov	r0, r5
 8009b08:	f001 f846 	bl	800ab98 <__multadd>
 8009b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b0e:	4682      	mov	sl, r0
 8009b10:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 81ac 	beq.w	8009e72 <_dtoa_r+0xbaa>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	220a      	movs	r2, #10
 8009b20:	4628      	mov	r0, r5
 8009b22:	f001 f839 	bl	800ab98 <__multadd>
 8009b26:	9b06      	ldr	r3, [sp, #24]
 8009b28:	4606      	mov	r6, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f300 8093 	bgt.w	8009c56 <_dtoa_r+0x98e>
 8009b30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	dc59      	bgt.n	8009bea <_dtoa_r+0x922>
 8009b36:	e08e      	b.n	8009c56 <_dtoa_r+0x98e>
 8009b38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009b3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b3e:	e75d      	b.n	80099fc <_dtoa_r+0x734>
 8009b40:	9b08      	ldr	r3, [sp, #32]
 8009b42:	1e5c      	subs	r4, r3, #1
 8009b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b46:	42a3      	cmp	r3, r4
 8009b48:	bfbf      	itttt	lt
 8009b4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009b4c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009b4e:	1ae3      	sublt	r3, r4, r3
 8009b50:	18d2      	addlt	r2, r2, r3
 8009b52:	bfa8      	it	ge
 8009b54:	1b1c      	subge	r4, r3, r4
 8009b56:	9b08      	ldr	r3, [sp, #32]
 8009b58:	bfbe      	ittt	lt
 8009b5a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009b5c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009b5e:	2400      	movlt	r4, #0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	bfb5      	itete	lt
 8009b64:	eba9 0703 	sublt.w	r7, r9, r3
 8009b68:	464f      	movge	r7, r9
 8009b6a:	2300      	movlt	r3, #0
 8009b6c:	9b08      	ldrge	r3, [sp, #32]
 8009b6e:	e747      	b.n	8009a00 <_dtoa_r+0x738>
 8009b70:	464f      	mov	r7, r9
 8009b72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009b76:	e74c      	b.n	8009a12 <_dtoa_r+0x74a>
 8009b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b7a:	e773      	b.n	8009a64 <_dtoa_r+0x79c>
 8009b7c:	3fe00000 	.word	0x3fe00000
 8009b80:	40240000 	.word	0x40240000
 8009b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	dc18      	bgt.n	8009bbc <_dtoa_r+0x8f4>
 8009b8a:	9b04      	ldr	r3, [sp, #16]
 8009b8c:	b9b3      	cbnz	r3, 8009bbc <_dtoa_r+0x8f4>
 8009b8e:	9b05      	ldr	r3, [sp, #20]
 8009b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b94:	b993      	cbnz	r3, 8009bbc <_dtoa_r+0x8f4>
 8009b96:	9b05      	ldr	r3, [sp, #20]
 8009b98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b9c:	0d1b      	lsrs	r3, r3, #20
 8009b9e:	051b      	lsls	r3, r3, #20
 8009ba0:	b17b      	cbz	r3, 8009bc2 <_dtoa_r+0x8fa>
 8009ba2:	f04f 0801 	mov.w	r8, #1
 8009ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba8:	f109 0901 	add.w	r9, r9, #1
 8009bac:	3301      	adds	r3, #1
 8009bae:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f47f af6f 	bne.w	8009a96 <_dtoa_r+0x7ce>
 8009bb8:	2001      	movs	r0, #1
 8009bba:	e774      	b.n	8009aa6 <_dtoa_r+0x7de>
 8009bbc:	f04f 0800 	mov.w	r8, #0
 8009bc0:	e7f6      	b.n	8009bb0 <_dtoa_r+0x8e8>
 8009bc2:	4698      	mov	r8, r3
 8009bc4:	e7f4      	b.n	8009bb0 <_dtoa_r+0x8e8>
 8009bc6:	d080      	beq.n	8009aca <_dtoa_r+0x802>
 8009bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bca:	331c      	adds	r3, #28
 8009bcc:	441a      	add	r2, r3
 8009bce:	4499      	add	r9, r3
 8009bd0:	441f      	add	r7, r3
 8009bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8009bd4:	e779      	b.n	8009aca <_dtoa_r+0x802>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	e7f6      	b.n	8009bc8 <_dtoa_r+0x900>
 8009bda:	9b08      	ldr	r3, [sp, #32]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dc34      	bgt.n	8009c4a <_dtoa_r+0x982>
 8009be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	dd31      	ble.n	8009c4a <_dtoa_r+0x982>
 8009be6:	9b08      	ldr	r3, [sp, #32]
 8009be8:	9306      	str	r3, [sp, #24]
 8009bea:	9b06      	ldr	r3, [sp, #24]
 8009bec:	b963      	cbnz	r3, 8009c08 <_dtoa_r+0x940>
 8009bee:	4621      	mov	r1, r4
 8009bf0:	2205      	movs	r2, #5
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f000 ffd0 	bl	800ab98 <__multadd>
 8009bf8:	4601      	mov	r1, r0
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	4650      	mov	r0, sl
 8009bfe:	f001 fa2d 	bl	800b05c <__mcmp>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	f73f adbf 	bgt.w	8009786 <_dtoa_r+0x4be>
 8009c08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c0a:	9f03      	ldr	r7, [sp, #12]
 8009c0c:	ea6f 0b03 	mvn.w	fp, r3
 8009c10:	f04f 0800 	mov.w	r8, #0
 8009c14:	4621      	mov	r1, r4
 8009c16:	4628      	mov	r0, r5
 8009c18:	f000 ff9c 	bl	800ab54 <_Bfree>
 8009c1c:	2e00      	cmp	r6, #0
 8009c1e:	f43f aead 	beq.w	800997c <_dtoa_r+0x6b4>
 8009c22:	f1b8 0f00 	cmp.w	r8, #0
 8009c26:	d005      	beq.n	8009c34 <_dtoa_r+0x96c>
 8009c28:	45b0      	cmp	r8, r6
 8009c2a:	d003      	beq.n	8009c34 <_dtoa_r+0x96c>
 8009c2c:	4641      	mov	r1, r8
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 ff90 	bl	800ab54 <_Bfree>
 8009c34:	4631      	mov	r1, r6
 8009c36:	4628      	mov	r0, r5
 8009c38:	f000 ff8c 	bl	800ab54 <_Bfree>
 8009c3c:	e69e      	b.n	800997c <_dtoa_r+0x6b4>
 8009c3e:	2400      	movs	r4, #0
 8009c40:	4626      	mov	r6, r4
 8009c42:	e7e1      	b.n	8009c08 <_dtoa_r+0x940>
 8009c44:	46c3      	mov	fp, r8
 8009c46:	4626      	mov	r6, r4
 8009c48:	e59d      	b.n	8009786 <_dtoa_r+0x4be>
 8009c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 80c8 	beq.w	8009de2 <_dtoa_r+0xb1a>
 8009c52:	9b08      	ldr	r3, [sp, #32]
 8009c54:	9306      	str	r3, [sp, #24]
 8009c56:	2f00      	cmp	r7, #0
 8009c58:	dd05      	ble.n	8009c66 <_dtoa_r+0x99e>
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	463a      	mov	r2, r7
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f001 f990 	bl	800af84 <__lshift>
 8009c64:	4606      	mov	r6, r0
 8009c66:	f1b8 0f00 	cmp.w	r8, #0
 8009c6a:	d05b      	beq.n	8009d24 <_dtoa_r+0xa5c>
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	6871      	ldr	r1, [r6, #4]
 8009c70:	f000 ff30 	bl	800aad4 <_Balloc>
 8009c74:	4607      	mov	r7, r0
 8009c76:	b928      	cbnz	r0, 8009c84 <_dtoa_r+0x9bc>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009c7e:	4b81      	ldr	r3, [pc, #516]	; (8009e84 <_dtoa_r+0xbbc>)
 8009c80:	f7ff bb36 	b.w	80092f0 <_dtoa_r+0x28>
 8009c84:	6932      	ldr	r2, [r6, #16]
 8009c86:	f106 010c 	add.w	r1, r6, #12
 8009c8a:	3202      	adds	r2, #2
 8009c8c:	0092      	lsls	r2, r2, #2
 8009c8e:	300c      	adds	r0, #12
 8009c90:	f7ff fa75 	bl	800917e <memcpy>
 8009c94:	2201      	movs	r2, #1
 8009c96:	4639      	mov	r1, r7
 8009c98:	4628      	mov	r0, r5
 8009c9a:	f001 f973 	bl	800af84 <__lshift>
 8009c9e:	46b0      	mov	r8, r6
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	9b03      	ldr	r3, [sp, #12]
 8009ca4:	9a03      	ldr	r2, [sp, #12]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	9308      	str	r3, [sp, #32]
 8009caa:	9b06      	ldr	r3, [sp, #24]
 8009cac:	4413      	add	r3, r2
 8009cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cb0:	9b04      	ldr	r3, [sp, #16]
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8009cb8:	9b08      	ldr	r3, [sp, #32]
 8009cba:	4621      	mov	r1, r4
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	4650      	mov	r0, sl
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	f7ff fa75 	bl	80091b0 <quorem>
 8009cc6:	4641      	mov	r1, r8
 8009cc8:	9006      	str	r0, [sp, #24]
 8009cca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009cce:	4650      	mov	r0, sl
 8009cd0:	f001 f9c4 	bl	800b05c <__mcmp>
 8009cd4:	4632      	mov	r2, r6
 8009cd6:	9009      	str	r0, [sp, #36]	; 0x24
 8009cd8:	4621      	mov	r1, r4
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f001 f9da 	bl	800b094 <__mdiff>
 8009ce0:	68c2      	ldr	r2, [r0, #12]
 8009ce2:	4607      	mov	r7, r0
 8009ce4:	bb02      	cbnz	r2, 8009d28 <_dtoa_r+0xa60>
 8009ce6:	4601      	mov	r1, r0
 8009ce8:	4650      	mov	r0, sl
 8009cea:	f001 f9b7 	bl	800b05c <__mcmp>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	4639      	mov	r1, r7
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	920c      	str	r2, [sp, #48]	; 0x30
 8009cf6:	f000 ff2d 	bl	800ab54 <_Bfree>
 8009cfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cfe:	9f08      	ldr	r7, [sp, #32]
 8009d00:	ea43 0102 	orr.w	r1, r3, r2
 8009d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d06:	4319      	orrs	r1, r3
 8009d08:	d110      	bne.n	8009d2c <_dtoa_r+0xa64>
 8009d0a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d0e:	d029      	beq.n	8009d64 <_dtoa_r+0xa9c>
 8009d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	dd02      	ble.n	8009d1c <_dtoa_r+0xa54>
 8009d16:	9b06      	ldr	r3, [sp, #24]
 8009d18:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009d1c:	9b04      	ldr	r3, [sp, #16]
 8009d1e:	f883 9000 	strb.w	r9, [r3]
 8009d22:	e777      	b.n	8009c14 <_dtoa_r+0x94c>
 8009d24:	4630      	mov	r0, r6
 8009d26:	e7ba      	b.n	8009c9e <_dtoa_r+0x9d6>
 8009d28:	2201      	movs	r2, #1
 8009d2a:	e7e1      	b.n	8009cf0 <_dtoa_r+0xa28>
 8009d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	db04      	blt.n	8009d3c <_dtoa_r+0xa74>
 8009d32:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009d34:	430b      	orrs	r3, r1
 8009d36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d38:	430b      	orrs	r3, r1
 8009d3a:	d120      	bne.n	8009d7e <_dtoa_r+0xab6>
 8009d3c:	2a00      	cmp	r2, #0
 8009d3e:	dded      	ble.n	8009d1c <_dtoa_r+0xa54>
 8009d40:	4651      	mov	r1, sl
 8009d42:	2201      	movs	r2, #1
 8009d44:	4628      	mov	r0, r5
 8009d46:	f001 f91d 	bl	800af84 <__lshift>
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	4682      	mov	sl, r0
 8009d4e:	f001 f985 	bl	800b05c <__mcmp>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	dc03      	bgt.n	8009d5e <_dtoa_r+0xa96>
 8009d56:	d1e1      	bne.n	8009d1c <_dtoa_r+0xa54>
 8009d58:	f019 0f01 	tst.w	r9, #1
 8009d5c:	d0de      	beq.n	8009d1c <_dtoa_r+0xa54>
 8009d5e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d62:	d1d8      	bne.n	8009d16 <_dtoa_r+0xa4e>
 8009d64:	2339      	movs	r3, #57	; 0x39
 8009d66:	9a04      	ldr	r2, [sp, #16]
 8009d68:	7013      	strb	r3, [r2, #0]
 8009d6a:	463b      	mov	r3, r7
 8009d6c:	461f      	mov	r7, r3
 8009d6e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009d72:	3b01      	subs	r3, #1
 8009d74:	2a39      	cmp	r2, #57	; 0x39
 8009d76:	d06b      	beq.n	8009e50 <_dtoa_r+0xb88>
 8009d78:	3201      	adds	r2, #1
 8009d7a:	701a      	strb	r2, [r3, #0]
 8009d7c:	e74a      	b.n	8009c14 <_dtoa_r+0x94c>
 8009d7e:	2a00      	cmp	r2, #0
 8009d80:	dd07      	ble.n	8009d92 <_dtoa_r+0xaca>
 8009d82:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d86:	d0ed      	beq.n	8009d64 <_dtoa_r+0xa9c>
 8009d88:	9a04      	ldr	r2, [sp, #16]
 8009d8a:	f109 0301 	add.w	r3, r9, #1
 8009d8e:	7013      	strb	r3, [r2, #0]
 8009d90:	e740      	b.n	8009c14 <_dtoa_r+0x94c>
 8009d92:	9b08      	ldr	r3, [sp, #32]
 8009d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d96:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d042      	beq.n	8009e24 <_dtoa_r+0xb5c>
 8009d9e:	4651      	mov	r1, sl
 8009da0:	2300      	movs	r3, #0
 8009da2:	220a      	movs	r2, #10
 8009da4:	4628      	mov	r0, r5
 8009da6:	f000 fef7 	bl	800ab98 <__multadd>
 8009daa:	45b0      	cmp	r8, r6
 8009dac:	4682      	mov	sl, r0
 8009dae:	f04f 0300 	mov.w	r3, #0
 8009db2:	f04f 020a 	mov.w	r2, #10
 8009db6:	4641      	mov	r1, r8
 8009db8:	4628      	mov	r0, r5
 8009dba:	d107      	bne.n	8009dcc <_dtoa_r+0xb04>
 8009dbc:	f000 feec 	bl	800ab98 <__multadd>
 8009dc0:	4680      	mov	r8, r0
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	9b08      	ldr	r3, [sp, #32]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	9308      	str	r3, [sp, #32]
 8009dca:	e775      	b.n	8009cb8 <_dtoa_r+0x9f0>
 8009dcc:	f000 fee4 	bl	800ab98 <__multadd>
 8009dd0:	4631      	mov	r1, r6
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	220a      	movs	r2, #10
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f000 fedd 	bl	800ab98 <__multadd>
 8009dde:	4606      	mov	r6, r0
 8009de0:	e7f0      	b.n	8009dc4 <_dtoa_r+0xafc>
 8009de2:	9b08      	ldr	r3, [sp, #32]
 8009de4:	9306      	str	r3, [sp, #24]
 8009de6:	9f03      	ldr	r7, [sp, #12]
 8009de8:	4621      	mov	r1, r4
 8009dea:	4650      	mov	r0, sl
 8009dec:	f7ff f9e0 	bl	80091b0 <quorem>
 8009df0:	9b03      	ldr	r3, [sp, #12]
 8009df2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009df6:	f807 9b01 	strb.w	r9, [r7], #1
 8009dfa:	1afa      	subs	r2, r7, r3
 8009dfc:	9b06      	ldr	r3, [sp, #24]
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	dd07      	ble.n	8009e12 <_dtoa_r+0xb4a>
 8009e02:	4651      	mov	r1, sl
 8009e04:	2300      	movs	r3, #0
 8009e06:	220a      	movs	r2, #10
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f000 fec5 	bl	800ab98 <__multadd>
 8009e0e:	4682      	mov	sl, r0
 8009e10:	e7ea      	b.n	8009de8 <_dtoa_r+0xb20>
 8009e12:	9b06      	ldr	r3, [sp, #24]
 8009e14:	f04f 0800 	mov.w	r8, #0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	bfcc      	ite	gt
 8009e1c:	461f      	movgt	r7, r3
 8009e1e:	2701      	movle	r7, #1
 8009e20:	9b03      	ldr	r3, [sp, #12]
 8009e22:	441f      	add	r7, r3
 8009e24:	4651      	mov	r1, sl
 8009e26:	2201      	movs	r2, #1
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f001 f8ab 	bl	800af84 <__lshift>
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4682      	mov	sl, r0
 8009e32:	f001 f913 	bl	800b05c <__mcmp>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	dc97      	bgt.n	8009d6a <_dtoa_r+0xaa2>
 8009e3a:	d102      	bne.n	8009e42 <_dtoa_r+0xb7a>
 8009e3c:	f019 0f01 	tst.w	r9, #1
 8009e40:	d193      	bne.n	8009d6a <_dtoa_r+0xaa2>
 8009e42:	463b      	mov	r3, r7
 8009e44:	461f      	mov	r7, r3
 8009e46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e4a:	2a30      	cmp	r2, #48	; 0x30
 8009e4c:	d0fa      	beq.n	8009e44 <_dtoa_r+0xb7c>
 8009e4e:	e6e1      	b.n	8009c14 <_dtoa_r+0x94c>
 8009e50:	9a03      	ldr	r2, [sp, #12]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d18a      	bne.n	8009d6c <_dtoa_r+0xaa4>
 8009e56:	2331      	movs	r3, #49	; 0x31
 8009e58:	f10b 0b01 	add.w	fp, fp, #1
 8009e5c:	e797      	b.n	8009d8e <_dtoa_r+0xac6>
 8009e5e:	4b0a      	ldr	r3, [pc, #40]	; (8009e88 <_dtoa_r+0xbc0>)
 8009e60:	f7ff ba9f 	b.w	80093a2 <_dtoa_r+0xda>
 8009e64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f47f aa77 	bne.w	800935a <_dtoa_r+0x92>
 8009e6c:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <_dtoa_r+0xbc4>)
 8009e6e:	f7ff ba98 	b.w	80093a2 <_dtoa_r+0xda>
 8009e72:	9b06      	ldr	r3, [sp, #24]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	dcb6      	bgt.n	8009de6 <_dtoa_r+0xb1e>
 8009e78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	f73f aeb5 	bgt.w	8009bea <_dtoa_r+0x922>
 8009e80:	e7b1      	b.n	8009de6 <_dtoa_r+0xb1e>
 8009e82:	bf00      	nop
 8009e84:	0800bf0d 	.word	0x0800bf0d
 8009e88:	0800bd12 	.word	0x0800bd12
 8009e8c:	0800be91 	.word	0x0800be91

08009e90 <rshift>:
 8009e90:	6903      	ldr	r3, [r0, #16]
 8009e92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e9a:	f100 0414 	add.w	r4, r0, #20
 8009e9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ea2:	dd46      	ble.n	8009f32 <rshift+0xa2>
 8009ea4:	f011 011f 	ands.w	r1, r1, #31
 8009ea8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009eac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009eb0:	d10c      	bne.n	8009ecc <rshift+0x3c>
 8009eb2:	4629      	mov	r1, r5
 8009eb4:	f100 0710 	add.w	r7, r0, #16
 8009eb8:	42b1      	cmp	r1, r6
 8009eba:	d335      	bcc.n	8009f28 <rshift+0x98>
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	1eea      	subs	r2, r5, #3
 8009ec2:	4296      	cmp	r6, r2
 8009ec4:	bf38      	it	cc
 8009ec6:	2300      	movcc	r3, #0
 8009ec8:	4423      	add	r3, r4
 8009eca:	e015      	b.n	8009ef8 <rshift+0x68>
 8009ecc:	46a1      	mov	r9, r4
 8009ece:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ed2:	f1c1 0820 	rsb	r8, r1, #32
 8009ed6:	40cf      	lsrs	r7, r1
 8009ed8:	f105 0e04 	add.w	lr, r5, #4
 8009edc:	4576      	cmp	r6, lr
 8009ede:	46f4      	mov	ip, lr
 8009ee0:	d816      	bhi.n	8009f10 <rshift+0x80>
 8009ee2:	1a9a      	subs	r2, r3, r2
 8009ee4:	0092      	lsls	r2, r2, #2
 8009ee6:	3a04      	subs	r2, #4
 8009ee8:	3501      	adds	r5, #1
 8009eea:	42ae      	cmp	r6, r5
 8009eec:	bf38      	it	cc
 8009eee:	2200      	movcc	r2, #0
 8009ef0:	18a3      	adds	r3, r4, r2
 8009ef2:	50a7      	str	r7, [r4, r2]
 8009ef4:	b107      	cbz	r7, 8009ef8 <rshift+0x68>
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	eba3 0204 	sub.w	r2, r3, r4
 8009efe:	bf08      	it	eq
 8009f00:	2300      	moveq	r3, #0
 8009f02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f06:	6102      	str	r2, [r0, #16]
 8009f08:	bf08      	it	eq
 8009f0a:	6143      	streq	r3, [r0, #20]
 8009f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f10:	f8dc c000 	ldr.w	ip, [ip]
 8009f14:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f18:	ea4c 0707 	orr.w	r7, ip, r7
 8009f1c:	f849 7b04 	str.w	r7, [r9], #4
 8009f20:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f24:	40cf      	lsrs	r7, r1
 8009f26:	e7d9      	b.n	8009edc <rshift+0x4c>
 8009f28:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f2c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f30:	e7c2      	b.n	8009eb8 <rshift+0x28>
 8009f32:	4623      	mov	r3, r4
 8009f34:	e7e0      	b.n	8009ef8 <rshift+0x68>

08009f36 <__hexdig_fun>:
 8009f36:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009f3a:	2b09      	cmp	r3, #9
 8009f3c:	d802      	bhi.n	8009f44 <__hexdig_fun+0xe>
 8009f3e:	3820      	subs	r0, #32
 8009f40:	b2c0      	uxtb	r0, r0
 8009f42:	4770      	bx	lr
 8009f44:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009f48:	2b05      	cmp	r3, #5
 8009f4a:	d801      	bhi.n	8009f50 <__hexdig_fun+0x1a>
 8009f4c:	3847      	subs	r0, #71	; 0x47
 8009f4e:	e7f7      	b.n	8009f40 <__hexdig_fun+0xa>
 8009f50:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009f54:	2b05      	cmp	r3, #5
 8009f56:	d801      	bhi.n	8009f5c <__hexdig_fun+0x26>
 8009f58:	3827      	subs	r0, #39	; 0x27
 8009f5a:	e7f1      	b.n	8009f40 <__hexdig_fun+0xa>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	4770      	bx	lr

08009f60 <__gethex>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	4681      	mov	r9, r0
 8009f66:	468a      	mov	sl, r1
 8009f68:	4617      	mov	r7, r2
 8009f6a:	680a      	ldr	r2, [r1, #0]
 8009f6c:	b085      	sub	sp, #20
 8009f6e:	f102 0b02 	add.w	fp, r2, #2
 8009f72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009f7a:	9302      	str	r3, [sp, #8]
 8009f7c:	32fe      	adds	r2, #254	; 0xfe
 8009f7e:	eb02 030b 	add.w	r3, r2, fp
 8009f82:	46d8      	mov	r8, fp
 8009f84:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009f88:	9301      	str	r3, [sp, #4]
 8009f8a:	2830      	cmp	r0, #48	; 0x30
 8009f8c:	d0f7      	beq.n	8009f7e <__gethex+0x1e>
 8009f8e:	f7ff ffd2 	bl	8009f36 <__hexdig_fun>
 8009f92:	4604      	mov	r4, r0
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d138      	bne.n	800a00a <__gethex+0xaa>
 8009f98:	2201      	movs	r2, #1
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	49a7      	ldr	r1, [pc, #668]	; (800a23c <__gethex+0x2dc>)
 8009f9e:	f7ff f895 	bl	80090cc <strncmp>
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d169      	bne.n	800a07c <__gethex+0x11c>
 8009fa8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009fac:	465d      	mov	r5, fp
 8009fae:	f7ff ffc2 	bl	8009f36 <__hexdig_fun>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d064      	beq.n	800a080 <__gethex+0x120>
 8009fb6:	465a      	mov	r2, fp
 8009fb8:	7810      	ldrb	r0, [r2, #0]
 8009fba:	4690      	mov	r8, r2
 8009fbc:	2830      	cmp	r0, #48	; 0x30
 8009fbe:	f102 0201 	add.w	r2, r2, #1
 8009fc2:	d0f9      	beq.n	8009fb8 <__gethex+0x58>
 8009fc4:	f7ff ffb7 	bl	8009f36 <__hexdig_fun>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	fab0 f480 	clz	r4, r0
 8009fce:	465e      	mov	r6, fp
 8009fd0:	0964      	lsrs	r4, r4, #5
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	4615      	mov	r5, r2
 8009fd8:	7828      	ldrb	r0, [r5, #0]
 8009fda:	3201      	adds	r2, #1
 8009fdc:	f7ff ffab 	bl	8009f36 <__hexdig_fun>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d1f8      	bne.n	8009fd6 <__gethex+0x76>
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	4994      	ldr	r1, [pc, #592]	; (800a23c <__gethex+0x2dc>)
 8009fea:	f7ff f86f 	bl	80090cc <strncmp>
 8009fee:	b978      	cbnz	r0, 800a010 <__gethex+0xb0>
 8009ff0:	b946      	cbnz	r6, 800a004 <__gethex+0xa4>
 8009ff2:	1c6e      	adds	r6, r5, #1
 8009ff4:	4632      	mov	r2, r6
 8009ff6:	4615      	mov	r5, r2
 8009ff8:	7828      	ldrb	r0, [r5, #0]
 8009ffa:	3201      	adds	r2, #1
 8009ffc:	f7ff ff9b 	bl	8009f36 <__hexdig_fun>
 800a000:	2800      	cmp	r0, #0
 800a002:	d1f8      	bne.n	8009ff6 <__gethex+0x96>
 800a004:	1b73      	subs	r3, r6, r5
 800a006:	009e      	lsls	r6, r3, #2
 800a008:	e004      	b.n	800a014 <__gethex+0xb4>
 800a00a:	2400      	movs	r4, #0
 800a00c:	4626      	mov	r6, r4
 800a00e:	e7e1      	b.n	8009fd4 <__gethex+0x74>
 800a010:	2e00      	cmp	r6, #0
 800a012:	d1f7      	bne.n	800a004 <__gethex+0xa4>
 800a014:	782b      	ldrb	r3, [r5, #0]
 800a016:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a01a:	2b50      	cmp	r3, #80	; 0x50
 800a01c:	d13d      	bne.n	800a09a <__gethex+0x13a>
 800a01e:	786b      	ldrb	r3, [r5, #1]
 800a020:	2b2b      	cmp	r3, #43	; 0x2b
 800a022:	d02f      	beq.n	800a084 <__gethex+0x124>
 800a024:	2b2d      	cmp	r3, #45	; 0x2d
 800a026:	d031      	beq.n	800a08c <__gethex+0x12c>
 800a028:	f04f 0b00 	mov.w	fp, #0
 800a02c:	1c69      	adds	r1, r5, #1
 800a02e:	7808      	ldrb	r0, [r1, #0]
 800a030:	f7ff ff81 	bl	8009f36 <__hexdig_fun>
 800a034:	1e42      	subs	r2, r0, #1
 800a036:	b2d2      	uxtb	r2, r2
 800a038:	2a18      	cmp	r2, #24
 800a03a:	d82e      	bhi.n	800a09a <__gethex+0x13a>
 800a03c:	f1a0 0210 	sub.w	r2, r0, #16
 800a040:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a044:	f7ff ff77 	bl	8009f36 <__hexdig_fun>
 800a048:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800a04c:	fa5f fc8c 	uxtb.w	ip, ip
 800a050:	f1bc 0f18 	cmp.w	ip, #24
 800a054:	d91d      	bls.n	800a092 <__gethex+0x132>
 800a056:	f1bb 0f00 	cmp.w	fp, #0
 800a05a:	d000      	beq.n	800a05e <__gethex+0xfe>
 800a05c:	4252      	negs	r2, r2
 800a05e:	4416      	add	r6, r2
 800a060:	f8ca 1000 	str.w	r1, [sl]
 800a064:	b1dc      	cbz	r4, 800a09e <__gethex+0x13e>
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	bf14      	ite	ne
 800a06c:	f04f 0800 	movne.w	r8, #0
 800a070:	f04f 0806 	moveq.w	r8, #6
 800a074:	4640      	mov	r0, r8
 800a076:	b005      	add	sp, #20
 800a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	4645      	mov	r5, r8
 800a07e:	4626      	mov	r6, r4
 800a080:	2401      	movs	r4, #1
 800a082:	e7c7      	b.n	800a014 <__gethex+0xb4>
 800a084:	f04f 0b00 	mov.w	fp, #0
 800a088:	1ca9      	adds	r1, r5, #2
 800a08a:	e7d0      	b.n	800a02e <__gethex+0xce>
 800a08c:	f04f 0b01 	mov.w	fp, #1
 800a090:	e7fa      	b.n	800a088 <__gethex+0x128>
 800a092:	230a      	movs	r3, #10
 800a094:	fb03 0002 	mla	r0, r3, r2, r0
 800a098:	e7d0      	b.n	800a03c <__gethex+0xdc>
 800a09a:	4629      	mov	r1, r5
 800a09c:	e7e0      	b.n	800a060 <__gethex+0x100>
 800a09e:	4621      	mov	r1, r4
 800a0a0:	eba5 0308 	sub.w	r3, r5, r8
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	2b07      	cmp	r3, #7
 800a0a8:	dc0a      	bgt.n	800a0c0 <__gethex+0x160>
 800a0aa:	4648      	mov	r0, r9
 800a0ac:	f000 fd12 	bl	800aad4 <_Balloc>
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	b940      	cbnz	r0, 800a0c6 <__gethex+0x166>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	21e4      	movs	r1, #228	; 0xe4
 800a0b8:	4b61      	ldr	r3, [pc, #388]	; (800a240 <__gethex+0x2e0>)
 800a0ba:	4862      	ldr	r0, [pc, #392]	; (800a244 <__gethex+0x2e4>)
 800a0bc:	f001 fa96 	bl	800b5ec <__assert_func>
 800a0c0:	3101      	adds	r1, #1
 800a0c2:	105b      	asrs	r3, r3, #1
 800a0c4:	e7ef      	b.n	800a0a6 <__gethex+0x146>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	469b      	mov	fp, r3
 800a0ca:	f100 0a14 	add.w	sl, r0, #20
 800a0ce:	f8cd a004 	str.w	sl, [sp, #4]
 800a0d2:	45a8      	cmp	r8, r5
 800a0d4:	d344      	bcc.n	800a160 <__gethex+0x200>
 800a0d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a0da:	4658      	mov	r0, fp
 800a0dc:	f848 bb04 	str.w	fp, [r8], #4
 800a0e0:	eba8 080a 	sub.w	r8, r8, sl
 800a0e4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a0e8:	6122      	str	r2, [r4, #16]
 800a0ea:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a0ee:	f000 fde3 	bl	800acb8 <__hi0bits>
 800a0f2:	683d      	ldr	r5, [r7, #0]
 800a0f4:	eba8 0800 	sub.w	r8, r8, r0
 800a0f8:	45a8      	cmp	r8, r5
 800a0fa:	dd59      	ble.n	800a1b0 <__gethex+0x250>
 800a0fc:	eba8 0805 	sub.w	r8, r8, r5
 800a100:	4641      	mov	r1, r8
 800a102:	4620      	mov	r0, r4
 800a104:	f001 f961 	bl	800b3ca <__any_on>
 800a108:	4683      	mov	fp, r0
 800a10a:	b1b8      	cbz	r0, 800a13c <__gethex+0x1dc>
 800a10c:	f04f 0b01 	mov.w	fp, #1
 800a110:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800a114:	1159      	asrs	r1, r3, #5
 800a116:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a11a:	f003 021f 	and.w	r2, r3, #31
 800a11e:	fa0b f202 	lsl.w	r2, fp, r2
 800a122:	420a      	tst	r2, r1
 800a124:	d00a      	beq.n	800a13c <__gethex+0x1dc>
 800a126:	455b      	cmp	r3, fp
 800a128:	dd06      	ble.n	800a138 <__gethex+0x1d8>
 800a12a:	4620      	mov	r0, r4
 800a12c:	f1a8 0102 	sub.w	r1, r8, #2
 800a130:	f001 f94b 	bl	800b3ca <__any_on>
 800a134:	2800      	cmp	r0, #0
 800a136:	d138      	bne.n	800a1aa <__gethex+0x24a>
 800a138:	f04f 0b02 	mov.w	fp, #2
 800a13c:	4641      	mov	r1, r8
 800a13e:	4620      	mov	r0, r4
 800a140:	f7ff fea6 	bl	8009e90 <rshift>
 800a144:	4446      	add	r6, r8
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	42b3      	cmp	r3, r6
 800a14a:	da41      	bge.n	800a1d0 <__gethex+0x270>
 800a14c:	4621      	mov	r1, r4
 800a14e:	4648      	mov	r0, r9
 800a150:	f000 fd00 	bl	800ab54 <_Bfree>
 800a154:	2300      	movs	r3, #0
 800a156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a158:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	e789      	b.n	800a074 <__gethex+0x114>
 800a160:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a164:	2a2e      	cmp	r2, #46	; 0x2e
 800a166:	d014      	beq.n	800a192 <__gethex+0x232>
 800a168:	2b20      	cmp	r3, #32
 800a16a:	d106      	bne.n	800a17a <__gethex+0x21a>
 800a16c:	9b01      	ldr	r3, [sp, #4]
 800a16e:	f843 bb04 	str.w	fp, [r3], #4
 800a172:	f04f 0b00 	mov.w	fp, #0
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	465b      	mov	r3, fp
 800a17a:	7828      	ldrb	r0, [r5, #0]
 800a17c:	9303      	str	r3, [sp, #12]
 800a17e:	f7ff feda 	bl	8009f36 <__hexdig_fun>
 800a182:	9b03      	ldr	r3, [sp, #12]
 800a184:	f000 000f 	and.w	r0, r0, #15
 800a188:	4098      	lsls	r0, r3
 800a18a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a18e:	3304      	adds	r3, #4
 800a190:	e79f      	b.n	800a0d2 <__gethex+0x172>
 800a192:	45a8      	cmp	r8, r5
 800a194:	d8e8      	bhi.n	800a168 <__gethex+0x208>
 800a196:	2201      	movs	r2, #1
 800a198:	4628      	mov	r0, r5
 800a19a:	4928      	ldr	r1, [pc, #160]	; (800a23c <__gethex+0x2dc>)
 800a19c:	9303      	str	r3, [sp, #12]
 800a19e:	f7fe ff95 	bl	80090cc <strncmp>
 800a1a2:	9b03      	ldr	r3, [sp, #12]
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d1df      	bne.n	800a168 <__gethex+0x208>
 800a1a8:	e793      	b.n	800a0d2 <__gethex+0x172>
 800a1aa:	f04f 0b03 	mov.w	fp, #3
 800a1ae:	e7c5      	b.n	800a13c <__gethex+0x1dc>
 800a1b0:	da0b      	bge.n	800a1ca <__gethex+0x26a>
 800a1b2:	eba5 0808 	sub.w	r8, r5, r8
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	4642      	mov	r2, r8
 800a1ba:	4648      	mov	r0, r9
 800a1bc:	f000 fee2 	bl	800af84 <__lshift>
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	eba6 0608 	sub.w	r6, r6, r8
 800a1c6:	f100 0a14 	add.w	sl, r0, #20
 800a1ca:	f04f 0b00 	mov.w	fp, #0
 800a1ce:	e7ba      	b.n	800a146 <__gethex+0x1e6>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	42b3      	cmp	r3, r6
 800a1d4:	dd74      	ble.n	800a2c0 <__gethex+0x360>
 800a1d6:	1b9e      	subs	r6, r3, r6
 800a1d8:	42b5      	cmp	r5, r6
 800a1da:	dc35      	bgt.n	800a248 <__gethex+0x2e8>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d023      	beq.n	800a22a <__gethex+0x2ca>
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d025      	beq.n	800a232 <__gethex+0x2d2>
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d115      	bne.n	800a216 <__gethex+0x2b6>
 800a1ea:	42b5      	cmp	r5, r6
 800a1ec:	d113      	bne.n	800a216 <__gethex+0x2b6>
 800a1ee:	2d01      	cmp	r5, #1
 800a1f0:	d10b      	bne.n	800a20a <__gethex+0x2aa>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	9a02      	ldr	r2, [sp, #8]
 800a1f6:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a1fa:	6013      	str	r3, [r2, #0]
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	6123      	str	r3, [r4, #16]
 800a200:	f8ca 3000 	str.w	r3, [sl]
 800a204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a206:	601c      	str	r4, [r3, #0]
 800a208:	e734      	b.n	800a074 <__gethex+0x114>
 800a20a:	4620      	mov	r0, r4
 800a20c:	1e69      	subs	r1, r5, #1
 800a20e:	f001 f8dc 	bl	800b3ca <__any_on>
 800a212:	2800      	cmp	r0, #0
 800a214:	d1ed      	bne.n	800a1f2 <__gethex+0x292>
 800a216:	4621      	mov	r1, r4
 800a218:	4648      	mov	r0, r9
 800a21a:	f000 fc9b 	bl	800ab54 <_Bfree>
 800a21e:	2300      	movs	r3, #0
 800a220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a222:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	e724      	b.n	800a074 <__gethex+0x114>
 800a22a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1f2      	bne.n	800a216 <__gethex+0x2b6>
 800a230:	e7df      	b.n	800a1f2 <__gethex+0x292>
 800a232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1dc      	bne.n	800a1f2 <__gethex+0x292>
 800a238:	e7ed      	b.n	800a216 <__gethex+0x2b6>
 800a23a:	bf00      	nop
 800a23c:	0800bd36 	.word	0x0800bd36
 800a240:	0800bf0d 	.word	0x0800bf0d
 800a244:	0800bf1e 	.word	0x0800bf1e
 800a248:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800a24c:	f1bb 0f00 	cmp.w	fp, #0
 800a250:	d133      	bne.n	800a2ba <__gethex+0x35a>
 800a252:	f1b8 0f00 	cmp.w	r8, #0
 800a256:	d004      	beq.n	800a262 <__gethex+0x302>
 800a258:	4641      	mov	r1, r8
 800a25a:	4620      	mov	r0, r4
 800a25c:	f001 f8b5 	bl	800b3ca <__any_on>
 800a260:	4683      	mov	fp, r0
 800a262:	2301      	movs	r3, #1
 800a264:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a268:	f008 081f 	and.w	r8, r8, #31
 800a26c:	fa03 f308 	lsl.w	r3, r3, r8
 800a270:	f04f 0802 	mov.w	r8, #2
 800a274:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a278:	4631      	mov	r1, r6
 800a27a:	4213      	tst	r3, r2
 800a27c:	4620      	mov	r0, r4
 800a27e:	bf18      	it	ne
 800a280:	f04b 0b02 	orrne.w	fp, fp, #2
 800a284:	1bad      	subs	r5, r5, r6
 800a286:	f7ff fe03 	bl	8009e90 <rshift>
 800a28a:	687e      	ldr	r6, [r7, #4]
 800a28c:	f1bb 0f00 	cmp.w	fp, #0
 800a290:	d04a      	beq.n	800a328 <__gethex+0x3c8>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2b02      	cmp	r3, #2
 800a296:	d016      	beq.n	800a2c6 <__gethex+0x366>
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d018      	beq.n	800a2ce <__gethex+0x36e>
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d109      	bne.n	800a2b4 <__gethex+0x354>
 800a2a0:	f01b 0f02 	tst.w	fp, #2
 800a2a4:	d006      	beq.n	800a2b4 <__gethex+0x354>
 800a2a6:	f8da 3000 	ldr.w	r3, [sl]
 800a2aa:	ea4b 0b03 	orr.w	fp, fp, r3
 800a2ae:	f01b 0f01 	tst.w	fp, #1
 800a2b2:	d10f      	bne.n	800a2d4 <__gethex+0x374>
 800a2b4:	f048 0810 	orr.w	r8, r8, #16
 800a2b8:	e036      	b.n	800a328 <__gethex+0x3c8>
 800a2ba:	f04f 0b01 	mov.w	fp, #1
 800a2be:	e7d0      	b.n	800a262 <__gethex+0x302>
 800a2c0:	f04f 0801 	mov.w	r8, #1
 800a2c4:	e7e2      	b.n	800a28c <__gethex+0x32c>
 800a2c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2c8:	f1c3 0301 	rsb	r3, r3, #1
 800a2cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d0ef      	beq.n	800a2b4 <__gethex+0x354>
 800a2d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2d8:	f104 0214 	add.w	r2, r4, #20
 800a2dc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a2e0:	9301      	str	r3, [sp, #4]
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a2e8:	4694      	mov	ip, r2
 800a2ea:	f852 1b04 	ldr.w	r1, [r2], #4
 800a2ee:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800a2f2:	d01e      	beq.n	800a332 <__gethex+0x3d2>
 800a2f4:	3101      	adds	r1, #1
 800a2f6:	f8cc 1000 	str.w	r1, [ip]
 800a2fa:	f1b8 0f02 	cmp.w	r8, #2
 800a2fe:	f104 0214 	add.w	r2, r4, #20
 800a302:	d13d      	bne.n	800a380 <__gethex+0x420>
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	3b01      	subs	r3, #1
 800a308:	42ab      	cmp	r3, r5
 800a30a:	d10b      	bne.n	800a324 <__gethex+0x3c4>
 800a30c:	2301      	movs	r3, #1
 800a30e:	1169      	asrs	r1, r5, #5
 800a310:	f005 051f 	and.w	r5, r5, #31
 800a314:	fa03 f505 	lsl.w	r5, r3, r5
 800a318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a31c:	421d      	tst	r5, r3
 800a31e:	bf18      	it	ne
 800a320:	f04f 0801 	movne.w	r8, #1
 800a324:	f048 0820 	orr.w	r8, r8, #32
 800a328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a32a:	601c      	str	r4, [r3, #0]
 800a32c:	9b02      	ldr	r3, [sp, #8]
 800a32e:	601e      	str	r6, [r3, #0]
 800a330:	e6a0      	b.n	800a074 <__gethex+0x114>
 800a332:	4290      	cmp	r0, r2
 800a334:	f842 3c04 	str.w	r3, [r2, #-4]
 800a338:	d8d6      	bhi.n	800a2e8 <__gethex+0x388>
 800a33a:	68a2      	ldr	r2, [r4, #8]
 800a33c:	4593      	cmp	fp, r2
 800a33e:	db17      	blt.n	800a370 <__gethex+0x410>
 800a340:	6861      	ldr	r1, [r4, #4]
 800a342:	4648      	mov	r0, r9
 800a344:	3101      	adds	r1, #1
 800a346:	f000 fbc5 	bl	800aad4 <_Balloc>
 800a34a:	4682      	mov	sl, r0
 800a34c:	b918      	cbnz	r0, 800a356 <__gethex+0x3f6>
 800a34e:	4602      	mov	r2, r0
 800a350:	2184      	movs	r1, #132	; 0x84
 800a352:	4b1a      	ldr	r3, [pc, #104]	; (800a3bc <__gethex+0x45c>)
 800a354:	e6b1      	b.n	800a0ba <__gethex+0x15a>
 800a356:	6922      	ldr	r2, [r4, #16]
 800a358:	f104 010c 	add.w	r1, r4, #12
 800a35c:	3202      	adds	r2, #2
 800a35e:	0092      	lsls	r2, r2, #2
 800a360:	300c      	adds	r0, #12
 800a362:	f7fe ff0c 	bl	800917e <memcpy>
 800a366:	4621      	mov	r1, r4
 800a368:	4648      	mov	r0, r9
 800a36a:	f000 fbf3 	bl	800ab54 <_Bfree>
 800a36e:	4654      	mov	r4, sl
 800a370:	6922      	ldr	r2, [r4, #16]
 800a372:	1c51      	adds	r1, r2, #1
 800a374:	6121      	str	r1, [r4, #16]
 800a376:	2101      	movs	r1, #1
 800a378:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a37c:	6151      	str	r1, [r2, #20]
 800a37e:	e7bc      	b.n	800a2fa <__gethex+0x39a>
 800a380:	6921      	ldr	r1, [r4, #16]
 800a382:	4559      	cmp	r1, fp
 800a384:	dd0b      	ble.n	800a39e <__gethex+0x43e>
 800a386:	2101      	movs	r1, #1
 800a388:	4620      	mov	r0, r4
 800a38a:	f7ff fd81 	bl	8009e90 <rshift>
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	3601      	adds	r6, #1
 800a392:	42b3      	cmp	r3, r6
 800a394:	f6ff aeda 	blt.w	800a14c <__gethex+0x1ec>
 800a398:	f04f 0801 	mov.w	r8, #1
 800a39c:	e7c2      	b.n	800a324 <__gethex+0x3c4>
 800a39e:	f015 051f 	ands.w	r5, r5, #31
 800a3a2:	d0f9      	beq.n	800a398 <__gethex+0x438>
 800a3a4:	9b01      	ldr	r3, [sp, #4]
 800a3a6:	f1c5 0520 	rsb	r5, r5, #32
 800a3aa:	441a      	add	r2, r3
 800a3ac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a3b0:	f000 fc82 	bl	800acb8 <__hi0bits>
 800a3b4:	42a8      	cmp	r0, r5
 800a3b6:	dbe6      	blt.n	800a386 <__gethex+0x426>
 800a3b8:	e7ee      	b.n	800a398 <__gethex+0x438>
 800a3ba:	bf00      	nop
 800a3bc:	0800bf0d 	.word	0x0800bf0d

0800a3c0 <L_shift>:
 800a3c0:	f1c2 0208 	rsb	r2, r2, #8
 800a3c4:	0092      	lsls	r2, r2, #2
 800a3c6:	b570      	push	{r4, r5, r6, lr}
 800a3c8:	f1c2 0620 	rsb	r6, r2, #32
 800a3cc:	6843      	ldr	r3, [r0, #4]
 800a3ce:	6804      	ldr	r4, [r0, #0]
 800a3d0:	fa03 f506 	lsl.w	r5, r3, r6
 800a3d4:	432c      	orrs	r4, r5
 800a3d6:	40d3      	lsrs	r3, r2
 800a3d8:	6004      	str	r4, [r0, #0]
 800a3da:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3de:	4288      	cmp	r0, r1
 800a3e0:	d3f4      	bcc.n	800a3cc <L_shift+0xc>
 800a3e2:	bd70      	pop	{r4, r5, r6, pc}

0800a3e4 <__match>:
 800a3e4:	b530      	push	{r4, r5, lr}
 800a3e6:	6803      	ldr	r3, [r0, #0]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ee:	b914      	cbnz	r4, 800a3f6 <__match+0x12>
 800a3f0:	6003      	str	r3, [r0, #0]
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	bd30      	pop	{r4, r5, pc}
 800a3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a3fe:	2d19      	cmp	r5, #25
 800a400:	bf98      	it	ls
 800a402:	3220      	addls	r2, #32
 800a404:	42a2      	cmp	r2, r4
 800a406:	d0f0      	beq.n	800a3ea <__match+0x6>
 800a408:	2000      	movs	r0, #0
 800a40a:	e7f3      	b.n	800a3f4 <__match+0x10>

0800a40c <__hexnan>:
 800a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	2500      	movs	r5, #0
 800a412:	680b      	ldr	r3, [r1, #0]
 800a414:	4682      	mov	sl, r0
 800a416:	115e      	asrs	r6, r3, #5
 800a418:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a41c:	f013 031f 	ands.w	r3, r3, #31
 800a420:	bf18      	it	ne
 800a422:	3604      	addne	r6, #4
 800a424:	1f37      	subs	r7, r6, #4
 800a426:	4690      	mov	r8, r2
 800a428:	46b9      	mov	r9, r7
 800a42a:	463c      	mov	r4, r7
 800a42c:	46ab      	mov	fp, r5
 800a42e:	b087      	sub	sp, #28
 800a430:	6801      	ldr	r1, [r0, #0]
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	f846 5c04 	str.w	r5, [r6, #-4]
 800a438:	9502      	str	r5, [sp, #8]
 800a43a:	784a      	ldrb	r2, [r1, #1]
 800a43c:	1c4b      	adds	r3, r1, #1
 800a43e:	9303      	str	r3, [sp, #12]
 800a440:	b342      	cbz	r2, 800a494 <__hexnan+0x88>
 800a442:	4610      	mov	r0, r2
 800a444:	9105      	str	r1, [sp, #20]
 800a446:	9204      	str	r2, [sp, #16]
 800a448:	f7ff fd75 	bl	8009f36 <__hexdig_fun>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d14f      	bne.n	800a4f0 <__hexnan+0xe4>
 800a450:	9a04      	ldr	r2, [sp, #16]
 800a452:	9905      	ldr	r1, [sp, #20]
 800a454:	2a20      	cmp	r2, #32
 800a456:	d818      	bhi.n	800a48a <__hexnan+0x7e>
 800a458:	9b02      	ldr	r3, [sp, #8]
 800a45a:	459b      	cmp	fp, r3
 800a45c:	dd13      	ble.n	800a486 <__hexnan+0x7a>
 800a45e:	454c      	cmp	r4, r9
 800a460:	d206      	bcs.n	800a470 <__hexnan+0x64>
 800a462:	2d07      	cmp	r5, #7
 800a464:	dc04      	bgt.n	800a470 <__hexnan+0x64>
 800a466:	462a      	mov	r2, r5
 800a468:	4649      	mov	r1, r9
 800a46a:	4620      	mov	r0, r4
 800a46c:	f7ff ffa8 	bl	800a3c0 <L_shift>
 800a470:	4544      	cmp	r4, r8
 800a472:	d950      	bls.n	800a516 <__hexnan+0x10a>
 800a474:	2300      	movs	r3, #0
 800a476:	f1a4 0904 	sub.w	r9, r4, #4
 800a47a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a47e:	461d      	mov	r5, r3
 800a480:	464c      	mov	r4, r9
 800a482:	f8cd b008 	str.w	fp, [sp, #8]
 800a486:	9903      	ldr	r1, [sp, #12]
 800a488:	e7d7      	b.n	800a43a <__hexnan+0x2e>
 800a48a:	2a29      	cmp	r2, #41	; 0x29
 800a48c:	d155      	bne.n	800a53a <__hexnan+0x12e>
 800a48e:	3102      	adds	r1, #2
 800a490:	f8ca 1000 	str.w	r1, [sl]
 800a494:	f1bb 0f00 	cmp.w	fp, #0
 800a498:	d04f      	beq.n	800a53a <__hexnan+0x12e>
 800a49a:	454c      	cmp	r4, r9
 800a49c:	d206      	bcs.n	800a4ac <__hexnan+0xa0>
 800a49e:	2d07      	cmp	r5, #7
 800a4a0:	dc04      	bgt.n	800a4ac <__hexnan+0xa0>
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f7ff ff8a 	bl	800a3c0 <L_shift>
 800a4ac:	4544      	cmp	r4, r8
 800a4ae:	d934      	bls.n	800a51a <__hexnan+0x10e>
 800a4b0:	4623      	mov	r3, r4
 800a4b2:	f1a8 0204 	sub.w	r2, r8, #4
 800a4b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4ba:	429f      	cmp	r7, r3
 800a4bc:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4c0:	d2f9      	bcs.n	800a4b6 <__hexnan+0xaa>
 800a4c2:	1b3b      	subs	r3, r7, r4
 800a4c4:	f023 0303 	bic.w	r3, r3, #3
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	3e03      	subs	r6, #3
 800a4cc:	3401      	adds	r4, #1
 800a4ce:	42a6      	cmp	r6, r4
 800a4d0:	bf38      	it	cc
 800a4d2:	2304      	movcc	r3, #4
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	4443      	add	r3, r8
 800a4d8:	f843 2b04 	str.w	r2, [r3], #4
 800a4dc:	429f      	cmp	r7, r3
 800a4de:	d2fb      	bcs.n	800a4d8 <__hexnan+0xcc>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	b91b      	cbnz	r3, 800a4ec <__hexnan+0xe0>
 800a4e4:	4547      	cmp	r7, r8
 800a4e6:	d126      	bne.n	800a536 <__hexnan+0x12a>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	2005      	movs	r0, #5
 800a4ee:	e025      	b.n	800a53c <__hexnan+0x130>
 800a4f0:	3501      	adds	r5, #1
 800a4f2:	2d08      	cmp	r5, #8
 800a4f4:	f10b 0b01 	add.w	fp, fp, #1
 800a4f8:	dd06      	ble.n	800a508 <__hexnan+0xfc>
 800a4fa:	4544      	cmp	r4, r8
 800a4fc:	d9c3      	bls.n	800a486 <__hexnan+0x7a>
 800a4fe:	2300      	movs	r3, #0
 800a500:	2501      	movs	r5, #1
 800a502:	f844 3c04 	str.w	r3, [r4, #-4]
 800a506:	3c04      	subs	r4, #4
 800a508:	6822      	ldr	r2, [r4, #0]
 800a50a:	f000 000f 	and.w	r0, r0, #15
 800a50e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a512:	6020      	str	r0, [r4, #0]
 800a514:	e7b7      	b.n	800a486 <__hexnan+0x7a>
 800a516:	2508      	movs	r5, #8
 800a518:	e7b5      	b.n	800a486 <__hexnan+0x7a>
 800a51a:	9b01      	ldr	r3, [sp, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0df      	beq.n	800a4e0 <__hexnan+0xd4>
 800a520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a524:	f1c3 0320 	rsb	r3, r3, #32
 800a528:	40da      	lsrs	r2, r3
 800a52a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a52e:	4013      	ands	r3, r2
 800a530:	f846 3c04 	str.w	r3, [r6, #-4]
 800a534:	e7d4      	b.n	800a4e0 <__hexnan+0xd4>
 800a536:	3f04      	subs	r7, #4
 800a538:	e7d2      	b.n	800a4e0 <__hexnan+0xd4>
 800a53a:	2004      	movs	r0, #4
 800a53c:	b007      	add	sp, #28
 800a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a542 <__ssputs_r>:
 800a542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a546:	461f      	mov	r7, r3
 800a548:	688e      	ldr	r6, [r1, #8]
 800a54a:	4682      	mov	sl, r0
 800a54c:	42be      	cmp	r6, r7
 800a54e:	460c      	mov	r4, r1
 800a550:	4690      	mov	r8, r2
 800a552:	680b      	ldr	r3, [r1, #0]
 800a554:	d82c      	bhi.n	800a5b0 <__ssputs_r+0x6e>
 800a556:	898a      	ldrh	r2, [r1, #12]
 800a558:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a55c:	d026      	beq.n	800a5ac <__ssputs_r+0x6a>
 800a55e:	6965      	ldr	r5, [r4, #20]
 800a560:	6909      	ldr	r1, [r1, #16]
 800a562:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a566:	eba3 0901 	sub.w	r9, r3, r1
 800a56a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a56e:	1c7b      	adds	r3, r7, #1
 800a570:	444b      	add	r3, r9
 800a572:	106d      	asrs	r5, r5, #1
 800a574:	429d      	cmp	r5, r3
 800a576:	bf38      	it	cc
 800a578:	461d      	movcc	r5, r3
 800a57a:	0553      	lsls	r3, r2, #21
 800a57c:	d527      	bpl.n	800a5ce <__ssputs_r+0x8c>
 800a57e:	4629      	mov	r1, r5
 800a580:	f000 f960 	bl	800a844 <_malloc_r>
 800a584:	4606      	mov	r6, r0
 800a586:	b360      	cbz	r0, 800a5e2 <__ssputs_r+0xa0>
 800a588:	464a      	mov	r2, r9
 800a58a:	6921      	ldr	r1, [r4, #16]
 800a58c:	f7fe fdf7 	bl	800917e <memcpy>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a59a:	81a3      	strh	r3, [r4, #12]
 800a59c:	6126      	str	r6, [r4, #16]
 800a59e:	444e      	add	r6, r9
 800a5a0:	6026      	str	r6, [r4, #0]
 800a5a2:	463e      	mov	r6, r7
 800a5a4:	6165      	str	r5, [r4, #20]
 800a5a6:	eba5 0509 	sub.w	r5, r5, r9
 800a5aa:	60a5      	str	r5, [r4, #8]
 800a5ac:	42be      	cmp	r6, r7
 800a5ae:	d900      	bls.n	800a5b2 <__ssputs_r+0x70>
 800a5b0:	463e      	mov	r6, r7
 800a5b2:	4632      	mov	r2, r6
 800a5b4:	4641      	mov	r1, r8
 800a5b6:	6820      	ldr	r0, [r4, #0]
 800a5b8:	f000 ffa7 	bl	800b50a <memmove>
 800a5bc:	2000      	movs	r0, #0
 800a5be:	68a3      	ldr	r3, [r4, #8]
 800a5c0:	1b9b      	subs	r3, r3, r6
 800a5c2:	60a3      	str	r3, [r4, #8]
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	4433      	add	r3, r6
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ce:	462a      	mov	r2, r5
 800a5d0:	f000 ff5f 	bl	800b492 <_realloc_r>
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d1e0      	bne.n	800a59c <__ssputs_r+0x5a>
 800a5da:	4650      	mov	r0, sl
 800a5dc:	6921      	ldr	r1, [r4, #16]
 800a5de:	f001 f837 	bl	800b650 <_free_r>
 800a5e2:	230c      	movs	r3, #12
 800a5e4:	f8ca 3000 	str.w	r3, [sl]
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5f2:	81a3      	strh	r3, [r4, #12]
 800a5f4:	e7e9      	b.n	800a5ca <__ssputs_r+0x88>
	...

0800a5f8 <_svfiprintf_r>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	4698      	mov	r8, r3
 800a5fe:	898b      	ldrh	r3, [r1, #12]
 800a600:	4607      	mov	r7, r0
 800a602:	061b      	lsls	r3, r3, #24
 800a604:	460d      	mov	r5, r1
 800a606:	4614      	mov	r4, r2
 800a608:	b09d      	sub	sp, #116	; 0x74
 800a60a:	d50e      	bpl.n	800a62a <_svfiprintf_r+0x32>
 800a60c:	690b      	ldr	r3, [r1, #16]
 800a60e:	b963      	cbnz	r3, 800a62a <_svfiprintf_r+0x32>
 800a610:	2140      	movs	r1, #64	; 0x40
 800a612:	f000 f917 	bl	800a844 <_malloc_r>
 800a616:	6028      	str	r0, [r5, #0]
 800a618:	6128      	str	r0, [r5, #16]
 800a61a:	b920      	cbnz	r0, 800a626 <_svfiprintf_r+0x2e>
 800a61c:	230c      	movs	r3, #12
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a624:	e0d0      	b.n	800a7c8 <_svfiprintf_r+0x1d0>
 800a626:	2340      	movs	r3, #64	; 0x40
 800a628:	616b      	str	r3, [r5, #20]
 800a62a:	2300      	movs	r3, #0
 800a62c:	9309      	str	r3, [sp, #36]	; 0x24
 800a62e:	2320      	movs	r3, #32
 800a630:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a634:	2330      	movs	r3, #48	; 0x30
 800a636:	f04f 0901 	mov.w	r9, #1
 800a63a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a63e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a7e0 <_svfiprintf_r+0x1e8>
 800a642:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a646:	4623      	mov	r3, r4
 800a648:	469a      	mov	sl, r3
 800a64a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a64e:	b10a      	cbz	r2, 800a654 <_svfiprintf_r+0x5c>
 800a650:	2a25      	cmp	r2, #37	; 0x25
 800a652:	d1f9      	bne.n	800a648 <_svfiprintf_r+0x50>
 800a654:	ebba 0b04 	subs.w	fp, sl, r4
 800a658:	d00b      	beq.n	800a672 <_svfiprintf_r+0x7a>
 800a65a:	465b      	mov	r3, fp
 800a65c:	4622      	mov	r2, r4
 800a65e:	4629      	mov	r1, r5
 800a660:	4638      	mov	r0, r7
 800a662:	f7ff ff6e 	bl	800a542 <__ssputs_r>
 800a666:	3001      	adds	r0, #1
 800a668:	f000 80a9 	beq.w	800a7be <_svfiprintf_r+0x1c6>
 800a66c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a66e:	445a      	add	r2, fp
 800a670:	9209      	str	r2, [sp, #36]	; 0x24
 800a672:	f89a 3000 	ldrb.w	r3, [sl]
 800a676:	2b00      	cmp	r3, #0
 800a678:	f000 80a1 	beq.w	800a7be <_svfiprintf_r+0x1c6>
 800a67c:	2300      	movs	r3, #0
 800a67e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a686:	f10a 0a01 	add.w	sl, sl, #1
 800a68a:	9304      	str	r3, [sp, #16]
 800a68c:	9307      	str	r3, [sp, #28]
 800a68e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a692:	931a      	str	r3, [sp, #104]	; 0x68
 800a694:	4654      	mov	r4, sl
 800a696:	2205      	movs	r2, #5
 800a698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69c:	4850      	ldr	r0, [pc, #320]	; (800a7e0 <_svfiprintf_r+0x1e8>)
 800a69e:	f7fe fd60 	bl	8009162 <memchr>
 800a6a2:	9a04      	ldr	r2, [sp, #16]
 800a6a4:	b9d8      	cbnz	r0, 800a6de <_svfiprintf_r+0xe6>
 800a6a6:	06d0      	lsls	r0, r2, #27
 800a6a8:	bf44      	itt	mi
 800a6aa:	2320      	movmi	r3, #32
 800a6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b0:	0711      	lsls	r1, r2, #28
 800a6b2:	bf44      	itt	mi
 800a6b4:	232b      	movmi	r3, #43	; 0x2b
 800a6b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a6be:	2b2a      	cmp	r3, #42	; 0x2a
 800a6c0:	d015      	beq.n	800a6ee <_svfiprintf_r+0xf6>
 800a6c2:	4654      	mov	r4, sl
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f04f 0c0a 	mov.w	ip, #10
 800a6ca:	9a07      	ldr	r2, [sp, #28]
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d2:	3b30      	subs	r3, #48	; 0x30
 800a6d4:	2b09      	cmp	r3, #9
 800a6d6:	d94d      	bls.n	800a774 <_svfiprintf_r+0x17c>
 800a6d8:	b1b0      	cbz	r0, 800a708 <_svfiprintf_r+0x110>
 800a6da:	9207      	str	r2, [sp, #28]
 800a6dc:	e014      	b.n	800a708 <_svfiprintf_r+0x110>
 800a6de:	eba0 0308 	sub.w	r3, r0, r8
 800a6e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	46a2      	mov	sl, r4
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	e7d2      	b.n	800a694 <_svfiprintf_r+0x9c>
 800a6ee:	9b03      	ldr	r3, [sp, #12]
 800a6f0:	1d19      	adds	r1, r3, #4
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	9103      	str	r1, [sp, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bfbb      	ittet	lt
 800a6fa:	425b      	neglt	r3, r3
 800a6fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a700:	9307      	strge	r3, [sp, #28]
 800a702:	9307      	strlt	r3, [sp, #28]
 800a704:	bfb8      	it	lt
 800a706:	9204      	strlt	r2, [sp, #16]
 800a708:	7823      	ldrb	r3, [r4, #0]
 800a70a:	2b2e      	cmp	r3, #46	; 0x2e
 800a70c:	d10c      	bne.n	800a728 <_svfiprintf_r+0x130>
 800a70e:	7863      	ldrb	r3, [r4, #1]
 800a710:	2b2a      	cmp	r3, #42	; 0x2a
 800a712:	d134      	bne.n	800a77e <_svfiprintf_r+0x186>
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	3402      	adds	r4, #2
 800a718:	1d1a      	adds	r2, r3, #4
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	9203      	str	r2, [sp, #12]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bfb8      	it	lt
 800a722:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a726:	9305      	str	r3, [sp, #20]
 800a728:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a7e4 <_svfiprintf_r+0x1ec>
 800a72c:	2203      	movs	r2, #3
 800a72e:	4650      	mov	r0, sl
 800a730:	7821      	ldrb	r1, [r4, #0]
 800a732:	f7fe fd16 	bl	8009162 <memchr>
 800a736:	b138      	cbz	r0, 800a748 <_svfiprintf_r+0x150>
 800a738:	2240      	movs	r2, #64	; 0x40
 800a73a:	9b04      	ldr	r3, [sp, #16]
 800a73c:	eba0 000a 	sub.w	r0, r0, sl
 800a740:	4082      	lsls	r2, r0
 800a742:	4313      	orrs	r3, r2
 800a744:	3401      	adds	r4, #1
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74c:	2206      	movs	r2, #6
 800a74e:	4826      	ldr	r0, [pc, #152]	; (800a7e8 <_svfiprintf_r+0x1f0>)
 800a750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a754:	f7fe fd05 	bl	8009162 <memchr>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d038      	beq.n	800a7ce <_svfiprintf_r+0x1d6>
 800a75c:	4b23      	ldr	r3, [pc, #140]	; (800a7ec <_svfiprintf_r+0x1f4>)
 800a75e:	bb1b      	cbnz	r3, 800a7a8 <_svfiprintf_r+0x1b0>
 800a760:	9b03      	ldr	r3, [sp, #12]
 800a762:	3307      	adds	r3, #7
 800a764:	f023 0307 	bic.w	r3, r3, #7
 800a768:	3308      	adds	r3, #8
 800a76a:	9303      	str	r3, [sp, #12]
 800a76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76e:	4433      	add	r3, r6
 800a770:	9309      	str	r3, [sp, #36]	; 0x24
 800a772:	e768      	b.n	800a646 <_svfiprintf_r+0x4e>
 800a774:	460c      	mov	r4, r1
 800a776:	2001      	movs	r0, #1
 800a778:	fb0c 3202 	mla	r2, ip, r2, r3
 800a77c:	e7a6      	b.n	800a6cc <_svfiprintf_r+0xd4>
 800a77e:	2300      	movs	r3, #0
 800a780:	f04f 0c0a 	mov.w	ip, #10
 800a784:	4619      	mov	r1, r3
 800a786:	3401      	adds	r4, #1
 800a788:	9305      	str	r3, [sp, #20]
 800a78a:	4620      	mov	r0, r4
 800a78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a790:	3a30      	subs	r2, #48	; 0x30
 800a792:	2a09      	cmp	r2, #9
 800a794:	d903      	bls.n	800a79e <_svfiprintf_r+0x1a6>
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0c6      	beq.n	800a728 <_svfiprintf_r+0x130>
 800a79a:	9105      	str	r1, [sp, #20]
 800a79c:	e7c4      	b.n	800a728 <_svfiprintf_r+0x130>
 800a79e:	4604      	mov	r4, r0
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7a6:	e7f0      	b.n	800a78a <_svfiprintf_r+0x192>
 800a7a8:	ab03      	add	r3, sp, #12
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	462a      	mov	r2, r5
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	4b0f      	ldr	r3, [pc, #60]	; (800a7f0 <_svfiprintf_r+0x1f8>)
 800a7b2:	a904      	add	r1, sp, #16
 800a7b4:	f7fd f8f0 	bl	8007998 <_printf_float>
 800a7b8:	1c42      	adds	r2, r0, #1
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	d1d6      	bne.n	800a76c <_svfiprintf_r+0x174>
 800a7be:	89ab      	ldrh	r3, [r5, #12]
 800a7c0:	065b      	lsls	r3, r3, #25
 800a7c2:	f53f af2d 	bmi.w	800a620 <_svfiprintf_r+0x28>
 800a7c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7c8:	b01d      	add	sp, #116	; 0x74
 800a7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ce:	ab03      	add	r3, sp, #12
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	462a      	mov	r2, r5
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	4b06      	ldr	r3, [pc, #24]	; (800a7f0 <_svfiprintf_r+0x1f8>)
 800a7d8:	a904      	add	r1, sp, #16
 800a7da:	f7fd fb7d 	bl	8007ed8 <_printf_i>
 800a7de:	e7eb      	b.n	800a7b8 <_svfiprintf_r+0x1c0>
 800a7e0:	0800bf7e 	.word	0x0800bf7e
 800a7e4:	0800bf84 	.word	0x0800bf84
 800a7e8:	0800bf88 	.word	0x0800bf88
 800a7ec:	08007999 	.word	0x08007999
 800a7f0:	0800a543 	.word	0x0800a543

0800a7f4 <malloc>:
 800a7f4:	4b02      	ldr	r3, [pc, #8]	; (800a800 <malloc+0xc>)
 800a7f6:	4601      	mov	r1, r0
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	f000 b823 	b.w	800a844 <_malloc_r>
 800a7fe:	bf00      	nop
 800a800:	20000248 	.word	0x20000248

0800a804 <sbrk_aligned>:
 800a804:	b570      	push	{r4, r5, r6, lr}
 800a806:	4e0e      	ldr	r6, [pc, #56]	; (800a840 <sbrk_aligned+0x3c>)
 800a808:	460c      	mov	r4, r1
 800a80a:	6831      	ldr	r1, [r6, #0]
 800a80c:	4605      	mov	r5, r0
 800a80e:	b911      	cbnz	r1, 800a816 <sbrk_aligned+0x12>
 800a810:	f000 feca 	bl	800b5a8 <_sbrk_r>
 800a814:	6030      	str	r0, [r6, #0]
 800a816:	4621      	mov	r1, r4
 800a818:	4628      	mov	r0, r5
 800a81a:	f000 fec5 	bl	800b5a8 <_sbrk_r>
 800a81e:	1c43      	adds	r3, r0, #1
 800a820:	d00a      	beq.n	800a838 <sbrk_aligned+0x34>
 800a822:	1cc4      	adds	r4, r0, #3
 800a824:	f024 0403 	bic.w	r4, r4, #3
 800a828:	42a0      	cmp	r0, r4
 800a82a:	d007      	beq.n	800a83c <sbrk_aligned+0x38>
 800a82c:	1a21      	subs	r1, r4, r0
 800a82e:	4628      	mov	r0, r5
 800a830:	f000 feba 	bl	800b5a8 <_sbrk_r>
 800a834:	3001      	adds	r0, #1
 800a836:	d101      	bne.n	800a83c <sbrk_aligned+0x38>
 800a838:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a83c:	4620      	mov	r0, r4
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	20000720 	.word	0x20000720

0800a844 <_malloc_r>:
 800a844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a848:	1ccd      	adds	r5, r1, #3
 800a84a:	f025 0503 	bic.w	r5, r5, #3
 800a84e:	3508      	adds	r5, #8
 800a850:	2d0c      	cmp	r5, #12
 800a852:	bf38      	it	cc
 800a854:	250c      	movcc	r5, #12
 800a856:	2d00      	cmp	r5, #0
 800a858:	4607      	mov	r7, r0
 800a85a:	db01      	blt.n	800a860 <_malloc_r+0x1c>
 800a85c:	42a9      	cmp	r1, r5
 800a85e:	d905      	bls.n	800a86c <_malloc_r+0x28>
 800a860:	230c      	movs	r3, #12
 800a862:	2600      	movs	r6, #0
 800a864:	603b      	str	r3, [r7, #0]
 800a866:	4630      	mov	r0, r6
 800a868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a86c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a940 <_malloc_r+0xfc>
 800a870:	f000 f924 	bl	800aabc <__malloc_lock>
 800a874:	f8d8 3000 	ldr.w	r3, [r8]
 800a878:	461c      	mov	r4, r3
 800a87a:	bb5c      	cbnz	r4, 800a8d4 <_malloc_r+0x90>
 800a87c:	4629      	mov	r1, r5
 800a87e:	4638      	mov	r0, r7
 800a880:	f7ff ffc0 	bl	800a804 <sbrk_aligned>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	4604      	mov	r4, r0
 800a888:	d155      	bne.n	800a936 <_malloc_r+0xf2>
 800a88a:	f8d8 4000 	ldr.w	r4, [r8]
 800a88e:	4626      	mov	r6, r4
 800a890:	2e00      	cmp	r6, #0
 800a892:	d145      	bne.n	800a920 <_malloc_r+0xdc>
 800a894:	2c00      	cmp	r4, #0
 800a896:	d048      	beq.n	800a92a <_malloc_r+0xe6>
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	4631      	mov	r1, r6
 800a89c:	4638      	mov	r0, r7
 800a89e:	eb04 0903 	add.w	r9, r4, r3
 800a8a2:	f000 fe81 	bl	800b5a8 <_sbrk_r>
 800a8a6:	4581      	cmp	r9, r0
 800a8a8:	d13f      	bne.n	800a92a <_malloc_r+0xe6>
 800a8aa:	6821      	ldr	r1, [r4, #0]
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	1a6d      	subs	r5, r5, r1
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	f7ff ffa7 	bl	800a804 <sbrk_aligned>
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	d037      	beq.n	800a92a <_malloc_r+0xe6>
 800a8ba:	6823      	ldr	r3, [r4, #0]
 800a8bc:	442b      	add	r3, r5
 800a8be:	6023      	str	r3, [r4, #0]
 800a8c0:	f8d8 3000 	ldr.w	r3, [r8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d038      	beq.n	800a93a <_malloc_r+0xf6>
 800a8c8:	685a      	ldr	r2, [r3, #4]
 800a8ca:	42a2      	cmp	r2, r4
 800a8cc:	d12b      	bne.n	800a926 <_malloc_r+0xe2>
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	605a      	str	r2, [r3, #4]
 800a8d2:	e00f      	b.n	800a8f4 <_malloc_r+0xb0>
 800a8d4:	6822      	ldr	r2, [r4, #0]
 800a8d6:	1b52      	subs	r2, r2, r5
 800a8d8:	d41f      	bmi.n	800a91a <_malloc_r+0xd6>
 800a8da:	2a0b      	cmp	r2, #11
 800a8dc:	d917      	bls.n	800a90e <_malloc_r+0xca>
 800a8de:	1961      	adds	r1, r4, r5
 800a8e0:	42a3      	cmp	r3, r4
 800a8e2:	6025      	str	r5, [r4, #0]
 800a8e4:	bf18      	it	ne
 800a8e6:	6059      	strne	r1, [r3, #4]
 800a8e8:	6863      	ldr	r3, [r4, #4]
 800a8ea:	bf08      	it	eq
 800a8ec:	f8c8 1000 	streq.w	r1, [r8]
 800a8f0:	5162      	str	r2, [r4, r5]
 800a8f2:	604b      	str	r3, [r1, #4]
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f104 060b 	add.w	r6, r4, #11
 800a8fa:	f000 f8e5 	bl	800aac8 <__malloc_unlock>
 800a8fe:	f026 0607 	bic.w	r6, r6, #7
 800a902:	1d23      	adds	r3, r4, #4
 800a904:	1af2      	subs	r2, r6, r3
 800a906:	d0ae      	beq.n	800a866 <_malloc_r+0x22>
 800a908:	1b9b      	subs	r3, r3, r6
 800a90a:	50a3      	str	r3, [r4, r2]
 800a90c:	e7ab      	b.n	800a866 <_malloc_r+0x22>
 800a90e:	42a3      	cmp	r3, r4
 800a910:	6862      	ldr	r2, [r4, #4]
 800a912:	d1dd      	bne.n	800a8d0 <_malloc_r+0x8c>
 800a914:	f8c8 2000 	str.w	r2, [r8]
 800a918:	e7ec      	b.n	800a8f4 <_malloc_r+0xb0>
 800a91a:	4623      	mov	r3, r4
 800a91c:	6864      	ldr	r4, [r4, #4]
 800a91e:	e7ac      	b.n	800a87a <_malloc_r+0x36>
 800a920:	4634      	mov	r4, r6
 800a922:	6876      	ldr	r6, [r6, #4]
 800a924:	e7b4      	b.n	800a890 <_malloc_r+0x4c>
 800a926:	4613      	mov	r3, r2
 800a928:	e7cc      	b.n	800a8c4 <_malloc_r+0x80>
 800a92a:	230c      	movs	r3, #12
 800a92c:	4638      	mov	r0, r7
 800a92e:	603b      	str	r3, [r7, #0]
 800a930:	f000 f8ca 	bl	800aac8 <__malloc_unlock>
 800a934:	e797      	b.n	800a866 <_malloc_r+0x22>
 800a936:	6025      	str	r5, [r4, #0]
 800a938:	e7dc      	b.n	800a8f4 <_malloc_r+0xb0>
 800a93a:	605b      	str	r3, [r3, #4]
 800a93c:	deff      	udf	#255	; 0xff
 800a93e:	bf00      	nop
 800a940:	2000071c 	.word	0x2000071c

0800a944 <__ascii_mbtowc>:
 800a944:	b082      	sub	sp, #8
 800a946:	b901      	cbnz	r1, 800a94a <__ascii_mbtowc+0x6>
 800a948:	a901      	add	r1, sp, #4
 800a94a:	b142      	cbz	r2, 800a95e <__ascii_mbtowc+0x1a>
 800a94c:	b14b      	cbz	r3, 800a962 <__ascii_mbtowc+0x1e>
 800a94e:	7813      	ldrb	r3, [r2, #0]
 800a950:	600b      	str	r3, [r1, #0]
 800a952:	7812      	ldrb	r2, [r2, #0]
 800a954:	1e10      	subs	r0, r2, #0
 800a956:	bf18      	it	ne
 800a958:	2001      	movne	r0, #1
 800a95a:	b002      	add	sp, #8
 800a95c:	4770      	bx	lr
 800a95e:	4610      	mov	r0, r2
 800a960:	e7fb      	b.n	800a95a <__ascii_mbtowc+0x16>
 800a962:	f06f 0001 	mvn.w	r0, #1
 800a966:	e7f8      	b.n	800a95a <__ascii_mbtowc+0x16>

0800a968 <__sflush_r>:
 800a968:	898a      	ldrh	r2, [r1, #12]
 800a96a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96c:	4605      	mov	r5, r0
 800a96e:	0710      	lsls	r0, r2, #28
 800a970:	460c      	mov	r4, r1
 800a972:	d457      	bmi.n	800aa24 <__sflush_r+0xbc>
 800a974:	684b      	ldr	r3, [r1, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	dc04      	bgt.n	800a984 <__sflush_r+0x1c>
 800a97a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dc01      	bgt.n	800a984 <__sflush_r+0x1c>
 800a980:	2000      	movs	r0, #0
 800a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a986:	2e00      	cmp	r6, #0
 800a988:	d0fa      	beq.n	800a980 <__sflush_r+0x18>
 800a98a:	2300      	movs	r3, #0
 800a98c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a990:	682f      	ldr	r7, [r5, #0]
 800a992:	6a21      	ldr	r1, [r4, #32]
 800a994:	602b      	str	r3, [r5, #0]
 800a996:	d032      	beq.n	800a9fe <__sflush_r+0x96>
 800a998:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	075a      	lsls	r2, r3, #29
 800a99e:	d505      	bpl.n	800a9ac <__sflush_r+0x44>
 800a9a0:	6863      	ldr	r3, [r4, #4]
 800a9a2:	1ac0      	subs	r0, r0, r3
 800a9a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9a6:	b10b      	cbz	r3, 800a9ac <__sflush_r+0x44>
 800a9a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9aa:	1ac0      	subs	r0, r0, r3
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	6a21      	ldr	r1, [r4, #32]
 800a9b6:	47b0      	blx	r6
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	d106      	bne.n	800a9cc <__sflush_r+0x64>
 800a9be:	6829      	ldr	r1, [r5, #0]
 800a9c0:	291d      	cmp	r1, #29
 800a9c2:	d82b      	bhi.n	800aa1c <__sflush_r+0xb4>
 800a9c4:	4a28      	ldr	r2, [pc, #160]	; (800aa68 <__sflush_r+0x100>)
 800a9c6:	410a      	asrs	r2, r1
 800a9c8:	07d6      	lsls	r6, r2, #31
 800a9ca:	d427      	bmi.n	800aa1c <__sflush_r+0xb4>
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	6062      	str	r2, [r4, #4]
 800a9d0:	6922      	ldr	r2, [r4, #16]
 800a9d2:	04d9      	lsls	r1, r3, #19
 800a9d4:	6022      	str	r2, [r4, #0]
 800a9d6:	d504      	bpl.n	800a9e2 <__sflush_r+0x7a>
 800a9d8:	1c42      	adds	r2, r0, #1
 800a9da:	d101      	bne.n	800a9e0 <__sflush_r+0x78>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	b903      	cbnz	r3, 800a9e2 <__sflush_r+0x7a>
 800a9e0:	6560      	str	r0, [r4, #84]	; 0x54
 800a9e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9e4:	602f      	str	r7, [r5, #0]
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	d0ca      	beq.n	800a980 <__sflush_r+0x18>
 800a9ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9ee:	4299      	cmp	r1, r3
 800a9f0:	d002      	beq.n	800a9f8 <__sflush_r+0x90>
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f000 fe2c 	bl	800b650 <_free_r>
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	6360      	str	r0, [r4, #52]	; 0x34
 800a9fc:	e7c1      	b.n	800a982 <__sflush_r+0x1a>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b0      	blx	r6
 800aa04:	1c41      	adds	r1, r0, #1
 800aa06:	d1c8      	bne.n	800a99a <__sflush_r+0x32>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0c5      	beq.n	800a99a <__sflush_r+0x32>
 800aa0e:	2b1d      	cmp	r3, #29
 800aa10:	d001      	beq.n	800aa16 <__sflush_r+0xae>
 800aa12:	2b16      	cmp	r3, #22
 800aa14:	d101      	bne.n	800aa1a <__sflush_r+0xb2>
 800aa16:	602f      	str	r7, [r5, #0]
 800aa18:	e7b2      	b.n	800a980 <__sflush_r+0x18>
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	e7ae      	b.n	800a982 <__sflush_r+0x1a>
 800aa24:	690f      	ldr	r7, [r1, #16]
 800aa26:	2f00      	cmp	r7, #0
 800aa28:	d0aa      	beq.n	800a980 <__sflush_r+0x18>
 800aa2a:	0793      	lsls	r3, r2, #30
 800aa2c:	bf18      	it	ne
 800aa2e:	2300      	movne	r3, #0
 800aa30:	680e      	ldr	r6, [r1, #0]
 800aa32:	bf08      	it	eq
 800aa34:	694b      	ldreq	r3, [r1, #20]
 800aa36:	1bf6      	subs	r6, r6, r7
 800aa38:	600f      	str	r7, [r1, #0]
 800aa3a:	608b      	str	r3, [r1, #8]
 800aa3c:	2e00      	cmp	r6, #0
 800aa3e:	dd9f      	ble.n	800a980 <__sflush_r+0x18>
 800aa40:	4633      	mov	r3, r6
 800aa42:	463a      	mov	r2, r7
 800aa44:	4628      	mov	r0, r5
 800aa46:	6a21      	ldr	r1, [r4, #32]
 800aa48:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aa4c:	47e0      	blx	ip
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	dc06      	bgt.n	800aa60 <__sflush_r+0xf8>
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa5c:	81a3      	strh	r3, [r4, #12]
 800aa5e:	e790      	b.n	800a982 <__sflush_r+0x1a>
 800aa60:	4407      	add	r7, r0
 800aa62:	1a36      	subs	r6, r6, r0
 800aa64:	e7ea      	b.n	800aa3c <__sflush_r+0xd4>
 800aa66:	bf00      	nop
 800aa68:	dfbffffe 	.word	0xdfbffffe

0800aa6c <_fflush_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	690b      	ldr	r3, [r1, #16]
 800aa70:	4605      	mov	r5, r0
 800aa72:	460c      	mov	r4, r1
 800aa74:	b913      	cbnz	r3, 800aa7c <_fflush_r+0x10>
 800aa76:	2500      	movs	r5, #0
 800aa78:	4628      	mov	r0, r5
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	b118      	cbz	r0, 800aa86 <_fflush_r+0x1a>
 800aa7e:	6a03      	ldr	r3, [r0, #32]
 800aa80:	b90b      	cbnz	r3, 800aa86 <_fflush_r+0x1a>
 800aa82:	f7fd fbf7 	bl	8008274 <__sinit>
 800aa86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0f3      	beq.n	800aa76 <_fflush_r+0xa>
 800aa8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa90:	07d0      	lsls	r0, r2, #31
 800aa92:	d404      	bmi.n	800aa9e <_fflush_r+0x32>
 800aa94:	0599      	lsls	r1, r3, #22
 800aa96:	d402      	bmi.n	800aa9e <_fflush_r+0x32>
 800aa98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa9a:	f7fe fb60 	bl	800915e <__retarget_lock_acquire_recursive>
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	f7ff ff61 	bl	800a968 <__sflush_r>
 800aaa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaa8:	4605      	mov	r5, r0
 800aaaa:	07da      	lsls	r2, r3, #31
 800aaac:	d4e4      	bmi.n	800aa78 <_fflush_r+0xc>
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	059b      	lsls	r3, r3, #22
 800aab2:	d4e1      	bmi.n	800aa78 <_fflush_r+0xc>
 800aab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aab6:	f7fe fb53 	bl	8009160 <__retarget_lock_release_recursive>
 800aaba:	e7dd      	b.n	800aa78 <_fflush_r+0xc>

0800aabc <__malloc_lock>:
 800aabc:	4801      	ldr	r0, [pc, #4]	; (800aac4 <__malloc_lock+0x8>)
 800aabe:	f7fe bb4e 	b.w	800915e <__retarget_lock_acquire_recursive>
 800aac2:	bf00      	nop
 800aac4:	20000718 	.word	0x20000718

0800aac8 <__malloc_unlock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	; (800aad0 <__malloc_unlock+0x8>)
 800aaca:	f7fe bb49 	b.w	8009160 <__retarget_lock_release_recursive>
 800aace:	bf00      	nop
 800aad0:	20000718 	.word	0x20000718

0800aad4 <_Balloc>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	69c6      	ldr	r6, [r0, #28]
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	b976      	cbnz	r6, 800aafc <_Balloc+0x28>
 800aade:	2010      	movs	r0, #16
 800aae0:	f7ff fe88 	bl	800a7f4 <malloc>
 800aae4:	4602      	mov	r2, r0
 800aae6:	61e0      	str	r0, [r4, #28]
 800aae8:	b920      	cbnz	r0, 800aaf4 <_Balloc+0x20>
 800aaea:	216b      	movs	r1, #107	; 0x6b
 800aaec:	4b17      	ldr	r3, [pc, #92]	; (800ab4c <_Balloc+0x78>)
 800aaee:	4818      	ldr	r0, [pc, #96]	; (800ab50 <_Balloc+0x7c>)
 800aaf0:	f000 fd7c 	bl	800b5ec <__assert_func>
 800aaf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaf8:	6006      	str	r6, [r0, #0]
 800aafa:	60c6      	str	r6, [r0, #12]
 800aafc:	69e6      	ldr	r6, [r4, #28]
 800aafe:	68f3      	ldr	r3, [r6, #12]
 800ab00:	b183      	cbz	r3, 800ab24 <_Balloc+0x50>
 800ab02:	69e3      	ldr	r3, [r4, #28]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab0a:	b9b8      	cbnz	r0, 800ab3c <_Balloc+0x68>
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	fa01 f605 	lsl.w	r6, r1, r5
 800ab12:	1d72      	adds	r2, r6, #5
 800ab14:	4620      	mov	r0, r4
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	f000 fd86 	bl	800b628 <_calloc_r>
 800ab1c:	b160      	cbz	r0, 800ab38 <_Balloc+0x64>
 800ab1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab22:	e00e      	b.n	800ab42 <_Balloc+0x6e>
 800ab24:	2221      	movs	r2, #33	; 0x21
 800ab26:	2104      	movs	r1, #4
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f000 fd7d 	bl	800b628 <_calloc_r>
 800ab2e:	69e3      	ldr	r3, [r4, #28]
 800ab30:	60f0      	str	r0, [r6, #12]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e4      	bne.n	800ab02 <_Balloc+0x2e>
 800ab38:	2000      	movs	r0, #0
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	6802      	ldr	r2, [r0, #0]
 800ab3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab42:	2300      	movs	r3, #0
 800ab44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab48:	e7f7      	b.n	800ab3a <_Balloc+0x66>
 800ab4a:	bf00      	nop
 800ab4c:	0800be9e 	.word	0x0800be9e
 800ab50:	0800bf8f 	.word	0x0800bf8f

0800ab54 <_Bfree>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	69c6      	ldr	r6, [r0, #28]
 800ab58:	4605      	mov	r5, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	b976      	cbnz	r6, 800ab7c <_Bfree+0x28>
 800ab5e:	2010      	movs	r0, #16
 800ab60:	f7ff fe48 	bl	800a7f4 <malloc>
 800ab64:	4602      	mov	r2, r0
 800ab66:	61e8      	str	r0, [r5, #28]
 800ab68:	b920      	cbnz	r0, 800ab74 <_Bfree+0x20>
 800ab6a:	218f      	movs	r1, #143	; 0x8f
 800ab6c:	4b08      	ldr	r3, [pc, #32]	; (800ab90 <_Bfree+0x3c>)
 800ab6e:	4809      	ldr	r0, [pc, #36]	; (800ab94 <_Bfree+0x40>)
 800ab70:	f000 fd3c 	bl	800b5ec <__assert_func>
 800ab74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab78:	6006      	str	r6, [r0, #0]
 800ab7a:	60c6      	str	r6, [r0, #12]
 800ab7c:	b13c      	cbz	r4, 800ab8e <_Bfree+0x3a>
 800ab7e:	69eb      	ldr	r3, [r5, #28]
 800ab80:	6862      	ldr	r2, [r4, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab88:	6021      	str	r1, [r4, #0]
 800ab8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	0800be9e 	.word	0x0800be9e
 800ab94:	0800bf8f 	.word	0x0800bf8f

0800ab98 <__multadd>:
 800ab98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	460c      	mov	r4, r1
 800aba0:	461e      	mov	r6, r3
 800aba2:	2000      	movs	r0, #0
 800aba4:	690d      	ldr	r5, [r1, #16]
 800aba6:	f101 0c14 	add.w	ip, r1, #20
 800abaa:	f8dc 3000 	ldr.w	r3, [ip]
 800abae:	3001      	adds	r0, #1
 800abb0:	b299      	uxth	r1, r3
 800abb2:	fb02 6101 	mla	r1, r2, r1, r6
 800abb6:	0c1e      	lsrs	r6, r3, #16
 800abb8:	0c0b      	lsrs	r3, r1, #16
 800abba:	fb02 3306 	mla	r3, r2, r6, r3
 800abbe:	b289      	uxth	r1, r1
 800abc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abc4:	4285      	cmp	r5, r0
 800abc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abca:	f84c 1b04 	str.w	r1, [ip], #4
 800abce:	dcec      	bgt.n	800abaa <__multadd+0x12>
 800abd0:	b30e      	cbz	r6, 800ac16 <__multadd+0x7e>
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	42ab      	cmp	r3, r5
 800abd6:	dc19      	bgt.n	800ac0c <__multadd+0x74>
 800abd8:	6861      	ldr	r1, [r4, #4]
 800abda:	4638      	mov	r0, r7
 800abdc:	3101      	adds	r1, #1
 800abde:	f7ff ff79 	bl	800aad4 <_Balloc>
 800abe2:	4680      	mov	r8, r0
 800abe4:	b928      	cbnz	r0, 800abf2 <__multadd+0x5a>
 800abe6:	4602      	mov	r2, r0
 800abe8:	21ba      	movs	r1, #186	; 0xba
 800abea:	4b0c      	ldr	r3, [pc, #48]	; (800ac1c <__multadd+0x84>)
 800abec:	480c      	ldr	r0, [pc, #48]	; (800ac20 <__multadd+0x88>)
 800abee:	f000 fcfd 	bl	800b5ec <__assert_func>
 800abf2:	6922      	ldr	r2, [r4, #16]
 800abf4:	f104 010c 	add.w	r1, r4, #12
 800abf8:	3202      	adds	r2, #2
 800abfa:	0092      	lsls	r2, r2, #2
 800abfc:	300c      	adds	r0, #12
 800abfe:	f7fe fabe 	bl	800917e <memcpy>
 800ac02:	4621      	mov	r1, r4
 800ac04:	4638      	mov	r0, r7
 800ac06:	f7ff ffa5 	bl	800ab54 <_Bfree>
 800ac0a:	4644      	mov	r4, r8
 800ac0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac10:	3501      	adds	r5, #1
 800ac12:	615e      	str	r6, [r3, #20]
 800ac14:	6125      	str	r5, [r4, #16]
 800ac16:	4620      	mov	r0, r4
 800ac18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac1c:	0800bf0d 	.word	0x0800bf0d
 800ac20:	0800bf8f 	.word	0x0800bf8f

0800ac24 <__s2b>:
 800ac24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac28:	4615      	mov	r5, r2
 800ac2a:	2209      	movs	r2, #9
 800ac2c:	461f      	mov	r7, r3
 800ac2e:	3308      	adds	r3, #8
 800ac30:	460c      	mov	r4, r1
 800ac32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac36:	4606      	mov	r6, r0
 800ac38:	2201      	movs	r2, #1
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	db09      	blt.n	800ac54 <__s2b+0x30>
 800ac40:	4630      	mov	r0, r6
 800ac42:	f7ff ff47 	bl	800aad4 <_Balloc>
 800ac46:	b940      	cbnz	r0, 800ac5a <__s2b+0x36>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	21d3      	movs	r1, #211	; 0xd3
 800ac4c:	4b18      	ldr	r3, [pc, #96]	; (800acb0 <__s2b+0x8c>)
 800ac4e:	4819      	ldr	r0, [pc, #100]	; (800acb4 <__s2b+0x90>)
 800ac50:	f000 fccc 	bl	800b5ec <__assert_func>
 800ac54:	0052      	lsls	r2, r2, #1
 800ac56:	3101      	adds	r1, #1
 800ac58:	e7f0      	b.n	800ac3c <__s2b+0x18>
 800ac5a:	9b08      	ldr	r3, [sp, #32]
 800ac5c:	2d09      	cmp	r5, #9
 800ac5e:	6143      	str	r3, [r0, #20]
 800ac60:	f04f 0301 	mov.w	r3, #1
 800ac64:	6103      	str	r3, [r0, #16]
 800ac66:	dd16      	ble.n	800ac96 <__s2b+0x72>
 800ac68:	f104 0909 	add.w	r9, r4, #9
 800ac6c:	46c8      	mov	r8, r9
 800ac6e:	442c      	add	r4, r5
 800ac70:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac74:	4601      	mov	r1, r0
 800ac76:	220a      	movs	r2, #10
 800ac78:	4630      	mov	r0, r6
 800ac7a:	3b30      	subs	r3, #48	; 0x30
 800ac7c:	f7ff ff8c 	bl	800ab98 <__multadd>
 800ac80:	45a0      	cmp	r8, r4
 800ac82:	d1f5      	bne.n	800ac70 <__s2b+0x4c>
 800ac84:	f1a5 0408 	sub.w	r4, r5, #8
 800ac88:	444c      	add	r4, r9
 800ac8a:	1b2d      	subs	r5, r5, r4
 800ac8c:	1963      	adds	r3, r4, r5
 800ac8e:	42bb      	cmp	r3, r7
 800ac90:	db04      	blt.n	800ac9c <__s2b+0x78>
 800ac92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac96:	2509      	movs	r5, #9
 800ac98:	340a      	adds	r4, #10
 800ac9a:	e7f6      	b.n	800ac8a <__s2b+0x66>
 800ac9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aca0:	4601      	mov	r1, r0
 800aca2:	220a      	movs	r2, #10
 800aca4:	4630      	mov	r0, r6
 800aca6:	3b30      	subs	r3, #48	; 0x30
 800aca8:	f7ff ff76 	bl	800ab98 <__multadd>
 800acac:	e7ee      	b.n	800ac8c <__s2b+0x68>
 800acae:	bf00      	nop
 800acb0:	0800bf0d 	.word	0x0800bf0d
 800acb4:	0800bf8f 	.word	0x0800bf8f

0800acb8 <__hi0bits>:
 800acb8:	0c02      	lsrs	r2, r0, #16
 800acba:	0412      	lsls	r2, r2, #16
 800acbc:	4603      	mov	r3, r0
 800acbe:	b9ca      	cbnz	r2, 800acf4 <__hi0bits+0x3c>
 800acc0:	0403      	lsls	r3, r0, #16
 800acc2:	2010      	movs	r0, #16
 800acc4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800acc8:	bf04      	itt	eq
 800acca:	021b      	lsleq	r3, r3, #8
 800accc:	3008      	addeq	r0, #8
 800acce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800acd2:	bf04      	itt	eq
 800acd4:	011b      	lsleq	r3, r3, #4
 800acd6:	3004      	addeq	r0, #4
 800acd8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800acdc:	bf04      	itt	eq
 800acde:	009b      	lsleq	r3, r3, #2
 800ace0:	3002      	addeq	r0, #2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	db05      	blt.n	800acf2 <__hi0bits+0x3a>
 800ace6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800acea:	f100 0001 	add.w	r0, r0, #1
 800acee:	bf08      	it	eq
 800acf0:	2020      	moveq	r0, #32
 800acf2:	4770      	bx	lr
 800acf4:	2000      	movs	r0, #0
 800acf6:	e7e5      	b.n	800acc4 <__hi0bits+0xc>

0800acf8 <__lo0bits>:
 800acf8:	6803      	ldr	r3, [r0, #0]
 800acfa:	4602      	mov	r2, r0
 800acfc:	f013 0007 	ands.w	r0, r3, #7
 800ad00:	d00b      	beq.n	800ad1a <__lo0bits+0x22>
 800ad02:	07d9      	lsls	r1, r3, #31
 800ad04:	d421      	bmi.n	800ad4a <__lo0bits+0x52>
 800ad06:	0798      	lsls	r0, r3, #30
 800ad08:	bf49      	itett	mi
 800ad0a:	085b      	lsrmi	r3, r3, #1
 800ad0c:	089b      	lsrpl	r3, r3, #2
 800ad0e:	2001      	movmi	r0, #1
 800ad10:	6013      	strmi	r3, [r2, #0]
 800ad12:	bf5c      	itt	pl
 800ad14:	2002      	movpl	r0, #2
 800ad16:	6013      	strpl	r3, [r2, #0]
 800ad18:	4770      	bx	lr
 800ad1a:	b299      	uxth	r1, r3
 800ad1c:	b909      	cbnz	r1, 800ad22 <__lo0bits+0x2a>
 800ad1e:	2010      	movs	r0, #16
 800ad20:	0c1b      	lsrs	r3, r3, #16
 800ad22:	b2d9      	uxtb	r1, r3
 800ad24:	b909      	cbnz	r1, 800ad2a <__lo0bits+0x32>
 800ad26:	3008      	adds	r0, #8
 800ad28:	0a1b      	lsrs	r3, r3, #8
 800ad2a:	0719      	lsls	r1, r3, #28
 800ad2c:	bf04      	itt	eq
 800ad2e:	091b      	lsreq	r3, r3, #4
 800ad30:	3004      	addeq	r0, #4
 800ad32:	0799      	lsls	r1, r3, #30
 800ad34:	bf04      	itt	eq
 800ad36:	089b      	lsreq	r3, r3, #2
 800ad38:	3002      	addeq	r0, #2
 800ad3a:	07d9      	lsls	r1, r3, #31
 800ad3c:	d403      	bmi.n	800ad46 <__lo0bits+0x4e>
 800ad3e:	085b      	lsrs	r3, r3, #1
 800ad40:	f100 0001 	add.w	r0, r0, #1
 800ad44:	d003      	beq.n	800ad4e <__lo0bits+0x56>
 800ad46:	6013      	str	r3, [r2, #0]
 800ad48:	4770      	bx	lr
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	4770      	bx	lr
 800ad4e:	2020      	movs	r0, #32
 800ad50:	4770      	bx	lr
	...

0800ad54 <__i2b>:
 800ad54:	b510      	push	{r4, lr}
 800ad56:	460c      	mov	r4, r1
 800ad58:	2101      	movs	r1, #1
 800ad5a:	f7ff febb 	bl	800aad4 <_Balloc>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	b928      	cbnz	r0, 800ad6e <__i2b+0x1a>
 800ad62:	f240 1145 	movw	r1, #325	; 0x145
 800ad66:	4b04      	ldr	r3, [pc, #16]	; (800ad78 <__i2b+0x24>)
 800ad68:	4804      	ldr	r0, [pc, #16]	; (800ad7c <__i2b+0x28>)
 800ad6a:	f000 fc3f 	bl	800b5ec <__assert_func>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	6144      	str	r4, [r0, #20]
 800ad72:	6103      	str	r3, [r0, #16]
 800ad74:	bd10      	pop	{r4, pc}
 800ad76:	bf00      	nop
 800ad78:	0800bf0d 	.word	0x0800bf0d
 800ad7c:	0800bf8f 	.word	0x0800bf8f

0800ad80 <__multiply>:
 800ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad84:	4691      	mov	r9, r2
 800ad86:	690a      	ldr	r2, [r1, #16]
 800ad88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	bfbe      	ittt	lt
 800ad92:	460b      	movlt	r3, r1
 800ad94:	464c      	movlt	r4, r9
 800ad96:	4699      	movlt	r9, r3
 800ad98:	6927      	ldr	r7, [r4, #16]
 800ad9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad9e:	68a3      	ldr	r3, [r4, #8]
 800ada0:	6861      	ldr	r1, [r4, #4]
 800ada2:	eb07 060a 	add.w	r6, r7, sl
 800ada6:	42b3      	cmp	r3, r6
 800ada8:	b085      	sub	sp, #20
 800adaa:	bfb8      	it	lt
 800adac:	3101      	addlt	r1, #1
 800adae:	f7ff fe91 	bl	800aad4 <_Balloc>
 800adb2:	b930      	cbnz	r0, 800adc2 <__multiply+0x42>
 800adb4:	4602      	mov	r2, r0
 800adb6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800adba:	4b43      	ldr	r3, [pc, #268]	; (800aec8 <__multiply+0x148>)
 800adbc:	4843      	ldr	r0, [pc, #268]	; (800aecc <__multiply+0x14c>)
 800adbe:	f000 fc15 	bl	800b5ec <__assert_func>
 800adc2:	f100 0514 	add.w	r5, r0, #20
 800adc6:	462b      	mov	r3, r5
 800adc8:	2200      	movs	r2, #0
 800adca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adce:	4543      	cmp	r3, r8
 800add0:	d321      	bcc.n	800ae16 <__multiply+0x96>
 800add2:	f104 0314 	add.w	r3, r4, #20
 800add6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800adda:	f109 0314 	add.w	r3, r9, #20
 800adde:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ade2:	9202      	str	r2, [sp, #8]
 800ade4:	1b3a      	subs	r2, r7, r4
 800ade6:	3a15      	subs	r2, #21
 800ade8:	f022 0203 	bic.w	r2, r2, #3
 800adec:	3204      	adds	r2, #4
 800adee:	f104 0115 	add.w	r1, r4, #21
 800adf2:	428f      	cmp	r7, r1
 800adf4:	bf38      	it	cc
 800adf6:	2204      	movcc	r2, #4
 800adf8:	9201      	str	r2, [sp, #4]
 800adfa:	9a02      	ldr	r2, [sp, #8]
 800adfc:	9303      	str	r3, [sp, #12]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d80c      	bhi.n	800ae1c <__multiply+0x9c>
 800ae02:	2e00      	cmp	r6, #0
 800ae04:	dd03      	ble.n	800ae0e <__multiply+0x8e>
 800ae06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d05a      	beq.n	800aec4 <__multiply+0x144>
 800ae0e:	6106      	str	r6, [r0, #16]
 800ae10:	b005      	add	sp, #20
 800ae12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae16:	f843 2b04 	str.w	r2, [r3], #4
 800ae1a:	e7d8      	b.n	800adce <__multiply+0x4e>
 800ae1c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae20:	f1ba 0f00 	cmp.w	sl, #0
 800ae24:	d023      	beq.n	800ae6e <__multiply+0xee>
 800ae26:	46a9      	mov	r9, r5
 800ae28:	f04f 0c00 	mov.w	ip, #0
 800ae2c:	f104 0e14 	add.w	lr, r4, #20
 800ae30:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae34:	f8d9 1000 	ldr.w	r1, [r9]
 800ae38:	fa1f fb82 	uxth.w	fp, r2
 800ae3c:	b289      	uxth	r1, r1
 800ae3e:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae42:	4461      	add	r1, ip
 800ae44:	f8d9 c000 	ldr.w	ip, [r9]
 800ae48:	0c12      	lsrs	r2, r2, #16
 800ae4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ae4e:	fb0a c202 	mla	r2, sl, r2, ip
 800ae52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae56:	b289      	uxth	r1, r1
 800ae58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae5c:	4577      	cmp	r7, lr
 800ae5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae62:	f849 1b04 	str.w	r1, [r9], #4
 800ae66:	d8e3      	bhi.n	800ae30 <__multiply+0xb0>
 800ae68:	9a01      	ldr	r2, [sp, #4]
 800ae6a:	f845 c002 	str.w	ip, [r5, r2]
 800ae6e:	9a03      	ldr	r2, [sp, #12]
 800ae70:	3304      	adds	r3, #4
 800ae72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae76:	f1b9 0f00 	cmp.w	r9, #0
 800ae7a:	d021      	beq.n	800aec0 <__multiply+0x140>
 800ae7c:	46ae      	mov	lr, r5
 800ae7e:	f04f 0a00 	mov.w	sl, #0
 800ae82:	6829      	ldr	r1, [r5, #0]
 800ae84:	f104 0c14 	add.w	ip, r4, #20
 800ae88:	f8bc b000 	ldrh.w	fp, [ip]
 800ae8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae90:	b289      	uxth	r1, r1
 800ae92:	fb09 220b 	mla	r2, r9, fp, r2
 800ae96:	4452      	add	r2, sl
 800ae98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae9c:	f84e 1b04 	str.w	r1, [lr], #4
 800aea0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aea4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aea8:	f8be 1000 	ldrh.w	r1, [lr]
 800aeac:	4567      	cmp	r7, ip
 800aeae:	fb09 110a 	mla	r1, r9, sl, r1
 800aeb2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800aeb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aeba:	d8e5      	bhi.n	800ae88 <__multiply+0x108>
 800aebc:	9a01      	ldr	r2, [sp, #4]
 800aebe:	50a9      	str	r1, [r5, r2]
 800aec0:	3504      	adds	r5, #4
 800aec2:	e79a      	b.n	800adfa <__multiply+0x7a>
 800aec4:	3e01      	subs	r6, #1
 800aec6:	e79c      	b.n	800ae02 <__multiply+0x82>
 800aec8:	0800bf0d 	.word	0x0800bf0d
 800aecc:	0800bf8f 	.word	0x0800bf8f

0800aed0 <__pow5mult>:
 800aed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed4:	4615      	mov	r5, r2
 800aed6:	f012 0203 	ands.w	r2, r2, #3
 800aeda:	4606      	mov	r6, r0
 800aedc:	460f      	mov	r7, r1
 800aede:	d007      	beq.n	800aef0 <__pow5mult+0x20>
 800aee0:	4c25      	ldr	r4, [pc, #148]	; (800af78 <__pow5mult+0xa8>)
 800aee2:	3a01      	subs	r2, #1
 800aee4:	2300      	movs	r3, #0
 800aee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aeea:	f7ff fe55 	bl	800ab98 <__multadd>
 800aeee:	4607      	mov	r7, r0
 800aef0:	10ad      	asrs	r5, r5, #2
 800aef2:	d03d      	beq.n	800af70 <__pow5mult+0xa0>
 800aef4:	69f4      	ldr	r4, [r6, #28]
 800aef6:	b97c      	cbnz	r4, 800af18 <__pow5mult+0x48>
 800aef8:	2010      	movs	r0, #16
 800aefa:	f7ff fc7b 	bl	800a7f4 <malloc>
 800aefe:	4602      	mov	r2, r0
 800af00:	61f0      	str	r0, [r6, #28]
 800af02:	b928      	cbnz	r0, 800af10 <__pow5mult+0x40>
 800af04:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af08:	4b1c      	ldr	r3, [pc, #112]	; (800af7c <__pow5mult+0xac>)
 800af0a:	481d      	ldr	r0, [pc, #116]	; (800af80 <__pow5mult+0xb0>)
 800af0c:	f000 fb6e 	bl	800b5ec <__assert_func>
 800af10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af14:	6004      	str	r4, [r0, #0]
 800af16:	60c4      	str	r4, [r0, #12]
 800af18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800af1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af20:	b94c      	cbnz	r4, 800af36 <__pow5mult+0x66>
 800af22:	f240 2171 	movw	r1, #625	; 0x271
 800af26:	4630      	mov	r0, r6
 800af28:	f7ff ff14 	bl	800ad54 <__i2b>
 800af2c:	2300      	movs	r3, #0
 800af2e:	4604      	mov	r4, r0
 800af30:	f8c8 0008 	str.w	r0, [r8, #8]
 800af34:	6003      	str	r3, [r0, #0]
 800af36:	f04f 0900 	mov.w	r9, #0
 800af3a:	07eb      	lsls	r3, r5, #31
 800af3c:	d50a      	bpl.n	800af54 <__pow5mult+0x84>
 800af3e:	4639      	mov	r1, r7
 800af40:	4622      	mov	r2, r4
 800af42:	4630      	mov	r0, r6
 800af44:	f7ff ff1c 	bl	800ad80 <__multiply>
 800af48:	4680      	mov	r8, r0
 800af4a:	4639      	mov	r1, r7
 800af4c:	4630      	mov	r0, r6
 800af4e:	f7ff fe01 	bl	800ab54 <_Bfree>
 800af52:	4647      	mov	r7, r8
 800af54:	106d      	asrs	r5, r5, #1
 800af56:	d00b      	beq.n	800af70 <__pow5mult+0xa0>
 800af58:	6820      	ldr	r0, [r4, #0]
 800af5a:	b938      	cbnz	r0, 800af6c <__pow5mult+0x9c>
 800af5c:	4622      	mov	r2, r4
 800af5e:	4621      	mov	r1, r4
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff ff0d 	bl	800ad80 <__multiply>
 800af66:	6020      	str	r0, [r4, #0]
 800af68:	f8c0 9000 	str.w	r9, [r0]
 800af6c:	4604      	mov	r4, r0
 800af6e:	e7e4      	b.n	800af3a <__pow5mult+0x6a>
 800af70:	4638      	mov	r0, r7
 800af72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af76:	bf00      	nop
 800af78:	0800c0d8 	.word	0x0800c0d8
 800af7c:	0800be9e 	.word	0x0800be9e
 800af80:	0800bf8f 	.word	0x0800bf8f

0800af84 <__lshift>:
 800af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af88:	460c      	mov	r4, r1
 800af8a:	4607      	mov	r7, r0
 800af8c:	4691      	mov	r9, r2
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	6849      	ldr	r1, [r1, #4]
 800af92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af9c:	f108 0601 	add.w	r6, r8, #1
 800afa0:	42b3      	cmp	r3, r6
 800afa2:	db0b      	blt.n	800afbc <__lshift+0x38>
 800afa4:	4638      	mov	r0, r7
 800afa6:	f7ff fd95 	bl	800aad4 <_Balloc>
 800afaa:	4605      	mov	r5, r0
 800afac:	b948      	cbnz	r0, 800afc2 <__lshift+0x3e>
 800afae:	4602      	mov	r2, r0
 800afb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800afb4:	4b27      	ldr	r3, [pc, #156]	; (800b054 <__lshift+0xd0>)
 800afb6:	4828      	ldr	r0, [pc, #160]	; (800b058 <__lshift+0xd4>)
 800afb8:	f000 fb18 	bl	800b5ec <__assert_func>
 800afbc:	3101      	adds	r1, #1
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	e7ee      	b.n	800afa0 <__lshift+0x1c>
 800afc2:	2300      	movs	r3, #0
 800afc4:	f100 0114 	add.w	r1, r0, #20
 800afc8:	f100 0210 	add.w	r2, r0, #16
 800afcc:	4618      	mov	r0, r3
 800afce:	4553      	cmp	r3, sl
 800afd0:	db33      	blt.n	800b03a <__lshift+0xb6>
 800afd2:	6920      	ldr	r0, [r4, #16]
 800afd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afd8:	f104 0314 	add.w	r3, r4, #20
 800afdc:	f019 091f 	ands.w	r9, r9, #31
 800afe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afe8:	d02b      	beq.n	800b042 <__lshift+0xbe>
 800afea:	468a      	mov	sl, r1
 800afec:	2200      	movs	r2, #0
 800afee:	f1c9 0e20 	rsb	lr, r9, #32
 800aff2:	6818      	ldr	r0, [r3, #0]
 800aff4:	fa00 f009 	lsl.w	r0, r0, r9
 800aff8:	4310      	orrs	r0, r2
 800affa:	f84a 0b04 	str.w	r0, [sl], #4
 800affe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b002:	459c      	cmp	ip, r3
 800b004:	fa22 f20e 	lsr.w	r2, r2, lr
 800b008:	d8f3      	bhi.n	800aff2 <__lshift+0x6e>
 800b00a:	ebac 0304 	sub.w	r3, ip, r4
 800b00e:	3b15      	subs	r3, #21
 800b010:	f023 0303 	bic.w	r3, r3, #3
 800b014:	3304      	adds	r3, #4
 800b016:	f104 0015 	add.w	r0, r4, #21
 800b01a:	4584      	cmp	ip, r0
 800b01c:	bf38      	it	cc
 800b01e:	2304      	movcc	r3, #4
 800b020:	50ca      	str	r2, [r1, r3]
 800b022:	b10a      	cbz	r2, 800b028 <__lshift+0xa4>
 800b024:	f108 0602 	add.w	r6, r8, #2
 800b028:	3e01      	subs	r6, #1
 800b02a:	4638      	mov	r0, r7
 800b02c:	4621      	mov	r1, r4
 800b02e:	612e      	str	r6, [r5, #16]
 800b030:	f7ff fd90 	bl	800ab54 <_Bfree>
 800b034:	4628      	mov	r0, r5
 800b036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b03a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b03e:	3301      	adds	r3, #1
 800b040:	e7c5      	b.n	800afce <__lshift+0x4a>
 800b042:	3904      	subs	r1, #4
 800b044:	f853 2b04 	ldr.w	r2, [r3], #4
 800b048:	459c      	cmp	ip, r3
 800b04a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b04e:	d8f9      	bhi.n	800b044 <__lshift+0xc0>
 800b050:	e7ea      	b.n	800b028 <__lshift+0xa4>
 800b052:	bf00      	nop
 800b054:	0800bf0d 	.word	0x0800bf0d
 800b058:	0800bf8f 	.word	0x0800bf8f

0800b05c <__mcmp>:
 800b05c:	4603      	mov	r3, r0
 800b05e:	690a      	ldr	r2, [r1, #16]
 800b060:	6900      	ldr	r0, [r0, #16]
 800b062:	b530      	push	{r4, r5, lr}
 800b064:	1a80      	subs	r0, r0, r2
 800b066:	d10d      	bne.n	800b084 <__mcmp+0x28>
 800b068:	3314      	adds	r3, #20
 800b06a:	3114      	adds	r1, #20
 800b06c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b070:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b078:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b07c:	4295      	cmp	r5, r2
 800b07e:	d002      	beq.n	800b086 <__mcmp+0x2a>
 800b080:	d304      	bcc.n	800b08c <__mcmp+0x30>
 800b082:	2001      	movs	r0, #1
 800b084:	bd30      	pop	{r4, r5, pc}
 800b086:	42a3      	cmp	r3, r4
 800b088:	d3f4      	bcc.n	800b074 <__mcmp+0x18>
 800b08a:	e7fb      	b.n	800b084 <__mcmp+0x28>
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b090:	e7f8      	b.n	800b084 <__mcmp+0x28>
	...

0800b094 <__mdiff>:
 800b094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b098:	460d      	mov	r5, r1
 800b09a:	4607      	mov	r7, r0
 800b09c:	4611      	mov	r1, r2
 800b09e:	4628      	mov	r0, r5
 800b0a0:	4614      	mov	r4, r2
 800b0a2:	f7ff ffdb 	bl	800b05c <__mcmp>
 800b0a6:	1e06      	subs	r6, r0, #0
 800b0a8:	d111      	bne.n	800b0ce <__mdiff+0x3a>
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f7ff fd11 	bl	800aad4 <_Balloc>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	b928      	cbnz	r0, 800b0c2 <__mdiff+0x2e>
 800b0b6:	f240 2137 	movw	r1, #567	; 0x237
 800b0ba:	4b3a      	ldr	r3, [pc, #232]	; (800b1a4 <__mdiff+0x110>)
 800b0bc:	483a      	ldr	r0, [pc, #232]	; (800b1a8 <__mdiff+0x114>)
 800b0be:	f000 fa95 	bl	800b5ec <__assert_func>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ce:	bfa4      	itt	ge
 800b0d0:	4623      	movge	r3, r4
 800b0d2:	462c      	movge	r4, r5
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	6861      	ldr	r1, [r4, #4]
 800b0d8:	bfa6      	itte	ge
 800b0da:	461d      	movge	r5, r3
 800b0dc:	2600      	movge	r6, #0
 800b0de:	2601      	movlt	r6, #1
 800b0e0:	f7ff fcf8 	bl	800aad4 <_Balloc>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	b918      	cbnz	r0, 800b0f0 <__mdiff+0x5c>
 800b0e8:	f240 2145 	movw	r1, #581	; 0x245
 800b0ec:	4b2d      	ldr	r3, [pc, #180]	; (800b1a4 <__mdiff+0x110>)
 800b0ee:	e7e5      	b.n	800b0bc <__mdiff+0x28>
 800b0f0:	f102 0814 	add.w	r8, r2, #20
 800b0f4:	46c2      	mov	sl, r8
 800b0f6:	f04f 0c00 	mov.w	ip, #0
 800b0fa:	6927      	ldr	r7, [r4, #16]
 800b0fc:	60c6      	str	r6, [r0, #12]
 800b0fe:	692e      	ldr	r6, [r5, #16]
 800b100:	f104 0014 	add.w	r0, r4, #20
 800b104:	f105 0914 	add.w	r9, r5, #20
 800b108:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b10c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b110:	3410      	adds	r4, #16
 800b112:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b116:	f859 3b04 	ldr.w	r3, [r9], #4
 800b11a:	fa1f f18b 	uxth.w	r1, fp
 800b11e:	4461      	add	r1, ip
 800b120:	fa1f fc83 	uxth.w	ip, r3
 800b124:	0c1b      	lsrs	r3, r3, #16
 800b126:	eba1 010c 	sub.w	r1, r1, ip
 800b12a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b12e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b132:	b289      	uxth	r1, r1
 800b134:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b138:	454e      	cmp	r6, r9
 800b13a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b13e:	f84a 1b04 	str.w	r1, [sl], #4
 800b142:	d8e6      	bhi.n	800b112 <__mdiff+0x7e>
 800b144:	1b73      	subs	r3, r6, r5
 800b146:	3b15      	subs	r3, #21
 800b148:	f023 0303 	bic.w	r3, r3, #3
 800b14c:	3515      	adds	r5, #21
 800b14e:	3304      	adds	r3, #4
 800b150:	42ae      	cmp	r6, r5
 800b152:	bf38      	it	cc
 800b154:	2304      	movcc	r3, #4
 800b156:	4418      	add	r0, r3
 800b158:	4443      	add	r3, r8
 800b15a:	461e      	mov	r6, r3
 800b15c:	4605      	mov	r5, r0
 800b15e:	4575      	cmp	r5, lr
 800b160:	d30e      	bcc.n	800b180 <__mdiff+0xec>
 800b162:	f10e 0103 	add.w	r1, lr, #3
 800b166:	1a09      	subs	r1, r1, r0
 800b168:	f021 0103 	bic.w	r1, r1, #3
 800b16c:	3803      	subs	r0, #3
 800b16e:	4586      	cmp	lr, r0
 800b170:	bf38      	it	cc
 800b172:	2100      	movcc	r1, #0
 800b174:	440b      	add	r3, r1
 800b176:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b17a:	b189      	cbz	r1, 800b1a0 <__mdiff+0x10c>
 800b17c:	6117      	str	r7, [r2, #16]
 800b17e:	e7a3      	b.n	800b0c8 <__mdiff+0x34>
 800b180:	f855 8b04 	ldr.w	r8, [r5], #4
 800b184:	fa1f f188 	uxth.w	r1, r8
 800b188:	4461      	add	r1, ip
 800b18a:	140c      	asrs	r4, r1, #16
 800b18c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b190:	b289      	uxth	r1, r1
 800b192:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b196:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b19a:	f846 1b04 	str.w	r1, [r6], #4
 800b19e:	e7de      	b.n	800b15e <__mdiff+0xca>
 800b1a0:	3f01      	subs	r7, #1
 800b1a2:	e7e8      	b.n	800b176 <__mdiff+0xe2>
 800b1a4:	0800bf0d 	.word	0x0800bf0d
 800b1a8:	0800bf8f 	.word	0x0800bf8f

0800b1ac <__ulp>:
 800b1ac:	4b0e      	ldr	r3, [pc, #56]	; (800b1e8 <__ulp+0x3c>)
 800b1ae:	400b      	ands	r3, r1
 800b1b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	dc08      	bgt.n	800b1ca <__ulp+0x1e>
 800b1b8:	425b      	negs	r3, r3
 800b1ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b1be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b1c2:	da04      	bge.n	800b1ce <__ulp+0x22>
 800b1c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1c8:	4113      	asrs	r3, r2
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	e008      	b.n	800b1e0 <__ulp+0x34>
 800b1ce:	f1a2 0314 	sub.w	r3, r2, #20
 800b1d2:	2b1e      	cmp	r3, #30
 800b1d4:	bfd6      	itet	le
 800b1d6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b1da:	2201      	movgt	r2, #1
 800b1dc:	40da      	lsrle	r2, r3
 800b1de:	2300      	movs	r3, #0
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	7ff00000 	.word	0x7ff00000

0800b1ec <__b2d>:
 800b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ee:	6905      	ldr	r5, [r0, #16]
 800b1f0:	f100 0714 	add.w	r7, r0, #20
 800b1f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b1f8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b1fc:	1f2e      	subs	r6, r5, #4
 800b1fe:	4620      	mov	r0, r4
 800b200:	f7ff fd5a 	bl	800acb8 <__hi0bits>
 800b204:	f1c0 0220 	rsb	r2, r0, #32
 800b208:	280a      	cmp	r0, #10
 800b20a:	4603      	mov	r3, r0
 800b20c:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b278 <__b2d+0x8c>
 800b210:	600a      	str	r2, [r1, #0]
 800b212:	dc12      	bgt.n	800b23a <__b2d+0x4e>
 800b214:	f1c0 0e0b 	rsb	lr, r0, #11
 800b218:	fa24 f20e 	lsr.w	r2, r4, lr
 800b21c:	42b7      	cmp	r7, r6
 800b21e:	ea42 010c 	orr.w	r1, r2, ip
 800b222:	bf2c      	ite	cs
 800b224:	2200      	movcs	r2, #0
 800b226:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b22a:	3315      	adds	r3, #21
 800b22c:	fa04 f303 	lsl.w	r3, r4, r3
 800b230:	fa22 f20e 	lsr.w	r2, r2, lr
 800b234:	431a      	orrs	r2, r3
 800b236:	4610      	mov	r0, r2
 800b238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b23a:	42b7      	cmp	r7, r6
 800b23c:	bf2e      	itee	cs
 800b23e:	2200      	movcs	r2, #0
 800b240:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b244:	f1a5 0608 	subcc.w	r6, r5, #8
 800b248:	3b0b      	subs	r3, #11
 800b24a:	d012      	beq.n	800b272 <__b2d+0x86>
 800b24c:	f1c3 0520 	rsb	r5, r3, #32
 800b250:	fa22 f105 	lsr.w	r1, r2, r5
 800b254:	409c      	lsls	r4, r3
 800b256:	430c      	orrs	r4, r1
 800b258:	42be      	cmp	r6, r7
 800b25a:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b25e:	bf94      	ite	ls
 800b260:	2400      	movls	r4, #0
 800b262:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b266:	409a      	lsls	r2, r3
 800b268:	40ec      	lsrs	r4, r5
 800b26a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b26e:	4322      	orrs	r2, r4
 800b270:	e7e1      	b.n	800b236 <__b2d+0x4a>
 800b272:	ea44 010c 	orr.w	r1, r4, ip
 800b276:	e7de      	b.n	800b236 <__b2d+0x4a>
 800b278:	3ff00000 	.word	0x3ff00000

0800b27c <__d2b>:
 800b27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b27e:	2101      	movs	r1, #1
 800b280:	4617      	mov	r7, r2
 800b282:	461c      	mov	r4, r3
 800b284:	9e08      	ldr	r6, [sp, #32]
 800b286:	f7ff fc25 	bl	800aad4 <_Balloc>
 800b28a:	4605      	mov	r5, r0
 800b28c:	b930      	cbnz	r0, 800b29c <__d2b+0x20>
 800b28e:	4602      	mov	r2, r0
 800b290:	f240 310f 	movw	r1, #783	; 0x30f
 800b294:	4b22      	ldr	r3, [pc, #136]	; (800b320 <__d2b+0xa4>)
 800b296:	4823      	ldr	r0, [pc, #140]	; (800b324 <__d2b+0xa8>)
 800b298:	f000 f9a8 	bl	800b5ec <__assert_func>
 800b29c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b2a0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b2a4:	bb24      	cbnz	r4, 800b2f0 <__d2b+0x74>
 800b2a6:	2f00      	cmp	r7, #0
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	d026      	beq.n	800b2fa <__d2b+0x7e>
 800b2ac:	4668      	mov	r0, sp
 800b2ae:	9700      	str	r7, [sp, #0]
 800b2b0:	f7ff fd22 	bl	800acf8 <__lo0bits>
 800b2b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2b8:	b1e8      	cbz	r0, 800b2f6 <__d2b+0x7a>
 800b2ba:	f1c0 0320 	rsb	r3, r0, #32
 800b2be:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c2:	430b      	orrs	r3, r1
 800b2c4:	40c2      	lsrs	r2, r0
 800b2c6:	616b      	str	r3, [r5, #20]
 800b2c8:	9201      	str	r2, [sp, #4]
 800b2ca:	9b01      	ldr	r3, [sp, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	bf14      	ite	ne
 800b2d0:	2102      	movne	r1, #2
 800b2d2:	2101      	moveq	r1, #1
 800b2d4:	61ab      	str	r3, [r5, #24]
 800b2d6:	6129      	str	r1, [r5, #16]
 800b2d8:	b1bc      	cbz	r4, 800b30a <__d2b+0x8e>
 800b2da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b2de:	4404      	add	r4, r0
 800b2e0:	6034      	str	r4, [r6, #0]
 800b2e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e8:	6018      	str	r0, [r3, #0]
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	b003      	add	sp, #12
 800b2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2f4:	e7d7      	b.n	800b2a6 <__d2b+0x2a>
 800b2f6:	6169      	str	r1, [r5, #20]
 800b2f8:	e7e7      	b.n	800b2ca <__d2b+0x4e>
 800b2fa:	a801      	add	r0, sp, #4
 800b2fc:	f7ff fcfc 	bl	800acf8 <__lo0bits>
 800b300:	9b01      	ldr	r3, [sp, #4]
 800b302:	2101      	movs	r1, #1
 800b304:	616b      	str	r3, [r5, #20]
 800b306:	3020      	adds	r0, #32
 800b308:	e7e5      	b.n	800b2d6 <__d2b+0x5a>
 800b30a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b30e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b312:	6030      	str	r0, [r6, #0]
 800b314:	6918      	ldr	r0, [r3, #16]
 800b316:	f7ff fccf 	bl	800acb8 <__hi0bits>
 800b31a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b31e:	e7e2      	b.n	800b2e6 <__d2b+0x6a>
 800b320:	0800bf0d 	.word	0x0800bf0d
 800b324:	0800bf8f 	.word	0x0800bf8f

0800b328 <__ratio>:
 800b328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	4688      	mov	r8, r1
 800b32e:	4669      	mov	r1, sp
 800b330:	4681      	mov	r9, r0
 800b332:	f7ff ff5b 	bl	800b1ec <__b2d>
 800b336:	460f      	mov	r7, r1
 800b338:	4604      	mov	r4, r0
 800b33a:	460d      	mov	r5, r1
 800b33c:	4640      	mov	r0, r8
 800b33e:	a901      	add	r1, sp, #4
 800b340:	f7ff ff54 	bl	800b1ec <__b2d>
 800b344:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b348:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b34c:	468b      	mov	fp, r1
 800b34e:	eba3 0c02 	sub.w	ip, r3, r2
 800b352:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b356:	1a9b      	subs	r3, r3, r2
 800b358:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	bfd5      	itete	le
 800b360:	460a      	movle	r2, r1
 800b362:	462a      	movgt	r2, r5
 800b364:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b368:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b36c:	bfd8      	it	le
 800b36e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b372:	465b      	mov	r3, fp
 800b374:	4602      	mov	r2, r0
 800b376:	4639      	mov	r1, r7
 800b378:	4620      	mov	r0, r4
 800b37a:	f7f5 f9d7 	bl	800072c <__aeabi_ddiv>
 800b37e:	b003      	add	sp, #12
 800b380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b384 <__copybits>:
 800b384:	3901      	subs	r1, #1
 800b386:	b570      	push	{r4, r5, r6, lr}
 800b388:	1149      	asrs	r1, r1, #5
 800b38a:	6914      	ldr	r4, [r2, #16]
 800b38c:	3101      	adds	r1, #1
 800b38e:	f102 0314 	add.w	r3, r2, #20
 800b392:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b396:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b39a:	1f05      	subs	r5, r0, #4
 800b39c:	42a3      	cmp	r3, r4
 800b39e:	d30c      	bcc.n	800b3ba <__copybits+0x36>
 800b3a0:	1aa3      	subs	r3, r4, r2
 800b3a2:	3b11      	subs	r3, #17
 800b3a4:	f023 0303 	bic.w	r3, r3, #3
 800b3a8:	3211      	adds	r2, #17
 800b3aa:	42a2      	cmp	r2, r4
 800b3ac:	bf88      	it	hi
 800b3ae:	2300      	movhi	r3, #0
 800b3b0:	4418      	add	r0, r3
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	4288      	cmp	r0, r1
 800b3b6:	d305      	bcc.n	800b3c4 <__copybits+0x40>
 800b3b8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3be:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3c2:	e7eb      	b.n	800b39c <__copybits+0x18>
 800b3c4:	f840 3b04 	str.w	r3, [r0], #4
 800b3c8:	e7f4      	b.n	800b3b4 <__copybits+0x30>

0800b3ca <__any_on>:
 800b3ca:	f100 0214 	add.w	r2, r0, #20
 800b3ce:	6900      	ldr	r0, [r0, #16]
 800b3d0:	114b      	asrs	r3, r1, #5
 800b3d2:	4298      	cmp	r0, r3
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	db11      	blt.n	800b3fc <__any_on+0x32>
 800b3d8:	dd0a      	ble.n	800b3f0 <__any_on+0x26>
 800b3da:	f011 011f 	ands.w	r1, r1, #31
 800b3de:	d007      	beq.n	800b3f0 <__any_on+0x26>
 800b3e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3e4:	fa24 f001 	lsr.w	r0, r4, r1
 800b3e8:	fa00 f101 	lsl.w	r1, r0, r1
 800b3ec:	428c      	cmp	r4, r1
 800b3ee:	d10b      	bne.n	800b408 <__any_on+0x3e>
 800b3f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d803      	bhi.n	800b400 <__any_on+0x36>
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	bd10      	pop	{r4, pc}
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	e7f7      	b.n	800b3f0 <__any_on+0x26>
 800b400:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b404:	2900      	cmp	r1, #0
 800b406:	d0f5      	beq.n	800b3f4 <__any_on+0x2a>
 800b408:	2001      	movs	r0, #1
 800b40a:	e7f6      	b.n	800b3fa <__any_on+0x30>

0800b40c <__sread>:
 800b40c:	b510      	push	{r4, lr}
 800b40e:	460c      	mov	r4, r1
 800b410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b414:	f000 f8b6 	bl	800b584 <_read_r>
 800b418:	2800      	cmp	r0, #0
 800b41a:	bfab      	itete	ge
 800b41c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b41e:	89a3      	ldrhlt	r3, [r4, #12]
 800b420:	181b      	addge	r3, r3, r0
 800b422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b426:	bfac      	ite	ge
 800b428:	6563      	strge	r3, [r4, #84]	; 0x54
 800b42a:	81a3      	strhlt	r3, [r4, #12]
 800b42c:	bd10      	pop	{r4, pc}

0800b42e <__swrite>:
 800b42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b432:	461f      	mov	r7, r3
 800b434:	898b      	ldrh	r3, [r1, #12]
 800b436:	4605      	mov	r5, r0
 800b438:	05db      	lsls	r3, r3, #23
 800b43a:	460c      	mov	r4, r1
 800b43c:	4616      	mov	r6, r2
 800b43e:	d505      	bpl.n	800b44c <__swrite+0x1e>
 800b440:	2302      	movs	r3, #2
 800b442:	2200      	movs	r2, #0
 800b444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b448:	f000 f88a 	bl	800b560 <_lseek_r>
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	4632      	mov	r2, r6
 800b450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b454:	81a3      	strh	r3, [r4, #12]
 800b456:	4628      	mov	r0, r5
 800b458:	463b      	mov	r3, r7
 800b45a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b45e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b462:	f000 b8b1 	b.w	800b5c8 <_write_r>

0800b466 <__sseek>:
 800b466:	b510      	push	{r4, lr}
 800b468:	460c      	mov	r4, r1
 800b46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46e:	f000 f877 	bl	800b560 <_lseek_r>
 800b472:	1c43      	adds	r3, r0, #1
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	bf15      	itete	ne
 800b478:	6560      	strne	r0, [r4, #84]	; 0x54
 800b47a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b47e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b482:	81a3      	strheq	r3, [r4, #12]
 800b484:	bf18      	it	ne
 800b486:	81a3      	strhne	r3, [r4, #12]
 800b488:	bd10      	pop	{r4, pc}

0800b48a <__sclose>:
 800b48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b48e:	f000 b857 	b.w	800b540 <_close_r>

0800b492 <_realloc_r>:
 800b492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b496:	4680      	mov	r8, r0
 800b498:	4614      	mov	r4, r2
 800b49a:	460e      	mov	r6, r1
 800b49c:	b921      	cbnz	r1, 800b4a8 <_realloc_r+0x16>
 800b49e:	4611      	mov	r1, r2
 800b4a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a4:	f7ff b9ce 	b.w	800a844 <_malloc_r>
 800b4a8:	b92a      	cbnz	r2, 800b4b6 <_realloc_r+0x24>
 800b4aa:	f000 f8d1 	bl	800b650 <_free_r>
 800b4ae:	4625      	mov	r5, r4
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b6:	f000 f913 	bl	800b6e0 <_malloc_usable_size_r>
 800b4ba:	4284      	cmp	r4, r0
 800b4bc:	4607      	mov	r7, r0
 800b4be:	d802      	bhi.n	800b4c6 <_realloc_r+0x34>
 800b4c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4c4:	d812      	bhi.n	800b4ec <_realloc_r+0x5a>
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4640      	mov	r0, r8
 800b4ca:	f7ff f9bb 	bl	800a844 <_malloc_r>
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d0ed      	beq.n	800b4b0 <_realloc_r+0x1e>
 800b4d4:	42bc      	cmp	r4, r7
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	4631      	mov	r1, r6
 800b4da:	bf28      	it	cs
 800b4dc:	463a      	movcs	r2, r7
 800b4de:	f7fd fe4e 	bl	800917e <memcpy>
 800b4e2:	4631      	mov	r1, r6
 800b4e4:	4640      	mov	r0, r8
 800b4e6:	f000 f8b3 	bl	800b650 <_free_r>
 800b4ea:	e7e1      	b.n	800b4b0 <_realloc_r+0x1e>
 800b4ec:	4635      	mov	r5, r6
 800b4ee:	e7df      	b.n	800b4b0 <_realloc_r+0x1e>

0800b4f0 <__ascii_wctomb>:
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	4608      	mov	r0, r1
 800b4f4:	b141      	cbz	r1, 800b508 <__ascii_wctomb+0x18>
 800b4f6:	2aff      	cmp	r2, #255	; 0xff
 800b4f8:	d904      	bls.n	800b504 <__ascii_wctomb+0x14>
 800b4fa:	228a      	movs	r2, #138	; 0x8a
 800b4fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b500:	601a      	str	r2, [r3, #0]
 800b502:	4770      	bx	lr
 800b504:	2001      	movs	r0, #1
 800b506:	700a      	strb	r2, [r1, #0]
 800b508:	4770      	bx	lr

0800b50a <memmove>:
 800b50a:	4288      	cmp	r0, r1
 800b50c:	b510      	push	{r4, lr}
 800b50e:	eb01 0402 	add.w	r4, r1, r2
 800b512:	d902      	bls.n	800b51a <memmove+0x10>
 800b514:	4284      	cmp	r4, r0
 800b516:	4623      	mov	r3, r4
 800b518:	d807      	bhi.n	800b52a <memmove+0x20>
 800b51a:	1e43      	subs	r3, r0, #1
 800b51c:	42a1      	cmp	r1, r4
 800b51e:	d008      	beq.n	800b532 <memmove+0x28>
 800b520:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b524:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b528:	e7f8      	b.n	800b51c <memmove+0x12>
 800b52a:	4601      	mov	r1, r0
 800b52c:	4402      	add	r2, r0
 800b52e:	428a      	cmp	r2, r1
 800b530:	d100      	bne.n	800b534 <memmove+0x2a>
 800b532:	bd10      	pop	{r4, pc}
 800b534:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b538:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b53c:	e7f7      	b.n	800b52e <memmove+0x24>
	...

0800b540 <_close_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	2300      	movs	r3, #0
 800b544:	4d05      	ldr	r5, [pc, #20]	; (800b55c <_close_r+0x1c>)
 800b546:	4604      	mov	r4, r0
 800b548:	4608      	mov	r0, r1
 800b54a:	602b      	str	r3, [r5, #0]
 800b54c:	f7f6 fd9c 	bl	8002088 <_close>
 800b550:	1c43      	adds	r3, r0, #1
 800b552:	d102      	bne.n	800b55a <_close_r+0x1a>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	b103      	cbz	r3, 800b55a <_close_r+0x1a>
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	bd38      	pop	{r3, r4, r5, pc}
 800b55c:	20000724 	.word	0x20000724

0800b560 <_lseek_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	4604      	mov	r4, r0
 800b564:	4608      	mov	r0, r1
 800b566:	4611      	mov	r1, r2
 800b568:	2200      	movs	r2, #0
 800b56a:	4d05      	ldr	r5, [pc, #20]	; (800b580 <_lseek_r+0x20>)
 800b56c:	602a      	str	r2, [r5, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	f7f6 fdae 	bl	80020d0 <_lseek>
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	d102      	bne.n	800b57e <_lseek_r+0x1e>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	b103      	cbz	r3, 800b57e <_lseek_r+0x1e>
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	20000724 	.word	0x20000724

0800b584 <_read_r>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	4604      	mov	r4, r0
 800b588:	4608      	mov	r0, r1
 800b58a:	4611      	mov	r1, r2
 800b58c:	2200      	movs	r2, #0
 800b58e:	4d05      	ldr	r5, [pc, #20]	; (800b5a4 <_read_r+0x20>)
 800b590:	602a      	str	r2, [r5, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	f7f6 fd3f 	bl	8002016 <_read>
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d102      	bne.n	800b5a2 <_read_r+0x1e>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	b103      	cbz	r3, 800b5a2 <_read_r+0x1e>
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	bd38      	pop	{r3, r4, r5, pc}
 800b5a4:	20000724 	.word	0x20000724

0800b5a8 <_sbrk_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	4d05      	ldr	r5, [pc, #20]	; (800b5c4 <_sbrk_r+0x1c>)
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	f7f6 fd98 	bl	80020e8 <_sbrk>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_sbrk_r+0x1a>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_sbrk_r+0x1a>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	20000724 	.word	0x20000724

0800b5c8 <_write_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	4611      	mov	r1, r2
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	4d05      	ldr	r5, [pc, #20]	; (800b5e8 <_write_r+0x20>)
 800b5d4:	602a      	str	r2, [r5, #0]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	f7f6 fd3a 	bl	8002050 <_write>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_write_r+0x1e>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_write_r+0x1e>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	20000724 	.word	0x20000724

0800b5ec <__assert_func>:
 800b5ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5ee:	4614      	mov	r4, r2
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	4b09      	ldr	r3, [pc, #36]	; (800b618 <__assert_func+0x2c>)
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68d8      	ldr	r0, [r3, #12]
 800b5fa:	b14c      	cbz	r4, 800b610 <__assert_func+0x24>
 800b5fc:	4b07      	ldr	r3, [pc, #28]	; (800b61c <__assert_func+0x30>)
 800b5fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b602:	9100      	str	r1, [sp, #0]
 800b604:	462b      	mov	r3, r5
 800b606:	4906      	ldr	r1, [pc, #24]	; (800b620 <__assert_func+0x34>)
 800b608:	f000 f872 	bl	800b6f0 <fiprintf>
 800b60c:	f000 f882 	bl	800b714 <abort>
 800b610:	4b04      	ldr	r3, [pc, #16]	; (800b624 <__assert_func+0x38>)
 800b612:	461c      	mov	r4, r3
 800b614:	e7f3      	b.n	800b5fe <__assert_func+0x12>
 800b616:	bf00      	nop
 800b618:	20000248 	.word	0x20000248
 800b61c:	0800c0e4 	.word	0x0800c0e4
 800b620:	0800c0f1 	.word	0x0800c0f1
 800b624:	0800c11f 	.word	0x0800c11f

0800b628 <_calloc_r>:
 800b628:	b570      	push	{r4, r5, r6, lr}
 800b62a:	fba1 5402 	umull	r5, r4, r1, r2
 800b62e:	b934      	cbnz	r4, 800b63e <_calloc_r+0x16>
 800b630:	4629      	mov	r1, r5
 800b632:	f7ff f907 	bl	800a844 <_malloc_r>
 800b636:	4606      	mov	r6, r0
 800b638:	b928      	cbnz	r0, 800b646 <_calloc_r+0x1e>
 800b63a:	4630      	mov	r0, r6
 800b63c:	bd70      	pop	{r4, r5, r6, pc}
 800b63e:	220c      	movs	r2, #12
 800b640:	2600      	movs	r6, #0
 800b642:	6002      	str	r2, [r0, #0]
 800b644:	e7f9      	b.n	800b63a <_calloc_r+0x12>
 800b646:	462a      	mov	r2, r5
 800b648:	4621      	mov	r1, r4
 800b64a:	f7fd fd51 	bl	80090f0 <memset>
 800b64e:	e7f4      	b.n	800b63a <_calloc_r+0x12>

0800b650 <_free_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4605      	mov	r5, r0
 800b654:	2900      	cmp	r1, #0
 800b656:	d040      	beq.n	800b6da <_free_r+0x8a>
 800b658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b65c:	1f0c      	subs	r4, r1, #4
 800b65e:	2b00      	cmp	r3, #0
 800b660:	bfb8      	it	lt
 800b662:	18e4      	addlt	r4, r4, r3
 800b664:	f7ff fa2a 	bl	800aabc <__malloc_lock>
 800b668:	4a1c      	ldr	r2, [pc, #112]	; (800b6dc <_free_r+0x8c>)
 800b66a:	6813      	ldr	r3, [r2, #0]
 800b66c:	b933      	cbnz	r3, 800b67c <_free_r+0x2c>
 800b66e:	6063      	str	r3, [r4, #4]
 800b670:	6014      	str	r4, [r2, #0]
 800b672:	4628      	mov	r0, r5
 800b674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b678:	f7ff ba26 	b.w	800aac8 <__malloc_unlock>
 800b67c:	42a3      	cmp	r3, r4
 800b67e:	d908      	bls.n	800b692 <_free_r+0x42>
 800b680:	6820      	ldr	r0, [r4, #0]
 800b682:	1821      	adds	r1, r4, r0
 800b684:	428b      	cmp	r3, r1
 800b686:	bf01      	itttt	eq
 800b688:	6819      	ldreq	r1, [r3, #0]
 800b68a:	685b      	ldreq	r3, [r3, #4]
 800b68c:	1809      	addeq	r1, r1, r0
 800b68e:	6021      	streq	r1, [r4, #0]
 800b690:	e7ed      	b.n	800b66e <_free_r+0x1e>
 800b692:	461a      	mov	r2, r3
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	b10b      	cbz	r3, 800b69c <_free_r+0x4c>
 800b698:	42a3      	cmp	r3, r4
 800b69a:	d9fa      	bls.n	800b692 <_free_r+0x42>
 800b69c:	6811      	ldr	r1, [r2, #0]
 800b69e:	1850      	adds	r0, r2, r1
 800b6a0:	42a0      	cmp	r0, r4
 800b6a2:	d10b      	bne.n	800b6bc <_free_r+0x6c>
 800b6a4:	6820      	ldr	r0, [r4, #0]
 800b6a6:	4401      	add	r1, r0
 800b6a8:	1850      	adds	r0, r2, r1
 800b6aa:	4283      	cmp	r3, r0
 800b6ac:	6011      	str	r1, [r2, #0]
 800b6ae:	d1e0      	bne.n	800b672 <_free_r+0x22>
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	4408      	add	r0, r1
 800b6b6:	6010      	str	r0, [r2, #0]
 800b6b8:	6053      	str	r3, [r2, #4]
 800b6ba:	e7da      	b.n	800b672 <_free_r+0x22>
 800b6bc:	d902      	bls.n	800b6c4 <_free_r+0x74>
 800b6be:	230c      	movs	r3, #12
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	e7d6      	b.n	800b672 <_free_r+0x22>
 800b6c4:	6820      	ldr	r0, [r4, #0]
 800b6c6:	1821      	adds	r1, r4, r0
 800b6c8:	428b      	cmp	r3, r1
 800b6ca:	bf01      	itttt	eq
 800b6cc:	6819      	ldreq	r1, [r3, #0]
 800b6ce:	685b      	ldreq	r3, [r3, #4]
 800b6d0:	1809      	addeq	r1, r1, r0
 800b6d2:	6021      	streq	r1, [r4, #0]
 800b6d4:	6063      	str	r3, [r4, #4]
 800b6d6:	6054      	str	r4, [r2, #4]
 800b6d8:	e7cb      	b.n	800b672 <_free_r+0x22>
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	2000071c 	.word	0x2000071c

0800b6e0 <_malloc_usable_size_r>:
 800b6e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6e4:	1f18      	subs	r0, r3, #4
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	bfbc      	itt	lt
 800b6ea:	580b      	ldrlt	r3, [r1, r0]
 800b6ec:	18c0      	addlt	r0, r0, r3
 800b6ee:	4770      	bx	lr

0800b6f0 <fiprintf>:
 800b6f0:	b40e      	push	{r1, r2, r3}
 800b6f2:	b503      	push	{r0, r1, lr}
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	4805      	ldr	r0, [pc, #20]	; (800b710 <fiprintf+0x20>)
 800b6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6fe:	6800      	ldr	r0, [r0, #0]
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	f000 f835 	bl	800b770 <_vfiprintf_r>
 800b706:	b002      	add	sp, #8
 800b708:	f85d eb04 	ldr.w	lr, [sp], #4
 800b70c:	b003      	add	sp, #12
 800b70e:	4770      	bx	lr
 800b710:	20000248 	.word	0x20000248

0800b714 <abort>:
 800b714:	2006      	movs	r0, #6
 800b716:	b508      	push	{r3, lr}
 800b718:	f000 fa86 	bl	800bc28 <raise>
 800b71c:	2001      	movs	r0, #1
 800b71e:	f7f6 fc70 	bl	8002002 <_exit>

0800b722 <__sfputc_r>:
 800b722:	6893      	ldr	r3, [r2, #8]
 800b724:	b410      	push	{r4}
 800b726:	3b01      	subs	r3, #1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	6093      	str	r3, [r2, #8]
 800b72c:	da07      	bge.n	800b73e <__sfputc_r+0x1c>
 800b72e:	6994      	ldr	r4, [r2, #24]
 800b730:	42a3      	cmp	r3, r4
 800b732:	db01      	blt.n	800b738 <__sfputc_r+0x16>
 800b734:	290a      	cmp	r1, #10
 800b736:	d102      	bne.n	800b73e <__sfputc_r+0x1c>
 800b738:	bc10      	pop	{r4}
 800b73a:	f000 b933 	b.w	800b9a4 <__swbuf_r>
 800b73e:	6813      	ldr	r3, [r2, #0]
 800b740:	1c58      	adds	r0, r3, #1
 800b742:	6010      	str	r0, [r2, #0]
 800b744:	7019      	strb	r1, [r3, #0]
 800b746:	4608      	mov	r0, r1
 800b748:	bc10      	pop	{r4}
 800b74a:	4770      	bx	lr

0800b74c <__sfputs_r>:
 800b74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74e:	4606      	mov	r6, r0
 800b750:	460f      	mov	r7, r1
 800b752:	4614      	mov	r4, r2
 800b754:	18d5      	adds	r5, r2, r3
 800b756:	42ac      	cmp	r4, r5
 800b758:	d101      	bne.n	800b75e <__sfputs_r+0x12>
 800b75a:	2000      	movs	r0, #0
 800b75c:	e007      	b.n	800b76e <__sfputs_r+0x22>
 800b75e:	463a      	mov	r2, r7
 800b760:	4630      	mov	r0, r6
 800b762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b766:	f7ff ffdc 	bl	800b722 <__sfputc_r>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d1f3      	bne.n	800b756 <__sfputs_r+0xa>
 800b76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b770 <_vfiprintf_r>:
 800b770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b774:	460d      	mov	r5, r1
 800b776:	4614      	mov	r4, r2
 800b778:	4698      	mov	r8, r3
 800b77a:	4606      	mov	r6, r0
 800b77c:	b09d      	sub	sp, #116	; 0x74
 800b77e:	b118      	cbz	r0, 800b788 <_vfiprintf_r+0x18>
 800b780:	6a03      	ldr	r3, [r0, #32]
 800b782:	b90b      	cbnz	r3, 800b788 <_vfiprintf_r+0x18>
 800b784:	f7fc fd76 	bl	8008274 <__sinit>
 800b788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b78a:	07d9      	lsls	r1, r3, #31
 800b78c:	d405      	bmi.n	800b79a <_vfiprintf_r+0x2a>
 800b78e:	89ab      	ldrh	r3, [r5, #12]
 800b790:	059a      	lsls	r2, r3, #22
 800b792:	d402      	bmi.n	800b79a <_vfiprintf_r+0x2a>
 800b794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b796:	f7fd fce2 	bl	800915e <__retarget_lock_acquire_recursive>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	071b      	lsls	r3, r3, #28
 800b79e:	d501      	bpl.n	800b7a4 <_vfiprintf_r+0x34>
 800b7a0:	692b      	ldr	r3, [r5, #16]
 800b7a2:	b99b      	cbnz	r3, 800b7cc <_vfiprintf_r+0x5c>
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f000 f93a 	bl	800ba20 <__swsetup_r>
 800b7ac:	b170      	cbz	r0, 800b7cc <_vfiprintf_r+0x5c>
 800b7ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7b0:	07dc      	lsls	r4, r3, #31
 800b7b2:	d504      	bpl.n	800b7be <_vfiprintf_r+0x4e>
 800b7b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7b8:	b01d      	add	sp, #116	; 0x74
 800b7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7be:	89ab      	ldrh	r3, [r5, #12]
 800b7c0:	0598      	lsls	r0, r3, #22
 800b7c2:	d4f7      	bmi.n	800b7b4 <_vfiprintf_r+0x44>
 800b7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7c6:	f7fd fccb 	bl	8009160 <__retarget_lock_release_recursive>
 800b7ca:	e7f3      	b.n	800b7b4 <_vfiprintf_r+0x44>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b7d0:	2320      	movs	r3, #32
 800b7d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7d6:	2330      	movs	r3, #48	; 0x30
 800b7d8:	f04f 0901 	mov.w	r9, #1
 800b7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b990 <_vfiprintf_r+0x220>
 800b7e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7e8:	4623      	mov	r3, r4
 800b7ea:	469a      	mov	sl, r3
 800b7ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7f0:	b10a      	cbz	r2, 800b7f6 <_vfiprintf_r+0x86>
 800b7f2:	2a25      	cmp	r2, #37	; 0x25
 800b7f4:	d1f9      	bne.n	800b7ea <_vfiprintf_r+0x7a>
 800b7f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7fa:	d00b      	beq.n	800b814 <_vfiprintf_r+0xa4>
 800b7fc:	465b      	mov	r3, fp
 800b7fe:	4622      	mov	r2, r4
 800b800:	4629      	mov	r1, r5
 800b802:	4630      	mov	r0, r6
 800b804:	f7ff ffa2 	bl	800b74c <__sfputs_r>
 800b808:	3001      	adds	r0, #1
 800b80a:	f000 80a9 	beq.w	800b960 <_vfiprintf_r+0x1f0>
 800b80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b810:	445a      	add	r2, fp
 800b812:	9209      	str	r2, [sp, #36]	; 0x24
 800b814:	f89a 3000 	ldrb.w	r3, [sl]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 80a1 	beq.w	800b960 <_vfiprintf_r+0x1f0>
 800b81e:	2300      	movs	r3, #0
 800b820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b828:	f10a 0a01 	add.w	sl, sl, #1
 800b82c:	9304      	str	r3, [sp, #16]
 800b82e:	9307      	str	r3, [sp, #28]
 800b830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b834:	931a      	str	r3, [sp, #104]	; 0x68
 800b836:	4654      	mov	r4, sl
 800b838:	2205      	movs	r2, #5
 800b83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83e:	4854      	ldr	r0, [pc, #336]	; (800b990 <_vfiprintf_r+0x220>)
 800b840:	f7fd fc8f 	bl	8009162 <memchr>
 800b844:	9a04      	ldr	r2, [sp, #16]
 800b846:	b9d8      	cbnz	r0, 800b880 <_vfiprintf_r+0x110>
 800b848:	06d1      	lsls	r1, r2, #27
 800b84a:	bf44      	itt	mi
 800b84c:	2320      	movmi	r3, #32
 800b84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b852:	0713      	lsls	r3, r2, #28
 800b854:	bf44      	itt	mi
 800b856:	232b      	movmi	r3, #43	; 0x2b
 800b858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b85c:	f89a 3000 	ldrb.w	r3, [sl]
 800b860:	2b2a      	cmp	r3, #42	; 0x2a
 800b862:	d015      	beq.n	800b890 <_vfiprintf_r+0x120>
 800b864:	4654      	mov	r4, sl
 800b866:	2000      	movs	r0, #0
 800b868:	f04f 0c0a 	mov.w	ip, #10
 800b86c:	9a07      	ldr	r2, [sp, #28]
 800b86e:	4621      	mov	r1, r4
 800b870:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b874:	3b30      	subs	r3, #48	; 0x30
 800b876:	2b09      	cmp	r3, #9
 800b878:	d94d      	bls.n	800b916 <_vfiprintf_r+0x1a6>
 800b87a:	b1b0      	cbz	r0, 800b8aa <_vfiprintf_r+0x13a>
 800b87c:	9207      	str	r2, [sp, #28]
 800b87e:	e014      	b.n	800b8aa <_vfiprintf_r+0x13a>
 800b880:	eba0 0308 	sub.w	r3, r0, r8
 800b884:	fa09 f303 	lsl.w	r3, r9, r3
 800b888:	4313      	orrs	r3, r2
 800b88a:	46a2      	mov	sl, r4
 800b88c:	9304      	str	r3, [sp, #16]
 800b88e:	e7d2      	b.n	800b836 <_vfiprintf_r+0xc6>
 800b890:	9b03      	ldr	r3, [sp, #12]
 800b892:	1d19      	adds	r1, r3, #4
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	9103      	str	r1, [sp, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	bfbb      	ittet	lt
 800b89c:	425b      	neglt	r3, r3
 800b89e:	f042 0202 	orrlt.w	r2, r2, #2
 800b8a2:	9307      	strge	r3, [sp, #28]
 800b8a4:	9307      	strlt	r3, [sp, #28]
 800b8a6:	bfb8      	it	lt
 800b8a8:	9204      	strlt	r2, [sp, #16]
 800b8aa:	7823      	ldrb	r3, [r4, #0]
 800b8ac:	2b2e      	cmp	r3, #46	; 0x2e
 800b8ae:	d10c      	bne.n	800b8ca <_vfiprintf_r+0x15a>
 800b8b0:	7863      	ldrb	r3, [r4, #1]
 800b8b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8b4:	d134      	bne.n	800b920 <_vfiprintf_r+0x1b0>
 800b8b6:	9b03      	ldr	r3, [sp, #12]
 800b8b8:	3402      	adds	r4, #2
 800b8ba:	1d1a      	adds	r2, r3, #4
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	9203      	str	r2, [sp, #12]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	bfb8      	it	lt
 800b8c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b8c8:	9305      	str	r3, [sp, #20]
 800b8ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b994 <_vfiprintf_r+0x224>
 800b8ce:	2203      	movs	r2, #3
 800b8d0:	4650      	mov	r0, sl
 800b8d2:	7821      	ldrb	r1, [r4, #0]
 800b8d4:	f7fd fc45 	bl	8009162 <memchr>
 800b8d8:	b138      	cbz	r0, 800b8ea <_vfiprintf_r+0x17a>
 800b8da:	2240      	movs	r2, #64	; 0x40
 800b8dc:	9b04      	ldr	r3, [sp, #16]
 800b8de:	eba0 000a 	sub.w	r0, r0, sl
 800b8e2:	4082      	lsls	r2, r0
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	3401      	adds	r4, #1
 800b8e8:	9304      	str	r3, [sp, #16]
 800b8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ee:	2206      	movs	r2, #6
 800b8f0:	4829      	ldr	r0, [pc, #164]	; (800b998 <_vfiprintf_r+0x228>)
 800b8f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8f6:	f7fd fc34 	bl	8009162 <memchr>
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	d03f      	beq.n	800b97e <_vfiprintf_r+0x20e>
 800b8fe:	4b27      	ldr	r3, [pc, #156]	; (800b99c <_vfiprintf_r+0x22c>)
 800b900:	bb1b      	cbnz	r3, 800b94a <_vfiprintf_r+0x1da>
 800b902:	9b03      	ldr	r3, [sp, #12]
 800b904:	3307      	adds	r3, #7
 800b906:	f023 0307 	bic.w	r3, r3, #7
 800b90a:	3308      	adds	r3, #8
 800b90c:	9303      	str	r3, [sp, #12]
 800b90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b910:	443b      	add	r3, r7
 800b912:	9309      	str	r3, [sp, #36]	; 0x24
 800b914:	e768      	b.n	800b7e8 <_vfiprintf_r+0x78>
 800b916:	460c      	mov	r4, r1
 800b918:	2001      	movs	r0, #1
 800b91a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b91e:	e7a6      	b.n	800b86e <_vfiprintf_r+0xfe>
 800b920:	2300      	movs	r3, #0
 800b922:	f04f 0c0a 	mov.w	ip, #10
 800b926:	4619      	mov	r1, r3
 800b928:	3401      	adds	r4, #1
 800b92a:	9305      	str	r3, [sp, #20]
 800b92c:	4620      	mov	r0, r4
 800b92e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b932:	3a30      	subs	r2, #48	; 0x30
 800b934:	2a09      	cmp	r2, #9
 800b936:	d903      	bls.n	800b940 <_vfiprintf_r+0x1d0>
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d0c6      	beq.n	800b8ca <_vfiprintf_r+0x15a>
 800b93c:	9105      	str	r1, [sp, #20]
 800b93e:	e7c4      	b.n	800b8ca <_vfiprintf_r+0x15a>
 800b940:	4604      	mov	r4, r0
 800b942:	2301      	movs	r3, #1
 800b944:	fb0c 2101 	mla	r1, ip, r1, r2
 800b948:	e7f0      	b.n	800b92c <_vfiprintf_r+0x1bc>
 800b94a:	ab03      	add	r3, sp, #12
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	462a      	mov	r2, r5
 800b950:	4630      	mov	r0, r6
 800b952:	4b13      	ldr	r3, [pc, #76]	; (800b9a0 <_vfiprintf_r+0x230>)
 800b954:	a904      	add	r1, sp, #16
 800b956:	f7fc f81f 	bl	8007998 <_printf_float>
 800b95a:	4607      	mov	r7, r0
 800b95c:	1c78      	adds	r0, r7, #1
 800b95e:	d1d6      	bne.n	800b90e <_vfiprintf_r+0x19e>
 800b960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b962:	07d9      	lsls	r1, r3, #31
 800b964:	d405      	bmi.n	800b972 <_vfiprintf_r+0x202>
 800b966:	89ab      	ldrh	r3, [r5, #12]
 800b968:	059a      	lsls	r2, r3, #22
 800b96a:	d402      	bmi.n	800b972 <_vfiprintf_r+0x202>
 800b96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b96e:	f7fd fbf7 	bl	8009160 <__retarget_lock_release_recursive>
 800b972:	89ab      	ldrh	r3, [r5, #12]
 800b974:	065b      	lsls	r3, r3, #25
 800b976:	f53f af1d 	bmi.w	800b7b4 <_vfiprintf_r+0x44>
 800b97a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b97c:	e71c      	b.n	800b7b8 <_vfiprintf_r+0x48>
 800b97e:	ab03      	add	r3, sp, #12
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	462a      	mov	r2, r5
 800b984:	4630      	mov	r0, r6
 800b986:	4b06      	ldr	r3, [pc, #24]	; (800b9a0 <_vfiprintf_r+0x230>)
 800b988:	a904      	add	r1, sp, #16
 800b98a:	f7fc faa5 	bl	8007ed8 <_printf_i>
 800b98e:	e7e4      	b.n	800b95a <_vfiprintf_r+0x1ea>
 800b990:	0800bf7e 	.word	0x0800bf7e
 800b994:	0800bf84 	.word	0x0800bf84
 800b998:	0800bf88 	.word	0x0800bf88
 800b99c:	08007999 	.word	0x08007999
 800b9a0:	0800b74d 	.word	0x0800b74d

0800b9a4 <__swbuf_r>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	460e      	mov	r6, r1
 800b9a8:	4614      	mov	r4, r2
 800b9aa:	4605      	mov	r5, r0
 800b9ac:	b118      	cbz	r0, 800b9b6 <__swbuf_r+0x12>
 800b9ae:	6a03      	ldr	r3, [r0, #32]
 800b9b0:	b90b      	cbnz	r3, 800b9b6 <__swbuf_r+0x12>
 800b9b2:	f7fc fc5f 	bl	8008274 <__sinit>
 800b9b6:	69a3      	ldr	r3, [r4, #24]
 800b9b8:	60a3      	str	r3, [r4, #8]
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	071a      	lsls	r2, r3, #28
 800b9be:	d525      	bpl.n	800ba0c <__swbuf_r+0x68>
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	b31b      	cbz	r3, 800ba0c <__swbuf_r+0x68>
 800b9c4:	6823      	ldr	r3, [r4, #0]
 800b9c6:	6922      	ldr	r2, [r4, #16]
 800b9c8:	b2f6      	uxtb	r6, r6
 800b9ca:	1a98      	subs	r0, r3, r2
 800b9cc:	6963      	ldr	r3, [r4, #20]
 800b9ce:	4637      	mov	r7, r6
 800b9d0:	4283      	cmp	r3, r0
 800b9d2:	dc04      	bgt.n	800b9de <__swbuf_r+0x3a>
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	f7ff f848 	bl	800aa6c <_fflush_r>
 800b9dc:	b9e0      	cbnz	r0, 800ba18 <__swbuf_r+0x74>
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	60a3      	str	r3, [r4, #8]
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	6022      	str	r2, [r4, #0]
 800b9ea:	701e      	strb	r6, [r3, #0]
 800b9ec:	6962      	ldr	r2, [r4, #20]
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d004      	beq.n	800b9fe <__swbuf_r+0x5a>
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	07db      	lsls	r3, r3, #31
 800b9f8:	d506      	bpl.n	800ba08 <__swbuf_r+0x64>
 800b9fa:	2e0a      	cmp	r6, #10
 800b9fc:	d104      	bne.n	800ba08 <__swbuf_r+0x64>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4628      	mov	r0, r5
 800ba02:	f7ff f833 	bl	800aa6c <_fflush_r>
 800ba06:	b938      	cbnz	r0, 800ba18 <__swbuf_r+0x74>
 800ba08:	4638      	mov	r0, r7
 800ba0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f000 f806 	bl	800ba20 <__swsetup_r>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d0d5      	beq.n	800b9c4 <__swbuf_r+0x20>
 800ba18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ba1c:	e7f4      	b.n	800ba08 <__swbuf_r+0x64>
	...

0800ba20 <__swsetup_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4b2a      	ldr	r3, [pc, #168]	; (800bacc <__swsetup_r+0xac>)
 800ba24:	4605      	mov	r5, r0
 800ba26:	6818      	ldr	r0, [r3, #0]
 800ba28:	460c      	mov	r4, r1
 800ba2a:	b118      	cbz	r0, 800ba34 <__swsetup_r+0x14>
 800ba2c:	6a03      	ldr	r3, [r0, #32]
 800ba2e:	b90b      	cbnz	r3, 800ba34 <__swsetup_r+0x14>
 800ba30:	f7fc fc20 	bl	8008274 <__sinit>
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba3a:	0718      	lsls	r0, r3, #28
 800ba3c:	d422      	bmi.n	800ba84 <__swsetup_r+0x64>
 800ba3e:	06d9      	lsls	r1, r3, #27
 800ba40:	d407      	bmi.n	800ba52 <__swsetup_r+0x32>
 800ba42:	2309      	movs	r3, #9
 800ba44:	602b      	str	r3, [r5, #0]
 800ba46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba4e:	81a3      	strh	r3, [r4, #12]
 800ba50:	e034      	b.n	800babc <__swsetup_r+0x9c>
 800ba52:	0758      	lsls	r0, r3, #29
 800ba54:	d512      	bpl.n	800ba7c <__swsetup_r+0x5c>
 800ba56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba58:	b141      	cbz	r1, 800ba6c <__swsetup_r+0x4c>
 800ba5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba5e:	4299      	cmp	r1, r3
 800ba60:	d002      	beq.n	800ba68 <__swsetup_r+0x48>
 800ba62:	4628      	mov	r0, r5
 800ba64:	f7ff fdf4 	bl	800b650 <_free_r>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	6363      	str	r3, [r4, #52]	; 0x34
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba72:	81a3      	strh	r3, [r4, #12]
 800ba74:	2300      	movs	r3, #0
 800ba76:	6063      	str	r3, [r4, #4]
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	6023      	str	r3, [r4, #0]
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	f043 0308 	orr.w	r3, r3, #8
 800ba82:	81a3      	strh	r3, [r4, #12]
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	b94b      	cbnz	r3, 800ba9c <__swsetup_r+0x7c>
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba92:	d003      	beq.n	800ba9c <__swsetup_r+0x7c>
 800ba94:	4621      	mov	r1, r4
 800ba96:	4628      	mov	r0, r5
 800ba98:	f000 f83f 	bl	800bb1a <__smakebuf_r>
 800ba9c:	89a0      	ldrh	r0, [r4, #12]
 800ba9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baa2:	f010 0301 	ands.w	r3, r0, #1
 800baa6:	d00a      	beq.n	800babe <__swsetup_r+0x9e>
 800baa8:	2300      	movs	r3, #0
 800baaa:	60a3      	str	r3, [r4, #8]
 800baac:	6963      	ldr	r3, [r4, #20]
 800baae:	425b      	negs	r3, r3
 800bab0:	61a3      	str	r3, [r4, #24]
 800bab2:	6923      	ldr	r3, [r4, #16]
 800bab4:	b943      	cbnz	r3, 800bac8 <__swsetup_r+0xa8>
 800bab6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800baba:	d1c4      	bne.n	800ba46 <__swsetup_r+0x26>
 800babc:	bd38      	pop	{r3, r4, r5, pc}
 800babe:	0781      	lsls	r1, r0, #30
 800bac0:	bf58      	it	pl
 800bac2:	6963      	ldrpl	r3, [r4, #20]
 800bac4:	60a3      	str	r3, [r4, #8]
 800bac6:	e7f4      	b.n	800bab2 <__swsetup_r+0x92>
 800bac8:	2000      	movs	r0, #0
 800baca:	e7f7      	b.n	800babc <__swsetup_r+0x9c>
 800bacc:	20000248 	.word	0x20000248

0800bad0 <__swhatbuf_r>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	460c      	mov	r4, r1
 800bad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad8:	4615      	mov	r5, r2
 800bada:	2900      	cmp	r1, #0
 800badc:	461e      	mov	r6, r3
 800bade:	b096      	sub	sp, #88	; 0x58
 800bae0:	da0c      	bge.n	800bafc <__swhatbuf_r+0x2c>
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	2100      	movs	r1, #0
 800bae6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800baea:	bf0c      	ite	eq
 800baec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800baf0:	2340      	movne	r3, #64	; 0x40
 800baf2:	2000      	movs	r0, #0
 800baf4:	6031      	str	r1, [r6, #0]
 800baf6:	602b      	str	r3, [r5, #0]
 800baf8:	b016      	add	sp, #88	; 0x58
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	466a      	mov	r2, sp
 800bafe:	f000 f849 	bl	800bb94 <_fstat_r>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	dbed      	blt.n	800bae2 <__swhatbuf_r+0x12>
 800bb06:	9901      	ldr	r1, [sp, #4]
 800bb08:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bb0c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bb10:	4259      	negs	r1, r3
 800bb12:	4159      	adcs	r1, r3
 800bb14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb18:	e7eb      	b.n	800baf2 <__swhatbuf_r+0x22>

0800bb1a <__smakebuf_r>:
 800bb1a:	898b      	ldrh	r3, [r1, #12]
 800bb1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb1e:	079d      	lsls	r5, r3, #30
 800bb20:	4606      	mov	r6, r0
 800bb22:	460c      	mov	r4, r1
 800bb24:	d507      	bpl.n	800bb36 <__smakebuf_r+0x1c>
 800bb26:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	6123      	str	r3, [r4, #16]
 800bb2e:	2301      	movs	r3, #1
 800bb30:	6163      	str	r3, [r4, #20]
 800bb32:	b002      	add	sp, #8
 800bb34:	bd70      	pop	{r4, r5, r6, pc}
 800bb36:	466a      	mov	r2, sp
 800bb38:	ab01      	add	r3, sp, #4
 800bb3a:	f7ff ffc9 	bl	800bad0 <__swhatbuf_r>
 800bb3e:	9900      	ldr	r1, [sp, #0]
 800bb40:	4605      	mov	r5, r0
 800bb42:	4630      	mov	r0, r6
 800bb44:	f7fe fe7e 	bl	800a844 <_malloc_r>
 800bb48:	b948      	cbnz	r0, 800bb5e <__smakebuf_r+0x44>
 800bb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb4e:	059a      	lsls	r2, r3, #22
 800bb50:	d4ef      	bmi.n	800bb32 <__smakebuf_r+0x18>
 800bb52:	f023 0303 	bic.w	r3, r3, #3
 800bb56:	f043 0302 	orr.w	r3, r3, #2
 800bb5a:	81a3      	strh	r3, [r4, #12]
 800bb5c:	e7e3      	b.n	800bb26 <__smakebuf_r+0xc>
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	6020      	str	r0, [r4, #0]
 800bb62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb66:	81a3      	strh	r3, [r4, #12]
 800bb68:	9b00      	ldr	r3, [sp, #0]
 800bb6a:	6120      	str	r0, [r4, #16]
 800bb6c:	6163      	str	r3, [r4, #20]
 800bb6e:	9b01      	ldr	r3, [sp, #4]
 800bb70:	b15b      	cbz	r3, 800bb8a <__smakebuf_r+0x70>
 800bb72:	4630      	mov	r0, r6
 800bb74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb78:	f000 f81e 	bl	800bbb8 <_isatty_r>
 800bb7c:	b128      	cbz	r0, 800bb8a <__smakebuf_r+0x70>
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	f023 0303 	bic.w	r3, r3, #3
 800bb84:	f043 0301 	orr.w	r3, r3, #1
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	89a3      	ldrh	r3, [r4, #12]
 800bb8c:	431d      	orrs	r5, r3
 800bb8e:	81a5      	strh	r5, [r4, #12]
 800bb90:	e7cf      	b.n	800bb32 <__smakebuf_r+0x18>
	...

0800bb94 <_fstat_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	2300      	movs	r3, #0
 800bb98:	4d06      	ldr	r5, [pc, #24]	; (800bbb4 <_fstat_r+0x20>)
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	4608      	mov	r0, r1
 800bb9e:	4611      	mov	r1, r2
 800bba0:	602b      	str	r3, [r5, #0]
 800bba2:	f7f6 fa7c 	bl	800209e <_fstat>
 800bba6:	1c43      	adds	r3, r0, #1
 800bba8:	d102      	bne.n	800bbb0 <_fstat_r+0x1c>
 800bbaa:	682b      	ldr	r3, [r5, #0]
 800bbac:	b103      	cbz	r3, 800bbb0 <_fstat_r+0x1c>
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	bd38      	pop	{r3, r4, r5, pc}
 800bbb2:	bf00      	nop
 800bbb4:	20000724 	.word	0x20000724

0800bbb8 <_isatty_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	2300      	movs	r3, #0
 800bbbc:	4d05      	ldr	r5, [pc, #20]	; (800bbd4 <_isatty_r+0x1c>)
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	602b      	str	r3, [r5, #0]
 800bbc4:	f7f6 fa7a 	bl	80020bc <_isatty>
 800bbc8:	1c43      	adds	r3, r0, #1
 800bbca:	d102      	bne.n	800bbd2 <_isatty_r+0x1a>
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	b103      	cbz	r3, 800bbd2 <_isatty_r+0x1a>
 800bbd0:	6023      	str	r3, [r4, #0]
 800bbd2:	bd38      	pop	{r3, r4, r5, pc}
 800bbd4:	20000724 	.word	0x20000724

0800bbd8 <_raise_r>:
 800bbd8:	291f      	cmp	r1, #31
 800bbda:	b538      	push	{r3, r4, r5, lr}
 800bbdc:	4604      	mov	r4, r0
 800bbde:	460d      	mov	r5, r1
 800bbe0:	d904      	bls.n	800bbec <_raise_r+0x14>
 800bbe2:	2316      	movs	r3, #22
 800bbe4:	6003      	str	r3, [r0, #0]
 800bbe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbea:	bd38      	pop	{r3, r4, r5, pc}
 800bbec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bbee:	b112      	cbz	r2, 800bbf6 <_raise_r+0x1e>
 800bbf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbf4:	b94b      	cbnz	r3, 800bc0a <_raise_r+0x32>
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f000 f830 	bl	800bc5c <_getpid_r>
 800bbfc:	462a      	mov	r2, r5
 800bbfe:	4601      	mov	r1, r0
 800bc00:	4620      	mov	r0, r4
 800bc02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc06:	f000 b817 	b.w	800bc38 <_kill_r>
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d00a      	beq.n	800bc24 <_raise_r+0x4c>
 800bc0e:	1c59      	adds	r1, r3, #1
 800bc10:	d103      	bne.n	800bc1a <_raise_r+0x42>
 800bc12:	2316      	movs	r3, #22
 800bc14:	6003      	str	r3, [r0, #0]
 800bc16:	2001      	movs	r0, #1
 800bc18:	e7e7      	b.n	800bbea <_raise_r+0x12>
 800bc1a:	2400      	movs	r4, #0
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc22:	4798      	blx	r3
 800bc24:	2000      	movs	r0, #0
 800bc26:	e7e0      	b.n	800bbea <_raise_r+0x12>

0800bc28 <raise>:
 800bc28:	4b02      	ldr	r3, [pc, #8]	; (800bc34 <raise+0xc>)
 800bc2a:	4601      	mov	r1, r0
 800bc2c:	6818      	ldr	r0, [r3, #0]
 800bc2e:	f7ff bfd3 	b.w	800bbd8 <_raise_r>
 800bc32:	bf00      	nop
 800bc34:	20000248 	.word	0x20000248

0800bc38 <_kill_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	4d06      	ldr	r5, [pc, #24]	; (800bc58 <_kill_r+0x20>)
 800bc3e:	4604      	mov	r4, r0
 800bc40:	4608      	mov	r0, r1
 800bc42:	4611      	mov	r1, r2
 800bc44:	602b      	str	r3, [r5, #0]
 800bc46:	f7f6 f9cc 	bl	8001fe2 <_kill>
 800bc4a:	1c43      	adds	r3, r0, #1
 800bc4c:	d102      	bne.n	800bc54 <_kill_r+0x1c>
 800bc4e:	682b      	ldr	r3, [r5, #0]
 800bc50:	b103      	cbz	r3, 800bc54 <_kill_r+0x1c>
 800bc52:	6023      	str	r3, [r4, #0]
 800bc54:	bd38      	pop	{r3, r4, r5, pc}
 800bc56:	bf00      	nop
 800bc58:	20000724 	.word	0x20000724

0800bc5c <_getpid_r>:
 800bc5c:	f7f6 b9ba 	b.w	8001fd4 <_getpid>

0800bc60 <_init>:
 800bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc62:	bf00      	nop
 800bc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc66:	bc08      	pop	{r3}
 800bc68:	469e      	mov	lr, r3
 800bc6a:	4770      	bx	lr

0800bc6c <_fini>:
 800bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6e:	bf00      	nop
 800bc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc72:	bc08      	pop	{r3}
 800bc74:	469e      	mov	lr, r3
 800bc76:	4770      	bx	lr
