
velociraptor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800a040  0800a040  0001a040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a424  0800a424  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a424  0800a424  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a424  0800a424  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a424  0800a424  0001a424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a428  0800a428  0001a428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a42c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  200001dc  0800a608  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  0800a608  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ebd  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dc5  00000000  00000000  00034105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00036ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f57  00000000  00000000  00038250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a092  00000000  00000000  000391a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ef8  00000000  00000000  00053239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000956f2  00000000  00000000  0006a131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000652c  00000000  00000000  000ff824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00105d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a024 	.word	0x0800a024

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800a024 	.word	0x0800a024

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	; 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d76:	2afd      	cmp	r2, #253	; 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	; 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	; 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	; 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpun>:
 80010b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__aeabi_fcmpun+0x14>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d108      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x20>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d102      	bne.n	80010d6 <__aeabi_fcmpun+0x26>
 80010d0:	f04f 0000 	mov.w	r0, #0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0001 	mov.w	r0, #1
 80010da:	4770      	bx	lr

080010dc <__aeabi_f2uiz>:
 80010dc:	0042      	lsls	r2, r0, #1
 80010de:	d20e      	bcs.n	80010fe <__aeabi_f2uiz+0x22>
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e4:	d30b      	bcc.n	80010fe <__aeabi_f2uiz+0x22>
 80010e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d409      	bmi.n	8001104 <__aeabi_f2uiz+0x28>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	fa23 f002 	lsr.w	r0, r3, r2
 80010fc:	4770      	bx	lr
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	4770      	bx	lr
 8001104:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001108:	d101      	bne.n	800110e <__aeabi_f2uiz+0x32>
 800110a:	0242      	lsls	r2, r0, #9
 800110c:	d102      	bne.n	8001114 <__aeabi_f2uiz+0x38>
 800110e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001112:	4770      	bx	lr
 8001114:	f04f 0000 	mov.w	r0, #0
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <__aeabi_d2lz>:
 800111c:	b538      	push	{r3, r4, r5, lr}
 800111e:	4605      	mov	r5, r0
 8001120:	460c      	mov	r4, r1
 8001122:	2200      	movs	r2, #0
 8001124:	2300      	movs	r3, #0
 8001126:	4628      	mov	r0, r5
 8001128:	4621      	mov	r1, r4
 800112a:	f7ff fc3f 	bl	80009ac <__aeabi_dcmplt>
 800112e:	b928      	cbnz	r0, 800113c <__aeabi_d2lz+0x20>
 8001130:	4628      	mov	r0, r5
 8001132:	4621      	mov	r1, r4
 8001134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001138:	f000 b80a 	b.w	8001150 <__aeabi_d2ulz>
 800113c:	4628      	mov	r0, r5
 800113e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001142:	f000 f805 	bl	8001150 <__aeabi_d2ulz>
 8001146:	4240      	negs	r0, r0
 8001148:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800114c:	bd38      	pop	{r3, r4, r5, pc}
 800114e:	bf00      	nop

08001150 <__aeabi_d2ulz>:
 8001150:	b5d0      	push	{r4, r6, r7, lr}
 8001152:	2200      	movs	r2, #0
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <__aeabi_d2ulz+0x34>)
 8001156:	4606      	mov	r6, r0
 8001158:	460f      	mov	r7, r1
 800115a:	f7ff f9b5 	bl	80004c8 <__aeabi_dmul>
 800115e:	f7ff fc63 	bl	8000a28 <__aeabi_d2uiz>
 8001162:	4604      	mov	r4, r0
 8001164:	f7ff f936 	bl	80003d4 <__aeabi_ui2d>
 8001168:	2200      	movs	r2, #0
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <__aeabi_d2ulz+0x38>)
 800116c:	f7ff f9ac 	bl	80004c8 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4630      	mov	r0, r6
 8001176:	4639      	mov	r1, r7
 8001178:	f7fe ffee 	bl	8000158 <__aeabi_dsub>
 800117c:	f7ff fc54 	bl	8000a28 <__aeabi_d2uiz>
 8001180:	4621      	mov	r1, r4
 8001182:	bdd0      	pop	{r4, r6, r7, pc}
 8001184:	3df00000 	.word	0x3df00000
 8001188:	41f00000 	.word	0x41f00000

0800118c <ADXL345_Select>:
	{
		int16_t x, y, z;
	} accel[2];
} adxl_data;

void ADXL345_Select(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADXL345_SPI_CS_PORT, ADXL345_SPI_CS_PIN, GPIO_PIN_RESET); // CS low
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001196:	4802      	ldr	r0, [pc, #8]	; (80011a0 <ADXL345_Select+0x14>)
 8001198:	f002 fda1 	bl	8003cde <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40010800 	.word	0x40010800

080011a4 <ADXL345_Deselect>:

void ADXL345_Deselect(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADXL345_SPI_CS_PORT, ADXL345_SPI_CS_PIN, GPIO_PIN_SET); // CS high
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ae:	4802      	ldr	r0, [pc, #8]	; (80011b8 <ADXL345_Deselect+0x14>)
 80011b0:	f002 fd95 	bl	8003cde <HAL_GPIO_WritePin>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40010800 	.word	0x40010800

080011bc <ADXL345_Init>:

void ADXL345_Init(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	ADXL345_WriteRegister(0x2D, 0x08); // POWER_CTL register (0x2D): Set to measurement mode
 80011c0:	2108      	movs	r1, #8
 80011c2:	202d      	movs	r0, #45	; 0x2d
 80011c4:	f000 f83a 	bl	800123c <ADXL345_WriteRegister>

	// Set the output data rate (ODR) and range
	ADXL345_WriteRegister(0x2C, 0x0A); // BW_RATE register (0x2C): Set ODR to 100 Hz (0x0A)
 80011c8:	210a      	movs	r1, #10
 80011ca:	202c      	movs	r0, #44	; 0x2c
 80011cc:	f000 f836 	bl	800123c <ADXL345_WriteRegister>

	// Set the full-scale range
	ADXL345_WriteRegister(0x31, 0x09); // DATA_FORMAT register (0x31): Full-resolution, ±16g (0x0B)
 80011d0:	2109      	movs	r1, #9
 80011d2:	2031      	movs	r0, #49	; 0x31
 80011d4:	f000 f832 	bl	800123c <ADXL345_WriteRegister>

	// Ensure FIFO is in bypass mode
	ADXL345_WriteRegister(0x38, 0x00); // FIFO_CTL register (0x38): FIFO in bypass mode
 80011d8:	2100      	movs	r1, #0
 80011da:	2038      	movs	r0, #56	; 0x38
 80011dc:	f000 f82e 	bl	800123c <ADXL345_WriteRegister>

	// Enable Data Ready interrupt
	ADXL345_WriteRegister(0x2E, 0x80); // INT_ENABLE register (0x2E): Enable Data Ready interrupt
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	202e      	movs	r0, #46	; 0x2e
 80011e4:	f000 f82a 	bl	800123c <ADXL345_WriteRegister>

	// Map Data Ready interrupt to INT1
	ADXL345_WriteRegister(0x2F, 0x00); // INT_MAP register (0x2F): Route Data Ready to INT1 (bit 0 = 0)
 80011e8:	2100      	movs	r1, #0
 80011ea:	202f      	movs	r0, #47	; 0x2f
 80011ec:	f000 f826 	bl	800123c <ADXL345_WriteRegister>
	asm volatile("nop");
	aux = ADXL345_ReadRegister(0x2c);
	asm volatile("nop");
	aux = ADXL345_ReadRegister(0x30);
	asm volatile("nop");*/
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <ADXL345_ReadRegister>:

uint8_t ADXL345_ReadRegister(uint8_t reg) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
    uint8_t receivedData;
    reg |= 0x80; // Set MSB to 1 for read operation
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001204:	b2db      	uxtb	r3, r3
 8001206:	71fb      	strb	r3, [r7, #7]

    ADXL345_Select();
 8001208:	f7ff ffc0 	bl	800118c <ADXL345_Select>
    HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);   // Send register address
 800120c:	1df9      	adds	r1, r7, #7
 800120e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001212:	2201      	movs	r2, #1
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <ADXL345_ReadRegister+0x44>)
 8001216:	f003 fc2b 	bl	8004a70 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY); // Read register value
 800121a:	f107 010f 	add.w	r1, r7, #15
 800121e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001222:	2201      	movs	r2, #1
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <ADXL345_ReadRegister+0x44>)
 8001226:	f003 fd67 	bl	8004cf8 <HAL_SPI_Receive>
    ADXL345_Deselect();
 800122a:	f7ff ffbb 	bl	80011a4 <ADXL345_Deselect>

    return receivedData;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000028c 	.word	0x2000028c

0800123c <ADXL345_WriteRegister>:

void ADXL345_WriteRegister(uint8_t reg, uint8_t value) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	460a      	mov	r2, r1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	4613      	mov	r3, r2
 800124a:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2];

    // Combine register address and value into a transmission array
    txData[0] = reg;       // Register address
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	733b      	strb	r3, [r7, #12]
    txData[1] = value;     // Data to write
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	737b      	strb	r3, [r7, #13]

    ADXL345_Select();
 8001254:	f7ff ff9a 	bl	800118c <ADXL345_Select>
    HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY); // Transmit register address and data
 8001258:	f107 010c 	add.w	r1, r7, #12
 800125c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001260:	2202      	movs	r2, #2
 8001262:	4804      	ldr	r0, [pc, #16]	; (8001274 <ADXL345_WriteRegister+0x38>)
 8001264:	f003 fc04 	bl	8004a70 <HAL_SPI_Transmit>
    ADXL345_Deselect();
 8001268:	f7ff ff9c 	bl	80011a4 <ADXL345_Deselect>
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000028c 	.word	0x2000028c

08001278 <ADXL345_ReadXYZ>:

void ADXL345_ReadXYZ(int16_t *x, int16_t *y, int16_t *z) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
    uint8_t x0, x1, y0, y1, z0, z1;

    // Read X-axis
    x0 = ADXL345_ReadRegister(0x32); // X0
 8001284:	2032      	movs	r0, #50	; 0x32
 8001286:	f7ff ffb5 	bl	80011f4 <ADXL345_ReadRegister>
 800128a:	4603      	mov	r3, r0
 800128c:	75fb      	strb	r3, [r7, #23]
    x1 = ADXL345_ReadRegister(0x33); // X1
 800128e:	2033      	movs	r0, #51	; 0x33
 8001290:	f7ff ffb0 	bl	80011f4 <ADXL345_ReadRegister>
 8001294:	4603      	mov	r3, r0
 8001296:	75bb      	strb	r3, [r7, #22]

    // Read Y-axis
    y0 = ADXL345_ReadRegister(0x34); // Y0
 8001298:	2034      	movs	r0, #52	; 0x34
 800129a:	f7ff ffab 	bl	80011f4 <ADXL345_ReadRegister>
 800129e:	4603      	mov	r3, r0
 80012a0:	757b      	strb	r3, [r7, #21]
    y1 = ADXL345_ReadRegister(0x35); // Y1
 80012a2:	2035      	movs	r0, #53	; 0x35
 80012a4:	f7ff ffa6 	bl	80011f4 <ADXL345_ReadRegister>
 80012a8:	4603      	mov	r3, r0
 80012aa:	753b      	strb	r3, [r7, #20]

    // Read Z-axis
    z0 = ADXL345_ReadRegister(0x36); // Z0
 80012ac:	2036      	movs	r0, #54	; 0x36
 80012ae:	f7ff ffa1 	bl	80011f4 <ADXL345_ReadRegister>
 80012b2:	4603      	mov	r3, r0
 80012b4:	74fb      	strb	r3, [r7, #19]
    z1 = ADXL345_ReadRegister(0x37); // Z1
 80012b6:	2037      	movs	r0, #55	; 0x37
 80012b8:	f7ff ff9c 	bl	80011f4 <ADXL345_ReadRegister>
 80012bc:	4603      	mov	r3, r0
 80012be:	74bb      	strb	r3, [r7, #18]

    // Combine high and low bytes
    *x = (int16_t)((x1 << 8) | x0);
 80012c0:	7dbb      	ldrb	r3, [r7, #22]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((y1 << 8) | y0);
 80012d2:	7d3b      	ldrb	r3, [r7, #20]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	7d7b      	ldrb	r3, [r7, #21]
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21a      	sxth	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((z1 << 8) | z0);
 80012e4:	7cbb      	ldrb	r3, [r7, #18]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	7cfb      	ldrb	r3, [r7, #19]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	801a      	strh	r2, [r3, #0]
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <ADXL345_CheckDevice>:

uint8_t ADXL345_CheckDevice(void) {
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
    uint8_t deviceID = ADXL345_ReadRegister(0x00); // 0x00 is the DEVID register
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff ff75 	bl	80011f4 <ADXL345_ReadRegister>
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
    if (deviceID == 0xE5) {
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2be5      	cmp	r3, #229	; 0xe5
 8001312:	d101      	bne.n	8001318 <ADXL345_CheckDevice+0x1a>
        return 1; // Device is present and responding correctly
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <ADXL345_CheckDevice+0x1c>
    } else {
        return 0; // Device is not responding
 8001318:	2300      	movs	r3, #0
    }
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <ADXL345_IRQHandler>:

void ADXL345_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
	int16_t *x, *y, *z;

	//escritura en buffer inactivo
	x = &(adxl_data.accel[!adxl_data.active_buffer].x);
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <ADXL345_IRQHandler+0x8c>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <ADXL345_IRQHandler+0x8c>)
 8001344:	4413      	add	r3, r2
 8001346:	3302      	adds	r3, #2
 8001348:	60fb      	str	r3, [r7, #12]
	y = &(adxl_data.accel[!adxl_data.active_buffer].y);
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <ADXL345_IRQHandler+0x8c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <ADXL345_IRQHandler+0x8c>)
 8001364:	4413      	add	r3, r2
 8001366:	3304      	adds	r3, #4
 8001368:	60bb      	str	r3, [r7, #8]
	z = &(adxl_data.accel[!adxl_data.active_buffer].z);
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <ADXL345_IRQHandler+0x8c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <ADXL345_IRQHandler+0x8c>)
 8001384:	4413      	add	r3, r2
 8001386:	3306      	adds	r3, #6
 8001388:	607b      	str	r3, [r7, #4]

	ADXL345_ReadXYZ(x, y, z);
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff ff72 	bl	8001278 <ADXL345_ReadXYZ>

	adxl_data.active_buffer = !adxl_data.active_buffer;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <ADXL345_IRQHandler+0x8c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf0c      	ite	eq
 800139c:	2301      	moveq	r3, #1
 800139e:	2300      	movne	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <ADXL345_IRQHandler+0x8c>)
 80013a6:	701a      	strb	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200001f8 	.word	0x200001f8

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b8:	f001 fb9a 	bl	8002af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013bc:	f000 f81b 	bl	80013f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c0:	f000 fa98 	bl	80018f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c4:	f000 fa70 	bl	80018a8 <MX_DMA_Init>
  MX_TIM4_Init();
 80013c8:	f000 f9ac 	bl	8001724 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80013cc:	f000 fa42 	bl	8001854 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80013d0:	f000 f95a 	bl	8001688 <MX_TIM3_Init>
  MX_ADC2_Init();
 80013d4:	f000 f86a 	bl	80014ac <MX_ADC2_Init>
  MX_TIM2_Init();
 80013d8:	f000 f90a 	bl	80015f0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80013dc:	f000 f8d2 	bl	8001584 <MX_SPI1_Init>
  MX_I2C2_Init();
 80013e0:	f000 f8a2 	bl	8001528 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  velociraptor2_init();
 80013e4:	f000 fe9e 	bl	8002124 <velociraptor2_init>
  velociraptor2_comms_init();
 80013e8:	f001 fa80 	bl	80028ec <velociraptor2_comms_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	velociraptor2_main_loop();
 80013ec:	f000 ff4e 	bl	800228c <velociraptor2_main_loop>
	velociraptor2_comms_loop();
 80013f0:	f001 fa88 	bl	8002904 <velociraptor2_comms_loop>
	velociraptor2_main_loop();
 80013f4:	e7fa      	b.n	80013ec <main+0x38>

080013f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b094      	sub	sp, #80	; 0x50
 80013fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001400:	2228      	movs	r2, #40	; 0x28
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f006 fedf 	bl	80081c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001426:	2301      	movs	r3, #1
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800142a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001438:	2302      	movs	r3, #2
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001442:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001446:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144c:	4618      	mov	r0, r3
 800144e:	f002 fdc5 	bl	8003fdc <HAL_RCC_OscConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001458:	f000 fafa 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145c:	230f      	movs	r3, #15
 800145e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001460:	2302      	movs	r3, #2
 8001462:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	2102      	movs	r1, #2
 8001478:	4618      	mov	r0, r3
 800147a:	f003 f831 	bl	80044e0 <HAL_RCC_ClockConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001484:	f000 fae4 	bl	8001a50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001488:	2302      	movs	r3, #2
 800148a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800148c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001490:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	4618      	mov	r0, r3
 8001496:	f003 f9b1 	bl	80047fc <HAL_RCCEx_PeriphCLKConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014a0:	f000 fad6 	bl	8001a50 <Error_Handler>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3750      	adds	r7, #80	; 0x50
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_ADC2_Init+0x74>)
 80014be:	4a19      	ldr	r2, [pc, #100]	; (8001524 <MX_ADC2_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_ADC2_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_ADC2_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_ADC2_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_ADC2_Init+0x74>)
 80014d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014da:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_ADC2_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_ADC2_Init+0x74>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <MX_ADC2_Init+0x74>)
 80014ea:	f001 fb87 	bl	8002bfc <HAL_ADC_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80014f4:	f000 faac 	bl	8001a50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_ADC2_Init+0x74>)
 800150a:	f001 fd09 	bl	8002f20 <HAL_ADC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001514:	f000 fa9c 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000208 	.word	0x20000208
 8001524:	40012800 	.word	0x40012800

08001528 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_I2C2_Init+0x50>)
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <MX_I2C2_Init+0x54>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_I2C2_Init+0x50>)
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_I2C2_Init+0x58>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_I2C2_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_I2C2_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_I2C2_Init+0x50>)
 8001546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MX_I2C2_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_I2C2_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <MX_I2C2_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_I2C2_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_I2C2_Init+0x50>)
 8001566:	f002 fbf5 	bl	8003d54 <HAL_I2C_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001570:	f000 fa6e 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000238 	.word	0x20000238
 800157c:	40005800 	.word	0x40005800
 8001580:	000186a0 	.word	0x000186a0

08001584 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_SPI1_Init+0x64>)
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <MX_SPI1_Init+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001594:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b8:	2218      	movs	r2, #24
 80015ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d0:	220a      	movs	r2, #10
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d6:	f003 f9c7 	bl	8004968 <HAL_SPI_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015e0:	f000 fa36 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000028c 	.word	0x2000028c
 80015ec:	40013000 	.word	0x40013000

080015f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	463b      	mov	r3, r7
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_TIM2_Init+0x94>)
 800160e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001612:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_TIM2_Init+0x94>)
 8001616:	f240 22cf 	movw	r2, #719	; 0x2cf
 800161a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_TIM2_Init+0x94>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_TIM2_Init+0x94>)
 8001624:	2209      	movs	r2, #9
 8001626:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_TIM2_Init+0x94>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_TIM2_Init+0x94>)
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001634:	4813      	ldr	r0, [pc, #76]	; (8001684 <MX_TIM2_Init+0x94>)
 8001636:	f003 ff2c 	bl	8005492 <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001640:	f000 fa06 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001648:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4619      	mov	r1, r3
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <MX_TIM2_Init+0x94>)
 8001652:	f004 fa6b 	bl	8005b2c <HAL_TIM_ConfigClockSource>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800165c:	f000 f9f8 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_TIM2_Init+0x94>)
 800166e:	f004 fe01 	bl	8006274 <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001678:	f000 f9ea 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200002e4 	.word	0x200002e4

08001688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	463b      	mov	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_TIM3_Init+0x94>)
 80016a6:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <MX_TIM3_Init+0x98>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_TIM3_Init+0x94>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_TIM3_Init+0x94>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1080-1;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_TIM3_Init+0x94>)
 80016b8:	f240 4237 	movw	r2, #1079	; 0x437
 80016bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_TIM3_Init+0x94>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_TIM3_Init+0x94>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ca:	4814      	ldr	r0, [pc, #80]	; (800171c <MX_TIM3_Init+0x94>)
 80016cc:	f003 fee1 	bl	8005492 <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016d6:	f000 f9bb 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4619      	mov	r1, r3
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <MX_TIM3_Init+0x94>)
 80016e8:	f004 fa20 	bl	8005b2c <HAL_TIM_ConfigClockSource>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80016f2:	f000 f9ad 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016f6:	2320      	movs	r3, #32
 80016f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016fe:	463b      	mov	r3, r7
 8001700:	4619      	mov	r1, r3
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <MX_TIM3_Init+0x94>)
 8001704:	f004 fdb6 	bl	8006274 <HAL_TIMEx_MasterConfigSynchronization>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800170e:	f000 f99f 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000032c 	.word	0x2000032c
 8001720:	40000400 	.word	0x40000400

08001724 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	; 0x38
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001754:	4b3d      	ldr	r3, [pc, #244]	; (800184c <MX_TIM4_Init+0x128>)
 8001756:	4a3e      	ldr	r2, [pc, #248]	; (8001850 <MX_TIM4_Init+0x12c>)
 8001758:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <MX_TIM4_Init+0x128>)
 800175c:	2200      	movs	r2, #0
 800175e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b3a      	ldr	r3, [pc, #232]	; (800184c <MX_TIM4_Init+0x128>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 720-1;
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <MX_TIM4_Init+0x128>)
 8001768:	f240 22cf 	movw	r2, #719	; 0x2cf
 800176c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b37      	ldr	r3, [pc, #220]	; (800184c <MX_TIM4_Init+0x128>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001774:	4b35      	ldr	r3, [pc, #212]	; (800184c <MX_TIM4_Init+0x128>)
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800177a:	4834      	ldr	r0, [pc, #208]	; (800184c <MX_TIM4_Init+0x128>)
 800177c:	f003 fe89 	bl	8005492 <HAL_TIM_Base_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001786:	f000 f963 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001794:	4619      	mov	r1, r3
 8001796:	482d      	ldr	r0, [pc, #180]	; (800184c <MX_TIM4_Init+0x128>)
 8001798:	f004 f9c8 	bl	8005b2c <HAL_TIM_ConfigClockSource>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80017a2:	f000 f955 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017a6:	4829      	ldr	r0, [pc, #164]	; (800184c <MX_TIM4_Init+0x128>)
 80017a8:	f003 ff14 	bl	80055d4 <HAL_TIM_PWM_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80017b2:	f000 f94d 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	4619      	mov	r1, r3
 80017c4:	4821      	ldr	r0, [pc, #132]	; (800184c <MX_TIM4_Init+0x128>)
 80017c6:	f004 fd55 	bl	8006274 <HAL_TIMEx_MasterConfigSynchronization>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80017d0:	f000 f93e 	bl	8001a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d4:	2360      	movs	r3, #96	; 0x60
 80017d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2200      	movs	r2, #0
 80017e8:	4619      	mov	r1, r3
 80017ea:	4818      	ldr	r0, [pc, #96]	; (800184c <MX_TIM4_Init+0x128>)
 80017ec:	f004 f8dc 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80017f6:	f000 f92b 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2204      	movs	r2, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	4812      	ldr	r0, [pc, #72]	; (800184c <MX_TIM4_Init+0x128>)
 8001802:	f004 f8d1 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800180c:	f000 f920 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2208      	movs	r2, #8
 8001814:	4619      	mov	r1, r3
 8001816:	480d      	ldr	r0, [pc, #52]	; (800184c <MX_TIM4_Init+0x128>)
 8001818:	f004 f8c6 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001822:	f000 f915 	bl	8001a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	220c      	movs	r2, #12
 800182a:	4619      	mov	r1, r3
 800182c:	4807      	ldr	r0, [pc, #28]	; (800184c <MX_TIM4_Init+0x128>)
 800182e:	f004 f8bb 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001838:	f000 f90a 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <MX_TIM4_Init+0x128>)
 800183e:	f000 fa61 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 8001842:	bf00      	nop
 8001844:	3738      	adds	r7, #56	; 0x38
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000374 	.word	0x20000374
 8001850:	40000800 	.word	0x40000800

08001854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <MX_USART1_UART_Init+0x50>)
 800185c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800188c:	f004 fd62 	bl	8006354 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001896:	f000 f8db 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200003bc 	.word	0x200003bc
 80018a4:	40013800 	.word	0x40013800

080018a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <MX_DMA_Init+0x48>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <MX_DMA_Init+0x48>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6153      	str	r3, [r2, #20]
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <MX_DMA_Init+0x48>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	200e      	movs	r0, #14
 80018cc:	f001 fd93 	bl	80033f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018d0:	200e      	movs	r0, #14
 80018d2:	f001 fdac 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	200f      	movs	r0, #15
 80018dc:	f001 fd8b 	bl	80033f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80018e0:	200f      	movs	r0, #15
 80018e2:	f001 fda4 	bl	800342e <HAL_NVIC_EnableIRQ>

}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 0310 	add.w	r3, r7, #16
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001908:	4b4d      	ldr	r3, [pc, #308]	; (8001a40 <MX_GPIO_Init+0x14c>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <MX_GPIO_Init+0x14c>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b4a      	ldr	r3, [pc, #296]	; (8001a40 <MX_GPIO_Init+0x14c>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001920:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <MX_GPIO_Init+0x14c>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a46      	ldr	r2, [pc, #280]	; (8001a40 <MX_GPIO_Init+0x14c>)
 8001926:	f043 0320 	orr.w	r3, r3, #32
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <MX_GPIO_Init+0x14c>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <MX_GPIO_Init+0x14c>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a40      	ldr	r2, [pc, #256]	; (8001a40 <MX_GPIO_Init+0x14c>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <MX_GPIO_Init+0x14c>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001950:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <MX_GPIO_Init+0x14c>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a3a      	ldr	r2, [pc, #232]	; (8001a40 <MX_GPIO_Init+0x14c>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <MX_GPIO_Init+0x14c>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196e:	4835      	ldr	r0, [pc, #212]	; (8001a44 <MX_GPIO_Init+0x150>)
 8001970:	f002 f9b5 	bl	8003cde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001974:	2200      	movs	r2, #0
 8001976:	f248 111e 	movw	r1, #33054	; 0x811e
 800197a:	4833      	ldr	r0, [pc, #204]	; (8001a48 <MX_GPIO_Init+0x154>)
 800197c:	f002 f9af 	bl	8003cde <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2302      	movs	r3, #2
 8001990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	4619      	mov	r1, r3
 8001998:	482a      	ldr	r0, [pc, #168]	; (8001a44 <MX_GPIO_Init+0x150>)
 800199a:	f002 f805 	bl	80039a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800199e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	4619      	mov	r1, r3
 80019b2:	4824      	ldr	r0, [pc, #144]	; (8001a44 <MX_GPIO_Init+0x150>)
 80019b4:	f001 fff8 	bl	80039a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	4619      	mov	r1, r3
 80019cc:	481d      	ldr	r0, [pc, #116]	; (8001a44 <MX_GPIO_Init+0x150>)
 80019ce:	f001 ffeb 	bl	80039a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80019d2:	f44f 738f 	mov.w	r3, #286	; 0x11e
 80019d6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	4619      	mov	r1, r3
 80019ea:	4817      	ldr	r0, [pc, #92]	; (8001a48 <MX_GPIO_Init+0x154>)
 80019ec:	f001 ffdc 	bl	80039a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_GPIO_Init+0x158>)
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	4619      	mov	r1, r3
 8001a04:	4810      	ldr	r0, [pc, #64]	; (8001a48 <MX_GPIO_Init+0x154>)
 8001a06:	f001 ffcf 	bl	80039a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	4619      	mov	r1, r3
 8001a22:	4809      	ldr	r0, [pc, #36]	; (8001a48 <MX_GPIO_Init+0x154>)
 8001a24:	f001 ffc0 	bl	80039a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2028      	movs	r0, #40	; 0x28
 8001a2e:	f001 fce2 	bl	80033f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a32:	2028      	movs	r0, #40	; 0x28
 8001a34:	f001 fcfb 	bl	800342e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a38:	bf00      	nop
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40011000 	.word	0x40011000
 8001a48:	40010800 	.word	0x40010800
 8001a4c:	10110000 	.word	0x10110000

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <Error_Handler+0x8>
	...

08001a5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6193      	str	r3, [r2, #24]
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_MspInit+0x5c>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_MspInit+0x60>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_MspInit+0x60>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000

08001ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <HAL_ADC_MspInit+0x6c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d121      	bne.n	8001b24 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_ADC_MspInit+0x70>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <HAL_ADC_MspInit+0x70>)
 8001ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_ADC_MspInit+0x70>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_ADC_MspInit+0x70>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <HAL_ADC_MspInit+0x70>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_ADC_MspInit+0x70>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0-WKUP     ------> ADC2_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b10:	2301      	movs	r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b14:	2303      	movs	r3, #3
 8001b16:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <HAL_ADC_MspInit+0x74>)
 8001b20:	f001 ff42 	bl	80039a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40012800 	.word	0x40012800
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010800 	.word	0x40010800

08001b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a16      	ldr	r2, [pc, #88]	; (8001bac <HAL_I2C_MspInit+0x74>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d124      	bne.n	8001ba2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_I2C_MspInit+0x78>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <HAL_I2C_MspInit+0x78>)
 8001b5e:	f043 0308 	orr.w	r3, r3, #8
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_I2C_MspInit+0x78>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b76:	2312      	movs	r3, #18
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	4619      	mov	r1, r3
 8001b84:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <HAL_I2C_MspInit+0x7c>)
 8001b86:	f001 ff0f 	bl	80039a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_I2C_MspInit+0x78>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <HAL_I2C_MspInit+0x78>)
 8001b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b94:	61d3      	str	r3, [r2, #28]
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_I2C_MspInit+0x78>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40005800 	.word	0x40005800
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010c00 	.word	0x40010c00

08001bb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <HAL_SPI_MspInit+0xa4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d13d      	bne.n	8001c54 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bd8:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <HAL_SPI_MspInit+0xa8>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a20      	ldr	r2, [pc, #128]	; (8001c60 <HAL_SPI_MspInit+0xa8>)
 8001bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_SPI_MspInit+0xa8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_SPI_MspInit+0xa8>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <HAL_SPI_MspInit+0xa8>)
 8001bf6:	f043 0308 	orr.w	r3, r3, #8
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_SPI_MspInit+0xa8>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001c08:	2328      	movs	r3, #40	; 0x28
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4812      	ldr	r0, [pc, #72]	; (8001c64 <HAL_SPI_MspInit+0xac>)
 8001c1c:	f001 fec4 	bl	80039a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c20:	2310      	movs	r3, #16
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	480c      	ldr	r0, [pc, #48]	; (8001c64 <HAL_SPI_MspInit+0xac>)
 8001c34:	f001 feb8 	bl	80039a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_SPI_MspInit+0xb0>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <HAL_SPI_MspInit+0xb0>)
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c54:	bf00      	nop
 8001c56:	3728      	adds	r7, #40	; 0x28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40013000 	.word	0x40013000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010c00 	.word	0x40010c00
 8001c68:	40010000 	.word	0x40010000

08001c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d114      	bne.n	8001ca8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	61d3      	str	r3, [r2, #28]
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	201c      	movs	r0, #28
 8001c9c:	f001 fbab 	bl	80033f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ca0:	201c      	movs	r0, #28
 8001ca2:	f001 fbc4 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ca6:	e022      	b.n	8001cee <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <HAL_TIM_Base_MspInit+0x90>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10c      	bne.n	8001ccc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a10      	ldr	r2, [pc, #64]	; (8001cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	61d3      	str	r3, [r2, #28]
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]
}
 8001cca:	e010      	b.n	8001cee <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_TIM_Base_MspInit+0x94>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10b      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	61d3      	str	r3, [r2, #28]
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40000800 	.word	0x40000800

08001d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_TIM_MspPostInit+0x5c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d118      	bne.n	8001d56 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_TIM_MspPostInit+0x60>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_TIM_MspPostInit+0x60>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_TIM_MspPostInit+0x60>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d3c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_TIM_MspPostInit+0x64>)
 8001d52:	f001 fe29 	bl	80039a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d56:	bf00      	nop
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40000800 	.word	0x40000800
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010c00 	.word	0x40010c00

08001d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a47      	ldr	r2, [pc, #284]	; (8001ea4 <HAL_UART_MspInit+0x138>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	f040 8086 	bne.w	8001e9a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_UART_MspInit+0x13c>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	4a45      	ldr	r2, [pc, #276]	; (8001ea8 <HAL_UART_MspInit+0x13c>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d98:	6193      	str	r3, [r2, #24]
 8001d9a:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <HAL_UART_MspInit+0x13c>)
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b40      	ldr	r3, [pc, #256]	; (8001ea8 <HAL_UART_MspInit+0x13c>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	4a3f      	ldr	r2, [pc, #252]	; (8001ea8 <HAL_UART_MspInit+0x13c>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	6193      	str	r3, [r2, #24]
 8001db2:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <HAL_UART_MspInit+0x13c>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4836      	ldr	r0, [pc, #216]	; (8001eac <HAL_UART_MspInit+0x140>)
 8001dd4:	f001 fde8 	bl	80039a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	4619      	mov	r1, r3
 8001dec:	482f      	ldr	r0, [pc, #188]	; (8001eac <HAL_UART_MspInit+0x140>)
 8001dee:	f001 fddb 	bl	80039a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001df2:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <HAL_UART_MspInit+0x144>)
 8001df4:	4a2f      	ldr	r2, [pc, #188]	; (8001eb4 <HAL_UART_MspInit+0x148>)
 8001df6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_UART_MspInit+0x144>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_UART_MspInit+0x144>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <HAL_UART_MspInit+0x144>)
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_UART_MspInit+0x144>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_UART_MspInit+0x144>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_UART_MspInit+0x144>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_UART_MspInit+0x144>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e22:	4823      	ldr	r0, [pc, #140]	; (8001eb0 <HAL_UART_MspInit+0x144>)
 8001e24:	f001 fb1e 	bl	8003464 <HAL_DMA_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001e2e:	f7ff fe0f 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_UART_MspInit+0x144>)
 8001e36:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_UART_MspInit+0x144>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <HAL_UART_MspInit+0x14c>)
 8001e40:	4a1e      	ldr	r2, [pc, #120]	; (8001ebc <HAL_UART_MspInit+0x150>)
 8001e42:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <HAL_UART_MspInit+0x14c>)
 8001e46:	2210      	movs	r2, #16
 8001e48:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_UART_MspInit+0x14c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_UART_MspInit+0x14c>)
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_UART_MspInit+0x14c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e5c:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <HAL_UART_MspInit+0x14c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_UART_MspInit+0x14c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <HAL_UART_MspInit+0x14c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e6e:	4812      	ldr	r0, [pc, #72]	; (8001eb8 <HAL_UART_MspInit+0x14c>)
 8001e70:	f001 faf8 	bl	8003464 <HAL_DMA_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001e7a:	f7ff fde9 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <HAL_UART_MspInit+0x14c>)
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38
 8001e84:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <HAL_UART_MspInit+0x14c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2025      	movs	r0, #37	; 0x25
 8001e90:	f001 fab1 	bl	80033f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e94:	2025      	movs	r0, #37	; 0x25
 8001e96:	f001 faca 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	20000404 	.word	0x20000404
 8001eb4:	40020058 	.word	0x40020058
 8001eb8:	20000448 	.word	0x20000448
 8001ebc:	40020044 	.word	0x40020044

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <NMI_Handler+0x4>

08001ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <HardFault_Handler+0x4>

08001ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <MemManage_Handler+0x4>

08001ed2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <BusFault_Handler+0x4>

08001ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <UsageFault_Handler+0x4>

08001ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
	...

08001f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f08:	f000 fe38 	bl	8002b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(brake_timer) brake_timer--;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <SysTick_Handler+0x20>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d004      	beq.n	8001f1e <SysTick_Handler+0x1a>
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <SysTick_Handler+0x20>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	4a02      	ldr	r2, [pc, #8]	; (8001f24 <SysTick_Handler+0x20>)
 8001f1c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000508 	.word	0x20000508

08001f28 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <DMA1_Channel4_IRQHandler+0x10>)
 8001f2e:	f001 fc07 	bl	8003740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000448 	.word	0x20000448

08001f3c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <DMA1_Channel5_IRQHandler+0x14>)
 8001f42:	f001 fbfd 	bl	8003740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  rx_process_flag = 1;
 8001f46:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <DMA1_Channel5_IRQHandler+0x18>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000404 	.word	0x20000404
 8001f54:	2000051b 	.word	0x2000051b

08001f58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f5c:	4803      	ldr	r0, [pc, #12]	; (8001f6c <TIM2_IRQHandler+0x14>)
 8001f5e:	f003 fc33 	bl	80057c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  velociraptor2_timer_handler();
 8001f62:	f000 fb55 	bl	8002610 <velociraptor2_timer_handler>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200002e4 	.word	0x200002e4

08001f70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <USART1_IRQHandler+0x10>)
 8001f76:	f004 fad3 	bl	8006520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200003bc 	.word	0x200003bc

08001f84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001f88:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f8c:	f001 fec0 	bl	8003d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  ADXL345_IRQHandler();
 8001f90:	f7ff f9c8 	bl	8001324 <ADXL345_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return 1;
 8001f9c:	2301      	movs	r3, #1
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <_kill>:

int _kill(int pid, int sig)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fb0:	f006 f912 	bl	80081d8 <__errno>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2216      	movs	r2, #22
 8001fb8:	601a      	str	r2, [r3, #0]
  return -1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <_exit>:

void _exit (int status)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffe7 	bl	8001fa6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fd8:	e7fe      	b.n	8001fd8 <_exit+0x12>

08001fda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e00a      	b.n	8002002 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fec:	f3af 8000 	nop.w
 8001ff0:	4601      	mov	r1, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	60ba      	str	r2, [r7, #8]
 8001ff8:	b2ca      	uxtb	r2, r1
 8001ffa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3301      	adds	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	dbf0      	blt.n	8001fec <_read+0x12>
  }

  return len;
 800200a:	687b      	ldr	r3, [r7, #4]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e009      	b.n	800203a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	60ba      	str	r2, [r7, #8]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	dbf1      	blt.n	8002026 <_write+0x12>
  }
  return len;
 8002042:	687b      	ldr	r3, [r7, #4]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_close>:

int _close(int file)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002072:	605a      	str	r2, [r3, #4]
  return 0;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <_isatty>:

int _isatty(int file)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002088:	2301      	movs	r3, #1
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <_sbrk+0x5c>)
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <_sbrk+0x60>)
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <_sbrk+0x64>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <_sbrk+0x68>)
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d207      	bcs.n	80020ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020dc:	f006 f87c 	bl	80081d8 <__errno>
 80020e0:	4603      	mov	r3, r0
 80020e2:	220c      	movs	r2, #12
 80020e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ea:	e009      	b.n	8002100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	4a05      	ldr	r2, [pc, #20]	; (8002110 <_sbrk+0x64>)
 80020fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20005000 	.word	0x20005000
 800210c:	00000400 	.word	0x00000400
 8002110:	2000048c 	.word	0x2000048c
 8002114:	20000670 	.word	0x20000670

08002118 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <velociraptor2_init>:
uint8_t cross_line_flag = 0;
uint32_t brake_timer = 0;
float * error_ptr = &(line_sensor.error);

void velociraptor2_init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
	ADXL345_Deselect();
 800212a:	f7ff f83b 	bl	80011a4 <ADXL345_Deselect>
	if (ADXL345_CheckDevice()) {
 800212e:	f7ff f8e6 	bl	80012fe <ADXL345_CheckDevice>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <velociraptor2_init+0x4c>
		for(uint8_t i = 0; i < 2; i++)
 8002138:	2300      	movs	r3, #0
 800213a:	71fb      	strb	r3, [r7, #7]
 800213c:	e014      	b.n	8002168 <velociraptor2_init+0x44>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800213e:	2201      	movs	r2, #1
 8002140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002144:	4849      	ldr	r0, [pc, #292]	; (800226c <velociraptor2_init+0x148>)
 8002146:	f001 fdca 	bl	8003cde <HAL_GPIO_WritePin>
			HAL_Delay(50);
 800214a:	2032      	movs	r0, #50	; 0x32
 800214c:	f000 fd32 	bl	8002bb4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002150:	2200      	movs	r2, #0
 8002152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002156:	4845      	ldr	r0, [pc, #276]	; (800226c <velociraptor2_init+0x148>)
 8002158:	f001 fdc1 	bl	8003cde <HAL_GPIO_WritePin>
			HAL_Delay(50);
 800215c:	2032      	movs	r0, #50	; 0x32
 800215e:	f000 fd29 	bl	8002bb4 <HAL_Delay>
		for(uint8_t i = 0; i < 2; i++)
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	3301      	adds	r3, #1
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d9e7      	bls.n	800213e <velociraptor2_init+0x1a>
 800216e:	e00e      	b.n	800218e <velociraptor2_init+0x6a>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002176:	483d      	ldr	r0, [pc, #244]	; (800226c <velociraptor2_init+0x148>)
 8002178:	f001 fdb1 	bl	8003cde <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800217c:	2032      	movs	r0, #50	; 0x32
 800217e:	f000 fd19 	bl	8002bb4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002188:	4838      	ldr	r0, [pc, #224]	; (800226c <velociraptor2_init+0x148>)
 800218a:	f001 fda8 	bl	8003cde <HAL_GPIO_WritePin>
	}
	ADXL345_Init();
 800218e:	f7ff f815 	bl	80011bc <ADXL345_Init>

	// Datos sensores
	line_sensor.active_sensor = 0;
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <velociraptor2_init+0x14c>)
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	line_sensor.active_buffer = BUFFER_0;
 800219a:	4b35      	ldr	r3, [pc, #212]	; (8002270 <velociraptor2_init+0x14c>)
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	line_sensor.flag_data_ready = 0;
 80021a2:	4b33      	ldr	r3, [pc, #204]	; (8002270 <velociraptor2_init+0x14c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	line_sensor.prev_error = 0.f;
 80021aa:	4b31      	ldr	r3, [pc, #196]	; (8002270 <velociraptor2_init+0x14c>)
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
	line_sensor.track_color = W_OVER_B;
 80021b2:	4b2f      	ldr	r3, [pc, #188]	; (8002270 <velociraptor2_init+0x14c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	line_sensor.threshold[0] = 1000;
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <velociraptor2_init+0x14c>)
 80021bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021c0:	841a      	strh	r2, [r3, #32]
	line_sensor.threshold[1] = 1500;
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <velociraptor2_init+0x14c>)
 80021c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80021c8:	845a      	strh	r2, [r3, #34]	; 0x22
	line_sensor.threshold[2] = 1500;
 80021ca:	4b29      	ldr	r3, [pc, #164]	; (8002270 <velociraptor2_init+0x14c>)
 80021cc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80021d0:	849a      	strh	r2, [r3, #36]	; 0x24
	line_sensor.threshold[3] = 1800;
 80021d2:	4b27      	ldr	r3, [pc, #156]	; (8002270 <velociraptor2_init+0x14c>)
 80021d4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80021d8:	84da      	strh	r2, [r3, #38]	; 0x26
	line_sensor.threshold[4] = 2000;
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <velociraptor2_init+0x14c>)
 80021dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
	line_sensor.threshold[5] = 1500;
 80021e2:	4b23      	ldr	r3, [pc, #140]	; (8002270 <velociraptor2_init+0x14c>)
 80021e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80021e8:	855a      	strh	r2, [r3, #42]	; 0x2a
	line_sensor.threshold[6] = 1500;
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <velociraptor2_init+0x14c>)
 80021ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80021f0:	859a      	strh	r2, [r3, #44]	; 0x2c
	line_sensor.threshold[7] = 1500;
 80021f2:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <velociraptor2_init+0x14c>)
 80021f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80021f8:	85da      	strh	r2, [r3, #46]	; 0x2e

	pid.correction = 0.f;
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <velociraptor2_init+0x150>)
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
	pid.error_dv = 0.f;
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <velociraptor2_init+0x150>)
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
	pid.error_int = 0.f;
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <velociraptor2_init+0x150>)
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
	pid.kp = 1.f;
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <velociraptor2_init+0x150>)
 8002214:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002218:	611a      	str	r2, [r3, #16]
	pid.ki = 0.f;
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <velociraptor2_init+0x150>)
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
	pid.kd = 0.6f;
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <velociraptor2_init+0x150>)
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <velociraptor2_init+0x154>)
 8002226:	619a      	str	r2, [r3, #24]
	pid.prev_error = 0.f;
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <velociraptor2_init+0x150>)
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	605a      	str	r2, [r3, #4]

	speed.max_speed = 1.0f;
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <velociraptor2_init+0x158>)
 8002232:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002236:	601a      	str	r2, [r3, #0]
	speed.brake_factor = 0.7f;
 8002238:	4b10      	ldr	r3, [pc, #64]	; (800227c <velociraptor2_init+0x158>)
 800223a:	4a11      	ldr	r2, [pc, #68]	; (8002280 <velociraptor2_init+0x15c>)
 800223c:	611a      	str	r2, [r3, #16]

	// Timer adc
	HAL_TIM_Base_Start_IT(&htim2);
 800223e:	4811      	ldr	r0, [pc, #68]	; (8002284 <velociraptor2_init+0x160>)
 8002240:	f003 f976 	bl	8005530 <HAL_TIM_Base_Start_IT>

	// Timer motores
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002244:	2100      	movs	r1, #0
 8002246:	4810      	ldr	r0, [pc, #64]	; (8002288 <velociraptor2_init+0x164>)
 8002248:	f003 fa1c 	bl	8005684 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800224c:	2104      	movs	r1, #4
 800224e:	480e      	ldr	r0, [pc, #56]	; (8002288 <velociraptor2_init+0x164>)
 8002250:	f003 fa18 	bl	8005684 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002254:	2108      	movs	r1, #8
 8002256:	480c      	ldr	r0, [pc, #48]	; (8002288 <velociraptor2_init+0x164>)
 8002258:	f003 fa14 	bl	8005684 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800225c:	210c      	movs	r1, #12
 800225e:	480a      	ldr	r0, [pc, #40]	; (8002288 <velociraptor2_init+0x164>)
 8002260:	f003 fa10 	bl	8005684 <HAL_TIM_PWM_Start>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40010800 	.word	0x40010800
 8002270:	20000494 	.word	0x20000494
 8002274:	200004d4 	.word	0x200004d4
 8002278:	3f19999a 	.word	0x3f19999a
 800227c:	200004f0 	.word	0x200004f0
 8002280:	3f333333 	.word	0x3f333333
 8002284:	200002e4 	.word	0x200002e4
 8002288:	20000374 	.word	0x20000374

0800228c <velociraptor2_main_loop>:

float max_speed = 1.0f;

void velociraptor2_main_loop(void)
{
 800228c:	b598      	push	{r3, r4, r7, lr}
 800228e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET && robot_state == stopped)
 8002290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002294:	488c      	ldr	r0, [pc, #560]	; (80024c8 <velociraptor2_main_loop+0x23c>)
 8002296:	f001 fd0b 	bl	8003cb0 <HAL_GPIO_ReadPin>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10b      	bne.n	80022b8 <velociraptor2_main_loop+0x2c>
 80022a0:	4b8a      	ldr	r3, [pc, #552]	; (80024cc <velociraptor2_main_loop+0x240>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <velociraptor2_main_loop+0x2c>
	{
		robot_state = running;
 80022a8:	4b88      	ldr	r3, [pc, #544]	; (80024cc <velociraptor2_main_loop+0x240>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
		pid.error_int = 0.f;
 80022ae:	4b88      	ldr	r3, [pc, #544]	; (80024d0 <velociraptor2_main_loop+0x244>)
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	e00e      	b.n	80022d6 <velociraptor2_main_loop+0x4a>
	}
	else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET && robot_state == running)
 80022b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022bc:	4882      	ldr	r0, [pc, #520]	; (80024c8 <velociraptor2_main_loop+0x23c>)
 80022be:	f001 fcf7 	bl	8003cb0 <HAL_GPIO_ReadPin>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d106      	bne.n	80022d6 <velociraptor2_main_loop+0x4a>
 80022c8:	4b80      	ldr	r3, [pc, #512]	; (80024cc <velociraptor2_main_loop+0x240>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <velociraptor2_main_loop+0x4a>
	{
		robot_state = stopped;
 80022d0:	4b7e      	ldr	r3, [pc, #504]	; (80024cc <velociraptor2_main_loop+0x240>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
	}
	if(robot_state == running && cross_line_flag)
 80022d6:	4b7d      	ldr	r3, [pc, #500]	; (80024cc <velociraptor2_main_loop+0x240>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d110      	bne.n	8002300 <velociraptor2_main_loop+0x74>
 80022de:	4b7d      	ldr	r3, [pc, #500]	; (80024d4 <velociraptor2_main_loop+0x248>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <velociraptor2_main_loop+0x74>
	{
		brake_timer = 500;
 80022e6:	4b7c      	ldr	r3, [pc, #496]	; (80024d8 <velociraptor2_main_loop+0x24c>)
 80022e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80022ec:	601a      	str	r2, [r3, #0]
		robot_state = braking;
 80022ee:	4b77      	ldr	r3, [pc, #476]	; (80024cc <velociraptor2_main_loop+0x240>)
 80022f0:	2202      	movs	r2, #2
 80022f2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022fa:	4873      	ldr	r0, [pc, #460]	; (80024c8 <velociraptor2_main_loop+0x23c>)
 80022fc:	f001 fcef 	bl	8003cde <HAL_GPIO_WritePin>
	}

	if(line_sensor.flag_data_ready)
 8002300:	4b76      	ldr	r3, [pc, #472]	; (80024dc <velociraptor2_main_loop+0x250>)
 8002302:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80db 	beq.w	80024c2 <velociraptor2_main_loop+0x236>
	{
		velociraptor2_calc_error();
 800230c:	f000 f8ea 	bl	80024e4 <velociraptor2_calc_error>

		switch(robot_state)
 8002310:	4b6e      	ldr	r3, [pc, #440]	; (80024cc <velociraptor2_main_loop+0x240>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b02      	cmp	r3, #2
 8002316:	f000 80c4 	beq.w	80024a2 <velociraptor2_main_loop+0x216>
 800231a:	2b02      	cmp	r3, #2
 800231c:	f300 80d1 	bgt.w	80024c2 <velociraptor2_main_loop+0x236>
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <velociraptor2_main_loop+0x9e>
 8002324:	2b01      	cmp	r3, #1
 8002326:	d003      	beq.n	8002330 <velociraptor2_main_loop+0xa4>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
			}
			break;
		}
	}
}
 8002328:	e0cb      	b.n	80024c2 <velociraptor2_main_loop+0x236>
			velociraptor2_brake();
 800232a:	f000 f9dd 	bl	80026e8 <velociraptor2_brake>
			break;
 800232e:	e0c8      	b.n	80024c2 <velociraptor2_main_loop+0x236>
			pid.error_int += line_sensor.error;
 8002330:	4b67      	ldr	r3, [pc, #412]	; (80024d0 <velociraptor2_main_loop+0x244>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4a69      	ldr	r2, [pc, #420]	; (80024dc <velociraptor2_main_loop+0x250>)
 8002336:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fbea 	bl	8000b14 <__addsf3>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	4b62      	ldr	r3, [pc, #392]	; (80024d0 <velociraptor2_main_loop+0x244>)
 8002346:	609a      	str	r2, [r3, #8]
			pid.error_dv = line_sensor.error - pid.prev_error;
 8002348:	4b64      	ldr	r3, [pc, #400]	; (80024dc <velociraptor2_main_loop+0x250>)
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	4a60      	ldr	r2, [pc, #384]	; (80024d0 <velociraptor2_main_loop+0x244>)
 800234e:	6852      	ldr	r2, [r2, #4]
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fbdc 	bl	8000b10 <__aeabi_fsub>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <velociraptor2_main_loop+0x244>)
 800235e:	60da      	str	r2, [r3, #12]
			pid.correction = pid.kp * line_sensor.error;
 8002360:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <velociraptor2_main_loop+0x244>)
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	4a5d      	ldr	r2, [pc, #372]	; (80024dc <velociraptor2_main_loop+0x250>)
 8002366:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fcda 	bl	8000d24 <__aeabi_fmul>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <velociraptor2_main_loop+0x244>)
 8002376:	601a      	str	r2, [r3, #0]
			pid.correction += pid.ki * pid.error_int;
 8002378:	4b55      	ldr	r3, [pc, #340]	; (80024d0 <velociraptor2_main_loop+0x244>)
 800237a:	681c      	ldr	r4, [r3, #0]
 800237c:	4b54      	ldr	r3, [pc, #336]	; (80024d0 <velociraptor2_main_loop+0x244>)
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	4a53      	ldr	r2, [pc, #332]	; (80024d0 <velociraptor2_main_loop+0x244>)
 8002382:	6892      	ldr	r2, [r2, #8]
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fccc 	bl	8000d24 <__aeabi_fmul>
 800238c:	4603      	mov	r3, r0
 800238e:	4619      	mov	r1, r3
 8002390:	4620      	mov	r0, r4
 8002392:	f7fe fbbf 	bl	8000b14 <__addsf3>
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <velociraptor2_main_loop+0x244>)
 800239c:	601a      	str	r2, [r3, #0]
			pid.correction += pid.kd * pid.error_dv;
 800239e:	4b4c      	ldr	r3, [pc, #304]	; (80024d0 <velociraptor2_main_loop+0x244>)
 80023a0:	681c      	ldr	r4, [r3, #0]
 80023a2:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <velociraptor2_main_loop+0x244>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	4a4a      	ldr	r2, [pc, #296]	; (80024d0 <velociraptor2_main_loop+0x244>)
 80023a8:	68d2      	ldr	r2, [r2, #12]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fcb9 	bl	8000d24 <__aeabi_fmul>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4619      	mov	r1, r3
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7fe fbac 	bl	8000b14 <__addsf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <velociraptor2_main_loop+0x244>)
 80023c2:	601a      	str	r2, [r3, #0]
			if(pid.correction >= 0) speed.base_speed = 1.0f - pid.correction * speed.brake_factor;
 80023c4:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <velociraptor2_main_loop+0x244>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f04f 0100 	mov.w	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fe5b 	bl	8001088 <__aeabi_fcmpge>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d011      	beq.n	80023fc <velociraptor2_main_loop+0x170>
 80023d8:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <velociraptor2_main_loop+0x244>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a40      	ldr	r2, [pc, #256]	; (80024e0 <velociraptor2_main_loop+0x254>)
 80023de:	6912      	ldr	r2, [r2, #16]
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fc9e 	bl	8000d24 <__aeabi_fmul>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80023f0:	f7fe fb8e 	bl	8000b10 <__aeabi_fsub>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <velociraptor2_main_loop+0x254>)
 80023fa:	605a      	str	r2, [r3, #4]
			if(pid.correction < 0) speed.base_speed = 1.0f + pid.correction * speed.brake_factor;
 80023fc:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <velociraptor2_main_loop+0x244>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f04f 0100 	mov.w	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fe2b 	bl	8001060 <__aeabi_fcmplt>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d011      	beq.n	8002434 <velociraptor2_main_loop+0x1a8>
 8002410:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <velociraptor2_main_loop+0x244>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a32      	ldr	r2, [pc, #200]	; (80024e0 <velociraptor2_main_loop+0x254>)
 8002416:	6912      	ldr	r2, [r2, #16]
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fc82 	bl	8000d24 <__aeabi_fmul>
 8002420:	4603      	mov	r3, r0
 8002422:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fb74 	bl	8000b14 <__addsf3>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <velociraptor2_main_loop+0x254>)
 8002432:	605a      	str	r2, [r3, #4]
			speed.l_speed = speed.max_speed * (speed.base_speed + pid.correction);
 8002434:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <velociraptor2_main_loop+0x254>)
 8002436:	681c      	ldr	r4, [r3, #0]
 8002438:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <velociraptor2_main_loop+0x254>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <velociraptor2_main_loop+0x244>)
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fb66 	bl	8000b14 <__addsf3>
 8002448:	4603      	mov	r3, r0
 800244a:	4619      	mov	r1, r3
 800244c:	4620      	mov	r0, r4
 800244e:	f7fe fc69 	bl	8000d24 <__aeabi_fmul>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <velociraptor2_main_loop+0x254>)
 8002458:	609a      	str	r2, [r3, #8]
			speed.r_speed = speed.max_speed * (speed.base_speed - pid.correction);
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <velociraptor2_main_loop+0x254>)
 800245c:	681c      	ldr	r4, [r3, #0]
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <velociraptor2_main_loop+0x254>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <velociraptor2_main_loop+0x244>)
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fb51 	bl	8000b10 <__aeabi_fsub>
 800246e:	4603      	mov	r3, r0
 8002470:	4619      	mov	r1, r3
 8002472:	4620      	mov	r0, r4
 8002474:	f7fe fc56 	bl	8000d24 <__aeabi_fmul>
 8002478:	4603      	mov	r3, r0
 800247a:	461a      	mov	r2, r3
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <velociraptor2_main_loop+0x254>)
 800247e:	60da      	str	r2, [r3, #12]
			pid.prev_error = line_sensor.error;
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <velociraptor2_main_loop+0x250>)
 8002482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <velociraptor2_main_loop+0x244>)
 8002486:	6053      	str	r3, [r2, #4]
			velociraptor2_setmotorspeed(MOTOR_L, speed.l_speed);
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <velociraptor2_main_loop+0x254>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4619      	mov	r1, r3
 800248e:	2001      	movs	r0, #1
 8002490:	f000 f948 	bl	8002724 <velociraptor2_setmotorspeed>
			velociraptor2_setmotorspeed(MOTOR_R, speed.r_speed);
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <velociraptor2_main_loop+0x254>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4619      	mov	r1, r3
 800249a:	2002      	movs	r0, #2
 800249c:	f000 f942 	bl	8002724 <velociraptor2_setmotorspeed>
			break;
 80024a0:	e00f      	b.n	80024c2 <velociraptor2_main_loop+0x236>
			velociraptor2_brake();
 80024a2:	f000 f921 	bl	80026e8 <velociraptor2_brake>
			if(!brake_timer)
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <velociraptor2_main_loop+0x24c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <velociraptor2_main_loop+0x234>
				robot_state = running;
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <velociraptor2_main_loop+0x240>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80024b4:	2201      	movs	r2, #1
 80024b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ba:	4803      	ldr	r0, [pc, #12]	; (80024c8 <velociraptor2_main_loop+0x23c>)
 80024bc:	f001 fc0f 	bl	8003cde <HAL_GPIO_WritePin>
			break;
 80024c0:	bf00      	nop
}
 80024c2:	bf00      	nop
 80024c4:	bd98      	pop	{r3, r4, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40011000 	.word	0x40011000
 80024cc:	20000490 	.word	0x20000490
 80024d0:	200004d4 	.word	0x200004d4
 80024d4:	20000504 	.word	0x20000504
 80024d8:	20000508 	.word	0x20000508
 80024dc:	20000494 	.word	0x20000494
 80024e0:	200004f0 	.word	0x200004f0

080024e4 <velociraptor2_calc_error>:

void velociraptor2_calc_error(void)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
	line_sensor.flag_data_ready = 0;
 80024ea:	4b46      	ldr	r3, [pc, #280]	; (8002604 <velociraptor2_calc_error+0x120>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	cross_line_flag = 1;
 80024f2:	4b45      	ldr	r3, [pc, #276]	; (8002608 <velociraptor2_calc_error+0x124>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]

	uint16_t * buffer_ptr = line_sensor.sensor_val;
 80024f8:	4b42      	ldr	r3, [pc, #264]	; (8002604 <velociraptor2_calc_error+0x120>)
 80024fa:	60bb      	str	r3, [r7, #8]
	buffer_ptr += 8 * (line_sensor.active_buffer == BUFFER_1);
 80024fc:	4b41      	ldr	r3, [pc, #260]	; (8002604 <velociraptor2_calc_error+0x120>)
 80024fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <velociraptor2_calc_error+0x26>
 8002506:	2310      	movs	r3, #16
 8002508:	e000      	b.n	800250c <velociraptor2_calc_error+0x28>
 800250a:	2300      	movs	r3, #0
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	4413      	add	r3, r2
 8002510:	60bb      	str	r3, [r7, #8]

	int32_t weighted_sum = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
	int32_t active_sensors = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]

	line_sensor.error = line_sensor.prev_error;
 800251a:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <velociraptor2_calc_error+0x120>)
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	4a39      	ldr	r2, [pc, #228]	; (8002604 <velociraptor2_calc_error+0x120>)
 8002520:	6353      	str	r3, [r2, #52]	; 0x34

	for(uint8_t n = 0; n < 8; n++)
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	e03f      	b.n	80025a8 <velociraptor2_calc_error+0xc4>
	{
		uint8_t cond = (line_sensor.track_color == W_OVER_B ?
 8002528:	4b36      	ldr	r3, [pc, #216]	; (8002604 <velociraptor2_calc_error+0x120>)
 800252a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <velociraptor2_calc_error+0x6e>
				buffer_ptr[n] > line_sensor.threshold[n] :
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	4413      	add	r3, r2
 800253a:	881a      	ldrh	r2, [r3, #0]
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	4931      	ldr	r1, [pc, #196]	; (8002604 <velociraptor2_calc_error+0x120>)
 8002540:	3310      	adds	r3, #16
 8002542:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002546:	429a      	cmp	r2, r3
 8002548:	bf8c      	ite	hi
 800254a:	2301      	movhi	r3, #1
 800254c:	2300      	movls	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	e00e      	b.n	8002570 <velociraptor2_calc_error+0x8c>
				buffer_ptr[n] < line_sensor.threshold[n]);
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	4413      	add	r3, r2
 800255a:	881a      	ldrh	r2, [r3, #0]
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	4929      	ldr	r1, [pc, #164]	; (8002604 <velociraptor2_calc_error+0x120>)
 8002560:	3310      	adds	r3, #16
 8002562:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002566:	429a      	cmp	r2, r3
 8002568:	bf34      	ite	cc
 800256a:	2301      	movcc	r3, #1
 800256c:	2300      	movcs	r3, #0
 800256e:	b2db      	uxtb	r3, r3
		uint8_t cond = (line_sensor.track_color == W_OVER_B ?
 8002570:	71fb      	strb	r3, [r7, #7]

		active_sensors += cond;
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
		weighted_sum += n * cond;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	79fa      	ldrb	r2, [r7, #7]
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4413      	add	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
		if(n == 0 || n == 7) cross_line_flag &= cond;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <velociraptor2_calc_error+0xb0>
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b07      	cmp	r3, #7
 8002592:	d106      	bne.n	80025a2 <velociraptor2_calc_error+0xbe>
 8002594:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <velociraptor2_calc_error+0x124>)
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	4013      	ands	r3, r2
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <velociraptor2_calc_error+0x124>)
 80025a0:	701a      	strb	r2, [r3, #0]
	for(uint8_t n = 0; n < 8; n++)
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	3301      	adds	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b07      	cmp	r3, #7
 80025ac:	d9bc      	bls.n	8002528 <velociraptor2_calc_error+0x44>
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
		cross_line_flag = 0;
	}*/
	if(active_sensors > 0)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	dd1f      	ble.n	80025f4 <velociraptor2_calc_error+0x110>
	{
		line_sensor.error = (float) weighted_sum / ((float) active_sensors * 3.5f);
 80025b4:	6978      	ldr	r0, [r7, #20]
 80025b6:	f7fe fb61 	bl	8000c7c <__aeabi_i2f>
 80025ba:	4604      	mov	r4, r0
 80025bc:	6938      	ldr	r0, [r7, #16]
 80025be:	f7fe fb5d 	bl	8000c7c <__aeabi_i2f>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4911      	ldr	r1, [pc, #68]	; (800260c <velociraptor2_calc_error+0x128>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fbac 	bl	8000d24 <__aeabi_fmul>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4619      	mov	r1, r3
 80025d0:	4620      	mov	r0, r4
 80025d2:	f7fe fc5b 	bl	8000e8c <__aeabi_fdiv>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <velociraptor2_calc_error+0x120>)
 80025dc:	635a      	str	r2, [r3, #52]	; 0x34
		line_sensor.error -= 1.f;
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <velociraptor2_calc_error+0x120>)
 80025e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fa92 	bl	8000b10 <__aeabi_fsub>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <velociraptor2_calc_error+0x120>)
 80025f2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	line_sensor.prev_error = line_sensor.error;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <velociraptor2_calc_error+0x120>)
 80025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f8:	4a02      	ldr	r2, [pc, #8]	; (8002604 <velociraptor2_calc_error+0x120>)
 80025fa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025fc:	bf00      	nop
 80025fe:	371c      	adds	r7, #28
 8002600:	46bd      	mov	sp, r7
 8002602:	bd90      	pop	{r4, r7, pc}
 8002604:	20000494 	.word	0x20000494
 8002608:	20000504 	.word	0x20000504
 800260c:	40600000 	.word	0x40600000

08002610 <velociraptor2_timer_handler>:

void velociraptor2_timer_handler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
	velociraptor2_linesensor_routine();
 8002614:	f000 f802 	bl	800261c <velociraptor2_linesensor_routine>
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}

0800261c <velociraptor2_linesensor_routine>:

void velociraptor2_linesensor_routine(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	line_sensor.sensor_val[line_sensor.active_sensor] = HAL_ADC_GetValue(&hadc2);
 8002620:	482e      	ldr	r0, [pc, #184]	; (80026dc <velociraptor2_linesensor_routine+0xc0>)
 8002622:	f000 fc71 	bl	8002f08 <HAL_ADC_GetValue>
 8002626:	4601      	mov	r1, r0
 8002628:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 800262a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800262e:	461a      	mov	r2, r3
 8002630:	b289      	uxth	r1, r1
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 8002634:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	line_sensor.active_sensor += 1;
 8002638:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 800263a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800263e:	3301      	adds	r3, #1
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 8002644:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	line_sensor.active_sensor %= 16;
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 800264a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	b2da      	uxtb	r2, r3
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 8002656:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if(!(line_sensor.active_sensor % 8))
 800265a:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 800265c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d111      	bne.n	800268e <velociraptor2_linesensor_routine+0x72>
	{
		if(!line_sensor.active_sensor) line_sensor.active_buffer = BUFFER_0;
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 800266c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002670:	2b00      	cmp	r3, #0
 8002672:	d104      	bne.n	800267e <velociraptor2_linesensor_routine+0x62>
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800267c:	e003      	b.n	8002686 <velociraptor2_linesensor_routine+0x6a>
		else line_sensor.active_buffer = BUFFER_1;
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

		line_sensor.flag_data_ready = 1;
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, line_sensor.active_sensor & 1);
 800268e:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 8002690:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	2102      	movs	r1, #2
 800269e:	4811      	ldr	r0, [pc, #68]	; (80026e4 <velociraptor2_linesensor_routine+0xc8>)
 80026a0:	f001 fb1d 	bl	8003cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, line_sensor.active_sensor & 2);
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 80026a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	2104      	movs	r1, #4
 80026b4:	480b      	ldr	r0, [pc, #44]	; (80026e4 <velociraptor2_linesensor_routine+0xc8>)
 80026b6:	f001 fb12 	bl	8003cde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, line_sensor.active_sensor & 4);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <velociraptor2_linesensor_routine+0xc4>)
 80026bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	2108      	movs	r1, #8
 80026ca:	4806      	ldr	r0, [pc, #24]	; (80026e4 <velociraptor2_linesensor_routine+0xc8>)
 80026cc:	f001 fb07 	bl	8003cde <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc2);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <velociraptor2_linesensor_routine+0xc0>)
 80026d2:	f000 fb6b 	bl	8002dac <HAL_ADC_Start>
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000208 	.word	0x20000208
 80026e0:	20000494 	.word	0x20000494
 80026e4:	40010800 	.word	0x40010800

080026e8 <velociraptor2_brake>:

void velociraptor2_brake(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
	uint32_t aux_arrel = __HAL_TIM_GET_AUTORELOAD(&htim4);
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <velociraptor2_brake+0x38>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, aux_arrel);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <velociraptor2_brake+0x38>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, aux_arrel);
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <velociraptor2_brake+0x38>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, aux_arrel);
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <velociraptor2_brake+0x38>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, aux_arrel);
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <velociraptor2_brake+0x38>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	20000374 	.word	0x20000374

08002724 <velociraptor2_setmotorspeed>:

void velociraptor2_setmotorspeed(uint8_t n_motor, float speed)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	6039      	str	r1, [r7, #0]
 800272e:	71fb      	strb	r3, [r7, #7]
	if (speed > 1.0f) speed = 1.0f;
 8002730:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002734:	6838      	ldr	r0, [r7, #0]
 8002736:	f7fe fcb1 	bl	800109c <__aeabi_fcmpgt>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <velociraptor2_setmotorspeed+0x22>
 8002740:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002744:	603b      	str	r3, [r7, #0]
	if (speed < -1.0f) speed = -1.0f;
 8002746:	4965      	ldr	r1, [pc, #404]	; (80028dc <velociraptor2_setmotorspeed+0x1b8>)
 8002748:	6838      	ldr	r0, [r7, #0]
 800274a:	f7fe fc89 	bl	8001060 <__aeabi_fcmplt>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <velociraptor2_setmotorspeed+0x34>
 8002754:	4b61      	ldr	r3, [pc, #388]	; (80028dc <velociraptor2_setmotorspeed+0x1b8>)
 8002756:	603b      	str	r3, [r7, #0]

	float lower_lim = (float) MIN_LOADED_SPEED / (float) MAXSPEED;
 8002758:	4b61      	ldr	r3, [pc, #388]	; (80028e0 <velociraptor2_setmotorspeed+0x1bc>)
 800275a:	60fb      	str	r3, [r7, #12]

	if (speed < 0.0f)
 800275c:	f04f 0100 	mov.w	r1, #0
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f7fe fc7d 	bl	8001060 <__aeabi_fcmplt>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d04a      	beq.n	8002802 <velociraptor2_setmotorspeed+0xde>
	{
		speed *= -1;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002772:	603b      	str	r3, [r7, #0]
		speed *= (1.0f - lower_lim);
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800277a:	f7fe f9c9 	bl	8000b10 <__aeabi_fsub>
 800277e:	4603      	mov	r3, r0
 8002780:	4619      	mov	r1, r3
 8002782:	6838      	ldr	r0, [r7, #0]
 8002784:	f7fe face 	bl	8000d24 <__aeabi_fmul>
 8002788:	4603      	mov	r3, r0
 800278a:	603b      	str	r3, [r7, #0]
		speed += lower_lim;
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	6838      	ldr	r0, [r7, #0]
 8002790:	f7fe f9c0 	bl	8000b14 <__addsf3>
 8002794:	4603      	mov	r3, r0
 8002796:	603b      	str	r3, [r7, #0]
		speed *= (MAXSPEED - 1);
 8002798:	4952      	ldr	r1, [pc, #328]	; (80028e4 <velociraptor2_setmotorspeed+0x1c0>)
 800279a:	6838      	ldr	r0, [r7, #0]
 800279c:	f7fe fac2 	bl	8000d24 <__aeabi_fmul>
 80027a0:	4603      	mov	r3, r0
 80027a2:	603b      	str	r3, [r7, #0]

		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_3 : TIM_CHANNEL_2, (uint16_t) speed);
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d008      	beq.n	80027bc <velociraptor2_setmotorspeed+0x98>
 80027aa:	6838      	ldr	r0, [r7, #0]
 80027ac:	f7fe fc96 	bl	80010dc <__aeabi_f2uiz>
 80027b0:	4603      	mov	r3, r0
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38
 80027ba:	e015      	b.n	80027e8 <velociraptor2_setmotorspeed+0xc4>
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d109      	bne.n	80027d6 <velociraptor2_setmotorspeed+0xb2>
 80027c2:	6838      	ldr	r0, [r7, #0]
 80027c4:	f7fe fc8a 	bl	80010dc <__aeabi_f2uiz>
 80027c8:	4603      	mov	r3, r0
 80027ca:	b299      	uxth	r1, r3
 80027cc:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	460b      	mov	r3, r1
 80027d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80027d4:	e008      	b.n	80027e8 <velociraptor2_setmotorspeed+0xc4>
 80027d6:	6838      	ldr	r0, [r7, #0]
 80027d8:	f7fe fc80 	bl	80010dc <__aeabi_f2uiz>
 80027dc:	4603      	mov	r3, r0
 80027de:	b299      	uxth	r1, r3
 80027e0:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	460b      	mov	r3, r1
 80027e6:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_4 : TIM_CHANNEL_1, 0);
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d004      	beq.n	80027f8 <velociraptor2_setmotorspeed+0xd4>
 80027ee:	4b3e      	ldr	r3, [pc, #248]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2200      	movs	r2, #0
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_1 : TIM_CHANNEL_3, 0);
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_2 : TIM_CHANNEL_4, 0);
	}
}
 80027f6:	e06d      	b.n	80028d4 <velociraptor2_setmotorspeed+0x1b0>
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_4 : TIM_CHANNEL_1, 0);
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2200      	movs	r2, #0
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002800:	e068      	b.n	80028d4 <velociraptor2_setmotorspeed+0x1b0>
	else if (speed > 0.0f)
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	6838      	ldr	r0, [r7, #0]
 8002808:	f7fe fc48 	bl	800109c <__aeabi_fcmpgt>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d040      	beq.n	8002894 <velociraptor2_setmotorspeed+0x170>
		speed *= (1.0f - lower_lim);
 8002812:	68f9      	ldr	r1, [r7, #12]
 8002814:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002818:	f7fe f97a 	bl	8000b10 <__aeabi_fsub>
 800281c:	4603      	mov	r3, r0
 800281e:	4619      	mov	r1, r3
 8002820:	6838      	ldr	r0, [r7, #0]
 8002822:	f7fe fa7f 	bl	8000d24 <__aeabi_fmul>
 8002826:	4603      	mov	r3, r0
 8002828:	603b      	str	r3, [r7, #0]
		speed += lower_lim;
 800282a:	68f9      	ldr	r1, [r7, #12]
 800282c:	6838      	ldr	r0, [r7, #0]
 800282e:	f7fe f971 	bl	8000b14 <__addsf3>
 8002832:	4603      	mov	r3, r0
 8002834:	603b      	str	r3, [r7, #0]
		speed *= (MAXSPEED - 1);
 8002836:	492b      	ldr	r1, [pc, #172]	; (80028e4 <velociraptor2_setmotorspeed+0x1c0>)
 8002838:	6838      	ldr	r0, [r7, #0]
 800283a:	f7fe fa73 	bl	8000d24 <__aeabi_fmul>
 800283e:	4603      	mov	r3, r0
 8002840:	603b      	str	r3, [r7, #0]
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_4 : TIM_CHANNEL_1, (uint16_t) speed);
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d008      	beq.n	800285a <velociraptor2_setmotorspeed+0x136>
 8002848:	6838      	ldr	r0, [r7, #0]
 800284a:	f7fe fc47 	bl	80010dc <__aeabi_f2uiz>
 800284e:	4603      	mov	r3, r0
 8002850:	b29a      	uxth	r2, r3
 8002852:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	635a      	str	r2, [r3, #52]	; 0x34
 8002858:	e007      	b.n	800286a <velociraptor2_setmotorspeed+0x146>
 800285a:	6838      	ldr	r0, [r7, #0]
 800285c:	f7fe fc3e 	bl	80010dc <__aeabi_f2uiz>
 8002860:	4603      	mov	r3, r0
 8002862:	b29a      	uxth	r2, r3
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_3 : TIM_CHANNEL_2, 0);
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d004      	beq.n	800287a <velociraptor2_setmotorspeed+0x156>
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002878:	e02c      	b.n	80028d4 <velociraptor2_setmotorspeed+0x1b0>
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_3 : TIM_CHANNEL_2, 0);
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d104      	bne.n	800288a <velociraptor2_setmotorspeed+0x166>
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2300      	movs	r3, #0
 8002886:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002888:	e024      	b.n	80028d4 <velociraptor2_setmotorspeed+0x1b0>
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_3 : TIM_CHANNEL_2, 0);
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	2300      	movs	r3, #0
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002892:	e01f      	b.n	80028d4 <velociraptor2_setmotorspeed+0x1b0>
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_1 : TIM_CHANNEL_3, 0);
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d104      	bne.n	80028a4 <velociraptor2_setmotorspeed+0x180>
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2200      	movs	r2, #0
 80028a0:	635a      	str	r2, [r3, #52]	; 0x34
 80028a2:	e00b      	b.n	80028bc <velociraptor2_setmotorspeed+0x198>
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d004      	beq.n	80028b4 <velociraptor2_setmotorspeed+0x190>
 80028aa:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2300      	movs	r3, #0
 80028b0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80028b2:	e003      	b.n	80028bc <velociraptor2_setmotorspeed+0x198>
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	2300      	movs	r3, #0
 80028ba:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_2 : TIM_CHANNEL_4, 0);
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d104      	bne.n	80028cc <velociraptor2_setmotorspeed+0x1a8>
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80028ca:	e003      	b.n	80028d4 <velociraptor2_setmotorspeed+0x1b0>
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_2 : TIM_CHANNEL_4, 0);
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <velociraptor2_setmotorspeed+0x1c4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2200      	movs	r2, #0
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	bf800000 	.word	0xbf800000
 80028e0:	3ef8e38e 	.word	0x3ef8e38e
 80028e4:	4433c000 	.word	0x4433c000
 80028e8:	20000374 	.word	0x20000374

080028ec <velociraptor2_comms_init>:
uint8_t tx_buff[3] = "ok";
uint8_t err_tx_buff[4] = "err";
uint8_t rx_process_flag = 0;

void velociraptor2_comms_init(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
	rx_buff[10] = '\0';
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <velociraptor2_comms_init+0x14>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	729a      	strb	r2, [r3, #10]
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000510 	.word	0x20000510

08002904 <velociraptor2_comms_loop>:

void velociraptor2_comms_loop(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	switch(comms_state)
 8002908:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <velociraptor2_comms_loop+0x17c>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d01c      	beq.n	800294a <velociraptor2_comms_loop+0x46>
 8002910:	2b02      	cmp	r3, #2
 8002912:	f300 80b2 	bgt.w	8002a7a <velociraptor2_comms_loop+0x176>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <velociraptor2_comms_loop+0x1c>
 800291a:	2b01      	cmp	r3, #1
 800291c:	d009      	beq.n	8002932 <velociraptor2_comms_loop+0x2e>
		}

		comms_state = idle;
		break;
	}
}
 800291e:	e0ac      	b.n	8002a7a <velociraptor2_comms_loop+0x176>
		HAL_UART_Receive_DMA(&huart1, rx_buff, 10);
 8002920:	220a      	movs	r2, #10
 8002922:	4958      	ldr	r1, [pc, #352]	; (8002a84 <velociraptor2_comms_loop+0x180>)
 8002924:	4858      	ldr	r0, [pc, #352]	; (8002a88 <velociraptor2_comms_loop+0x184>)
 8002926:	f003 fdd5 	bl	80064d4 <HAL_UART_Receive_DMA>
		comms_state = receiving;
 800292a:	4b55      	ldr	r3, [pc, #340]	; (8002a80 <velociraptor2_comms_loop+0x17c>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
		break;
 8002930:	e0a3      	b.n	8002a7a <velociraptor2_comms_loop+0x176>
		if(rx_process_flag)
 8002932:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <velociraptor2_comms_loop+0x188>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 809e 	beq.w	8002a78 <velociraptor2_comms_loop+0x174>
			rx_process_flag = 0;
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <velociraptor2_comms_loop+0x188>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
			comms_state = processing;
 8002942:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <velociraptor2_comms_loop+0x17c>)
 8002944:	2202      	movs	r2, #2
 8002946:	701a      	strb	r2, [r3, #0]
		break;
 8002948:	e096      	b.n	8002a78 <velociraptor2_comms_loop+0x174>
		switch(rx_buff[0])
 800294a:	4b4e      	ldr	r3, [pc, #312]	; (8002a84 <velociraptor2_comms_loop+0x180>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	3b4d      	subs	r3, #77	; 0x4d
 8002950:	2b23      	cmp	r3, #35	; 0x23
 8002952:	f200 8087 	bhi.w	8002a64 <velociraptor2_comms_loop+0x160>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <velociraptor2_comms_loop+0x58>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	08002a35 	.word	0x08002a35
 8002960:	08002a65 	.word	0x08002a65
 8002964:	08002a65 	.word	0x08002a65
 8002968:	08002a65 	.word	0x08002a65
 800296c:	08002a65 	.word	0x08002a65
 8002970:	08002a65 	.word	0x08002a65
 8002974:	08002a65 	.word	0x08002a65
 8002978:	08002a65 	.word	0x08002a65
 800297c:	08002a65 	.word	0x08002a65
 8002980:	08002a65 	.word	0x08002a65
 8002984:	08002a65 	.word	0x08002a65
 8002988:	08002a65 	.word	0x08002a65
 800298c:	08002a65 	.word	0x08002a65
 8002990:	08002a65 	.word	0x08002a65
 8002994:	08002a65 	.word	0x08002a65
 8002998:	08002a65 	.word	0x08002a65
 800299c:	08002a65 	.word	0x08002a65
 80029a0:	08002a65 	.word	0x08002a65
 80029a4:	08002a65 	.word	0x08002a65
 80029a8:	08002a65 	.word	0x08002a65
 80029ac:	08002a65 	.word	0x08002a65
 80029b0:	08002a4d 	.word	0x08002a4d
 80029b4:	08002a65 	.word	0x08002a65
 80029b8:	08002a1d 	.word	0x08002a1d
 80029bc:	08002a65 	.word	0x08002a65
 80029c0:	08002a65 	.word	0x08002a65
 80029c4:	08002a65 	.word	0x08002a65
 80029c8:	08002a65 	.word	0x08002a65
 80029cc:	08002a05 	.word	0x08002a05
 80029d0:	08002a65 	.word	0x08002a65
 80029d4:	08002a65 	.word	0x08002a65
 80029d8:	08002a65 	.word	0x08002a65
 80029dc:	08002a65 	.word	0x08002a65
 80029e0:	08002a65 	.word	0x08002a65
 80029e4:	08002a65 	.word	0x08002a65
 80029e8:	080029ed 	.word	0x080029ed
			pid.kp = atoff((char *) &(rx_buff[1]));
 80029ec:	4828      	ldr	r0, [pc, #160]	; (8002a90 <velociraptor2_comms_loop+0x18c>)
 80029ee:	f004 fca5 	bl	800733c <atoff>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4a27      	ldr	r2, [pc, #156]	; (8002a94 <velociraptor2_comms_loop+0x190>)
 80029f6:	6113      	str	r3, [r2, #16]
			HAL_UART_Transmit_DMA(&huart1, tx_buff, 3);
 80029f8:	2203      	movs	r2, #3
 80029fa:	4927      	ldr	r1, [pc, #156]	; (8002a98 <velociraptor2_comms_loop+0x194>)
 80029fc:	4822      	ldr	r0, [pc, #136]	; (8002a88 <velociraptor2_comms_loop+0x184>)
 80029fe:	f003 fcf9 	bl	80063f4 <HAL_UART_Transmit_DMA>
			break;
 8002a02:	e035      	b.n	8002a70 <velociraptor2_comms_loop+0x16c>
			pid.ki = atoff((char *) &(rx_buff[1]));
 8002a04:	4822      	ldr	r0, [pc, #136]	; (8002a90 <velociraptor2_comms_loop+0x18c>)
 8002a06:	f004 fc99 	bl	800733c <atoff>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <velociraptor2_comms_loop+0x190>)
 8002a0e:	6153      	str	r3, [r2, #20]
			HAL_UART_Transmit_DMA(&huart1, tx_buff, 3);
 8002a10:	2203      	movs	r2, #3
 8002a12:	4921      	ldr	r1, [pc, #132]	; (8002a98 <velociraptor2_comms_loop+0x194>)
 8002a14:	481c      	ldr	r0, [pc, #112]	; (8002a88 <velociraptor2_comms_loop+0x184>)
 8002a16:	f003 fced 	bl	80063f4 <HAL_UART_Transmit_DMA>
			break;
 8002a1a:	e029      	b.n	8002a70 <velociraptor2_comms_loop+0x16c>
			pid.kd = atoff((char *) &(rx_buff[1]));
 8002a1c:	481c      	ldr	r0, [pc, #112]	; (8002a90 <velociraptor2_comms_loop+0x18c>)
 8002a1e:	f004 fc8d 	bl	800733c <atoff>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <velociraptor2_comms_loop+0x190>)
 8002a26:	6193      	str	r3, [r2, #24]
			HAL_UART_Transmit_DMA(&huart1, tx_buff, 3);
 8002a28:	2203      	movs	r2, #3
 8002a2a:	491b      	ldr	r1, [pc, #108]	; (8002a98 <velociraptor2_comms_loop+0x194>)
 8002a2c:	4816      	ldr	r0, [pc, #88]	; (8002a88 <velociraptor2_comms_loop+0x184>)
 8002a2e:	f003 fce1 	bl	80063f4 <HAL_UART_Transmit_DMA>
			break;
 8002a32:	e01d      	b.n	8002a70 <velociraptor2_comms_loop+0x16c>
			speed.max_speed = atoff((char *) &(rx_buff[1]));
 8002a34:	4816      	ldr	r0, [pc, #88]	; (8002a90 <velociraptor2_comms_loop+0x18c>)
 8002a36:	f004 fc81 	bl	800733c <atoff>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4a17      	ldr	r2, [pc, #92]	; (8002a9c <velociraptor2_comms_loop+0x198>)
 8002a3e:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart1, tx_buff, 3);
 8002a40:	2203      	movs	r2, #3
 8002a42:	4915      	ldr	r1, [pc, #84]	; (8002a98 <velociraptor2_comms_loop+0x194>)
 8002a44:	4810      	ldr	r0, [pc, #64]	; (8002a88 <velociraptor2_comms_loop+0x184>)
 8002a46:	f003 fcd5 	bl	80063f4 <HAL_UART_Transmit_DMA>
			break;
 8002a4a:	e011      	b.n	8002a70 <velociraptor2_comms_loop+0x16c>
			speed.brake_factor = atoff((char *) &(rx_buff[1]));
 8002a4c:	4810      	ldr	r0, [pc, #64]	; (8002a90 <velociraptor2_comms_loop+0x18c>)
 8002a4e:	f004 fc75 	bl	800733c <atoff>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4a11      	ldr	r2, [pc, #68]	; (8002a9c <velociraptor2_comms_loop+0x198>)
 8002a56:	6113      	str	r3, [r2, #16]
			HAL_UART_Transmit_DMA(&huart1, tx_buff, 3);
 8002a58:	2203      	movs	r2, #3
 8002a5a:	490f      	ldr	r1, [pc, #60]	; (8002a98 <velociraptor2_comms_loop+0x194>)
 8002a5c:	480a      	ldr	r0, [pc, #40]	; (8002a88 <velociraptor2_comms_loop+0x184>)
 8002a5e:	f003 fcc9 	bl	80063f4 <HAL_UART_Transmit_DMA>
			break;
 8002a62:	e005      	b.n	8002a70 <velociraptor2_comms_loop+0x16c>
			HAL_UART_Transmit_DMA(&huart1, err_tx_buff, 4);
 8002a64:	2204      	movs	r2, #4
 8002a66:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <velociraptor2_comms_loop+0x19c>)
 8002a68:	4807      	ldr	r0, [pc, #28]	; (8002a88 <velociraptor2_comms_loop+0x184>)
 8002a6a:	f003 fcc3 	bl	80063f4 <HAL_UART_Transmit_DMA>
			break;
 8002a6e:	bf00      	nop
		comms_state = idle;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <velociraptor2_comms_loop+0x17c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
		break;
 8002a76:	e000      	b.n	8002a7a <velociraptor2_comms_loop+0x176>
		break;
 8002a78:	bf00      	nop
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000050c 	.word	0x2000050c
 8002a84:	20000510 	.word	0x20000510
 8002a88:	200003bc 	.word	0x200003bc
 8002a8c:	2000051b 	.word	0x2000051b
 8002a90:	20000511 	.word	0x20000511
 8002a94:	200004d4 	.word	0x200004d4
 8002a98:	20000004 	.word	0x20000004
 8002a9c:	200004f0 	.word	0x200004f0
 8002aa0:	20000008 	.word	0x20000008

08002aa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002aa4:	f7ff fb38 	bl	8002118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aa8:	480b      	ldr	r0, [pc, #44]	; (8002ad8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002aaa:	490c      	ldr	r1, [pc, #48]	; (8002adc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002aac:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab0:	e002      	b.n	8002ab8 <LoopCopyDataInit>

08002ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ab6:	3304      	adds	r3, #4

08002ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002abc:	d3f9      	bcc.n	8002ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002abe:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ac0:	4c09      	ldr	r4, [pc, #36]	; (8002ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac4:	e001      	b.n	8002aca <LoopFillZerobss>

08002ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac8:	3204      	adds	r2, #4

08002aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002acc:	d3fb      	bcc.n	8002ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ace:	f005 fb89 	bl	80081e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ad2:	f7fe fc6f 	bl	80013b4 <main>
  bx lr
 8002ad6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002adc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002ae0:	0800a42c 	.word	0x0800a42c
  ldr r2, =_sbss
 8002ae4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002ae8:	2000066c 	.word	0x2000066c

08002aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002aec:	e7fe      	b.n	8002aec <ADC1_2_IRQHandler>
	...

08002af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_Init+0x28>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <HAL_Init+0x28>)
 8002afa:	f043 0310 	orr.w	r3, r3, #16
 8002afe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b00:	2003      	movs	r0, #3
 8002b02:	f000 fc6d 	bl	80033e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b06:	200f      	movs	r0, #15
 8002b08:	f000 f808 	bl	8002b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b0c:	f7fe ffa6 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40022000 	.word	0x40022000

08002b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_InitTick+0x54>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_InitTick+0x58>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fc85 	bl	800344a <HAL_SYSTICK_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00e      	b.n	8002b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b0f      	cmp	r3, #15
 8002b4e:	d80a      	bhi.n	8002b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b50:	2200      	movs	r2, #0
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b58:	f000 fc4d 	bl	80033f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b5c:	4a06      	ldr	r2, [pc, #24]	; (8002b78 <HAL_InitTick+0x5c>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000010 	.word	0x20000010
 8002b78:	2000000c 	.word	0x2000000c

08002b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_IncTick+0x1c>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_IncTick+0x20>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4a03      	ldr	r2, [pc, #12]	; (8002b9c <HAL_IncTick+0x20>)
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	20000010 	.word	0x20000010
 8002b9c:	2000051c 	.word	0x2000051c

08002ba0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba4:	4b02      	ldr	r3, [pc, #8]	; (8002bb0 <HAL_GetTick+0x10>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	2000051c 	.word	0x2000051c

08002bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7ff fff0 	bl	8002ba0 <HAL_GetTick>
 8002bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bcc:	d005      	beq.n	8002bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_Delay+0x44>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bda:	bf00      	nop
 8002bdc:	f7ff ffe0 	bl	8002ba0 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d8f7      	bhi.n	8002bdc <HAL_Delay+0x28>
  {
  }
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000010 	.word	0x20000010

08002bfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0be      	b.n	8002d9c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe ff40 	bl	8001ac0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fabf 	bl	80031c4 <ADC_ConversionStop_Disable>
 8002c46:	4603      	mov	r3, r0
 8002c48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 8099 	bne.w	8002d8a <HAL_ADC_Init+0x18e>
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 8095 	bne.w	8002d8a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c68:	f023 0302 	bic.w	r3, r3, #2
 8002c6c:	f043 0202 	orr.w	r2, r3, #2
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7b1b      	ldrb	r3, [r3, #12]
 8002c82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c94:	d003      	beq.n	8002c9e <HAL_ADC_Init+0xa2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_ADC_Init+0xa8>
 8002c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca2:	e000      	b.n	8002ca6 <HAL_ADC_Init+0xaa>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7d1b      	ldrb	r3, [r3, #20]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d119      	bne.n	8002ce8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	7b1b      	ldrb	r3, [r3, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	035a      	lsls	r2, r3, #13
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	e00b      	b.n	8002ce8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_ADC_Init+0x1a8>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d18:	d003      	beq.n	8002d22 <HAL_ADC_Init+0x126>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d104      	bne.n	8002d2c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	051b      	lsls	r3, r3, #20
 8002d2a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <HAL_ADC_Init+0x1ac>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d10b      	bne.n	8002d68 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d66:	e018      	b.n	8002d9a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	f023 0312 	bic.w	r3, r3, #18
 8002d70:	f043 0210 	orr.w	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f043 0201 	orr.w	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d88:	e007      	b.n	8002d9a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	f043 0210 	orr.w	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	ffe1f7fd 	.word	0xffe1f7fd
 8002da8:	ff1f0efe 	.word	0xff1f0efe

08002dac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_Start+0x1a>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e098      	b.n	8002ef8 <HAL_ADC_Start+0x14c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f99e 	bl	8003110 <ADC_Enable>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 8087 	bne.w	8002eee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a41      	ldr	r2, [pc, #260]	; (8002f00 <HAL_ADC_Start+0x154>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d105      	bne.n	8002e0a <HAL_ADC_Start+0x5e>
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_ADC_Start+0x158>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d115      	bne.n	8002e36 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d026      	beq.n	8002e72 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e34:	e01d      	b.n	8002e72 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2f      	ldr	r2, [pc, #188]	; (8002f04 <HAL_ADC_Start+0x158>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d004      	beq.n	8002e56 <HAL_ADC_Start+0xaa>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a2b      	ldr	r2, [pc, #172]	; (8002f00 <HAL_ADC_Start+0x154>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10d      	bne.n	8002e72 <HAL_ADC_Start+0xc6>
 8002e56:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_ADC_Start+0x158>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	f023 0206 	bic.w	r2, r3, #6
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e8a:	e002      	b.n	8002e92 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f06f 0202 	mvn.w	r2, #2
 8002ea2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002eae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002eb2:	d113      	bne.n	8002edc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002eb8:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_ADC_Start+0x154>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d105      	bne.n	8002eca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_ADC_Start+0x158>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d108      	bne.n	8002edc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	e00c      	b.n	8002ef6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	e003      	b.n	8002ef6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40012800 	.word	0x40012800
 8002f04:	40012400 	.word	0x40012400

08002f08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x20>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e0dc      	b.n	80030fa <HAL_ADC_ConfigChannel+0x1da>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b06      	cmp	r3, #6
 8002f4e:	d81c      	bhi.n	8002f8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	3b05      	subs	r3, #5
 8002f62:	221f      	movs	r2, #31
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	4019      	ands	r1, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b05      	subs	r3, #5
 8002f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34
 8002f88:	e03c      	b.n	8003004 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d81c      	bhi.n	8002fcc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3b23      	subs	r3, #35	; 0x23
 8002fa4:	221f      	movs	r2, #31
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	4019      	ands	r1, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	3b23      	subs	r3, #35	; 0x23
 8002fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002fca:	e01b      	b.n	8003004 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b41      	subs	r3, #65	; 0x41
 8002fde:	221f      	movs	r2, #31
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	4019      	ands	r1, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b41      	subs	r3, #65	; 0x41
 8002ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b09      	cmp	r3, #9
 800300a:	d91c      	bls.n	8003046 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	3b1e      	subs	r3, #30
 800301e:	2207      	movs	r2, #7
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	4019      	ands	r1, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6898      	ldr	r0, [r3, #8]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	3b1e      	subs	r3, #30
 8003038:	fa00 f203 	lsl.w	r2, r0, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	e019      	b.n	800307a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6919      	ldr	r1, [r3, #16]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	2207      	movs	r2, #7
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	4019      	ands	r1, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6898      	ldr	r0, [r3, #8]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	fa00 f203 	lsl.w	r2, r0, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b10      	cmp	r3, #16
 8003080:	d003      	beq.n	800308a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003086:	2b11      	cmp	r3, #17
 8003088:	d132      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <HAL_ADC_ConfigChannel+0x1e4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d125      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d126      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d11a      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ba:	4b13      	ldr	r3, [pc, #76]	; (8003108 <HAL_ADC_ConfigChannel+0x1e8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a13      	ldr	r2, [pc, #76]	; (800310c <HAL_ADC_ConfigChannel+0x1ec>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	0c9a      	lsrs	r2, r3, #18
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030d0:	e002      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f9      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x1b2>
 80030de:	e007      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	40012400 	.word	0x40012400
 8003108:	20000000 	.word	0x20000000
 800310c:	431bde83 	.word	0x431bde83

08003110 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b01      	cmp	r3, #1
 800312c:	d040      	beq.n	80031b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <ADC_Enable+0xac>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <ADC_Enable+0xb0>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	0c9b      	lsrs	r3, r3, #18
 800314a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800314c:	e002      	b.n	8003154 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3b01      	subs	r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f9      	bne.n	800314e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800315a:	f7ff fd21 	bl	8002ba0 <HAL_GetTick>
 800315e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003160:	e01f      	b.n	80031a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003162:	f7ff fd1d 	bl	8002ba0 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d918      	bls.n	80031a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b01      	cmp	r3, #1
 800317c:	d011      	beq.n	80031a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	f043 0210 	orr.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e007      	b.n	80031b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d1d8      	bne.n	8003162 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000000 	.word	0x20000000
 80031c0:	431bde83 	.word	0x431bde83

080031c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d12e      	bne.n	800323c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031ee:	f7ff fcd7 	bl	8002ba0 <HAL_GetTick>
 80031f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031f4:	e01b      	b.n	800322e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031f6:	f7ff fcd3 	bl	8002ba0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d914      	bls.n	800322e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d10d      	bne.n	800322e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	f043 0210 	orr.w	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	f043 0201 	orr.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e007      	b.n	800323e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d0dc      	beq.n	80031f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003264:	4013      	ands	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327a:	4a04      	ldr	r2, [pc, #16]	; (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	60d3      	str	r3, [r2, #12]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	f003 0307 	and.w	r3, r3, #7
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	db0b      	blt.n	80032d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	4906      	ldr	r1, [pc, #24]	; (80032e0 <__NVIC_EnableIRQ+0x34>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2001      	movs	r0, #1
 80032ce:	fa00 f202 	lsl.w	r2, r0, r2
 80032d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	e000e100 	.word	0xe000e100

080032e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	db0a      	blt.n	800330e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	490c      	ldr	r1, [pc, #48]	; (8003330 <__NVIC_SetPriority+0x4c>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	0112      	lsls	r2, r2, #4
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	440b      	add	r3, r1
 8003308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800330c:	e00a      	b.n	8003324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4908      	ldr	r1, [pc, #32]	; (8003334 <__NVIC_SetPriority+0x50>)
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	3b04      	subs	r3, #4
 800331c:	0112      	lsls	r2, r2, #4
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	440b      	add	r3, r1
 8003322:	761a      	strb	r2, [r3, #24]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f1c3 0307 	rsb	r3, r3, #7
 8003352:	2b04      	cmp	r3, #4
 8003354:	bf28      	it	cs
 8003356:	2304      	movcs	r3, #4
 8003358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3304      	adds	r3, #4
 800335e:	2b06      	cmp	r3, #6
 8003360:	d902      	bls.n	8003368 <NVIC_EncodePriority+0x30>
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3b03      	subs	r3, #3
 8003366:	e000      	b.n	800336a <NVIC_EncodePriority+0x32>
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800336c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43da      	mvns	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	401a      	ands	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	43d9      	mvns	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003390:	4313      	orrs	r3, r2
         );
}
 8003392:	4618      	mov	r0, r3
 8003394:	3724      	adds	r7, #36	; 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ac:	d301      	bcc.n	80033b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00f      	b.n	80033d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <SysTick_Config+0x40>)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ba:	210f      	movs	r1, #15
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c0:	f7ff ff90 	bl	80032e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <SysTick_Config+0x40>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ca:	4b04      	ldr	r3, [pc, #16]	; (80033dc <SysTick_Config+0x40>)
 80033cc:	2207      	movs	r2, #7
 80033ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	e000e010 	.word	0xe000e010

080033e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff ff2d 	bl	8003248 <__NVIC_SetPriorityGrouping>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003408:	f7ff ff42 	bl	8003290 <__NVIC_GetPriorityGrouping>
 800340c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	6978      	ldr	r0, [r7, #20]
 8003414:	f7ff ff90 	bl	8003338 <NVIC_EncodePriority>
 8003418:	4602      	mov	r2, r0
 800341a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff5f 	bl	80032e4 <__NVIC_SetPriority>
}
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff35 	bl	80032ac <__NVIC_EnableIRQ>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ffa2 	bl	800339c <SysTick_Config>
 8003458:	4603      	mov	r3, r0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e043      	b.n	8003502 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <HAL_DMA_Init+0xa8>)
 8003482:	4413      	add	r3, r2
 8003484:	4a22      	ldr	r2, [pc, #136]	; (8003510 <HAL_DMA_Init+0xac>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	009a      	lsls	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <HAL_DMA_Init+0xb0>)
 8003496:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80034ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80034b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	bffdfff8 	.word	0xbffdfff8
 8003510:	cccccccd 	.word	0xcccccccd
 8003514:	40020000 	.word	0x40020000

08003518 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_DMA_Start_IT+0x20>
 8003534:	2302      	movs	r3, #2
 8003536:	e04b      	b.n	80035d0 <HAL_DMA_Start_IT+0xb8>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d13a      	bne.n	80035c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f9eb 	bl	800394c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 020e 	orr.w	r2, r2, #14
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e00f      	b.n	80035b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0204 	bic.w	r2, r2, #4
 800359e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 020a 	orr.w	r2, r2, #10
 80035ae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e005      	b.n	80035ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
 80035cc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d008      	beq.n	8003602 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2204      	movs	r2, #4
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e020      	b.n	8003644 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 020e 	bic.w	r2, r2, #14
 8003610:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362a:	2101      	movs	r1, #1
 800362c:	fa01 f202 	lsl.w	r2, r1, r2
 8003630:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
	...

08003650 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d005      	beq.n	8003674 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2204      	movs	r2, #4
 800366c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
 8003672:	e051      	b.n	8003718 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 020e 	bic.w	r2, r2, #14
 8003682:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a22      	ldr	r2, [pc, #136]	; (8003724 <HAL_DMA_Abort_IT+0xd4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d029      	beq.n	80036f2 <HAL_DMA_Abort_IT+0xa2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a21      	ldr	r2, [pc, #132]	; (8003728 <HAL_DMA_Abort_IT+0xd8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d022      	beq.n	80036ee <HAL_DMA_Abort_IT+0x9e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1f      	ldr	r2, [pc, #124]	; (800372c <HAL_DMA_Abort_IT+0xdc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d01a      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x98>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1e      	ldr	r2, [pc, #120]	; (8003730 <HAL_DMA_Abort_IT+0xe0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d012      	beq.n	80036e2 <HAL_DMA_Abort_IT+0x92>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1c      	ldr	r2, [pc, #112]	; (8003734 <HAL_DMA_Abort_IT+0xe4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00a      	beq.n	80036dc <HAL_DMA_Abort_IT+0x8c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1b      	ldr	r2, [pc, #108]	; (8003738 <HAL_DMA_Abort_IT+0xe8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d102      	bne.n	80036d6 <HAL_DMA_Abort_IT+0x86>
 80036d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036d4:	e00e      	b.n	80036f4 <HAL_DMA_Abort_IT+0xa4>
 80036d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036da:	e00b      	b.n	80036f4 <HAL_DMA_Abort_IT+0xa4>
 80036dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e0:	e008      	b.n	80036f4 <HAL_DMA_Abort_IT+0xa4>
 80036e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e6:	e005      	b.n	80036f4 <HAL_DMA_Abort_IT+0xa4>
 80036e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ec:	e002      	b.n	80036f4 <HAL_DMA_Abort_IT+0xa4>
 80036ee:	2310      	movs	r3, #16
 80036f0:	e000      	b.n	80036f4 <HAL_DMA_Abort_IT+0xa4>
 80036f2:	2301      	movs	r3, #1
 80036f4:	4a11      	ldr	r2, [pc, #68]	; (800373c <HAL_DMA_Abort_IT+0xec>)
 80036f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
    } 
  }
  return status;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40020008 	.word	0x40020008
 8003728:	4002001c 	.word	0x4002001c
 800372c:	40020030 	.word	0x40020030
 8003730:	40020044 	.word	0x40020044
 8003734:	40020058 	.word	0x40020058
 8003738:	4002006c 	.word	0x4002006c
 800373c:	40020000 	.word	0x40020000

08003740 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	2204      	movs	r2, #4
 800375e:	409a      	lsls	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d04f      	beq.n	8003808 <HAL_DMA_IRQHandler+0xc8>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d04a      	beq.n	8003808 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d107      	bne.n	8003790 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0204 	bic.w	r2, r2, #4
 800378e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a66      	ldr	r2, [pc, #408]	; (8003930 <HAL_DMA_IRQHandler+0x1f0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d029      	beq.n	80037ee <HAL_DMA_IRQHandler+0xae>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a65      	ldr	r2, [pc, #404]	; (8003934 <HAL_DMA_IRQHandler+0x1f4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_IRQHandler+0xaa>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a63      	ldr	r2, [pc, #396]	; (8003938 <HAL_DMA_IRQHandler+0x1f8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01a      	beq.n	80037e4 <HAL_DMA_IRQHandler+0xa4>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a62      	ldr	r2, [pc, #392]	; (800393c <HAL_DMA_IRQHandler+0x1fc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d012      	beq.n	80037de <HAL_DMA_IRQHandler+0x9e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a60      	ldr	r2, [pc, #384]	; (8003940 <HAL_DMA_IRQHandler+0x200>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00a      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x98>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a5f      	ldr	r2, [pc, #380]	; (8003944 <HAL_DMA_IRQHandler+0x204>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d102      	bne.n	80037d2 <HAL_DMA_IRQHandler+0x92>
 80037cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037d0:	e00e      	b.n	80037f0 <HAL_DMA_IRQHandler+0xb0>
 80037d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037d6:	e00b      	b.n	80037f0 <HAL_DMA_IRQHandler+0xb0>
 80037d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037dc:	e008      	b.n	80037f0 <HAL_DMA_IRQHandler+0xb0>
 80037de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037e2:	e005      	b.n	80037f0 <HAL_DMA_IRQHandler+0xb0>
 80037e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e8:	e002      	b.n	80037f0 <HAL_DMA_IRQHandler+0xb0>
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	e000      	b.n	80037f0 <HAL_DMA_IRQHandler+0xb0>
 80037ee:	2304      	movs	r3, #4
 80037f0:	4a55      	ldr	r2, [pc, #340]	; (8003948 <HAL_DMA_IRQHandler+0x208>)
 80037f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8094 	beq.w	8003926 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003806:	e08e      	b.n	8003926 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2202      	movs	r2, #2
 800380e:	409a      	lsls	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d056      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x186>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d051      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 020a 	bic.w	r2, r2, #10
 800383e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a38      	ldr	r2, [pc, #224]	; (8003930 <HAL_DMA_IRQHandler+0x1f0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d029      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x166>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a37      	ldr	r2, [pc, #220]	; (8003934 <HAL_DMA_IRQHandler+0x1f4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d022      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x162>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a35      	ldr	r2, [pc, #212]	; (8003938 <HAL_DMA_IRQHandler+0x1f8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01a      	beq.n	800389c <HAL_DMA_IRQHandler+0x15c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a34      	ldr	r2, [pc, #208]	; (800393c <HAL_DMA_IRQHandler+0x1fc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d012      	beq.n	8003896 <HAL_DMA_IRQHandler+0x156>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a32      	ldr	r2, [pc, #200]	; (8003940 <HAL_DMA_IRQHandler+0x200>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00a      	beq.n	8003890 <HAL_DMA_IRQHandler+0x150>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a31      	ldr	r2, [pc, #196]	; (8003944 <HAL_DMA_IRQHandler+0x204>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d102      	bne.n	800388a <HAL_DMA_IRQHandler+0x14a>
 8003884:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003888:	e00e      	b.n	80038a8 <HAL_DMA_IRQHandler+0x168>
 800388a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800388e:	e00b      	b.n	80038a8 <HAL_DMA_IRQHandler+0x168>
 8003890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003894:	e008      	b.n	80038a8 <HAL_DMA_IRQHandler+0x168>
 8003896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800389a:	e005      	b.n	80038a8 <HAL_DMA_IRQHandler+0x168>
 800389c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038a0:	e002      	b.n	80038a8 <HAL_DMA_IRQHandler+0x168>
 80038a2:	2320      	movs	r3, #32
 80038a4:	e000      	b.n	80038a8 <HAL_DMA_IRQHandler+0x168>
 80038a6:	2302      	movs	r3, #2
 80038a8:	4a27      	ldr	r2, [pc, #156]	; (8003948 <HAL_DMA_IRQHandler+0x208>)
 80038aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d034      	beq.n	8003926 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038c4:	e02f      	b.n	8003926 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2208      	movs	r2, #8
 80038cc:	409a      	lsls	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d028      	beq.n	8003928 <HAL_DMA_IRQHandler+0x1e8>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d023      	beq.n	8003928 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 020e 	bic.w	r2, r2, #14
 80038ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	2101      	movs	r1, #1
 80038fa:	fa01 f202 	lsl.w	r2, r1, r2
 80038fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
    }
  }
  return;
 8003926:	bf00      	nop
 8003928:	bf00      	nop
}
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40020008 	.word	0x40020008
 8003934:	4002001c 	.word	0x4002001c
 8003938:	40020030 	.word	0x40020030
 800393c:	40020044 	.word	0x40020044
 8003940:	40020058 	.word	0x40020058
 8003944:	4002006c 	.word	0x4002006c
 8003948:	40020000 	.word	0x40020000

0800394c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	2101      	movs	r1, #1
 8003964:	fa01 f202 	lsl.w	r2, r1, r2
 8003968:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b10      	cmp	r3, #16
 8003978:	d108      	bne.n	800398c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800398a:	e007      	b.n	800399c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b08b      	sub	sp, #44	; 0x2c
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039b6:	2300      	movs	r3, #0
 80039b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ba:	e169      	b.n	8003c90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039bc:	2201      	movs	r2, #1
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	f040 8158 	bne.w	8003c8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4a9a      	ldr	r2, [pc, #616]	; (8003c48 <HAL_GPIO_Init+0x2a0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d05e      	beq.n	8003aa2 <HAL_GPIO_Init+0xfa>
 80039e4:	4a98      	ldr	r2, [pc, #608]	; (8003c48 <HAL_GPIO_Init+0x2a0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d875      	bhi.n	8003ad6 <HAL_GPIO_Init+0x12e>
 80039ea:	4a98      	ldr	r2, [pc, #608]	; (8003c4c <HAL_GPIO_Init+0x2a4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d058      	beq.n	8003aa2 <HAL_GPIO_Init+0xfa>
 80039f0:	4a96      	ldr	r2, [pc, #600]	; (8003c4c <HAL_GPIO_Init+0x2a4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d86f      	bhi.n	8003ad6 <HAL_GPIO_Init+0x12e>
 80039f6:	4a96      	ldr	r2, [pc, #600]	; (8003c50 <HAL_GPIO_Init+0x2a8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d052      	beq.n	8003aa2 <HAL_GPIO_Init+0xfa>
 80039fc:	4a94      	ldr	r2, [pc, #592]	; (8003c50 <HAL_GPIO_Init+0x2a8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d869      	bhi.n	8003ad6 <HAL_GPIO_Init+0x12e>
 8003a02:	4a94      	ldr	r2, [pc, #592]	; (8003c54 <HAL_GPIO_Init+0x2ac>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d04c      	beq.n	8003aa2 <HAL_GPIO_Init+0xfa>
 8003a08:	4a92      	ldr	r2, [pc, #584]	; (8003c54 <HAL_GPIO_Init+0x2ac>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d863      	bhi.n	8003ad6 <HAL_GPIO_Init+0x12e>
 8003a0e:	4a92      	ldr	r2, [pc, #584]	; (8003c58 <HAL_GPIO_Init+0x2b0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d046      	beq.n	8003aa2 <HAL_GPIO_Init+0xfa>
 8003a14:	4a90      	ldr	r2, [pc, #576]	; (8003c58 <HAL_GPIO_Init+0x2b0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d85d      	bhi.n	8003ad6 <HAL_GPIO_Init+0x12e>
 8003a1a:	2b12      	cmp	r3, #18
 8003a1c:	d82a      	bhi.n	8003a74 <HAL_GPIO_Init+0xcc>
 8003a1e:	2b12      	cmp	r3, #18
 8003a20:	d859      	bhi.n	8003ad6 <HAL_GPIO_Init+0x12e>
 8003a22:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <HAL_GPIO_Init+0x80>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003aa3 	.word	0x08003aa3
 8003a2c:	08003a7d 	.word	0x08003a7d
 8003a30:	08003a8f 	.word	0x08003a8f
 8003a34:	08003ad1 	.word	0x08003ad1
 8003a38:	08003ad7 	.word	0x08003ad7
 8003a3c:	08003ad7 	.word	0x08003ad7
 8003a40:	08003ad7 	.word	0x08003ad7
 8003a44:	08003ad7 	.word	0x08003ad7
 8003a48:	08003ad7 	.word	0x08003ad7
 8003a4c:	08003ad7 	.word	0x08003ad7
 8003a50:	08003ad7 	.word	0x08003ad7
 8003a54:	08003ad7 	.word	0x08003ad7
 8003a58:	08003ad7 	.word	0x08003ad7
 8003a5c:	08003ad7 	.word	0x08003ad7
 8003a60:	08003ad7 	.word	0x08003ad7
 8003a64:	08003ad7 	.word	0x08003ad7
 8003a68:	08003ad7 	.word	0x08003ad7
 8003a6c:	08003a85 	.word	0x08003a85
 8003a70:	08003a99 	.word	0x08003a99
 8003a74:	4a79      	ldr	r2, [pc, #484]	; (8003c5c <HAL_GPIO_Init+0x2b4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a7a:	e02c      	b.n	8003ad6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	623b      	str	r3, [r7, #32]
          break;
 8003a82:	e029      	b.n	8003ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	623b      	str	r3, [r7, #32]
          break;
 8003a8c:	e024      	b.n	8003ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	3308      	adds	r3, #8
 8003a94:	623b      	str	r3, [r7, #32]
          break;
 8003a96:	e01f      	b.n	8003ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	623b      	str	r3, [r7, #32]
          break;
 8003aa0:	e01a      	b.n	8003ad8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003aaa:	2304      	movs	r3, #4
 8003aac:	623b      	str	r3, [r7, #32]
          break;
 8003aae:	e013      	b.n	8003ad8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ab8:	2308      	movs	r3, #8
 8003aba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	611a      	str	r2, [r3, #16]
          break;
 8003ac2:	e009      	b.n	8003ad8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	615a      	str	r2, [r3, #20]
          break;
 8003ace:	e003      	b.n	8003ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	623b      	str	r3, [r7, #32]
          break;
 8003ad4:	e000      	b.n	8003ad8 <HAL_GPIO_Init+0x130>
          break;
 8003ad6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2bff      	cmp	r3, #255	; 0xff
 8003adc:	d801      	bhi.n	8003ae2 <HAL_GPIO_Init+0x13a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	e001      	b.n	8003ae6 <HAL_GPIO_Init+0x13e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2bff      	cmp	r3, #255	; 0xff
 8003aec:	d802      	bhi.n	8003af4 <HAL_GPIO_Init+0x14c>
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	e002      	b.n	8003afa <HAL_GPIO_Init+0x152>
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	3b08      	subs	r3, #8
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	210f      	movs	r1, #15
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	6a39      	ldr	r1, [r7, #32]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	431a      	orrs	r2, r3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80b1 	beq.w	8003c8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b28:	4b4d      	ldr	r3, [pc, #308]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	4a4c      	ldr	r2, [pc, #304]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6193      	str	r3, [r2, #24]
 8003b34:	4b4a      	ldr	r3, [pc, #296]	; (8003c60 <HAL_GPIO_Init+0x2b8>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b40:	4a48      	ldr	r2, [pc, #288]	; (8003c64 <HAL_GPIO_Init+0x2bc>)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	3302      	adds	r3, #2
 8003b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	220f      	movs	r2, #15
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4013      	ands	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a40      	ldr	r2, [pc, #256]	; (8003c68 <HAL_GPIO_Init+0x2c0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <HAL_GPIO_Init+0x1ec>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3f      	ldr	r2, [pc, #252]	; (8003c6c <HAL_GPIO_Init+0x2c4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00d      	beq.n	8003b90 <HAL_GPIO_Init+0x1e8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a3e      	ldr	r2, [pc, #248]	; (8003c70 <HAL_GPIO_Init+0x2c8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <HAL_GPIO_Init+0x1e4>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a3d      	ldr	r2, [pc, #244]	; (8003c74 <HAL_GPIO_Init+0x2cc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_GPIO_Init+0x1e0>
 8003b84:	2303      	movs	r3, #3
 8003b86:	e006      	b.n	8003b96 <HAL_GPIO_Init+0x1ee>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	e004      	b.n	8003b96 <HAL_GPIO_Init+0x1ee>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e002      	b.n	8003b96 <HAL_GPIO_Init+0x1ee>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <HAL_GPIO_Init+0x1ee>
 8003b94:	2300      	movs	r3, #0
 8003b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b98:	f002 0203 	and.w	r2, r2, #3
 8003b9c:	0092      	lsls	r2, r2, #2
 8003b9e:	4093      	lsls	r3, r2
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ba6:	492f      	ldr	r1, [pc, #188]	; (8003c64 <HAL_GPIO_Init+0x2bc>)
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	3302      	adds	r3, #2
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d006      	beq.n	8003bce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bc0:	4b2d      	ldr	r3, [pc, #180]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	492c      	ldr	r1, [pc, #176]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	608b      	str	r3, [r1, #8]
 8003bcc:	e006      	b.n	8003bdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bce:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	4928      	ldr	r1, [pc, #160]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d006      	beq.n	8003bf6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003be8:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	4922      	ldr	r1, [pc, #136]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60cb      	str	r3, [r1, #12]
 8003bf4:	e006      	b.n	8003c04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	491e      	ldr	r1, [pc, #120]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d006      	beq.n	8003c1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	4918      	ldr	r1, [pc, #96]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
 8003c1c:	e006      	b.n	8003c2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c1e:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	4914      	ldr	r1, [pc, #80]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d021      	beq.n	8003c7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	490e      	ldr	r1, [pc, #56]	; (8003c78 <HAL_GPIO_Init+0x2d0>)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
 8003c44:	e021      	b.n	8003c8a <HAL_GPIO_Init+0x2e2>
 8003c46:	bf00      	nop
 8003c48:	10320000 	.word	0x10320000
 8003c4c:	10310000 	.word	0x10310000
 8003c50:	10220000 	.word	0x10220000
 8003c54:	10210000 	.word	0x10210000
 8003c58:	10120000 	.word	0x10120000
 8003c5c:	10110000 	.word	0x10110000
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40010000 	.word	0x40010000
 8003c68:	40010800 	.word	0x40010800
 8003c6c:	40010c00 	.word	0x40010c00
 8003c70:	40011000 	.word	0x40011000
 8003c74:	40011400 	.word	0x40011400
 8003c78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_GPIO_Init+0x304>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	4909      	ldr	r1, [pc, #36]	; (8003cac <HAL_GPIO_Init+0x304>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f47f ae8e 	bne.w	80039bc <HAL_GPIO_Init+0x14>
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	372c      	adds	r7, #44	; 0x2c
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	40010400 	.word	0x40010400

08003cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	887b      	ldrh	r3, [r7, #2]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e001      	b.n	8003cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	807b      	strh	r3, [r7, #2]
 8003cea:	4613      	mov	r3, r2
 8003cec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cee:	787b      	ldrb	r3, [r7, #1]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cf4:	887a      	ldrh	r2, [r7, #2]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003cfa:	e003      	b.n	8003d04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	041a      	lsls	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	611a      	str	r2, [r3, #16]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr
	...

08003d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d26:	4a05      	ldr	r2, [pc, #20]	; (8003d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f806 	bl	8003d40 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40010400 	.word	0x40010400

08003d40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e12b      	b.n	8003fbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fd fedc 	bl	8001b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2224      	movs	r2, #36	; 0x24
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003db6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003db8:	f000 fcda 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8003dbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	4a81      	ldr	r2, [pc, #516]	; (8003fc8 <HAL_I2C_Init+0x274>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d807      	bhi.n	8003dd8 <HAL_I2C_Init+0x84>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a80      	ldr	r2, [pc, #512]	; (8003fcc <HAL_I2C_Init+0x278>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	bf94      	ite	ls
 8003dd0:	2301      	movls	r3, #1
 8003dd2:	2300      	movhi	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e006      	b.n	8003de6 <HAL_I2C_Init+0x92>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a7d      	ldr	r2, [pc, #500]	; (8003fd0 <HAL_I2C_Init+0x27c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	bf94      	ite	ls
 8003de0:	2301      	movls	r3, #1
 8003de2:	2300      	movhi	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0e7      	b.n	8003fbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a78      	ldr	r2, [pc, #480]	; (8003fd4 <HAL_I2C_Init+0x280>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0c9b      	lsrs	r3, r3, #18
 8003df8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4a6a      	ldr	r2, [pc, #424]	; (8003fc8 <HAL_I2C_Init+0x274>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d802      	bhi.n	8003e28 <HAL_I2C_Init+0xd4>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3301      	adds	r3, #1
 8003e26:	e009      	b.n	8003e3c <HAL_I2C_Init+0xe8>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	4a69      	ldr	r2, [pc, #420]	; (8003fd8 <HAL_I2C_Init+0x284>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	099b      	lsrs	r3, r3, #6
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	495c      	ldr	r1, [pc, #368]	; (8003fc8 <HAL_I2C_Init+0x274>)
 8003e58:	428b      	cmp	r3, r1
 8003e5a:	d819      	bhi.n	8003e90 <HAL_I2C_Init+0x13c>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1e59      	subs	r1, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e6a:	1c59      	adds	r1, r3, #1
 8003e6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e70:	400b      	ands	r3, r1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_I2C_Init+0x138>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1e59      	subs	r1, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e84:	3301      	adds	r3, #1
 8003e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8a:	e051      	b.n	8003f30 <HAL_I2C_Init+0x1dc>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	e04f      	b.n	8003f30 <HAL_I2C_Init+0x1dc>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d111      	bne.n	8003ebc <HAL_I2C_Init+0x168>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1e58      	subs	r0, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	440b      	add	r3, r1
 8003ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e012      	b.n	8003ee2 <HAL_I2C_Init+0x18e>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1e58      	subs	r0, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	0099      	lsls	r1, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Init+0x196>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e022      	b.n	8003f30 <HAL_I2C_Init+0x1dc>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10e      	bne.n	8003f10 <HAL_I2C_Init+0x1bc>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1e58      	subs	r0, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6859      	ldr	r1, [r3, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	440b      	add	r3, r1
 8003f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f04:	3301      	adds	r3, #1
 8003f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0e:	e00f      	b.n	8003f30 <HAL_I2C_Init+0x1dc>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1e58      	subs	r0, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	0099      	lsls	r1, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	6809      	ldr	r1, [r1, #0]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69da      	ldr	r2, [r3, #28]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6911      	ldr	r1, [r2, #16]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68d2      	ldr	r2, [r2, #12]
 8003f6a:	4311      	orrs	r1, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	000186a0 	.word	0x000186a0
 8003fcc:	001e847f 	.word	0x001e847f
 8003fd0:	003d08ff 	.word	0x003d08ff
 8003fd4:	431bde83 	.word	0x431bde83
 8003fd8:	10624dd3 	.word	0x10624dd3

08003fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e272      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8087 	beq.w	800410a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ffc:	4b92      	ldr	r3, [pc, #584]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b04      	cmp	r3, #4
 8004006:	d00c      	beq.n	8004022 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004008:	4b8f      	ldr	r3, [pc, #572]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d112      	bne.n	800403a <HAL_RCC_OscConfig+0x5e>
 8004014:	4b8c      	ldr	r3, [pc, #560]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d10b      	bne.n	800403a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004022:	4b89      	ldr	r3, [pc, #548]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d06c      	beq.n	8004108 <HAL_RCC_OscConfig+0x12c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d168      	bne.n	8004108 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e24c      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x76>
 8004044:	4b80      	ldr	r3, [pc, #512]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a7f      	ldr	r2, [pc, #508]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e02e      	b.n	80040b0 <HAL_RCC_OscConfig+0xd4>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0x98>
 800405a:	4b7b      	ldr	r3, [pc, #492]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a7a      	ldr	r2, [pc, #488]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b78      	ldr	r3, [pc, #480]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a77      	ldr	r2, [pc, #476]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800406c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e01d      	b.n	80040b0 <HAL_RCC_OscConfig+0xd4>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0xbc>
 800407e:	4b72      	ldr	r3, [pc, #456]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a71      	ldr	r2, [pc, #452]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b6f      	ldr	r3, [pc, #444]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a6e      	ldr	r2, [pc, #440]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0xd4>
 8004098:	4b6b      	ldr	r3, [pc, #428]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a6a      	ldr	r2, [pc, #424]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b68      	ldr	r3, [pc, #416]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a67      	ldr	r2, [pc, #412]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80040aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d013      	beq.n	80040e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe fd72 	bl	8002ba0 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fe fd6e 	bl	8002ba0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e200      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	4b5d      	ldr	r3, [pc, #372]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0xe4>
 80040de:	e014      	b.n	800410a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fe fd5e 	bl	8002ba0 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fe fd5a 	bl	8002ba0 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e1ec      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	4b53      	ldr	r3, [pc, #332]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x10c>
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d063      	beq.n	80041de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004116:	4b4c      	ldr	r3, [pc, #304]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004122:	4b49      	ldr	r3, [pc, #292]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	2b08      	cmp	r3, #8
 800412c:	d11c      	bne.n	8004168 <HAL_RCC_OscConfig+0x18c>
 800412e:	4b46      	ldr	r3, [pc, #280]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d116      	bne.n	8004168 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	4b43      	ldr	r3, [pc, #268]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_RCC_OscConfig+0x176>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d001      	beq.n	8004152 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e1c0      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4b3d      	ldr	r3, [pc, #244]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4939      	ldr	r1, [pc, #228]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	e03a      	b.n	80041de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004170:	4b36      	ldr	r3, [pc, #216]	; (800424c <HAL_RCC_OscConfig+0x270>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004176:	f7fe fd13 	bl	8002ba0 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417e:	f7fe fd0f 	bl	8002ba0 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e1a1      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	4b2d      	ldr	r3, [pc, #180]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419c:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4927      	ldr	r1, [pc, #156]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	600b      	str	r3, [r1, #0]
 80041b0:	e015      	b.n	80041de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b2:	4b26      	ldr	r3, [pc, #152]	; (800424c <HAL_RCC_OscConfig+0x270>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe fcf2 	bl	8002ba0 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c0:	f7fe fcee 	bl	8002ba0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e180      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d03a      	beq.n	8004260 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d019      	beq.n	8004226 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f2:	4b17      	ldr	r3, [pc, #92]	; (8004250 <HAL_RCC_OscConfig+0x274>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f8:	f7fe fcd2 	bl	8002ba0 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004200:	f7fe fcce 	bl	8002ba0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e160      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <HAL_RCC_OscConfig+0x26c>)
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800421e:	2001      	movs	r0, #1
 8004220:	f000 face 	bl	80047c0 <RCC_Delay>
 8004224:	e01c      	b.n	8004260 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004226:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <HAL_RCC_OscConfig+0x274>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422c:	f7fe fcb8 	bl	8002ba0 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004232:	e00f      	b.n	8004254 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004234:	f7fe fcb4 	bl	8002ba0 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d908      	bls.n	8004254 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e146      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	42420000 	.word	0x42420000
 8004250:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004254:	4b92      	ldr	r3, [pc, #584]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e9      	bne.n	8004234 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a6 	beq.w	80043ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426e:	2300      	movs	r3, #0
 8004270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004272:	4b8b      	ldr	r3, [pc, #556]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10d      	bne.n	800429a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	4b88      	ldr	r3, [pc, #544]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	4a87      	ldr	r2, [pc, #540]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	61d3      	str	r3, [r2, #28]
 800428a:	4b85      	ldr	r3, [pc, #532]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	4b82      	ldr	r3, [pc, #520]	; (80044a4 <HAL_RCC_OscConfig+0x4c8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d118      	bne.n	80042d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a6:	4b7f      	ldr	r3, [pc, #508]	; (80044a4 <HAL_RCC_OscConfig+0x4c8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a7e      	ldr	r2, [pc, #504]	; (80044a4 <HAL_RCC_OscConfig+0x4c8>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b2:	f7fe fc75 	bl	8002ba0 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ba:	f7fe fc71 	bl	8002ba0 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b64      	cmp	r3, #100	; 0x64
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e103      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	4b75      	ldr	r3, [pc, #468]	; (80044a4 <HAL_RCC_OscConfig+0x4c8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0x312>
 80042e0:	4b6f      	ldr	r3, [pc, #444]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4a6e      	ldr	r2, [pc, #440]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6213      	str	r3, [r2, #32]
 80042ec:	e02d      	b.n	800434a <HAL_RCC_OscConfig+0x36e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10c      	bne.n	8004310 <HAL_RCC_OscConfig+0x334>
 80042f6:	4b6a      	ldr	r3, [pc, #424]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	4a69      	ldr	r2, [pc, #420]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	6213      	str	r3, [r2, #32]
 8004302:	4b67      	ldr	r3, [pc, #412]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	4a66      	ldr	r2, [pc, #408]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004308:	f023 0304 	bic.w	r3, r3, #4
 800430c:	6213      	str	r3, [r2, #32]
 800430e:	e01c      	b.n	800434a <HAL_RCC_OscConfig+0x36e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b05      	cmp	r3, #5
 8004316:	d10c      	bne.n	8004332 <HAL_RCC_OscConfig+0x356>
 8004318:	4b61      	ldr	r3, [pc, #388]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	4a60      	ldr	r2, [pc, #384]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	6213      	str	r3, [r2, #32]
 8004324:	4b5e      	ldr	r3, [pc, #376]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	4a5d      	ldr	r2, [pc, #372]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6213      	str	r3, [r2, #32]
 8004330:	e00b      	b.n	800434a <HAL_RCC_OscConfig+0x36e>
 8004332:	4b5b      	ldr	r3, [pc, #364]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	4a5a      	ldr	r2, [pc, #360]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	6213      	str	r3, [r2, #32]
 800433e:	4b58      	ldr	r3, [pc, #352]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	4a57      	ldr	r2, [pc, #348]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004344:	f023 0304 	bic.w	r3, r3, #4
 8004348:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d015      	beq.n	800437e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004352:	f7fe fc25 	bl	8002ba0 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7fe fc21 	bl	8002ba0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e0b1      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004370:	4b4b      	ldr	r3, [pc, #300]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0ee      	beq.n	800435a <HAL_RCC_OscConfig+0x37e>
 800437c:	e014      	b.n	80043a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437e:	f7fe fc0f 	bl	8002ba0 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004384:	e00a      	b.n	800439c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fe fc0b 	bl	8002ba0 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f241 3288 	movw	r2, #5000	; 0x1388
 8004394:	4293      	cmp	r3, r2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e09b      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800439c:	4b40      	ldr	r3, [pc, #256]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1ee      	bne.n	8004386 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d105      	bne.n	80043ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ae:	4b3c      	ldr	r3, [pc, #240]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	4a3b      	ldr	r2, [pc, #236]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8087 	beq.w	80044d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c4:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 030c 	and.w	r3, r3, #12
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d061      	beq.n	8004494 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d146      	bne.n	8004466 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d8:	4b33      	ldr	r3, [pc, #204]	; (80044a8 <HAL_RCC_OscConfig+0x4cc>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043de:	f7fe fbdf 	bl	8002ba0 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fe fbdb 	bl	8002ba0 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e06d      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f8:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f0      	bne.n	80043e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440c:	d108      	bne.n	8004420 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800440e:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	4921      	ldr	r1, [pc, #132]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 800441c:	4313      	orrs	r3, r2
 800441e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004420:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a19      	ldr	r1, [r3, #32]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	430b      	orrs	r3, r1
 8004432:	491b      	ldr	r1, [pc, #108]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_RCC_OscConfig+0x4cc>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7fe fbaf 	bl	8002ba0 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004446:	f7fe fbab 	bl	8002ba0 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e03d      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004458:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x46a>
 8004464:	e035      	b.n	80044d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <HAL_RCC_OscConfig+0x4cc>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446c:	f7fe fb98 	bl	8002ba0 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004474:	f7fe fb94 	bl	8002ba0 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e026      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_OscConfig+0x4c4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x498>
 8004492:	e01e      	b.n	80044d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d107      	bne.n	80044ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e019      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
 80044a0:	40021000 	.word	0x40021000
 80044a4:	40007000 	.word	0x40007000
 80044a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCC_OscConfig+0x500>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d001      	beq.n	80044d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000

080044e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0d0      	b.n	8004696 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f4:	4b6a      	ldr	r3, [pc, #424]	; (80046a0 <HAL_RCC_ClockConfig+0x1c0>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d910      	bls.n	8004524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004502:	4b67      	ldr	r3, [pc, #412]	; (80046a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 0207 	bic.w	r2, r3, #7
 800450a:	4965      	ldr	r1, [pc, #404]	; (80046a0 <HAL_RCC_ClockConfig+0x1c0>)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	4313      	orrs	r3, r2
 8004510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0b8      	b.n	8004696 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800453c:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004542:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004546:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004554:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4a52      	ldr	r2, [pc, #328]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 800455a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800455e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4b50      	ldr	r3, [pc, #320]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	494d      	ldr	r1, [pc, #308]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d040      	beq.n	8004600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d115      	bne.n	80045be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e07f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d107      	bne.n	80045ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459e:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e073      	b.n	8004696 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ae:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e06b      	b.n	8004696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045be:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f023 0203 	bic.w	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4936      	ldr	r1, [pc, #216]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d0:	f7fe fae6 	bl	8002ba0 <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d8:	f7fe fae2 	bl	8002ba0 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e053      	b.n	8004696 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ee:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 020c 	and.w	r2, r3, #12
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d1eb      	bne.n	80045d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004600:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d210      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460e:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 0207 	bic.w	r2, r3, #7
 8004616:	4922      	ldr	r1, [pc, #136]	; (80046a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	4313      	orrs	r3, r2
 800461c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e032      	b.n	8004696 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4916      	ldr	r1, [pc, #88]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 800464a:	4313      	orrs	r3, r2
 800464c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	490e      	ldr	r1, [pc, #56]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 800466a:	4313      	orrs	r3, r2
 800466c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800466e:	f000 f821 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 8004672:	4602      	mov	r2, r0
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	490a      	ldr	r1, [pc, #40]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004680:	5ccb      	ldrb	r3, [r1, r3]
 8004682:	fa22 f303 	lsr.w	r3, r2, r3
 8004686:	4a09      	ldr	r2, [pc, #36]	; (80046ac <HAL_RCC_ClockConfig+0x1cc>)
 8004688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800468a:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <HAL_RCC_ClockConfig+0x1d0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe fa44 	bl	8002b1c <HAL_InitTick>

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40022000 	.word	0x40022000
 80046a4:	40021000 	.word	0x40021000
 80046a8:	0800a040 	.word	0x0800a040
 80046ac:	20000000 	.word	0x20000000
 80046b0:	2000000c 	.word	0x2000000c

080046b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	2300      	movs	r3, #0
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	2300      	movs	r3, #0
 80046c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046ce:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <HAL_RCC_GetSysClockFreq+0x94>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d002      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x30>
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_GetSysClockFreq+0x36>
 80046e2:	e027      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <HAL_RCC_GetSysClockFreq+0x98>)
 80046e6:	613b      	str	r3, [r7, #16]
      break;
 80046e8:	e027      	b.n	800473a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	0c9b      	lsrs	r3, r3, #18
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	4a17      	ldr	r2, [pc, #92]	; (8004750 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046f4:	5cd3      	ldrb	r3, [r2, r3]
 80046f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d010      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004702:	4b11      	ldr	r3, [pc, #68]	; (8004748 <HAL_RCC_GetSysClockFreq+0x94>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	0c5b      	lsrs	r3, r3, #17
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	4a11      	ldr	r2, [pc, #68]	; (8004754 <HAL_RCC_GetSysClockFreq+0xa0>)
 800470e:	5cd3      	ldrb	r3, [r2, r3]
 8004710:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a0d      	ldr	r2, [pc, #52]	; (800474c <HAL_RCC_GetSysClockFreq+0x98>)
 8004716:	fb03 f202 	mul.w	r2, r3, r2
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e004      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a0c      	ldr	r2, [pc, #48]	; (8004758 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	613b      	str	r3, [r7, #16]
      break;
 8004732:	e002      	b.n	800473a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_RCC_GetSysClockFreq+0x98>)
 8004736:	613b      	str	r3, [r7, #16]
      break;
 8004738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800473a:	693b      	ldr	r3, [r7, #16]
}
 800473c:	4618      	mov	r0, r3
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
 800474c:	007a1200 	.word	0x007a1200
 8004750:	0800a058 	.word	0x0800a058
 8004754:	0800a068 	.word	0x0800a068
 8004758:	003d0900 	.word	0x003d0900

0800475c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004760:	4b02      	ldr	r3, [pc, #8]	; (800476c <HAL_RCC_GetHCLKFreq+0x10>)
 8004762:	681b      	ldr	r3, [r3, #0]
}
 8004764:	4618      	mov	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr
 800476c:	20000000 	.word	0x20000000

08004770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004774:	f7ff fff2 	bl	800475c <HAL_RCC_GetHCLKFreq>
 8004778:	4602      	mov	r2, r0
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	0a1b      	lsrs	r3, r3, #8
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	4903      	ldr	r1, [pc, #12]	; (8004794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004786:	5ccb      	ldrb	r3, [r1, r3]
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800478c:	4618      	mov	r0, r3
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40021000 	.word	0x40021000
 8004794:	0800a050 	.word	0x0800a050

08004798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800479c:	f7ff ffde 	bl	800475c <HAL_RCC_GetHCLKFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	0adb      	lsrs	r3, r3, #11
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	4903      	ldr	r1, [pc, #12]	; (80047bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40021000 	.word	0x40021000
 80047bc:	0800a050 	.word	0x0800a050

080047c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047c8:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <RCC_Delay+0x34>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <RCC_Delay+0x38>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	0a5b      	lsrs	r3, r3, #9
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047dc:	bf00      	nop
  }
  while (Delay --);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1e5a      	subs	r2, r3, #1
 80047e2:	60fa      	str	r2, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f9      	bne.n	80047dc <RCC_Delay+0x1c>
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	20000000 	.word	0x20000000
 80047f8:	10624dd3 	.word	0x10624dd3

080047fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d07d      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004818:	2300      	movs	r3, #0
 800481a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481c:	4b4f      	ldr	r3, [pc, #316]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10d      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004828:	4b4c      	ldr	r3, [pc, #304]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	4a4b      	ldr	r2, [pc, #300]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004832:	61d3      	str	r3, [r2, #28]
 8004834:	4b49      	ldr	r3, [pc, #292]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004840:	2301      	movs	r3, #1
 8004842:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004844:	4b46      	ldr	r3, [pc, #280]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d118      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004850:	4b43      	ldr	r3, [pc, #268]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a42      	ldr	r2, [pc, #264]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800485c:	f7fe f9a0 	bl	8002ba0 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004862:	e008      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004864:	f7fe f99c 	bl	8002ba0 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e06d      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004876:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004882:	4b36      	ldr	r3, [pc, #216]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d02e      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	429a      	cmp	r2, r3
 800489e:	d027      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048a0:	4b2e      	ldr	r3, [pc, #184]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048aa:	4b2e      	ldr	r3, [pc, #184]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048b0:	4b2c      	ldr	r3, [pc, #176]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048b6:	4a29      	ldr	r2, [pc, #164]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d014      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c6:	f7fe f96b 	bl	8002ba0 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	e00a      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fe f967 	bl	8002ba0 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e036      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	4b1d      	ldr	r3, [pc, #116]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ee      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048f0:	4b1a      	ldr	r3, [pc, #104]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4917      	ldr	r1, [pc, #92]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004908:	4b14      	ldr	r3, [pc, #80]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	4a13      	ldr	r2, [pc, #76]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004912:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004920:	4b0e      	ldr	r3, [pc, #56]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	490b      	ldr	r1, [pc, #44]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492e:	4313      	orrs	r3, r2
 8004930:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800493e:	4b07      	ldr	r3, [pc, #28]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	4904      	ldr	r1, [pc, #16]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800494c:	4313      	orrs	r3, r2
 800494e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40021000 	.word	0x40021000
 8004960:	40007000 	.word	0x40007000
 8004964:	42420440 	.word	0x42420440

08004968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e076      	b.n	8004a68 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d108      	bne.n	8004994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800498a:	d009      	beq.n	80049a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	61da      	str	r2, [r3, #28]
 8004992:	e005      	b.n	80049a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fd f8fc 	bl	8001bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	ea42 0103 	orr.w	r1, r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	0c1a      	lsrs	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f002 0204 	and.w	r2, r2, #4
 8004a46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a80:	f7fe f88e 	bl	8002ba0 <HAL_GetTick>
 8004a84:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d001      	beq.n	8004a9a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
 8004a98:	e12a      	b.n	8004cf0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_SPI_Transmit+0x36>
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e122      	b.n	8004cf0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_SPI_Transmit+0x48>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e11b      	b.n	8004cf0 <HAL_SPI_Transmit+0x280>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	88fa      	ldrh	r2, [r7, #6]
 8004ad8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b06:	d10f      	bne.n	8004b28 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b40      	cmp	r3, #64	; 0x40
 8004b34:	d007      	beq.n	8004b46 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4e:	d152      	bne.n	8004bf6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_SPI_Transmit+0xee>
 8004b58:	8b7b      	ldrh	r3, [r7, #26]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d145      	bne.n	8004bea <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	881a      	ldrh	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	1c9a      	adds	r2, r3, #2
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b82:	e032      	b.n	8004bea <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d112      	bne.n	8004bb8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	881a      	ldrh	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	1c9a      	adds	r2, r3, #2
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bb6:	e018      	b.n	8004bea <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb8:	f7fd fff2 	bl	8002ba0 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d803      	bhi.n	8004bd0 <HAL_SPI_Transmit+0x160>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bce:	d102      	bne.n	8004bd6 <HAL_SPI_Transmit+0x166>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e082      	b.n	8004cf0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1c7      	bne.n	8004b84 <HAL_SPI_Transmit+0x114>
 8004bf4:	e053      	b.n	8004c9e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_SPI_Transmit+0x194>
 8004bfe:	8b7b      	ldrh	r3, [r7, #26]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d147      	bne.n	8004c94 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	7812      	ldrb	r2, [r2, #0]
 8004c10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c2a:	e033      	b.n	8004c94 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d113      	bne.n	8004c62 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c60:	e018      	b.n	8004c94 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c62:	f7fd ff9d 	bl	8002ba0 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d803      	bhi.n	8004c7a <HAL_SPI_Transmit+0x20a>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c78:	d102      	bne.n	8004c80 <HAL_SPI_Transmit+0x210>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e02d      	b.n	8004cf0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1c6      	bne.n	8004c2c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 fbc4 	bl	8005430 <SPI_EndRxTxTransaction>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004cee:	2300      	movs	r3, #0
  }
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d001      	beq.n	8004d18 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
 8004d16:	e104      	b.n	8004f22 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d20:	d112      	bne.n	8004d48 <HAL_SPI_Receive+0x50>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10e      	bne.n	8004d48 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f8f3 	bl	8004f2a <HAL_SPI_TransmitReceive>
 8004d44:	4603      	mov	r3, r0
 8004d46:	e0ec      	b.n	8004f22 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d48:	f7fd ff2a 	bl	8002ba0 <HAL_GetTick>
 8004d4c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <HAL_SPI_Receive+0x62>
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0e1      	b.n	8004f22 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_SPI_Receive+0x74>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e0da      	b.n	8004f22 <HAL_SPI_Receive+0x22a>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2204      	movs	r2, #4
 8004d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	88fa      	ldrh	r2, [r7, #6]
 8004d92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dba:	d10f      	bne.n	8004ddc <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dda:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d007      	beq.n	8004dfa <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d170      	bne.n	8004ee4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e02:	e035      	b.n	8004e70 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d115      	bne.n	8004e3e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f103 020c 	add.w	r2, r3, #12
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	7812      	ldrb	r2, [r2, #0]
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e3c:	e018      	b.n	8004e70 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e3e:	f7fd feaf 	bl	8002ba0 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d803      	bhi.n	8004e56 <HAL_SPI_Receive+0x15e>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e54:	d102      	bne.n	8004e5c <HAL_SPI_Receive+0x164>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e058      	b.n	8004f22 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1c4      	bne.n	8004e04 <HAL_SPI_Receive+0x10c>
 8004e7a:	e038      	b.n	8004eee <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d113      	bne.n	8004eb2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	b292      	uxth	r2, r2
 8004e96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	1c9a      	adds	r2, r3, #2
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eb0:	e018      	b.n	8004ee4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb2:	f7fd fe75 	bl	8002ba0 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d803      	bhi.n	8004eca <HAL_SPI_Receive+0x1d2>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec8:	d102      	bne.n	8004ed0 <HAL_SPI_Receive+0x1d8>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e01e      	b.n	8004f22 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1c6      	bne.n	8004e7c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	6839      	ldr	r1, [r7, #0]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fa4a 	bl	800538c <SPI_EndRxTransaction>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004f20:	2300      	movs	r3, #0
  }
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b08a      	sub	sp, #40	; 0x28
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f3c:	f7fd fe30 	bl	8002ba0 <HAL_GetTick>
 8004f40:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f48:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004f50:	887b      	ldrh	r3, [r7, #2]
 8004f52:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f54:	7ffb      	ldrb	r3, [r7, #31]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d00c      	beq.n	8004f74 <HAL_SPI_TransmitReceive+0x4a>
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f60:	d106      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x46>
 8004f6a:	7ffb      	ldrb	r3, [r7, #31]
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d001      	beq.n	8004f74 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004f70:	2302      	movs	r3, #2
 8004f72:	e17f      	b.n	8005274 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_SPI_TransmitReceive+0x5c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_SPI_TransmitReceive+0x5c>
 8004f80:	887b      	ldrh	r3, [r7, #2]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e174      	b.n	8005274 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_SPI_TransmitReceive+0x6e>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e16d      	b.n	8005274 <HAL_SPI_TransmitReceive+0x34a>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d003      	beq.n	8004fb4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2205      	movs	r2, #5
 8004fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	887a      	ldrh	r2, [r7, #2]
 8004fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	887a      	ldrh	r2, [r7, #2]
 8004fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	887a      	ldrh	r2, [r7, #2]
 8004fd6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	887a      	ldrh	r2, [r7, #2]
 8004fdc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d007      	beq.n	8005008 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005006:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005010:	d17e      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_SPI_TransmitReceive+0xf6>
 800501a:	8afb      	ldrh	r3, [r7, #22]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d16c      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	881a      	ldrh	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	1c9a      	adds	r2, r3, #2
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005044:	e059      	b.n	80050fa <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b02      	cmp	r3, #2
 8005052:	d11b      	bne.n	800508c <HAL_SPI_TransmitReceive+0x162>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d016      	beq.n	800508c <HAL_SPI_TransmitReceive+0x162>
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	2b01      	cmp	r3, #1
 8005062:	d113      	bne.n	800508c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	881a      	ldrh	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	1c9a      	adds	r2, r3, #2
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b01      	cmp	r3, #1
 8005098:	d119      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x1a4>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d014      	beq.n	80050ce <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	b292      	uxth	r2, r2
 80050b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	1c9a      	adds	r2, r3, #2
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050ca:	2301      	movs	r3, #1
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050ce:	f7fd fd67 	bl	8002ba0 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	429a      	cmp	r2, r3
 80050dc:	d80d      	bhi.n	80050fa <HAL_SPI_TransmitReceive+0x1d0>
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e4:	d009      	beq.n	80050fa <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e0bc      	b.n	8005274 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1a0      	bne.n	8005046 <HAL_SPI_TransmitReceive+0x11c>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d19b      	bne.n	8005046 <HAL_SPI_TransmitReceive+0x11c>
 800510e:	e082      	b.n	8005216 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <HAL_SPI_TransmitReceive+0x1f4>
 8005118:	8afb      	ldrh	r3, [r7, #22]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d171      	bne.n	8005202 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	7812      	ldrb	r2, [r2, #0]
 800512a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005144:	e05d      	b.n	8005202 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b02      	cmp	r3, #2
 8005152:	d11c      	bne.n	800518e <HAL_SPI_TransmitReceive+0x264>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d017      	beq.n	800518e <HAL_SPI_TransmitReceive+0x264>
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	2b01      	cmp	r3, #1
 8005162:	d114      	bne.n	800518e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b01      	cmp	r3, #1
 800519a:	d119      	bne.n	80051d0 <HAL_SPI_TransmitReceive+0x2a6>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d014      	beq.n	80051d0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051cc:	2301      	movs	r3, #1
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051d0:	f7fd fce6 	bl	8002ba0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051dc:	429a      	cmp	r2, r3
 80051de:	d803      	bhi.n	80051e8 <HAL_SPI_TransmitReceive+0x2be>
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e6:	d102      	bne.n	80051ee <HAL_SPI_TransmitReceive+0x2c4>
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e038      	b.n	8005274 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d19c      	bne.n	8005146 <HAL_SPI_TransmitReceive+0x21c>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d197      	bne.n	8005146 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005216:	6a3a      	ldr	r2, [r7, #32]
 8005218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f908 	bl	8005430 <SPI_EndRxTxTransaction>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e01d      	b.n	8005274 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005272:	2300      	movs	r3, #0
  }
}
 8005274:	4618      	mov	r0, r3
 8005276:	3728      	adds	r7, #40	; 0x28
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	4613      	mov	r3, r2
 800528a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800528c:	f7fd fc88 	bl	8002ba0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	4413      	add	r3, r2
 800529a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800529c:	f7fd fc80 	bl	8002ba0 <HAL_GetTick>
 80052a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052a2:	4b39      	ldr	r3, [pc, #228]	; (8005388 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	015b      	lsls	r3, r3, #5
 80052a8:	0d1b      	lsrs	r3, r3, #20
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	fb02 f303 	mul.w	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052b2:	e054      	b.n	800535e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ba:	d050      	beq.n	800535e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052bc:	f7fd fc70 	bl	8002ba0 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d902      	bls.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d13d      	bne.n	800534e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ea:	d111      	bne.n	8005310 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f4:	d004      	beq.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fe:	d107      	bne.n	8005310 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800530e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005318:	d10f      	bne.n	800533a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005338:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e017      	b.n	800537e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	3b01      	subs	r3, #1
 800535c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4013      	ands	r3, r2
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	429a      	cmp	r2, r3
 800537a:	d19b      	bne.n	80052b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3720      	adds	r7, #32
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000000 	.word	0x20000000

0800538c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a0:	d111      	bne.n	80053c6 <SPI_EndRxTransaction+0x3a>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053aa:	d004      	beq.n	80053b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b4:	d107      	bne.n	80053c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053c4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ce:	d117      	bne.n	8005400 <SPI_EndRxTransaction+0x74>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d8:	d112      	bne.n	8005400 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2200      	movs	r2, #0
 80053e2:	2101      	movs	r1, #1
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7ff ff49 	bl	800527c <SPI_WaitFlagStateUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01a      	beq.n	8005426 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f4:	f043 0220 	orr.w	r2, r3, #32
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e013      	b.n	8005428 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	2180      	movs	r1, #128	; 0x80
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff ff36 	bl	800527c <SPI_WaitFlagStateUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	f043 0220 	orr.w	r2, r3, #32
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e000      	b.n	8005428 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2201      	movs	r2, #1
 8005444:	2102      	movs	r1, #2
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff ff18 	bl	800527c <SPI_WaitFlagStateUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	f043 0220 	orr.w	r2, r3, #32
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e013      	b.n	800548a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2200      	movs	r2, #0
 800546a:	2180      	movs	r1, #128	; 0x80
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff ff05 	bl	800527c <SPI_WaitFlagStateUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e000      	b.n	800548a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e041      	b.n	8005528 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7fc fbd7 	bl	8001c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f000 fc1f 	bl	8005d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	d001      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e03a      	b.n	80055be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <HAL_TIM_Base_Start_IT+0x98>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00e      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x58>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005572:	d009      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x58>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a14      	ldr	r2, [pc, #80]	; (80055cc <HAL_TIM_Base_Start_IT+0x9c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x58>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d111      	bne.n	80055ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b06      	cmp	r3, #6
 8005598:	d010      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0201 	orr.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055aa:	e007      	b.n	80055bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800

080055d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e041      	b.n	800566a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f839 	bl	8005672 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3304      	adds	r3, #4
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f000 fb7e 	bl	8005d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d109      	bne.n	80056a8 <HAL_TIM_PWM_Start+0x24>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	e022      	b.n	80056ee <HAL_TIM_PWM_Start+0x6a>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d109      	bne.n	80056c2 <HAL_TIM_PWM_Start+0x3e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	bf14      	ite	ne
 80056ba:	2301      	movne	r3, #1
 80056bc:	2300      	moveq	r3, #0
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	e015      	b.n	80056ee <HAL_TIM_PWM_Start+0x6a>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d109      	bne.n	80056dc <HAL_TIM_PWM_Start+0x58>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e008      	b.n	80056ee <HAL_TIM_PWM_Start+0x6a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	bf14      	ite	ne
 80056e8:	2301      	movne	r3, #1
 80056ea:	2300      	moveq	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e05e      	b.n	80057b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_PWM_Start+0x82>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005704:	e013      	b.n	800572e <HAL_TIM_PWM_Start+0xaa>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b04      	cmp	r3, #4
 800570a:	d104      	bne.n	8005716 <HAL_TIM_PWM_Start+0x92>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005714:	e00b      	b.n	800572e <HAL_TIM_PWM_Start+0xaa>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b08      	cmp	r3, #8
 800571a:	d104      	bne.n	8005726 <HAL_TIM_PWM_Start+0xa2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005724:	e003      	b.n	800572e <HAL_TIM_PWM_Start+0xaa>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2201      	movs	r2, #1
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fd78 	bl	800622c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1e      	ldr	r2, [pc, #120]	; (80057bc <HAL_TIM_PWM_Start+0x138>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d107      	bne.n	8005756 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005754:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a18      	ldr	r2, [pc, #96]	; (80057bc <HAL_TIM_PWM_Start+0x138>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00e      	beq.n	800577e <HAL_TIM_PWM_Start+0xfa>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005768:	d009      	beq.n	800577e <HAL_TIM_PWM_Start+0xfa>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a14      	ldr	r2, [pc, #80]	; (80057c0 <HAL_TIM_PWM_Start+0x13c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_TIM_PWM_Start+0xfa>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a12      	ldr	r2, [pc, #72]	; (80057c4 <HAL_TIM_PWM_Start+0x140>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d111      	bne.n	80057a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b06      	cmp	r3, #6
 800578e:	d010      	beq.n	80057b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a0:	e007      	b.n	80057b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800

080057c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d020      	beq.n	800582c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01b      	beq.n	800582c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0202 	mvn.w	r2, #2
 80057fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa63 	bl	8005cde <HAL_TIM_IC_CaptureCallback>
 8005818:	e005      	b.n	8005826 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa56 	bl	8005ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fa65 	bl	8005cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d020      	beq.n	8005878 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01b      	beq.n	8005878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0204 	mvn.w	r2, #4
 8005848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2202      	movs	r2, #2
 800584e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fa3d 	bl	8005cde <HAL_TIM_IC_CaptureCallback>
 8005864:	e005      	b.n	8005872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa30 	bl	8005ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fa3f 	bl	8005cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d020      	beq.n	80058c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01b      	beq.n	80058c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0208 	mvn.w	r2, #8
 8005894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2204      	movs	r2, #4
 800589a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa17 	bl	8005cde <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fa0a 	bl	8005ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fa19 	bl	8005cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d020      	beq.n	8005910 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01b      	beq.n	8005910 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0210 	mvn.w	r2, #16
 80058e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2208      	movs	r2, #8
 80058e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9f1 	bl	8005cde <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f9e4 	bl	8005ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f9f3 	bl	8005cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00c      	beq.n	8005934 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0201 	mvn.w	r2, #1
 800592c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f9c3 	bl	8005cba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00c      	beq.n	8005958 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005944:	2b00      	cmp	r3, #0
 8005946:	d007      	beq.n	8005958 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fcf5 	bl	8006342 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00c      	beq.n	800597c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d007      	beq.n	800597c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f9c3 	bl	8005d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00c      	beq.n	80059a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d007      	beq.n	80059a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0220 	mvn.w	r2, #32
 8005998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fcc8 	bl	8006330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e0ae      	b.n	8005b24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	f200 809f 	bhi.w	8005b14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	08005a11 	.word	0x08005a11
 80059e0:	08005b15 	.word	0x08005b15
 80059e4:	08005b15 	.word	0x08005b15
 80059e8:	08005b15 	.word	0x08005b15
 80059ec:	08005a51 	.word	0x08005a51
 80059f0:	08005b15 	.word	0x08005b15
 80059f4:	08005b15 	.word	0x08005b15
 80059f8:	08005b15 	.word	0x08005b15
 80059fc:	08005a93 	.word	0x08005a93
 8005a00:	08005b15 	.word	0x08005b15
 8005a04:	08005b15 	.word	0x08005b15
 8005a08:	08005b15 	.word	0x08005b15
 8005a0c:	08005ad3 	.word	0x08005ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 f9ea 	bl	8005df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699a      	ldr	r2, [r3, #24]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0208 	orr.w	r2, r2, #8
 8005a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0204 	bic.w	r2, r2, #4
 8005a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6999      	ldr	r1, [r3, #24]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	619a      	str	r2, [r3, #24]
      break;
 8005a4e:	e064      	b.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fa30 	bl	8005ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6999      	ldr	r1, [r3, #24]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	021a      	lsls	r2, r3, #8
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	619a      	str	r2, [r3, #24]
      break;
 8005a90:	e043      	b.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fa79 	bl	8005f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0208 	orr.w	r2, r2, #8
 8005aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0204 	bic.w	r2, r2, #4
 8005abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69d9      	ldr	r1, [r3, #28]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	61da      	str	r2, [r3, #28]
      break;
 8005ad0:	e023      	b.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fac3 	bl	8006064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69d9      	ldr	r1, [r3, #28]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	021a      	lsls	r2, r3, #8
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	61da      	str	r2, [r3, #28]
      break;
 8005b12:	e002      	b.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	75fb      	strb	r3, [r7, #23]
      break;
 8005b18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_TIM_ConfigClockSource+0x1c>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e0b4      	b.n	8005cb2 <HAL_TIM_ConfigClockSource+0x186>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b80:	d03e      	beq.n	8005c00 <HAL_TIM_ConfigClockSource+0xd4>
 8005b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b86:	f200 8087 	bhi.w	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8e:	f000 8086 	beq.w	8005c9e <HAL_TIM_ConfigClockSource+0x172>
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b96:	d87f      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005b98:	2b70      	cmp	r3, #112	; 0x70
 8005b9a:	d01a      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0xa6>
 8005b9c:	2b70      	cmp	r3, #112	; 0x70
 8005b9e:	d87b      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba0:	2b60      	cmp	r3, #96	; 0x60
 8005ba2:	d050      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0x11a>
 8005ba4:	2b60      	cmp	r3, #96	; 0x60
 8005ba6:	d877      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba8:	2b50      	cmp	r3, #80	; 0x50
 8005baa:	d03c      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0xfa>
 8005bac:	2b50      	cmp	r3, #80	; 0x50
 8005bae:	d873      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d058      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x13a>
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d86f      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb8:	2b30      	cmp	r3, #48	; 0x30
 8005bba:	d064      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x15a>
 8005bbc:	2b30      	cmp	r3, #48	; 0x30
 8005bbe:	d86b      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d060      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x15a>
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d867      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d05c      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x15a>
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	d05a      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x15a>
 8005bd0:	e062      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005be2:	f000 fb04 	bl	80061ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	609a      	str	r2, [r3, #8]
      break;
 8005bfe:	e04f      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c10:	f000 faed 	bl	80061ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c22:	609a      	str	r2, [r3, #8]
      break;
 8005c24:	e03c      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c32:	461a      	mov	r2, r3
 8005c34:	f000 fa64 	bl	8006100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2150      	movs	r1, #80	; 0x50
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fabb 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005c44:	e02c      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c52:	461a      	mov	r2, r3
 8005c54:	f000 fa82 	bl	800615c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2160      	movs	r1, #96	; 0x60
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 faab 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005c64:	e01c      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c72:	461a      	mov	r2, r3
 8005c74:	f000 fa44 	bl	8006100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2140      	movs	r1, #64	; 0x40
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fa9b 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005c84:	e00c      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f000 fa92 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005c96:	e003      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9c:	e000      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr

08005cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr

08005d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr

08005d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a2f      	ldr	r2, [pc, #188]	; (8005de4 <TIM_Base_SetConfig+0xd0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00b      	beq.n	8005d44 <TIM_Base_SetConfig+0x30>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d32:	d007      	beq.n	8005d44 <TIM_Base_SetConfig+0x30>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a2c      	ldr	r2, [pc, #176]	; (8005de8 <TIM_Base_SetConfig+0xd4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_Base_SetConfig+0x30>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a2b      	ldr	r2, [pc, #172]	; (8005dec <TIM_Base_SetConfig+0xd8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d108      	bne.n	8005d56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a22      	ldr	r2, [pc, #136]	; (8005de4 <TIM_Base_SetConfig+0xd0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00b      	beq.n	8005d76 <TIM_Base_SetConfig+0x62>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d64:	d007      	beq.n	8005d76 <TIM_Base_SetConfig+0x62>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1f      	ldr	r2, [pc, #124]	; (8005de8 <TIM_Base_SetConfig+0xd4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_Base_SetConfig+0x62>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a1e      	ldr	r2, [pc, #120]	; (8005dec <TIM_Base_SetConfig+0xd8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d108      	bne.n	8005d88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a0d      	ldr	r2, [pc, #52]	; (8005de4 <TIM_Base_SetConfig+0xd0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d103      	bne.n	8005dbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f023 0201 	bic.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	611a      	str	r2, [r3, #16]
  }
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr
 8005de4:	40012c00 	.word	0x40012c00
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800

08005df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f023 0201 	bic.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 0302 	bic.w	r3, r3, #2
 8005e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a1c      	ldr	r2, [pc, #112]	; (8005eb8 <TIM_OC1_SetConfig+0xc8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d10c      	bne.n	8005e66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0308 	bic.w	r3, r3, #8
 8005e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f023 0304 	bic.w	r3, r3, #4
 8005e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <TIM_OC1_SetConfig+0xc8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d111      	bne.n	8005e92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	621a      	str	r2, [r3, #32]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40012c00 	.word	0x40012c00

08005ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f023 0210 	bic.w	r2, r3, #16
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0320 	bic.w	r3, r3, #32
 8005f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <TIM_OC2_SetConfig+0xd0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d10d      	bne.n	8005f38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <TIM_OC2_SetConfig+0xd0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d113      	bne.n	8005f68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr
 8005f8c:	40012c00 	.word	0x40012c00

08005f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1d      	ldr	r2, [pc, #116]	; (8006060 <TIM_OC3_SetConfig+0xd0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d10d      	bne.n	800600a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a14      	ldr	r2, [pc, #80]	; (8006060 <TIM_OC3_SetConfig+0xd0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d113      	bne.n	800603a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	621a      	str	r2, [r3, #32]
}
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40012c00 	.word	0x40012c00

08006064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800609a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	031b      	lsls	r3, r3, #12
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a0f      	ldr	r2, [pc, #60]	; (80060fc <TIM_OC4_SetConfig+0x98>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d109      	bne.n	80060d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	019b      	lsls	r3, r3, #6
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr
 80060fc:	40012c00 	.word	0x40012c00

08006100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800612a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f023 030a 	bic.w	r3, r3, #10
 800613c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f023 0210 	bic.w	r2, r3, #16
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	031b      	lsls	r3, r3, #12
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006198:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	621a      	str	r2, [r3, #32]
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr

080061ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f043 0307 	orr.w	r3, r3, #7
 80061dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr

080061ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b087      	sub	sp, #28
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006208:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	021a      	lsls	r2, r3, #8
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	431a      	orrs	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4313      	orrs	r3, r2
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	609a      	str	r2, [r3, #8]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2201      	movs	r2, #1
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	fa01 f303 	lsl.w	r3, r1, r3
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006288:	2302      	movs	r3, #2
 800628a:	e046      	b.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a16      	ldr	r2, [pc, #88]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00e      	beq.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d8:	d009      	beq.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a12      	ldr	r2, [pc, #72]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a10      	ldr	r2, [pc, #64]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d10c      	bne.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800

08006330 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr

08006342 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr

08006354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e042      	b.n	80063ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fb fcf6 	bl	8001d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2224      	movs	r2, #36	; 0x24
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 ff41 	bl	8007220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691a      	ldr	r2, [r3, #16]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695a      	ldr	r2, [r3, #20]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08c      	sub	sp, #48	; 0x30
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b20      	cmp	r3, #32
 800640c:	d156      	bne.n	80064bc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_UART_Transmit_DMA+0x26>
 8006414:	88fb      	ldrh	r3, [r7, #6]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e04f      	b.n	80064be <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	88fa      	ldrh	r2, [r7, #6]
 800642e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2221      	movs	r2, #33	; 0x21
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006442:	4a21      	ldr	r2, [pc, #132]	; (80064c8 <HAL_UART_Transmit_DMA+0xd4>)
 8006444:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	4a20      	ldr	r2, [pc, #128]	; (80064cc <HAL_UART_Transmit_DMA+0xd8>)
 800644c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	4a1f      	ldr	r2, [pc, #124]	; (80064d0 <HAL_UART_Transmit_DMA+0xdc>)
 8006454:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645a:	2200      	movs	r2, #0
 800645c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800645e:	f107 0308 	add.w	r3, r7, #8
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	6819      	ldr	r1, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3304      	adds	r3, #4
 8006472:	461a      	mov	r2, r3
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	f7fd f84f 	bl	8003518 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006482:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3314      	adds	r3, #20
 800648a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	617b      	str	r3, [r7, #20]
   return(result);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3314      	adds	r3, #20
 80064a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064a4:	627a      	str	r2, [r7, #36]	; 0x24
 80064a6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6a39      	ldr	r1, [r7, #32]
 80064aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e5      	bne.n	8006484 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3730      	adds	r7, #48	; 0x30
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	08006ab5 	.word	0x08006ab5
 80064cc:	08006b4f 	.word	0x08006b4f
 80064d0:	08006cd3 	.word	0x08006cd3

080064d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d112      	bne.n	8006514 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_UART_Receive_DMA+0x26>
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e00b      	b.n	8006516 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	461a      	mov	r2, r3
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fc2c 	bl	8006d68 <UART_Start_Receive_DMA>
 8006510:	4603      	mov	r3, r0
 8006512:	e000      	b.n	8006516 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b0ba      	sub	sp, #232	; 0xe8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006546:	2300      	movs	r3, #0
 8006548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800654c:	2300      	movs	r3, #0
 800654e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800655e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10f      	bne.n	8006586 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d009      	beq.n	8006586 <HAL_UART_IRQHandler+0x66>
 8006572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fd90 	bl	80070a4 <UART_Receive_IT>
      return;
 8006584:	e25b      	b.n	8006a3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 80de 	beq.w	800674c <HAL_UART_IRQHandler+0x22c>
 8006590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d106      	bne.n	80065aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800659c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80d1 	beq.w	800674c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <HAL_UART_IRQHandler+0xae>
 80065b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	f043 0201 	orr.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <HAL_UART_IRQHandler+0xd2>
 80065da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	f043 0202 	orr.w	r2, r3, #2
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <HAL_UART_IRQHandler+0xf6>
 80065fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660e:	f043 0204 	orr.w	r2, r3, #4
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d011      	beq.n	8006646 <HAL_UART_IRQHandler+0x126>
 8006622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d105      	bne.n	800663a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800662e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d005      	beq.n	8006646 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663e:	f043 0208 	orr.w	r2, r3, #8
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 81f2 	beq.w	8006a34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d008      	beq.n	800666e <HAL_UART_IRQHandler+0x14e>
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fd1b 	bl	80070a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	bf14      	ite	ne
 800667c:	2301      	movne	r3, #1
 800667e:	2300      	moveq	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	f003 0308 	and.w	r3, r3, #8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d103      	bne.n	800669a <HAL_UART_IRQHandler+0x17a>
 8006692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d04f      	beq.n	800673a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fc25 	bl	8006eea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d041      	beq.n	8006732 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3314      	adds	r3, #20
 80066b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3314      	adds	r3, #20
 80066d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1d9      	bne.n	80066ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d013      	beq.n	800672a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006706:	4a7e      	ldr	r2, [pc, #504]	; (8006900 <HAL_UART_IRQHandler+0x3e0>)
 8006708:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670e:	4618      	mov	r0, r3
 8006710:	f7fc ff9e 	bl	8003650 <HAL_DMA_Abort_IT>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d016      	beq.n	8006748 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006728:	e00e      	b.n	8006748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f9ae 	bl	8006a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006730:	e00a      	b.n	8006748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f9aa 	bl	8006a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	e006      	b.n	8006748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9a6 	bl	8006a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006746:	e175      	b.n	8006a34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006748:	bf00      	nop
    return;
 800674a:	e173      	b.n	8006a34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	2b01      	cmp	r3, #1
 8006752:	f040 814f 	bne.w	80069f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8148 	beq.w	80069f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 8141 	beq.w	80069f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006772:	2300      	movs	r3, #0
 8006774:	60bb      	str	r3, [r7, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80b6 	beq.w	8006904 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8145 	beq.w	8006a38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067b6:	429a      	cmp	r2, r3
 80067b8:	f080 813e 	bcs.w	8006a38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	f000 8088 	beq.w	80068e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	330c      	adds	r3, #12
 80067f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006800:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006808:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800680c:	e841 2300 	strex	r3, r2, [r1]
 8006810:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1d9      	bne.n	80067d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3314      	adds	r3, #20
 8006822:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800682c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800682e:	f023 0301 	bic.w	r3, r3, #1
 8006832:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3314      	adds	r3, #20
 800683c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006840:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006844:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006848:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e1      	bne.n	800681c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3314      	adds	r3, #20
 800685e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800686a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800686e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3314      	adds	r3, #20
 8006878:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800687c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800687e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006882:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800688a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e3      	bne.n	8006858 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	330c      	adds	r3, #12
 80068a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b0:	f023 0310 	bic.w	r3, r3, #16
 80068b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80068c4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e3      	bne.n	800689e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fc fe7c 	bl	80035d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f8d1 	bl	8006a9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068fc:	e09c      	b.n	8006a38 <HAL_UART_IRQHandler+0x518>
 80068fe:	bf00      	nop
 8006900:	08006faf 	.word	0x08006faf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800690c:	b29b      	uxth	r3, r3
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006918:	b29b      	uxth	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 808e 	beq.w	8006a3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8089 	beq.w	8006a3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006940:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	330c      	adds	r3, #12
 800694a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800694e:	647a      	str	r2, [r7, #68]	; 0x44
 8006950:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800695c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e3      	bne.n	800692a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3314      	adds	r3, #20
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	623b      	str	r3, [r7, #32]
   return(result);
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3314      	adds	r3, #20
 8006982:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006986:	633a      	str	r2, [r7, #48]	; 0x30
 8006988:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800698c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e3      	bne.n	8006962 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	330c      	adds	r3, #12
 80069ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0310 	bic.w	r3, r3, #16
 80069be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069cc:	61fa      	str	r2, [r7, #28]
 80069ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	69b9      	ldr	r1, [r7, #24]
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	617b      	str	r3, [r7, #20]
   return(result);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e3      	bne.n	80069a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f856 	bl	8006a9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069f2:	e023      	b.n	8006a3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d009      	beq.n	8006a14 <HAL_UART_IRQHandler+0x4f4>
 8006a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fae2 	bl	8006fd6 <UART_Transmit_IT>
    return;
 8006a12:	e014      	b.n	8006a3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00e      	beq.n	8006a3e <HAL_UART_IRQHandler+0x51e>
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d008      	beq.n	8006a3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fb21 	bl	8007074 <UART_EndTransmit_IT>
    return;
 8006a32:	e004      	b.n	8006a3e <HAL_UART_IRQHandler+0x51e>
    return;
 8006a34:	bf00      	nop
 8006a36:	e002      	b.n	8006a3e <HAL_UART_IRQHandler+0x51e>
      return;
 8006a38:	bf00      	nop
 8006a3a:	e000      	b.n	8006a3e <HAL_UART_IRQHandler+0x51e>
      return;
 8006a3c:	bf00      	nop
  }
}
 8006a3e:	37e8      	adds	r7, #232	; 0xe8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr

08006a56 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr

08006a7a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr

08006a9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b090      	sub	sp, #64	; 0x40
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d137      	bne.n	8006b40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3314      	adds	r3, #20
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aec:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3314      	adds	r3, #20
 8006af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006af6:	633a      	str	r2, [r7, #48]	; 0x30
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e5      	bne.n	8006ad6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	330c      	adds	r3, #12
 8006b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
 8006b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	330c      	adds	r3, #12
 8006b28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b2a:	61fa      	str	r2, [r7, #28]
 8006b2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	69b9      	ldr	r1, [r7, #24]
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	617b      	str	r3, [r7, #20]
   return(result);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e5      	bne.n	8006b0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b3e:	e002      	b.n	8006b46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b42:	f7ff ff7f 	bl	8006a44 <HAL_UART_TxCpltCallback>
}
 8006b46:	bf00      	nop
 8006b48:	3740      	adds	r7, #64	; 0x40
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f7ff ff7a 	bl	8006a56 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b09c      	sub	sp, #112	; 0x70
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d172      	bne.n	8006c6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b88:	2200      	movs	r2, #0
 8006b8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bac:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e5      	bne.n	8006b8c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3314      	adds	r3, #20
 8006bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd2:	f023 0301 	bic.w	r3, r3, #1
 8006bd6:	667b      	str	r3, [r7, #100]	; 0x64
 8006bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3314      	adds	r3, #20
 8006bde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006be0:	647a      	str	r2, [r7, #68]	; 0x44
 8006be2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e5      	bne.n	8006bc0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	623b      	str	r3, [r7, #32]
   return(result);
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3314      	adds	r3, #20
 8006c12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c14:	633a      	str	r2, [r7, #48]	; 0x30
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e5      	bne.n	8006bf4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d119      	bne.n	8006c6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	330c      	adds	r3, #12
 8006c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0310 	bic.w	r3, r3, #16
 8006c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	330c      	adds	r3, #12
 8006c56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c58:	61fa      	str	r2, [r7, #28]
 8006c5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	69b9      	ldr	r1, [r7, #24]
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	617b      	str	r3, [r7, #20]
   return(result);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e5      	bne.n	8006c38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6e:	2200      	movs	r2, #0
 8006c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d106      	bne.n	8006c88 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c82:	f7ff ff0c 	bl	8006a9e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c86:	e002      	b.n	8006c8e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006c88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c8a:	f7ff feed 	bl	8006a68 <HAL_UART_RxCpltCallback>
}
 8006c8e:	bf00      	nop
 8006c90:	3770      	adds	r7, #112	; 0x70
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d108      	bne.n	8006cc4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cb6:	085b      	lsrs	r3, r3, #1
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	4619      	mov	r1, r3
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7ff feee 	bl	8006a9e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cc2:	e002      	b.n	8006cca <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f7ff fed8 	bl	8006a7a <HAL_UART_RxHalfCpltCallback>
}
 8006cca:	bf00      	nop
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	bf14      	ite	ne
 8006cf2:	2301      	movne	r3, #1
 8006cf4:	2300      	moveq	r3, #0
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b21      	cmp	r3, #33	; 0x21
 8006d04:	d108      	bne.n	8006d18 <UART_DMAError+0x46>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006d12:	68b8      	ldr	r0, [r7, #8]
 8006d14:	f000 f8c2 	bl	8006e9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	bf14      	ite	ne
 8006d26:	2301      	movne	r3, #1
 8006d28:	2300      	moveq	r3, #0
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b22      	cmp	r3, #34	; 0x22
 8006d38:	d108      	bne.n	8006d4c <UART_DMAError+0x7a>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2200      	movs	r2, #0
 8006d44:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006d46:	68b8      	ldr	r0, [r7, #8]
 8006d48:	f000 f8cf 	bl	8006eea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d50:	f043 0210 	orr.w	r2, r3, #16
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d58:	68b8      	ldr	r0, [r7, #8]
 8006d5a:	f7ff fe97 	bl	8006a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b098      	sub	sp, #96	; 0x60
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2222      	movs	r2, #34	; 0x22
 8006d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d94:	4a3e      	ldr	r2, [pc, #248]	; (8006e90 <UART_Start_Receive_DMA+0x128>)
 8006d96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9c:	4a3d      	ldr	r2, [pc, #244]	; (8006e94 <UART_Start_Receive_DMA+0x12c>)
 8006d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	4a3c      	ldr	r2, [pc, #240]	; (8006e98 <UART_Start_Receive_DMA+0x130>)
 8006da6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dac:	2200      	movs	r2, #0
 8006dae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006db0:	f107 0308 	add.w	r3, r7, #8
 8006db4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	f7fc fba6 	bl	8003518 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d019      	beq.n	8006e1e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	330c      	adds	r3, #12
 8006df0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e00:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	330c      	adds	r3, #12
 8006e08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e0a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006e0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006e10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e5      	bne.n	8006dea <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3314      	adds	r3, #20
 8006e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	f043 0301 	orr.w	r3, r3, #1
 8006e34:	657b      	str	r3, [r7, #84]	; 0x54
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3314      	adds	r3, #20
 8006e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e5      	bne.n	8006e1e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3314      	adds	r3, #20
 8006e58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	617b      	str	r3, [r7, #20]
   return(result);
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e68:	653b      	str	r3, [r7, #80]	; 0x50
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3314      	adds	r3, #20
 8006e70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e72:	627a      	str	r2, [r7, #36]	; 0x24
 8006e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6a39      	ldr	r1, [r7, #32]
 8006e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e5      	bne.n	8006e52 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3760      	adds	r7, #96	; 0x60
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	08006b6b 	.word	0x08006b6b
 8006e94:	08006c97 	.word	0x08006c97
 8006e98:	08006cd3 	.word	0x08006cd3

08006e9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b089      	sub	sp, #36	; 0x24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	61ba      	str	r2, [r7, #24]
 8006ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	6979      	ldr	r1, [r7, #20]
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e5      	bne.n	8006ea4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006ee0:	bf00      	nop
 8006ee2:	3724      	adds	r7, #36	; 0x24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr

08006eea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b095      	sub	sp, #84	; 0x54
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f12:	643a      	str	r2, [r7, #64]	; 0x40
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e5      	bne.n	8006ef2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3314      	adds	r3, #20
 8006f2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	f023 0301 	bic.w	r3, r3, #1
 8006f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3314      	adds	r3, #20
 8006f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e5      	bne.n	8006f26 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d119      	bne.n	8006f96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f023 0310 	bic.w	r3, r3, #16
 8006f78:	647b      	str	r3, [r7, #68]	; 0x44
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	330c      	adds	r3, #12
 8006f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f82:	61ba      	str	r2, [r7, #24]
 8006f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6979      	ldr	r1, [r7, #20]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e5      	bne.n	8006f62 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006fa4:	bf00      	nop
 8006fa6:	3754      	adds	r7, #84	; 0x54
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bc80      	pop	{r7}
 8006fac:	4770      	bx	lr

08006fae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff fd5f 	bl	8006a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fce:	bf00      	nop
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b21      	cmp	r3, #33	; 0x21
 8006fe8:	d13e      	bne.n	8007068 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff2:	d114      	bne.n	800701e <UART_Transmit_IT+0x48>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d110      	bne.n	800701e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007010:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	1c9a      	adds	r2, r3, #2
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	621a      	str	r2, [r3, #32]
 800701c:	e008      	b.n	8007030 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	1c59      	adds	r1, r3, #1
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6211      	str	r1, [r2, #32]
 8007028:	781a      	ldrb	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	b29b      	uxth	r3, r3
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	4619      	mov	r1, r3
 800703e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10f      	bne.n	8007064 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007052:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007062:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	e000      	b.n	800706a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007068:	2302      	movs	r3, #2
  }
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr

08007074 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800708a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff fcd5 	bl	8006a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08c      	sub	sp, #48	; 0x30
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b22      	cmp	r3, #34	; 0x22
 80070b6:	f040 80ae 	bne.w	8007216 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c2:	d117      	bne.n	80070f4 <UART_Receive_IT+0x50>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d113      	bne.n	80070f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	1c9a      	adds	r2, r3, #2
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	629a      	str	r2, [r3, #40]	; 0x28
 80070f2:	e026      	b.n	8007142 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007106:	d007      	beq.n	8007118 <UART_Receive_IT+0x74>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <UART_Receive_IT+0x82>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d106      	bne.n	8007126 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	e008      	b.n	8007138 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007132:	b2da      	uxtb	r2, r3
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007146:	b29b      	uxth	r3, r3
 8007148:	3b01      	subs	r3, #1
 800714a:	b29b      	uxth	r3, r3
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	4619      	mov	r1, r3
 8007150:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007152:	2b00      	cmp	r3, #0
 8007154:	d15d      	bne.n	8007212 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0220 	bic.w	r2, r2, #32
 8007164:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007174:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695a      	ldr	r2, [r3, #20]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0201 	bic.w	r2, r2, #1
 8007184:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007198:	2b01      	cmp	r3, #1
 800719a:	d135      	bne.n	8007208 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	330c      	adds	r3, #12
 80071a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	613b      	str	r3, [r7, #16]
   return(result);
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f023 0310 	bic.w	r3, r3, #16
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	330c      	adds	r3, #12
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	623a      	str	r2, [r7, #32]
 80071c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	69f9      	ldr	r1, [r7, #28]
 80071c8:	6a3a      	ldr	r2, [r7, #32]
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e5      	bne.n	80071a2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b10      	cmp	r3, #16
 80071e2:	d10a      	bne.n	80071fa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff fc4c 	bl	8006a9e <HAL_UARTEx_RxEventCallback>
 8007206:	e002      	b.n	800720e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff fc2d 	bl	8006a68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e002      	b.n	8007218 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	e000      	b.n	8007218 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007216:	2302      	movs	r3, #2
  }
}
 8007218:	4618      	mov	r0, r3
 800721a:	3730      	adds	r7, #48	; 0x30
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	4313      	orrs	r3, r2
 800724e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800725a:	f023 030c 	bic.w	r3, r3, #12
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	430b      	orrs	r3, r1
 8007266:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a2c      	ldr	r2, [pc, #176]	; (8007334 <UART_SetConfig+0x114>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d103      	bne.n	8007290 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007288:	f7fd fa86 	bl	8004798 <HAL_RCC_GetPCLK2Freq>
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	e002      	b.n	8007296 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007290:	f7fd fa6e 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8007294:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009a      	lsls	r2, r3, #2
 80072a0:	441a      	add	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ac:	4a22      	ldr	r2, [pc, #136]	; (8007338 <UART_SetConfig+0x118>)
 80072ae:	fba2 2303 	umull	r2, r3, r2, r3
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	0119      	lsls	r1, r3, #4
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009a      	lsls	r2, r3, #2
 80072c0:	441a      	add	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80072cc:	4b1a      	ldr	r3, [pc, #104]	; (8007338 <UART_SetConfig+0x118>)
 80072ce:	fba3 0302 	umull	r0, r3, r3, r2
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	2064      	movs	r0, #100	; 0x64
 80072d6:	fb00 f303 	mul.w	r3, r0, r3
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	3332      	adds	r3, #50	; 0x32
 80072e0:	4a15      	ldr	r2, [pc, #84]	; (8007338 <UART_SetConfig+0x118>)
 80072e2:	fba2 2303 	umull	r2, r3, r2, r3
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072ec:	4419      	add	r1, r3
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4613      	mov	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	009a      	lsls	r2, r3, #2
 80072f8:	441a      	add	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	fbb2 f2f3 	udiv	r2, r2, r3
 8007304:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <UART_SetConfig+0x118>)
 8007306:	fba3 0302 	umull	r0, r3, r3, r2
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	2064      	movs	r0, #100	; 0x64
 800730e:	fb00 f303 	mul.w	r3, r0, r3
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	3332      	adds	r3, #50	; 0x32
 8007318:	4a07      	ldr	r2, [pc, #28]	; (8007338 <UART_SetConfig+0x118>)
 800731a:	fba2 2303 	umull	r2, r3, r2, r3
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	f003 020f 	and.w	r2, r3, #15
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	440a      	add	r2, r1
 800732a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800732c:	bf00      	nop
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	40013800 	.word	0x40013800
 8007338:	51eb851f 	.word	0x51eb851f

0800733c <atoff>:
 800733c:	2100      	movs	r1, #0
 800733e:	f000 bebb 	b.w	80080b8 <strtof>
	...

08007344 <std>:
 8007344:	2300      	movs	r3, #0
 8007346:	b510      	push	{r4, lr}
 8007348:	4604      	mov	r4, r0
 800734a:	e9c0 3300 	strd	r3, r3, [r0]
 800734e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007352:	6083      	str	r3, [r0, #8]
 8007354:	8181      	strh	r1, [r0, #12]
 8007356:	6643      	str	r3, [r0, #100]	; 0x64
 8007358:	81c2      	strh	r2, [r0, #14]
 800735a:	6183      	str	r3, [r0, #24]
 800735c:	4619      	mov	r1, r3
 800735e:	2208      	movs	r2, #8
 8007360:	305c      	adds	r0, #92	; 0x5c
 8007362:	f000 ff31 	bl	80081c8 <memset>
 8007366:	4b0d      	ldr	r3, [pc, #52]	; (800739c <std+0x58>)
 8007368:	6224      	str	r4, [r4, #32]
 800736a:	6263      	str	r3, [r4, #36]	; 0x24
 800736c:	4b0c      	ldr	r3, [pc, #48]	; (80073a0 <std+0x5c>)
 800736e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007370:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <std+0x60>)
 8007372:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007374:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <std+0x64>)
 8007376:	6323      	str	r3, [r4, #48]	; 0x30
 8007378:	4b0c      	ldr	r3, [pc, #48]	; (80073ac <std+0x68>)
 800737a:	429c      	cmp	r4, r3
 800737c:	d006      	beq.n	800738c <std+0x48>
 800737e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007382:	4294      	cmp	r4, r2
 8007384:	d002      	beq.n	800738c <std+0x48>
 8007386:	33d0      	adds	r3, #208	; 0xd0
 8007388:	429c      	cmp	r4, r3
 800738a:	d105      	bne.n	8007398 <std+0x54>
 800738c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007394:	f000 bf4a 	b.w	800822c <__retarget_lock_init_recursive>
 8007398:	bd10      	pop	{r4, pc}
 800739a:	bf00      	nop
 800739c:	08009521 	.word	0x08009521
 80073a0:	08009543 	.word	0x08009543
 80073a4:	0800957b 	.word	0x0800957b
 80073a8:	0800959f 	.word	0x0800959f
 80073ac:	20000520 	.word	0x20000520

080073b0 <stdio_exit_handler>:
 80073b0:	4a02      	ldr	r2, [pc, #8]	; (80073bc <stdio_exit_handler+0xc>)
 80073b2:	4903      	ldr	r1, [pc, #12]	; (80073c0 <stdio_exit_handler+0x10>)
 80073b4:	4803      	ldr	r0, [pc, #12]	; (80073c4 <stdio_exit_handler+0x14>)
 80073b6:	f000 bed7 	b.w	8008168 <_fwalk_sglue>
 80073ba:	bf00      	nop
 80073bc:	20000014 	.word	0x20000014
 80073c0:	08008b81 	.word	0x08008b81
 80073c4:	2000018c 	.word	0x2000018c

080073c8 <cleanup_stdio>:
 80073c8:	6841      	ldr	r1, [r0, #4]
 80073ca:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <cleanup_stdio+0x34>)
 80073cc:	b510      	push	{r4, lr}
 80073ce:	4299      	cmp	r1, r3
 80073d0:	4604      	mov	r4, r0
 80073d2:	d001      	beq.n	80073d8 <cleanup_stdio+0x10>
 80073d4:	f001 fbd4 	bl	8008b80 <_fflush_r>
 80073d8:	68a1      	ldr	r1, [r4, #8]
 80073da:	4b09      	ldr	r3, [pc, #36]	; (8007400 <cleanup_stdio+0x38>)
 80073dc:	4299      	cmp	r1, r3
 80073de:	d002      	beq.n	80073e6 <cleanup_stdio+0x1e>
 80073e0:	4620      	mov	r0, r4
 80073e2:	f001 fbcd 	bl	8008b80 <_fflush_r>
 80073e6:	68e1      	ldr	r1, [r4, #12]
 80073e8:	4b06      	ldr	r3, [pc, #24]	; (8007404 <cleanup_stdio+0x3c>)
 80073ea:	4299      	cmp	r1, r3
 80073ec:	d004      	beq.n	80073f8 <cleanup_stdio+0x30>
 80073ee:	4620      	mov	r0, r4
 80073f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f4:	f001 bbc4 	b.w	8008b80 <_fflush_r>
 80073f8:	bd10      	pop	{r4, pc}
 80073fa:	bf00      	nop
 80073fc:	20000520 	.word	0x20000520
 8007400:	20000588 	.word	0x20000588
 8007404:	200005f0 	.word	0x200005f0

08007408 <global_stdio_init.part.0>:
 8007408:	b510      	push	{r4, lr}
 800740a:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <global_stdio_init.part.0+0x30>)
 800740c:	4c0b      	ldr	r4, [pc, #44]	; (800743c <global_stdio_init.part.0+0x34>)
 800740e:	4a0c      	ldr	r2, [pc, #48]	; (8007440 <global_stdio_init.part.0+0x38>)
 8007410:	4620      	mov	r0, r4
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	2104      	movs	r1, #4
 8007416:	2200      	movs	r2, #0
 8007418:	f7ff ff94 	bl	8007344 <std>
 800741c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007420:	2201      	movs	r2, #1
 8007422:	2109      	movs	r1, #9
 8007424:	f7ff ff8e 	bl	8007344 <std>
 8007428:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800742c:	2202      	movs	r2, #2
 800742e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007432:	2112      	movs	r1, #18
 8007434:	f7ff bf86 	b.w	8007344 <std>
 8007438:	20000658 	.word	0x20000658
 800743c:	20000520 	.word	0x20000520
 8007440:	080073b1 	.word	0x080073b1

08007444 <__sfp_lock_acquire>:
 8007444:	4801      	ldr	r0, [pc, #4]	; (800744c <__sfp_lock_acquire+0x8>)
 8007446:	f000 bef2 	b.w	800822e <__retarget_lock_acquire_recursive>
 800744a:	bf00      	nop
 800744c:	2000065d 	.word	0x2000065d

08007450 <__sfp_lock_release>:
 8007450:	4801      	ldr	r0, [pc, #4]	; (8007458 <__sfp_lock_release+0x8>)
 8007452:	f000 beed 	b.w	8008230 <__retarget_lock_release_recursive>
 8007456:	bf00      	nop
 8007458:	2000065d 	.word	0x2000065d

0800745c <__sinit>:
 800745c:	b510      	push	{r4, lr}
 800745e:	4604      	mov	r4, r0
 8007460:	f7ff fff0 	bl	8007444 <__sfp_lock_acquire>
 8007464:	6a23      	ldr	r3, [r4, #32]
 8007466:	b11b      	cbz	r3, 8007470 <__sinit+0x14>
 8007468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800746c:	f7ff bff0 	b.w	8007450 <__sfp_lock_release>
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <__sinit+0x28>)
 8007472:	6223      	str	r3, [r4, #32]
 8007474:	4b04      	ldr	r3, [pc, #16]	; (8007488 <__sinit+0x2c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1f5      	bne.n	8007468 <__sinit+0xc>
 800747c:	f7ff ffc4 	bl	8007408 <global_stdio_init.part.0>
 8007480:	e7f2      	b.n	8007468 <__sinit+0xc>
 8007482:	bf00      	nop
 8007484:	080073c9 	.word	0x080073c9
 8007488:	20000658 	.word	0x20000658

0800748c <sulp>:
 800748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007490:	460f      	mov	r7, r1
 8007492:	4690      	mov	r8, r2
 8007494:	f001 ff14 	bl	80092c0 <__ulp>
 8007498:	4604      	mov	r4, r0
 800749a:	460d      	mov	r5, r1
 800749c:	f1b8 0f00 	cmp.w	r8, #0
 80074a0:	d011      	beq.n	80074c6 <sulp+0x3a>
 80074a2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80074a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	dd0b      	ble.n	80074c6 <sulp+0x3a>
 80074ae:	2400      	movs	r4, #0
 80074b0:	051b      	lsls	r3, r3, #20
 80074b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80074b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80074ba:	4622      	mov	r2, r4
 80074bc:	462b      	mov	r3, r5
 80074be:	f7f9 f803 	bl	80004c8 <__aeabi_dmul>
 80074c2:	4604      	mov	r4, r0
 80074c4:	460d      	mov	r5, r1
 80074c6:	4620      	mov	r0, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080074d0 <_strtod_l>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	b09f      	sub	sp, #124	; 0x7c
 80074d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80074d8:	2200      	movs	r2, #0
 80074da:	4604      	mov	r4, r0
 80074dc:	921a      	str	r2, [sp, #104]	; 0x68
 80074de:	460d      	mov	r5, r1
 80074e0:	f04f 0800 	mov.w	r8, #0
 80074e4:	f04f 0900 	mov.w	r9, #0
 80074e8:	460a      	mov	r2, r1
 80074ea:	9219      	str	r2, [sp, #100]	; 0x64
 80074ec:	7811      	ldrb	r1, [r2, #0]
 80074ee:	292b      	cmp	r1, #43	; 0x2b
 80074f0:	d04a      	beq.n	8007588 <_strtod_l+0xb8>
 80074f2:	d838      	bhi.n	8007566 <_strtod_l+0x96>
 80074f4:	290d      	cmp	r1, #13
 80074f6:	d832      	bhi.n	800755e <_strtod_l+0x8e>
 80074f8:	2908      	cmp	r1, #8
 80074fa:	d832      	bhi.n	8007562 <_strtod_l+0x92>
 80074fc:	2900      	cmp	r1, #0
 80074fe:	d03b      	beq.n	8007578 <_strtod_l+0xa8>
 8007500:	2200      	movs	r2, #0
 8007502:	920e      	str	r2, [sp, #56]	; 0x38
 8007504:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007506:	7832      	ldrb	r2, [r6, #0]
 8007508:	2a30      	cmp	r2, #48	; 0x30
 800750a:	f040 80b2 	bne.w	8007672 <_strtod_l+0x1a2>
 800750e:	7872      	ldrb	r2, [r6, #1]
 8007510:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007514:	2a58      	cmp	r2, #88	; 0x58
 8007516:	d16e      	bne.n	80075f6 <_strtod_l+0x126>
 8007518:	9302      	str	r3, [sp, #8]
 800751a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800751c:	4620      	mov	r0, r4
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	ab1a      	add	r3, sp, #104	; 0x68
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	4a8c      	ldr	r2, [pc, #560]	; (8007758 <_strtod_l+0x288>)
 8007526:	ab1b      	add	r3, sp, #108	; 0x6c
 8007528:	a919      	add	r1, sp, #100	; 0x64
 800752a:	f000 ff03 	bl	8008334 <__gethex>
 800752e:	f010 070f 	ands.w	r7, r0, #15
 8007532:	4605      	mov	r5, r0
 8007534:	d005      	beq.n	8007542 <_strtod_l+0x72>
 8007536:	2f06      	cmp	r7, #6
 8007538:	d128      	bne.n	800758c <_strtod_l+0xbc>
 800753a:	2300      	movs	r3, #0
 800753c:	3601      	adds	r6, #1
 800753e:	9619      	str	r6, [sp, #100]	; 0x64
 8007540:	930e      	str	r3, [sp, #56]	; 0x38
 8007542:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007544:	2b00      	cmp	r3, #0
 8007546:	f040 85a0 	bne.w	800808a <_strtod_l+0xbba>
 800754a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800754c:	b1cb      	cbz	r3, 8007582 <_strtod_l+0xb2>
 800754e:	4642      	mov	r2, r8
 8007550:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007554:	4610      	mov	r0, r2
 8007556:	4619      	mov	r1, r3
 8007558:	b01f      	add	sp, #124	; 0x7c
 800755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755e:	2920      	cmp	r1, #32
 8007560:	d1ce      	bne.n	8007500 <_strtod_l+0x30>
 8007562:	3201      	adds	r2, #1
 8007564:	e7c1      	b.n	80074ea <_strtod_l+0x1a>
 8007566:	292d      	cmp	r1, #45	; 0x2d
 8007568:	d1ca      	bne.n	8007500 <_strtod_l+0x30>
 800756a:	2101      	movs	r1, #1
 800756c:	910e      	str	r1, [sp, #56]	; 0x38
 800756e:	1c51      	adds	r1, r2, #1
 8007570:	9119      	str	r1, [sp, #100]	; 0x64
 8007572:	7852      	ldrb	r2, [r2, #1]
 8007574:	2a00      	cmp	r2, #0
 8007576:	d1c5      	bne.n	8007504 <_strtod_l+0x34>
 8007578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800757a:	9519      	str	r5, [sp, #100]	; 0x64
 800757c:	2b00      	cmp	r3, #0
 800757e:	f040 8582 	bne.w	8008086 <_strtod_l+0xbb6>
 8007582:	4642      	mov	r2, r8
 8007584:	464b      	mov	r3, r9
 8007586:	e7e5      	b.n	8007554 <_strtod_l+0x84>
 8007588:	2100      	movs	r1, #0
 800758a:	e7ef      	b.n	800756c <_strtod_l+0x9c>
 800758c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800758e:	b13a      	cbz	r2, 80075a0 <_strtod_l+0xd0>
 8007590:	2135      	movs	r1, #53	; 0x35
 8007592:	a81c      	add	r0, sp, #112	; 0x70
 8007594:	f001 ff80 	bl	8009498 <__copybits>
 8007598:	4620      	mov	r0, r4
 800759a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800759c:	f001 fb64 	bl	8008c68 <_Bfree>
 80075a0:	3f01      	subs	r7, #1
 80075a2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80075a4:	2f04      	cmp	r7, #4
 80075a6:	d806      	bhi.n	80075b6 <_strtod_l+0xe6>
 80075a8:	e8df f007 	tbb	[pc, r7]
 80075ac:	201d0314 	.word	0x201d0314
 80075b0:	14          	.byte	0x14
 80075b1:	00          	.byte	0x00
 80075b2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80075b6:	05e9      	lsls	r1, r5, #23
 80075b8:	bf48      	it	mi
 80075ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80075be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075c2:	0d1b      	lsrs	r3, r3, #20
 80075c4:	051b      	lsls	r3, r3, #20
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1bb      	bne.n	8007542 <_strtod_l+0x72>
 80075ca:	f000 fe05 	bl	80081d8 <__errno>
 80075ce:	2322      	movs	r3, #34	; 0x22
 80075d0:	6003      	str	r3, [r0, #0]
 80075d2:	e7b6      	b.n	8007542 <_strtod_l+0x72>
 80075d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80075d8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80075dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80075e4:	e7e7      	b.n	80075b6 <_strtod_l+0xe6>
 80075e6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800775c <_strtod_l+0x28c>
 80075ea:	e7e4      	b.n	80075b6 <_strtod_l+0xe6>
 80075ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80075f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80075f4:	e7df      	b.n	80075b6 <_strtod_l+0xe6>
 80075f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	9219      	str	r2, [sp, #100]	; 0x64
 80075fc:	785b      	ldrb	r3, [r3, #1]
 80075fe:	2b30      	cmp	r3, #48	; 0x30
 8007600:	d0f9      	beq.n	80075f6 <_strtod_l+0x126>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d09d      	beq.n	8007542 <_strtod_l+0x72>
 8007606:	2301      	movs	r3, #1
 8007608:	f04f 0a00 	mov.w	sl, #0
 800760c:	220a      	movs	r2, #10
 800760e:	46d3      	mov	fp, sl
 8007610:	9305      	str	r3, [sp, #20]
 8007612:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007614:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007618:	930b      	str	r3, [sp, #44]	; 0x2c
 800761a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800761c:	7806      	ldrb	r6, [r0, #0]
 800761e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007622:	b2d9      	uxtb	r1, r3
 8007624:	2909      	cmp	r1, #9
 8007626:	d926      	bls.n	8007676 <_strtod_l+0x1a6>
 8007628:	2201      	movs	r2, #1
 800762a:	494d      	ldr	r1, [pc, #308]	; (8007760 <_strtod_l+0x290>)
 800762c:	f000 fdba 	bl	80081a4 <strncmp>
 8007630:	2800      	cmp	r0, #0
 8007632:	d030      	beq.n	8007696 <_strtod_l+0x1c6>
 8007634:	2000      	movs	r0, #0
 8007636:	4632      	mov	r2, r6
 8007638:	4603      	mov	r3, r0
 800763a:	465e      	mov	r6, fp
 800763c:	9008      	str	r0, [sp, #32]
 800763e:	2a65      	cmp	r2, #101	; 0x65
 8007640:	d001      	beq.n	8007646 <_strtod_l+0x176>
 8007642:	2a45      	cmp	r2, #69	; 0x45
 8007644:	d113      	bne.n	800766e <_strtod_l+0x19e>
 8007646:	b91e      	cbnz	r6, 8007650 <_strtod_l+0x180>
 8007648:	9a05      	ldr	r2, [sp, #20]
 800764a:	4302      	orrs	r2, r0
 800764c:	d094      	beq.n	8007578 <_strtod_l+0xa8>
 800764e:	2600      	movs	r6, #0
 8007650:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007652:	1c6a      	adds	r2, r5, #1
 8007654:	9219      	str	r2, [sp, #100]	; 0x64
 8007656:	786a      	ldrb	r2, [r5, #1]
 8007658:	2a2b      	cmp	r2, #43	; 0x2b
 800765a:	d074      	beq.n	8007746 <_strtod_l+0x276>
 800765c:	2a2d      	cmp	r2, #45	; 0x2d
 800765e:	d078      	beq.n	8007752 <_strtod_l+0x282>
 8007660:	f04f 0c00 	mov.w	ip, #0
 8007664:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007668:	2909      	cmp	r1, #9
 800766a:	d97f      	bls.n	800776c <_strtod_l+0x29c>
 800766c:	9519      	str	r5, [sp, #100]	; 0x64
 800766e:	2700      	movs	r7, #0
 8007670:	e09e      	b.n	80077b0 <_strtod_l+0x2e0>
 8007672:	2300      	movs	r3, #0
 8007674:	e7c8      	b.n	8007608 <_strtod_l+0x138>
 8007676:	f1bb 0f08 	cmp.w	fp, #8
 800767a:	bfd8      	it	le
 800767c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800767e:	f100 0001 	add.w	r0, r0, #1
 8007682:	bfd6      	itet	le
 8007684:	fb02 3301 	mlale	r3, r2, r1, r3
 8007688:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800768c:	930a      	strle	r3, [sp, #40]	; 0x28
 800768e:	f10b 0b01 	add.w	fp, fp, #1
 8007692:	9019      	str	r0, [sp, #100]	; 0x64
 8007694:	e7c1      	b.n	800761a <_strtod_l+0x14a>
 8007696:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	9219      	str	r2, [sp, #100]	; 0x64
 800769c:	785a      	ldrb	r2, [r3, #1]
 800769e:	f1bb 0f00 	cmp.w	fp, #0
 80076a2:	d037      	beq.n	8007714 <_strtod_l+0x244>
 80076a4:	465e      	mov	r6, fp
 80076a6:	9008      	str	r0, [sp, #32]
 80076a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80076ac:	2b09      	cmp	r3, #9
 80076ae:	d912      	bls.n	80076d6 <_strtod_l+0x206>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e7c4      	b.n	800763e <_strtod_l+0x16e>
 80076b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076b6:	3001      	adds	r0, #1
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	9219      	str	r2, [sp, #100]	; 0x64
 80076bc:	785a      	ldrb	r2, [r3, #1]
 80076be:	2a30      	cmp	r2, #48	; 0x30
 80076c0:	d0f8      	beq.n	80076b4 <_strtod_l+0x1e4>
 80076c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80076c6:	2b08      	cmp	r3, #8
 80076c8:	f200 84e4 	bhi.w	8008094 <_strtod_l+0xbc4>
 80076cc:	9008      	str	r0, [sp, #32]
 80076ce:	2000      	movs	r0, #0
 80076d0:	4606      	mov	r6, r0
 80076d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80076d6:	3a30      	subs	r2, #48	; 0x30
 80076d8:	f100 0301 	add.w	r3, r0, #1
 80076dc:	d014      	beq.n	8007708 <_strtod_l+0x238>
 80076de:	9908      	ldr	r1, [sp, #32]
 80076e0:	eb00 0c06 	add.w	ip, r0, r6
 80076e4:	4419      	add	r1, r3
 80076e6:	9108      	str	r1, [sp, #32]
 80076e8:	4633      	mov	r3, r6
 80076ea:	210a      	movs	r1, #10
 80076ec:	4563      	cmp	r3, ip
 80076ee:	d113      	bne.n	8007718 <_strtod_l+0x248>
 80076f0:	1833      	adds	r3, r6, r0
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	f106 0601 	add.w	r6, r6, #1
 80076f8:	4406      	add	r6, r0
 80076fa:	dc1a      	bgt.n	8007732 <_strtod_l+0x262>
 80076fc:	230a      	movs	r3, #10
 80076fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007700:	fb03 2301 	mla	r3, r3, r1, r2
 8007704:	930a      	str	r3, [sp, #40]	; 0x28
 8007706:	2300      	movs	r3, #0
 8007708:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800770a:	4618      	mov	r0, r3
 800770c:	1c51      	adds	r1, r2, #1
 800770e:	9119      	str	r1, [sp, #100]	; 0x64
 8007710:	7852      	ldrb	r2, [r2, #1]
 8007712:	e7c9      	b.n	80076a8 <_strtod_l+0x1d8>
 8007714:	4658      	mov	r0, fp
 8007716:	e7d2      	b.n	80076be <_strtod_l+0x1ee>
 8007718:	2b08      	cmp	r3, #8
 800771a:	f103 0301 	add.w	r3, r3, #1
 800771e:	dc03      	bgt.n	8007728 <_strtod_l+0x258>
 8007720:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007722:	434f      	muls	r7, r1
 8007724:	970a      	str	r7, [sp, #40]	; 0x28
 8007726:	e7e1      	b.n	80076ec <_strtod_l+0x21c>
 8007728:	2b10      	cmp	r3, #16
 800772a:	bfd8      	it	le
 800772c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007730:	e7dc      	b.n	80076ec <_strtod_l+0x21c>
 8007732:	2e10      	cmp	r6, #16
 8007734:	bfdc      	itt	le
 8007736:	230a      	movle	r3, #10
 8007738:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800773c:	e7e3      	b.n	8007706 <_strtod_l+0x236>
 800773e:	2300      	movs	r3, #0
 8007740:	9308      	str	r3, [sp, #32]
 8007742:	2301      	movs	r3, #1
 8007744:	e780      	b.n	8007648 <_strtod_l+0x178>
 8007746:	f04f 0c00 	mov.w	ip, #0
 800774a:	1caa      	adds	r2, r5, #2
 800774c:	9219      	str	r2, [sp, #100]	; 0x64
 800774e:	78aa      	ldrb	r2, [r5, #2]
 8007750:	e788      	b.n	8007664 <_strtod_l+0x194>
 8007752:	f04f 0c01 	mov.w	ip, #1
 8007756:	e7f8      	b.n	800774a <_strtod_l+0x27a>
 8007758:	0800a078 	.word	0x0800a078
 800775c:	7ff00000 	.word	0x7ff00000
 8007760:	0800a06a 	.word	0x0800a06a
 8007764:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007766:	1c51      	adds	r1, r2, #1
 8007768:	9119      	str	r1, [sp, #100]	; 0x64
 800776a:	7852      	ldrb	r2, [r2, #1]
 800776c:	2a30      	cmp	r2, #48	; 0x30
 800776e:	d0f9      	beq.n	8007764 <_strtod_l+0x294>
 8007770:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007774:	2908      	cmp	r1, #8
 8007776:	f63f af7a 	bhi.w	800766e <_strtod_l+0x19e>
 800777a:	3a30      	subs	r2, #48	; 0x30
 800777c:	9209      	str	r2, [sp, #36]	; 0x24
 800777e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007780:	920c      	str	r2, [sp, #48]	; 0x30
 8007782:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007784:	1c57      	adds	r7, r2, #1
 8007786:	9719      	str	r7, [sp, #100]	; 0x64
 8007788:	7852      	ldrb	r2, [r2, #1]
 800778a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800778e:	f1be 0f09 	cmp.w	lr, #9
 8007792:	d938      	bls.n	8007806 <_strtod_l+0x336>
 8007794:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007796:	1a7f      	subs	r7, r7, r1
 8007798:	2f08      	cmp	r7, #8
 800779a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800779e:	dc03      	bgt.n	80077a8 <_strtod_l+0x2d8>
 80077a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077a2:	428f      	cmp	r7, r1
 80077a4:	bfa8      	it	ge
 80077a6:	460f      	movge	r7, r1
 80077a8:	f1bc 0f00 	cmp.w	ip, #0
 80077ac:	d000      	beq.n	80077b0 <_strtod_l+0x2e0>
 80077ae:	427f      	negs	r7, r7
 80077b0:	2e00      	cmp	r6, #0
 80077b2:	d14f      	bne.n	8007854 <_strtod_l+0x384>
 80077b4:	9905      	ldr	r1, [sp, #20]
 80077b6:	4301      	orrs	r1, r0
 80077b8:	f47f aec3 	bne.w	8007542 <_strtod_l+0x72>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f47f aedb 	bne.w	8007578 <_strtod_l+0xa8>
 80077c2:	2a69      	cmp	r2, #105	; 0x69
 80077c4:	d029      	beq.n	800781a <_strtod_l+0x34a>
 80077c6:	dc26      	bgt.n	8007816 <_strtod_l+0x346>
 80077c8:	2a49      	cmp	r2, #73	; 0x49
 80077ca:	d026      	beq.n	800781a <_strtod_l+0x34a>
 80077cc:	2a4e      	cmp	r2, #78	; 0x4e
 80077ce:	f47f aed3 	bne.w	8007578 <_strtod_l+0xa8>
 80077d2:	499a      	ldr	r1, [pc, #616]	; (8007a3c <_strtod_l+0x56c>)
 80077d4:	a819      	add	r0, sp, #100	; 0x64
 80077d6:	f000 ffef 	bl	80087b8 <__match>
 80077da:	2800      	cmp	r0, #0
 80077dc:	f43f aecc 	beq.w	8007578 <_strtod_l+0xa8>
 80077e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2b28      	cmp	r3, #40	; 0x28
 80077e6:	d12f      	bne.n	8007848 <_strtod_l+0x378>
 80077e8:	4995      	ldr	r1, [pc, #596]	; (8007a40 <_strtod_l+0x570>)
 80077ea:	aa1c      	add	r2, sp, #112	; 0x70
 80077ec:	a819      	add	r0, sp, #100	; 0x64
 80077ee:	f000 fff7 	bl	80087e0 <__hexnan>
 80077f2:	2805      	cmp	r0, #5
 80077f4:	d128      	bne.n	8007848 <_strtod_l+0x378>
 80077f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077f8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80077fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007800:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007804:	e69d      	b.n	8007542 <_strtod_l+0x72>
 8007806:	210a      	movs	r1, #10
 8007808:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800780a:	fb01 2107 	mla	r1, r1, r7, r2
 800780e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007812:	9209      	str	r2, [sp, #36]	; 0x24
 8007814:	e7b5      	b.n	8007782 <_strtod_l+0x2b2>
 8007816:	2a6e      	cmp	r2, #110	; 0x6e
 8007818:	e7d9      	b.n	80077ce <_strtod_l+0x2fe>
 800781a:	498a      	ldr	r1, [pc, #552]	; (8007a44 <_strtod_l+0x574>)
 800781c:	a819      	add	r0, sp, #100	; 0x64
 800781e:	f000 ffcb 	bl	80087b8 <__match>
 8007822:	2800      	cmp	r0, #0
 8007824:	f43f aea8 	beq.w	8007578 <_strtod_l+0xa8>
 8007828:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800782a:	4987      	ldr	r1, [pc, #540]	; (8007a48 <_strtod_l+0x578>)
 800782c:	3b01      	subs	r3, #1
 800782e:	a819      	add	r0, sp, #100	; 0x64
 8007830:	9319      	str	r3, [sp, #100]	; 0x64
 8007832:	f000 ffc1 	bl	80087b8 <__match>
 8007836:	b910      	cbnz	r0, 800783e <_strtod_l+0x36e>
 8007838:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800783a:	3301      	adds	r3, #1
 800783c:	9319      	str	r3, [sp, #100]	; 0x64
 800783e:	f04f 0800 	mov.w	r8, #0
 8007842:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007a4c <_strtod_l+0x57c>
 8007846:	e67c      	b.n	8007542 <_strtod_l+0x72>
 8007848:	4881      	ldr	r0, [pc, #516]	; (8007a50 <_strtod_l+0x580>)
 800784a:	f000 fd01 	bl	8008250 <nan>
 800784e:	4680      	mov	r8, r0
 8007850:	4689      	mov	r9, r1
 8007852:	e676      	b.n	8007542 <_strtod_l+0x72>
 8007854:	9b08      	ldr	r3, [sp, #32]
 8007856:	f1bb 0f00 	cmp.w	fp, #0
 800785a:	bf08      	it	eq
 800785c:	46b3      	moveq	fp, r6
 800785e:	1afb      	subs	r3, r7, r3
 8007860:	2e10      	cmp	r6, #16
 8007862:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007864:	4635      	mov	r5, r6
 8007866:	9309      	str	r3, [sp, #36]	; 0x24
 8007868:	bfa8      	it	ge
 800786a:	2510      	movge	r5, #16
 800786c:	f7f8 fdb2 	bl	80003d4 <__aeabi_ui2d>
 8007870:	2e09      	cmp	r6, #9
 8007872:	4680      	mov	r8, r0
 8007874:	4689      	mov	r9, r1
 8007876:	dd13      	ble.n	80078a0 <_strtod_l+0x3d0>
 8007878:	4b76      	ldr	r3, [pc, #472]	; (8007a54 <_strtod_l+0x584>)
 800787a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800787e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007882:	f7f8 fe21 	bl	80004c8 <__aeabi_dmul>
 8007886:	4680      	mov	r8, r0
 8007888:	4650      	mov	r0, sl
 800788a:	4689      	mov	r9, r1
 800788c:	f7f8 fda2 	bl	80003d4 <__aeabi_ui2d>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4640      	mov	r0, r8
 8007896:	4649      	mov	r1, r9
 8007898:	f7f8 fc60 	bl	800015c <__adddf3>
 800789c:	4680      	mov	r8, r0
 800789e:	4689      	mov	r9, r1
 80078a0:	2e0f      	cmp	r6, #15
 80078a2:	dc36      	bgt.n	8007912 <_strtod_l+0x442>
 80078a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f43f ae4b 	beq.w	8007542 <_strtod_l+0x72>
 80078ac:	dd22      	ble.n	80078f4 <_strtod_l+0x424>
 80078ae:	2b16      	cmp	r3, #22
 80078b0:	dc09      	bgt.n	80078c6 <_strtod_l+0x3f6>
 80078b2:	4968      	ldr	r1, [pc, #416]	; (8007a54 <_strtod_l+0x584>)
 80078b4:	4642      	mov	r2, r8
 80078b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078ba:	464b      	mov	r3, r9
 80078bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078c0:	f7f8 fe02 	bl	80004c8 <__aeabi_dmul>
 80078c4:	e7c3      	b.n	800784e <_strtod_l+0x37e>
 80078c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80078cc:	4293      	cmp	r3, r2
 80078ce:	db20      	blt.n	8007912 <_strtod_l+0x442>
 80078d0:	4c60      	ldr	r4, [pc, #384]	; (8007a54 <_strtod_l+0x584>)
 80078d2:	f1c6 060f 	rsb	r6, r6, #15
 80078d6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80078da:	4642      	mov	r2, r8
 80078dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078e0:	464b      	mov	r3, r9
 80078e2:	f7f8 fdf1 	bl	80004c8 <__aeabi_dmul>
 80078e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e8:	1b9e      	subs	r6, r3, r6
 80078ea:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80078ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078f2:	e7e5      	b.n	80078c0 <_strtod_l+0x3f0>
 80078f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f6:	3316      	adds	r3, #22
 80078f8:	db0b      	blt.n	8007912 <_strtod_l+0x442>
 80078fa:	9b08      	ldr	r3, [sp, #32]
 80078fc:	4640      	mov	r0, r8
 80078fe:	1bdf      	subs	r7, r3, r7
 8007900:	4b54      	ldr	r3, [pc, #336]	; (8007a54 <_strtod_l+0x584>)
 8007902:	4649      	mov	r1, r9
 8007904:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800790c:	f7f8 ff06 	bl	800071c <__aeabi_ddiv>
 8007910:	e79d      	b.n	800784e <_strtod_l+0x37e>
 8007912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007914:	1b75      	subs	r5, r6, r5
 8007916:	441d      	add	r5, r3
 8007918:	2d00      	cmp	r5, #0
 800791a:	dd70      	ble.n	80079fe <_strtod_l+0x52e>
 800791c:	f015 030f 	ands.w	r3, r5, #15
 8007920:	d00a      	beq.n	8007938 <_strtod_l+0x468>
 8007922:	494c      	ldr	r1, [pc, #304]	; (8007a54 <_strtod_l+0x584>)
 8007924:	4642      	mov	r2, r8
 8007926:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800792a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800792e:	464b      	mov	r3, r9
 8007930:	f7f8 fdca 	bl	80004c8 <__aeabi_dmul>
 8007934:	4680      	mov	r8, r0
 8007936:	4689      	mov	r9, r1
 8007938:	f035 050f 	bics.w	r5, r5, #15
 800793c:	d04d      	beq.n	80079da <_strtod_l+0x50a>
 800793e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007942:	dd22      	ble.n	800798a <_strtod_l+0x4ba>
 8007944:	2600      	movs	r6, #0
 8007946:	46b3      	mov	fp, r6
 8007948:	960b      	str	r6, [sp, #44]	; 0x2c
 800794a:	9608      	str	r6, [sp, #32]
 800794c:	2322      	movs	r3, #34	; 0x22
 800794e:	f04f 0800 	mov.w	r8, #0
 8007952:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007a4c <_strtod_l+0x57c>
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795a:	2b00      	cmp	r3, #0
 800795c:	f43f adf1 	beq.w	8007542 <_strtod_l+0x72>
 8007960:	4620      	mov	r0, r4
 8007962:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007964:	f001 f980 	bl	8008c68 <_Bfree>
 8007968:	4620      	mov	r0, r4
 800796a:	9908      	ldr	r1, [sp, #32]
 800796c:	f001 f97c 	bl	8008c68 <_Bfree>
 8007970:	4659      	mov	r1, fp
 8007972:	4620      	mov	r0, r4
 8007974:	f001 f978 	bl	8008c68 <_Bfree>
 8007978:	4620      	mov	r0, r4
 800797a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800797c:	f001 f974 	bl	8008c68 <_Bfree>
 8007980:	4631      	mov	r1, r6
 8007982:	4620      	mov	r0, r4
 8007984:	f001 f970 	bl	8008c68 <_Bfree>
 8007988:	e5db      	b.n	8007542 <_strtod_l+0x72>
 800798a:	4b33      	ldr	r3, [pc, #204]	; (8007a58 <_strtod_l+0x588>)
 800798c:	4640      	mov	r0, r8
 800798e:	9305      	str	r3, [sp, #20]
 8007990:	2300      	movs	r3, #0
 8007992:	4649      	mov	r1, r9
 8007994:	469a      	mov	sl, r3
 8007996:	112d      	asrs	r5, r5, #4
 8007998:	2d01      	cmp	r5, #1
 800799a:	dc21      	bgt.n	80079e0 <_strtod_l+0x510>
 800799c:	b10b      	cbz	r3, 80079a2 <_strtod_l+0x4d2>
 800799e:	4680      	mov	r8, r0
 80079a0:	4689      	mov	r9, r1
 80079a2:	492d      	ldr	r1, [pc, #180]	; (8007a58 <_strtod_l+0x588>)
 80079a4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80079a8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80079ac:	4642      	mov	r2, r8
 80079ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079b2:	464b      	mov	r3, r9
 80079b4:	f7f8 fd88 	bl	80004c8 <__aeabi_dmul>
 80079b8:	4b24      	ldr	r3, [pc, #144]	; (8007a4c <_strtod_l+0x57c>)
 80079ba:	460a      	mov	r2, r1
 80079bc:	400b      	ands	r3, r1
 80079be:	4927      	ldr	r1, [pc, #156]	; (8007a5c <_strtod_l+0x58c>)
 80079c0:	4680      	mov	r8, r0
 80079c2:	428b      	cmp	r3, r1
 80079c4:	d8be      	bhi.n	8007944 <_strtod_l+0x474>
 80079c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80079ca:	428b      	cmp	r3, r1
 80079cc:	bf86      	itte	hi
 80079ce:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80079d2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007a60 <_strtod_l+0x590>
 80079d6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80079da:	2300      	movs	r3, #0
 80079dc:	9305      	str	r3, [sp, #20]
 80079de:	e07b      	b.n	8007ad8 <_strtod_l+0x608>
 80079e0:	07ea      	lsls	r2, r5, #31
 80079e2:	d505      	bpl.n	80079f0 <_strtod_l+0x520>
 80079e4:	9b05      	ldr	r3, [sp, #20]
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	f7f8 fd6d 	bl	80004c8 <__aeabi_dmul>
 80079ee:	2301      	movs	r3, #1
 80079f0:	9a05      	ldr	r2, [sp, #20]
 80079f2:	f10a 0a01 	add.w	sl, sl, #1
 80079f6:	3208      	adds	r2, #8
 80079f8:	106d      	asrs	r5, r5, #1
 80079fa:	9205      	str	r2, [sp, #20]
 80079fc:	e7cc      	b.n	8007998 <_strtod_l+0x4c8>
 80079fe:	d0ec      	beq.n	80079da <_strtod_l+0x50a>
 8007a00:	426d      	negs	r5, r5
 8007a02:	f015 020f 	ands.w	r2, r5, #15
 8007a06:	d00a      	beq.n	8007a1e <_strtod_l+0x54e>
 8007a08:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <_strtod_l+0x584>)
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a10:	4649      	mov	r1, r9
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fe81 	bl	800071c <__aeabi_ddiv>
 8007a1a:	4680      	mov	r8, r0
 8007a1c:	4689      	mov	r9, r1
 8007a1e:	112d      	asrs	r5, r5, #4
 8007a20:	d0db      	beq.n	80079da <_strtod_l+0x50a>
 8007a22:	2d1f      	cmp	r5, #31
 8007a24:	dd1e      	ble.n	8007a64 <_strtod_l+0x594>
 8007a26:	2600      	movs	r6, #0
 8007a28:	46b3      	mov	fp, r6
 8007a2a:	960b      	str	r6, [sp, #44]	; 0x2c
 8007a2c:	9608      	str	r6, [sp, #32]
 8007a2e:	2322      	movs	r3, #34	; 0x22
 8007a30:	f04f 0800 	mov.w	r8, #0
 8007a34:	f04f 0900 	mov.w	r9, #0
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	e78d      	b.n	8007958 <_strtod_l+0x488>
 8007a3c:	0800a075 	.word	0x0800a075
 8007a40:	0800a08c 	.word	0x0800a08c
 8007a44:	0800a06c 	.word	0x0800a06c
 8007a48:	0800a06f 	.word	0x0800a06f
 8007a4c:	7ff00000 	.word	0x7ff00000
 8007a50:	0800a3ef 	.word	0x0800a3ef
 8007a54:	0800a2e0 	.word	0x0800a2e0
 8007a58:	0800a2b8 	.word	0x0800a2b8
 8007a5c:	7ca00000 	.word	0x7ca00000
 8007a60:	7fefffff 	.word	0x7fefffff
 8007a64:	f015 0310 	ands.w	r3, r5, #16
 8007a68:	bf18      	it	ne
 8007a6a:	236a      	movne	r3, #106	; 0x6a
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	9305      	str	r3, [sp, #20]
 8007a70:	4649      	mov	r1, r9
 8007a72:	2300      	movs	r3, #0
 8007a74:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007d40 <_strtod_l+0x870>
 8007a78:	07ea      	lsls	r2, r5, #31
 8007a7a:	d504      	bpl.n	8007a86 <_strtod_l+0x5b6>
 8007a7c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007a80:	f7f8 fd22 	bl	80004c8 <__aeabi_dmul>
 8007a84:	2301      	movs	r3, #1
 8007a86:	106d      	asrs	r5, r5, #1
 8007a88:	f10a 0a08 	add.w	sl, sl, #8
 8007a8c:	d1f4      	bne.n	8007a78 <_strtod_l+0x5a8>
 8007a8e:	b10b      	cbz	r3, 8007a94 <_strtod_l+0x5c4>
 8007a90:	4680      	mov	r8, r0
 8007a92:	4689      	mov	r9, r1
 8007a94:	9b05      	ldr	r3, [sp, #20]
 8007a96:	b1bb      	cbz	r3, 8007ac8 <_strtod_l+0x5f8>
 8007a98:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007a9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	dd10      	ble.n	8007ac8 <_strtod_l+0x5f8>
 8007aa6:	2b1f      	cmp	r3, #31
 8007aa8:	f340 8128 	ble.w	8007cfc <_strtod_l+0x82c>
 8007aac:	2b34      	cmp	r3, #52	; 0x34
 8007aae:	bfd8      	it	le
 8007ab0:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007ab4:	f04f 0800 	mov.w	r8, #0
 8007ab8:	bfcf      	iteee	gt
 8007aba:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007abe:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007ac2:	4093      	lslle	r3, r2
 8007ac4:	ea03 0901 	andle.w	r9, r3, r1
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2300      	movs	r3, #0
 8007acc:	4640      	mov	r0, r8
 8007ace:	4649      	mov	r1, r9
 8007ad0:	f7f8 ff62 	bl	8000998 <__aeabi_dcmpeq>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d1a6      	bne.n	8007a26 <_strtod_l+0x556>
 8007ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ada:	465a      	mov	r2, fp
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4633      	mov	r3, r6
 8007ae2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ae4:	f001 f928 	bl	8008d38 <__s2b>
 8007ae8:	900b      	str	r0, [sp, #44]	; 0x2c
 8007aea:	2800      	cmp	r0, #0
 8007aec:	f43f af2a 	beq.w	8007944 <_strtod_l+0x474>
 8007af0:	2600      	movs	r6, #0
 8007af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af4:	9b08      	ldr	r3, [sp, #32]
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	eba3 0307 	sub.w	r3, r3, r7
 8007afc:	bfa8      	it	ge
 8007afe:	2300      	movge	r3, #0
 8007b00:	46b3      	mov	fp, r6
 8007b02:	9312      	str	r3, [sp, #72]	; 0x48
 8007b04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007b08:	9316      	str	r3, [sp, #88]	; 0x58
 8007b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	6859      	ldr	r1, [r3, #4]
 8007b10:	f001 f86a 	bl	8008be8 <_Balloc>
 8007b14:	9008      	str	r0, [sp, #32]
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f43f af18 	beq.w	800794c <_strtod_l+0x47c>
 8007b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b1e:	300c      	adds	r0, #12
 8007b20:	691a      	ldr	r2, [r3, #16]
 8007b22:	f103 010c 	add.w	r1, r3, #12
 8007b26:	3202      	adds	r2, #2
 8007b28:	0092      	lsls	r2, r2, #2
 8007b2a:	f000 fb82 	bl	8008232 <memcpy>
 8007b2e:	ab1c      	add	r3, sp, #112	; 0x70
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	ab1b      	add	r3, sp, #108	; 0x6c
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	4642      	mov	r2, r8
 8007b38:	464b      	mov	r3, r9
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007b40:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007b44:	f001 fc24 	bl	8009390 <__d2b>
 8007b48:	901a      	str	r0, [sp, #104]	; 0x68
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	f43f aefe 	beq.w	800794c <_strtod_l+0x47c>
 8007b50:	2101      	movs	r1, #1
 8007b52:	4620      	mov	r0, r4
 8007b54:	f001 f988 	bl	8008e68 <__i2b>
 8007b58:	4683      	mov	fp, r0
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	f43f aef6 	beq.w	800794c <_strtod_l+0x47c>
 8007b60:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007b62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007b64:	2f00      	cmp	r7, #0
 8007b66:	bfab      	itete	ge
 8007b68:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007b6a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007b6c:	eb07 0a03 	addge.w	sl, r7, r3
 8007b70:	1bdd      	sublt	r5, r3, r7
 8007b72:	9b05      	ldr	r3, [sp, #20]
 8007b74:	bfa8      	it	ge
 8007b76:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007b78:	eba7 0703 	sub.w	r7, r7, r3
 8007b7c:	4417      	add	r7, r2
 8007b7e:	4b71      	ldr	r3, [pc, #452]	; (8007d44 <_strtod_l+0x874>)
 8007b80:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8007b84:	bfb8      	it	lt
 8007b86:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007b8a:	429f      	cmp	r7, r3
 8007b8c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b90:	f280 80c7 	bge.w	8007d22 <_strtod_l+0x852>
 8007b94:	1bdb      	subs	r3, r3, r7
 8007b96:	2b1f      	cmp	r3, #31
 8007b98:	f04f 0101 	mov.w	r1, #1
 8007b9c:	eba2 0203 	sub.w	r2, r2, r3
 8007ba0:	f300 80b3 	bgt.w	8007d0a <_strtod_l+0x83a>
 8007ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007baa:	2300      	movs	r3, #0
 8007bac:	9310      	str	r3, [sp, #64]	; 0x40
 8007bae:	eb0a 0702 	add.w	r7, sl, r2
 8007bb2:	9b05      	ldr	r3, [sp, #20]
 8007bb4:	45ba      	cmp	sl, r7
 8007bb6:	4415      	add	r5, r2
 8007bb8:	441d      	add	r5, r3
 8007bba:	4653      	mov	r3, sl
 8007bbc:	bfa8      	it	ge
 8007bbe:	463b      	movge	r3, r7
 8007bc0:	42ab      	cmp	r3, r5
 8007bc2:	bfa8      	it	ge
 8007bc4:	462b      	movge	r3, r5
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfc2      	ittt	gt
 8007bca:	1aff      	subgt	r7, r7, r3
 8007bcc:	1aed      	subgt	r5, r5, r3
 8007bce:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007bd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dd17      	ble.n	8007c08 <_strtod_l+0x738>
 8007bd8:	4659      	mov	r1, fp
 8007bda:	461a      	mov	r2, r3
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f001 fa01 	bl	8008fe4 <__pow5mult>
 8007be2:	4683      	mov	fp, r0
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f43f aeb1 	beq.w	800794c <_strtod_l+0x47c>
 8007bea:	4601      	mov	r1, r0
 8007bec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f001 f950 	bl	8008e94 <__multiply>
 8007bf4:	900a      	str	r0, [sp, #40]	; 0x28
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	f43f aea8 	beq.w	800794c <_strtod_l+0x47c>
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c00:	f001 f832 	bl	8008c68 <_Bfree>
 8007c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c06:	931a      	str	r3, [sp, #104]	; 0x68
 8007c08:	2f00      	cmp	r7, #0
 8007c0a:	f300 808f 	bgt.w	8007d2c <_strtod_l+0x85c>
 8007c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	dd08      	ble.n	8007c26 <_strtod_l+0x756>
 8007c14:	4620      	mov	r0, r4
 8007c16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c18:	9908      	ldr	r1, [sp, #32]
 8007c1a:	f001 f9e3 	bl	8008fe4 <__pow5mult>
 8007c1e:	9008      	str	r0, [sp, #32]
 8007c20:	2800      	cmp	r0, #0
 8007c22:	f43f ae93 	beq.w	800794c <_strtod_l+0x47c>
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	dd08      	ble.n	8007c3c <_strtod_l+0x76c>
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	9908      	ldr	r1, [sp, #32]
 8007c30:	f001 fa32 	bl	8009098 <__lshift>
 8007c34:	9008      	str	r0, [sp, #32]
 8007c36:	2800      	cmp	r0, #0
 8007c38:	f43f ae88 	beq.w	800794c <_strtod_l+0x47c>
 8007c3c:	f1ba 0f00 	cmp.w	sl, #0
 8007c40:	dd08      	ble.n	8007c54 <_strtod_l+0x784>
 8007c42:	4659      	mov	r1, fp
 8007c44:	4652      	mov	r2, sl
 8007c46:	4620      	mov	r0, r4
 8007c48:	f001 fa26 	bl	8009098 <__lshift>
 8007c4c:	4683      	mov	fp, r0
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f43f ae7c 	beq.w	800794c <_strtod_l+0x47c>
 8007c54:	4620      	mov	r0, r4
 8007c56:	9a08      	ldr	r2, [sp, #32]
 8007c58:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c5a:	f001 faa5 	bl	80091a8 <__mdiff>
 8007c5e:	4606      	mov	r6, r0
 8007c60:	2800      	cmp	r0, #0
 8007c62:	f43f ae73 	beq.w	800794c <_strtod_l+0x47c>
 8007c66:	2500      	movs	r5, #0
 8007c68:	68c3      	ldr	r3, [r0, #12]
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	60c5      	str	r5, [r0, #12]
 8007c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c70:	f001 fa7e 	bl	8009170 <__mcmp>
 8007c74:	42a8      	cmp	r0, r5
 8007c76:	da6b      	bge.n	8007d50 <_strtod_l+0x880>
 8007c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7a:	ea53 0308 	orrs.w	r3, r3, r8
 8007c7e:	f040 808f 	bne.w	8007da0 <_strtod_l+0x8d0>
 8007c82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f040 808a 	bne.w	8007da0 <_strtod_l+0x8d0>
 8007c8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c90:	0d1b      	lsrs	r3, r3, #20
 8007c92:	051b      	lsls	r3, r3, #20
 8007c94:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c98:	f240 8082 	bls.w	8007da0 <_strtod_l+0x8d0>
 8007c9c:	6973      	ldr	r3, [r6, #20]
 8007c9e:	b913      	cbnz	r3, 8007ca6 <_strtod_l+0x7d6>
 8007ca0:	6933      	ldr	r3, [r6, #16]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	dd7c      	ble.n	8007da0 <_strtod_l+0x8d0>
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	2201      	movs	r2, #1
 8007caa:	4620      	mov	r0, r4
 8007cac:	f001 f9f4 	bl	8009098 <__lshift>
 8007cb0:	4659      	mov	r1, fp
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	f001 fa5c 	bl	8009170 <__mcmp>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	dd71      	ble.n	8007da0 <_strtod_l+0x8d0>
 8007cbc:	9905      	ldr	r1, [sp, #20]
 8007cbe:	464b      	mov	r3, r9
 8007cc0:	4a21      	ldr	r2, [pc, #132]	; (8007d48 <_strtod_l+0x878>)
 8007cc2:	2900      	cmp	r1, #0
 8007cc4:	f000 808d 	beq.w	8007de2 <_strtod_l+0x912>
 8007cc8:	ea02 0109 	and.w	r1, r2, r9
 8007ccc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007cd0:	f300 8087 	bgt.w	8007de2 <_strtod_l+0x912>
 8007cd4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007cd8:	f77f aea9 	ble.w	8007a2e <_strtod_l+0x55e>
 8007cdc:	4640      	mov	r0, r8
 8007cde:	4649      	mov	r1, r9
 8007ce0:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <_strtod_l+0x87c>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f7f8 fbf0 	bl	80004c8 <__aeabi_dmul>
 8007ce8:	4b17      	ldr	r3, [pc, #92]	; (8007d48 <_strtod_l+0x878>)
 8007cea:	4680      	mov	r8, r0
 8007cec:	400b      	ands	r3, r1
 8007cee:	4689      	mov	r9, r1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f47f ae35 	bne.w	8007960 <_strtod_l+0x490>
 8007cf6:	2322      	movs	r3, #34	; 0x22
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	e631      	b.n	8007960 <_strtod_l+0x490>
 8007cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d00:	fa02 f303 	lsl.w	r3, r2, r3
 8007d04:	ea03 0808 	and.w	r8, r3, r8
 8007d08:	e6de      	b.n	8007ac8 <_strtod_l+0x5f8>
 8007d0a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007d0e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007d12:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007d16:	37e2      	adds	r7, #226	; 0xe2
 8007d18:	fa01 f307 	lsl.w	r3, r1, r7
 8007d1c:	9310      	str	r3, [sp, #64]	; 0x40
 8007d1e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007d20:	e745      	b.n	8007bae <_strtod_l+0x6de>
 8007d22:	2300      	movs	r3, #0
 8007d24:	9310      	str	r3, [sp, #64]	; 0x40
 8007d26:	2301      	movs	r3, #1
 8007d28:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d2a:	e740      	b.n	8007bae <_strtod_l+0x6de>
 8007d2c:	463a      	mov	r2, r7
 8007d2e:	4620      	mov	r0, r4
 8007d30:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d32:	f001 f9b1 	bl	8009098 <__lshift>
 8007d36:	901a      	str	r0, [sp, #104]	; 0x68
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	f47f af68 	bne.w	8007c0e <_strtod_l+0x73e>
 8007d3e:	e605      	b.n	800794c <_strtod_l+0x47c>
 8007d40:	0800a0a0 	.word	0x0800a0a0
 8007d44:	fffffc02 	.word	0xfffffc02
 8007d48:	7ff00000 	.word	0x7ff00000
 8007d4c:	39500000 	.word	0x39500000
 8007d50:	46ca      	mov	sl, r9
 8007d52:	d165      	bne.n	8007e20 <_strtod_l+0x950>
 8007d54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d5a:	b352      	cbz	r2, 8007db2 <_strtod_l+0x8e2>
 8007d5c:	4a9e      	ldr	r2, [pc, #632]	; (8007fd8 <_strtod_l+0xb08>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d12a      	bne.n	8007db8 <_strtod_l+0x8e8>
 8007d62:	9b05      	ldr	r3, [sp, #20]
 8007d64:	4641      	mov	r1, r8
 8007d66:	b1fb      	cbz	r3, 8007da8 <_strtod_l+0x8d8>
 8007d68:	4b9c      	ldr	r3, [pc, #624]	; (8007fdc <_strtod_l+0xb0c>)
 8007d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d6e:	ea09 0303 	and.w	r3, r9, r3
 8007d72:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d76:	d81a      	bhi.n	8007dae <_strtod_l+0x8de>
 8007d78:	0d1b      	lsrs	r3, r3, #20
 8007d7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d82:	4299      	cmp	r1, r3
 8007d84:	d118      	bne.n	8007db8 <_strtod_l+0x8e8>
 8007d86:	4b96      	ldr	r3, [pc, #600]	; (8007fe0 <_strtod_l+0xb10>)
 8007d88:	459a      	cmp	sl, r3
 8007d8a:	d102      	bne.n	8007d92 <_strtod_l+0x8c2>
 8007d8c:	3101      	adds	r1, #1
 8007d8e:	f43f addd 	beq.w	800794c <_strtod_l+0x47c>
 8007d92:	f04f 0800 	mov.w	r8, #0
 8007d96:	4b91      	ldr	r3, [pc, #580]	; (8007fdc <_strtod_l+0xb0c>)
 8007d98:	ea0a 0303 	and.w	r3, sl, r3
 8007d9c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007da0:	9b05      	ldr	r3, [sp, #20]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d19a      	bne.n	8007cdc <_strtod_l+0x80c>
 8007da6:	e5db      	b.n	8007960 <_strtod_l+0x490>
 8007da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dac:	e7e9      	b.n	8007d82 <_strtod_l+0x8b2>
 8007dae:	4613      	mov	r3, r2
 8007db0:	e7e7      	b.n	8007d82 <_strtod_l+0x8b2>
 8007db2:	ea53 0308 	orrs.w	r3, r3, r8
 8007db6:	d081      	beq.n	8007cbc <_strtod_l+0x7ec>
 8007db8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dba:	b1e3      	cbz	r3, 8007df6 <_strtod_l+0x926>
 8007dbc:	ea13 0f0a 	tst.w	r3, sl
 8007dc0:	d0ee      	beq.n	8007da0 <_strtod_l+0x8d0>
 8007dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	9a05      	ldr	r2, [sp, #20]
 8007dca:	b1c3      	cbz	r3, 8007dfe <_strtod_l+0x92e>
 8007dcc:	f7ff fb5e 	bl	800748c <sulp>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007dd6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007dd8:	f7f8 f9c0 	bl	800015c <__adddf3>
 8007ddc:	4680      	mov	r8, r0
 8007dde:	4689      	mov	r9, r1
 8007de0:	e7de      	b.n	8007da0 <_strtod_l+0x8d0>
 8007de2:	4013      	ands	r3, r2
 8007de4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007de8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007dec:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007df0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007df4:	e7d4      	b.n	8007da0 <_strtod_l+0x8d0>
 8007df6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007df8:	ea13 0f08 	tst.w	r3, r8
 8007dfc:	e7e0      	b.n	8007dc0 <_strtod_l+0x8f0>
 8007dfe:	f7ff fb45 	bl	800748c <sulp>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e0a:	f7f8 f9a5 	bl	8000158 <__aeabi_dsub>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2300      	movs	r3, #0
 8007e12:	4680      	mov	r8, r0
 8007e14:	4689      	mov	r9, r1
 8007e16:	f7f8 fdbf 	bl	8000998 <__aeabi_dcmpeq>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d0c0      	beq.n	8007da0 <_strtod_l+0x8d0>
 8007e1e:	e606      	b.n	8007a2e <_strtod_l+0x55e>
 8007e20:	4659      	mov	r1, fp
 8007e22:	4630      	mov	r0, r6
 8007e24:	f001 fb0a 	bl	800943c <__ratio>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007e30:	2200      	movs	r2, #0
 8007e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e36:	f7f8 fdc3 	bl	80009c0 <__aeabi_dcmple>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d06f      	beq.n	8007f1e <_strtod_l+0xa4e>
 8007e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d17c      	bne.n	8007f3e <_strtod_l+0xa6e>
 8007e44:	f1b8 0f00 	cmp.w	r8, #0
 8007e48:	d159      	bne.n	8007efe <_strtod_l+0xa2e>
 8007e4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d17b      	bne.n	8007f4a <_strtod_l+0xa7a>
 8007e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e56:	2200      	movs	r2, #0
 8007e58:	4b62      	ldr	r3, [pc, #392]	; (8007fe4 <_strtod_l+0xb14>)
 8007e5a:	f7f8 fda7 	bl	80009ac <__aeabi_dcmplt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d15a      	bne.n	8007f18 <_strtod_l+0xa48>
 8007e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e66:	2200      	movs	r2, #0
 8007e68:	4b5f      	ldr	r3, [pc, #380]	; (8007fe8 <_strtod_l+0xb18>)
 8007e6a:	f7f8 fb2d 	bl	80004c8 <__aeabi_dmul>
 8007e6e:	4605      	mov	r5, r0
 8007e70:	460f      	mov	r7, r1
 8007e72:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007e76:	9506      	str	r5, [sp, #24]
 8007e78:	9307      	str	r3, [sp, #28]
 8007e7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e7e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007e82:	4b56      	ldr	r3, [pc, #344]	; (8007fdc <_strtod_l+0xb0c>)
 8007e84:	4a55      	ldr	r2, [pc, #340]	; (8007fdc <_strtod_l+0xb0c>)
 8007e86:	ea0a 0303 	and.w	r3, sl, r3
 8007e8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e8c:	4b57      	ldr	r3, [pc, #348]	; (8007fec <_strtod_l+0xb1c>)
 8007e8e:	ea0a 0202 	and.w	r2, sl, r2
 8007e92:	429a      	cmp	r2, r3
 8007e94:	f040 80b0 	bne.w	8007ff8 <_strtod_l+0xb28>
 8007e98:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	f001 fa0e 	bl	80092c0 <__ulp>
 8007ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ea8:	f7f8 fb0e 	bl	80004c8 <__aeabi_dmul>
 8007eac:	4642      	mov	r2, r8
 8007eae:	464b      	mov	r3, r9
 8007eb0:	f7f8 f954 	bl	800015c <__adddf3>
 8007eb4:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007fdc <_strtod_l+0xb0c>
 8007eb8:	4a4d      	ldr	r2, [pc, #308]	; (8007ff0 <_strtod_l+0xb20>)
 8007eba:	ea01 0a0a 	and.w	sl, r1, sl
 8007ebe:	4592      	cmp	sl, r2
 8007ec0:	4680      	mov	r8, r0
 8007ec2:	d948      	bls.n	8007f56 <_strtod_l+0xa86>
 8007ec4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ec6:	4b46      	ldr	r3, [pc, #280]	; (8007fe0 <_strtod_l+0xb10>)
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d103      	bne.n	8007ed4 <_strtod_l+0xa04>
 8007ecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f43f ad3c 	beq.w	800794c <_strtod_l+0x47c>
 8007ed4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007ed8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007fe0 <_strtod_l+0xb10>
 8007edc:	4620      	mov	r0, r4
 8007ede:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ee0:	f000 fec2 	bl	8008c68 <_Bfree>
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	9908      	ldr	r1, [sp, #32]
 8007ee8:	f000 febe 	bl	8008c68 <_Bfree>
 8007eec:	4659      	mov	r1, fp
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 feba 	bl	8008c68 <_Bfree>
 8007ef4:	4631      	mov	r1, r6
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 feb6 	bl	8008c68 <_Bfree>
 8007efc:	e605      	b.n	8007b0a <_strtod_l+0x63a>
 8007efe:	f1b8 0f01 	cmp.w	r8, #1
 8007f02:	d103      	bne.n	8007f0c <_strtod_l+0xa3c>
 8007f04:	f1b9 0f00 	cmp.w	r9, #0
 8007f08:	f43f ad91 	beq.w	8007a2e <_strtod_l+0x55e>
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	4b39      	ldr	r3, [pc, #228]	; (8007ff4 <_strtod_l+0xb24>)
 8007f10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007f12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f16:	e016      	b.n	8007f46 <_strtod_l+0xa76>
 8007f18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007f1a:	4f33      	ldr	r7, [pc, #204]	; (8007fe8 <_strtod_l+0xb18>)
 8007f1c:	e7a9      	b.n	8007e72 <_strtod_l+0x9a2>
 8007f1e:	4b32      	ldr	r3, [pc, #200]	; (8007fe8 <_strtod_l+0xb18>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f26:	f7f8 facf 	bl	80004c8 <__aeabi_dmul>
 8007f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	460f      	mov	r7, r1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d09e      	beq.n	8007e72 <_strtod_l+0x9a2>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f3c:	e79d      	b.n	8007e7a <_strtod_l+0x9aa>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4b28      	ldr	r3, [pc, #160]	; (8007fe4 <_strtod_l+0xb14>)
 8007f42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f46:	4f27      	ldr	r7, [pc, #156]	; (8007fe4 <_strtod_l+0xb14>)
 8007f48:	e797      	b.n	8007e7a <_strtod_l+0x9aa>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4b29      	ldr	r3, [pc, #164]	; (8007ff4 <_strtod_l+0xb24>)
 8007f4e:	4645      	mov	r5, r8
 8007f50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f54:	e7f7      	b.n	8007f46 <_strtod_l+0xa76>
 8007f56:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007f5a:	9b05      	ldr	r3, [sp, #20]
 8007f5c:	46ca      	mov	sl, r9
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1bc      	bne.n	8007edc <_strtod_l+0xa0c>
 8007f62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f68:	0d1b      	lsrs	r3, r3, #20
 8007f6a:	051b      	lsls	r3, r3, #20
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d1b5      	bne.n	8007edc <_strtod_l+0xa0c>
 8007f70:	4628      	mov	r0, r5
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f9 f8d2 	bl	800111c <__aeabi_d2lz>
 8007f78:	f7f8 fa78 	bl	800046c <__aeabi_l2d>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4628      	mov	r0, r5
 8007f82:	4639      	mov	r1, r7
 8007f84:	f7f8 f8e8 	bl	8000158 <__aeabi_dsub>
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007f90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f96:	ea4a 0a08 	orr.w	sl, sl, r8
 8007f9a:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007f9e:	d06c      	beq.n	800807a <_strtod_l+0xbaa>
 8007fa0:	a309      	add	r3, pc, #36	; (adr r3, 8007fc8 <_strtod_l+0xaf8>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 fd01 	bl	80009ac <__aeabi_dcmplt>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	f47f acd8 	bne.w	8007960 <_strtod_l+0x490>
 8007fb0:	a307      	add	r3, pc, #28	; (adr r3, 8007fd0 <_strtod_l+0xb00>)
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fba:	f7f8 fd15 	bl	80009e8 <__aeabi_dcmpgt>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d08c      	beq.n	8007edc <_strtod_l+0xa0c>
 8007fc2:	e4cd      	b.n	8007960 <_strtod_l+0x490>
 8007fc4:	f3af 8000 	nop.w
 8007fc8:	94a03595 	.word	0x94a03595
 8007fcc:	3fdfffff 	.word	0x3fdfffff
 8007fd0:	35afe535 	.word	0x35afe535
 8007fd4:	3fe00000 	.word	0x3fe00000
 8007fd8:	000fffff 	.word	0x000fffff
 8007fdc:	7ff00000 	.word	0x7ff00000
 8007fe0:	7fefffff 	.word	0x7fefffff
 8007fe4:	3ff00000 	.word	0x3ff00000
 8007fe8:	3fe00000 	.word	0x3fe00000
 8007fec:	7fe00000 	.word	0x7fe00000
 8007ff0:	7c9fffff 	.word	0x7c9fffff
 8007ff4:	bff00000 	.word	0xbff00000
 8007ff8:	9b05      	ldr	r3, [sp, #20]
 8007ffa:	b333      	cbz	r3, 800804a <_strtod_l+0xb7a>
 8007ffc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ffe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008002:	d822      	bhi.n	800804a <_strtod_l+0xb7a>
 8008004:	a328      	add	r3, pc, #160	; (adr r3, 80080a8 <_strtod_l+0xbd8>)
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	4628      	mov	r0, r5
 800800c:	4639      	mov	r1, r7
 800800e:	f7f8 fcd7 	bl	80009c0 <__aeabi_dcmple>
 8008012:	b1a0      	cbz	r0, 800803e <_strtod_l+0xb6e>
 8008014:	4639      	mov	r1, r7
 8008016:	4628      	mov	r0, r5
 8008018:	f7f8 fd06 	bl	8000a28 <__aeabi_d2uiz>
 800801c:	2801      	cmp	r0, #1
 800801e:	bf38      	it	cc
 8008020:	2001      	movcc	r0, #1
 8008022:	f7f8 f9d7 	bl	80003d4 <__aeabi_ui2d>
 8008026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008028:	4605      	mov	r5, r0
 800802a:	460f      	mov	r7, r1
 800802c:	bb03      	cbnz	r3, 8008070 <_strtod_l+0xba0>
 800802e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008032:	9014      	str	r0, [sp, #80]	; 0x50
 8008034:	9315      	str	r3, [sp, #84]	; 0x54
 8008036:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800803a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800803e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008040:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008042:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	9311      	str	r3, [sp, #68]	; 0x44
 800804a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800804c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800804e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008052:	f001 f935 	bl	80092c0 <__ulp>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f7f8 fa33 	bl	80004c8 <__aeabi_dmul>
 8008062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008066:	f7f8 f879 	bl	800015c <__adddf3>
 800806a:	4680      	mov	r8, r0
 800806c:	4689      	mov	r9, r1
 800806e:	e774      	b.n	8007f5a <_strtod_l+0xa8a>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008078:	e7dd      	b.n	8008036 <_strtod_l+0xb66>
 800807a:	a30d      	add	r3, pc, #52	; (adr r3, 80080b0 <_strtod_l+0xbe0>)
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f7f8 fc94 	bl	80009ac <__aeabi_dcmplt>
 8008084:	e79b      	b.n	8007fbe <_strtod_l+0xaee>
 8008086:	2300      	movs	r3, #0
 8008088:	930e      	str	r3, [sp, #56]	; 0x38
 800808a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800808c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	f7ff ba5b 	b.w	800754a <_strtod_l+0x7a>
 8008094:	2a65      	cmp	r2, #101	; 0x65
 8008096:	f43f ab52 	beq.w	800773e <_strtod_l+0x26e>
 800809a:	2a45      	cmp	r2, #69	; 0x45
 800809c:	f43f ab4f 	beq.w	800773e <_strtod_l+0x26e>
 80080a0:	2301      	movs	r3, #1
 80080a2:	f7ff bb87 	b.w	80077b4 <_strtod_l+0x2e4>
 80080a6:	bf00      	nop
 80080a8:	ffc00000 	.word	0xffc00000
 80080ac:	41dfffff 	.word	0x41dfffff
 80080b0:	94a03595 	.word	0x94a03595
 80080b4:	3fcfffff 	.word	0x3fcfffff

080080b8 <strtof>:
 80080b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080bc:	4f24      	ldr	r7, [pc, #144]	; (8008150 <strtof+0x98>)
 80080be:	460a      	mov	r2, r1
 80080c0:	4b24      	ldr	r3, [pc, #144]	; (8008154 <strtof+0x9c>)
 80080c2:	4601      	mov	r1, r0
 80080c4:	6838      	ldr	r0, [r7, #0]
 80080c6:	f7ff fa03 	bl	80074d0 <_strtod_l>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	4606      	mov	r6, r0
 80080d0:	460c      	mov	r4, r1
 80080d2:	f7f8 fc93 	bl	80009fc <__aeabi_dcmpun>
 80080d6:	b168      	cbz	r0, 80080f4 <strtof+0x3c>
 80080d8:	2c00      	cmp	r4, #0
 80080da:	481f      	ldr	r0, [pc, #124]	; (8008158 <strtof+0xa0>)
 80080dc:	da06      	bge.n	80080ec <strtof+0x34>
 80080de:	f000 f8bd 	bl	800825c <nanf>
 80080e2:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 80080e6:	4628      	mov	r0, r5
 80080e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080f0:	f000 b8b4 	b.w	800825c <nanf>
 80080f4:	4621      	mov	r1, r4
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7f8 fcb6 	bl	8000a68 <__aeabi_d2f>
 80080fc:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008100:	4605      	mov	r5, r0
 8008102:	4916      	ldr	r1, [pc, #88]	; (800815c <strtof+0xa4>)
 8008104:	4640      	mov	r0, r8
 8008106:	f7f8 ffd3 	bl	80010b0 <__aeabi_fcmpun>
 800810a:	b9b0      	cbnz	r0, 800813a <strtof+0x82>
 800810c:	4640      	mov	r0, r8
 800810e:	4913      	ldr	r1, [pc, #76]	; (800815c <strtof+0xa4>)
 8008110:	f7f8 ffb0 	bl	8001074 <__aeabi_fcmple>
 8008114:	b988      	cbnz	r0, 800813a <strtof+0x82>
 8008116:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 800811a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800811e:	4630      	mov	r0, r6
 8008120:	4641      	mov	r1, r8
 8008122:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <strtof+0xa8>)
 8008124:	f7f8 fc6a 	bl	80009fc <__aeabi_dcmpun>
 8008128:	b970      	cbnz	r0, 8008148 <strtof+0x90>
 800812a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800812e:	4630      	mov	r0, r6
 8008130:	4641      	mov	r1, r8
 8008132:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <strtof+0xa8>)
 8008134:	f7f8 fc44 	bl	80009c0 <__aeabi_dcmple>
 8008138:	b930      	cbnz	r0, 8008148 <strtof+0x90>
 800813a:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800813e:	d1d2      	bne.n	80080e6 <strtof+0x2e>
 8008140:	4b08      	ldr	r3, [pc, #32]	; (8008164 <strtof+0xac>)
 8008142:	4023      	ands	r3, r4
 8008144:	2b00      	cmp	r3, #0
 8008146:	d0ce      	beq.n	80080e6 <strtof+0x2e>
 8008148:	2222      	movs	r2, #34	; 0x22
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	e7ca      	b.n	80080e6 <strtof+0x2e>
 8008150:	200001d8 	.word	0x200001d8
 8008154:	20000020 	.word	0x20000020
 8008158:	0800a3ef 	.word	0x0800a3ef
 800815c:	7f7fffff 	.word	0x7f7fffff
 8008160:	7fefffff 	.word	0x7fefffff
 8008164:	7ff00000 	.word	0x7ff00000

08008168 <_fwalk_sglue>:
 8008168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800816c:	4607      	mov	r7, r0
 800816e:	4688      	mov	r8, r1
 8008170:	4614      	mov	r4, r2
 8008172:	2600      	movs	r6, #0
 8008174:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008178:	f1b9 0901 	subs.w	r9, r9, #1
 800817c:	d505      	bpl.n	800818a <_fwalk_sglue+0x22>
 800817e:	6824      	ldr	r4, [r4, #0]
 8008180:	2c00      	cmp	r4, #0
 8008182:	d1f7      	bne.n	8008174 <_fwalk_sglue+0xc>
 8008184:	4630      	mov	r0, r6
 8008186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d907      	bls.n	80081a0 <_fwalk_sglue+0x38>
 8008190:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008194:	3301      	adds	r3, #1
 8008196:	d003      	beq.n	80081a0 <_fwalk_sglue+0x38>
 8008198:	4629      	mov	r1, r5
 800819a:	4638      	mov	r0, r7
 800819c:	47c0      	blx	r8
 800819e:	4306      	orrs	r6, r0
 80081a0:	3568      	adds	r5, #104	; 0x68
 80081a2:	e7e9      	b.n	8008178 <_fwalk_sglue+0x10>

080081a4 <strncmp>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	b16a      	cbz	r2, 80081c4 <strncmp+0x20>
 80081a8:	3901      	subs	r1, #1
 80081aa:	1884      	adds	r4, r0, r2
 80081ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d103      	bne.n	80081c0 <strncmp+0x1c>
 80081b8:	42a0      	cmp	r0, r4
 80081ba:	d001      	beq.n	80081c0 <strncmp+0x1c>
 80081bc:	2a00      	cmp	r2, #0
 80081be:	d1f5      	bne.n	80081ac <strncmp+0x8>
 80081c0:	1ad0      	subs	r0, r2, r3
 80081c2:	bd10      	pop	{r4, pc}
 80081c4:	4610      	mov	r0, r2
 80081c6:	e7fc      	b.n	80081c2 <strncmp+0x1e>

080081c8 <memset>:
 80081c8:	4603      	mov	r3, r0
 80081ca:	4402      	add	r2, r0
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d100      	bne.n	80081d2 <memset+0xa>
 80081d0:	4770      	bx	lr
 80081d2:	f803 1b01 	strb.w	r1, [r3], #1
 80081d6:	e7f9      	b.n	80081cc <memset+0x4>

080081d8 <__errno>:
 80081d8:	4b01      	ldr	r3, [pc, #4]	; (80081e0 <__errno+0x8>)
 80081da:	6818      	ldr	r0, [r3, #0]
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	200001d8 	.word	0x200001d8

080081e4 <__libc_init_array>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	2600      	movs	r6, #0
 80081e8:	4d0c      	ldr	r5, [pc, #48]	; (800821c <__libc_init_array+0x38>)
 80081ea:	4c0d      	ldr	r4, [pc, #52]	; (8008220 <__libc_init_array+0x3c>)
 80081ec:	1b64      	subs	r4, r4, r5
 80081ee:	10a4      	asrs	r4, r4, #2
 80081f0:	42a6      	cmp	r6, r4
 80081f2:	d109      	bne.n	8008208 <__libc_init_array+0x24>
 80081f4:	f001 ff16 	bl	800a024 <_init>
 80081f8:	2600      	movs	r6, #0
 80081fa:	4d0a      	ldr	r5, [pc, #40]	; (8008224 <__libc_init_array+0x40>)
 80081fc:	4c0a      	ldr	r4, [pc, #40]	; (8008228 <__libc_init_array+0x44>)
 80081fe:	1b64      	subs	r4, r4, r5
 8008200:	10a4      	asrs	r4, r4, #2
 8008202:	42a6      	cmp	r6, r4
 8008204:	d105      	bne.n	8008212 <__libc_init_array+0x2e>
 8008206:	bd70      	pop	{r4, r5, r6, pc}
 8008208:	f855 3b04 	ldr.w	r3, [r5], #4
 800820c:	4798      	blx	r3
 800820e:	3601      	adds	r6, #1
 8008210:	e7ee      	b.n	80081f0 <__libc_init_array+0xc>
 8008212:	f855 3b04 	ldr.w	r3, [r5], #4
 8008216:	4798      	blx	r3
 8008218:	3601      	adds	r6, #1
 800821a:	e7f2      	b.n	8008202 <__libc_init_array+0x1e>
 800821c:	0800a424 	.word	0x0800a424
 8008220:	0800a424 	.word	0x0800a424
 8008224:	0800a424 	.word	0x0800a424
 8008228:	0800a428 	.word	0x0800a428

0800822c <__retarget_lock_init_recursive>:
 800822c:	4770      	bx	lr

0800822e <__retarget_lock_acquire_recursive>:
 800822e:	4770      	bx	lr

08008230 <__retarget_lock_release_recursive>:
 8008230:	4770      	bx	lr

08008232 <memcpy>:
 8008232:	440a      	add	r2, r1
 8008234:	4291      	cmp	r1, r2
 8008236:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800823a:	d100      	bne.n	800823e <memcpy+0xc>
 800823c:	4770      	bx	lr
 800823e:	b510      	push	{r4, lr}
 8008240:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008244:	4291      	cmp	r1, r2
 8008246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800824a:	d1f9      	bne.n	8008240 <memcpy+0xe>
 800824c:	bd10      	pop	{r4, pc}
	...

08008250 <nan>:
 8008250:	2000      	movs	r0, #0
 8008252:	4901      	ldr	r1, [pc, #4]	; (8008258 <nan+0x8>)
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	7ff80000 	.word	0x7ff80000

0800825c <nanf>:
 800825c:	4800      	ldr	r0, [pc, #0]	; (8008260 <nanf+0x4>)
 800825e:	4770      	bx	lr
 8008260:	7fc00000 	.word	0x7fc00000

08008264 <rshift>:
 8008264:	6903      	ldr	r3, [r0, #16]
 8008266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800826a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800826e:	f100 0414 	add.w	r4, r0, #20
 8008272:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008276:	dd46      	ble.n	8008306 <rshift+0xa2>
 8008278:	f011 011f 	ands.w	r1, r1, #31
 800827c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008280:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008284:	d10c      	bne.n	80082a0 <rshift+0x3c>
 8008286:	4629      	mov	r1, r5
 8008288:	f100 0710 	add.w	r7, r0, #16
 800828c:	42b1      	cmp	r1, r6
 800828e:	d335      	bcc.n	80082fc <rshift+0x98>
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	1eea      	subs	r2, r5, #3
 8008296:	4296      	cmp	r6, r2
 8008298:	bf38      	it	cc
 800829a:	2300      	movcc	r3, #0
 800829c:	4423      	add	r3, r4
 800829e:	e015      	b.n	80082cc <rshift+0x68>
 80082a0:	46a1      	mov	r9, r4
 80082a2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80082a6:	f1c1 0820 	rsb	r8, r1, #32
 80082aa:	40cf      	lsrs	r7, r1
 80082ac:	f105 0e04 	add.w	lr, r5, #4
 80082b0:	4576      	cmp	r6, lr
 80082b2:	46f4      	mov	ip, lr
 80082b4:	d816      	bhi.n	80082e4 <rshift+0x80>
 80082b6:	1a9a      	subs	r2, r3, r2
 80082b8:	0092      	lsls	r2, r2, #2
 80082ba:	3a04      	subs	r2, #4
 80082bc:	3501      	adds	r5, #1
 80082be:	42ae      	cmp	r6, r5
 80082c0:	bf38      	it	cc
 80082c2:	2200      	movcc	r2, #0
 80082c4:	18a3      	adds	r3, r4, r2
 80082c6:	50a7      	str	r7, [r4, r2]
 80082c8:	b107      	cbz	r7, 80082cc <rshift+0x68>
 80082ca:	3304      	adds	r3, #4
 80082cc:	42a3      	cmp	r3, r4
 80082ce:	eba3 0204 	sub.w	r2, r3, r4
 80082d2:	bf08      	it	eq
 80082d4:	2300      	moveq	r3, #0
 80082d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082da:	6102      	str	r2, [r0, #16]
 80082dc:	bf08      	it	eq
 80082de:	6143      	streq	r3, [r0, #20]
 80082e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082e4:	f8dc c000 	ldr.w	ip, [ip]
 80082e8:	fa0c fc08 	lsl.w	ip, ip, r8
 80082ec:	ea4c 0707 	orr.w	r7, ip, r7
 80082f0:	f849 7b04 	str.w	r7, [r9], #4
 80082f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082f8:	40cf      	lsrs	r7, r1
 80082fa:	e7d9      	b.n	80082b0 <rshift+0x4c>
 80082fc:	f851 cb04 	ldr.w	ip, [r1], #4
 8008300:	f847 cf04 	str.w	ip, [r7, #4]!
 8008304:	e7c2      	b.n	800828c <rshift+0x28>
 8008306:	4623      	mov	r3, r4
 8008308:	e7e0      	b.n	80082cc <rshift+0x68>

0800830a <__hexdig_fun>:
 800830a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800830e:	2b09      	cmp	r3, #9
 8008310:	d802      	bhi.n	8008318 <__hexdig_fun+0xe>
 8008312:	3820      	subs	r0, #32
 8008314:	b2c0      	uxtb	r0, r0
 8008316:	4770      	bx	lr
 8008318:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800831c:	2b05      	cmp	r3, #5
 800831e:	d801      	bhi.n	8008324 <__hexdig_fun+0x1a>
 8008320:	3847      	subs	r0, #71	; 0x47
 8008322:	e7f7      	b.n	8008314 <__hexdig_fun+0xa>
 8008324:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008328:	2b05      	cmp	r3, #5
 800832a:	d801      	bhi.n	8008330 <__hexdig_fun+0x26>
 800832c:	3827      	subs	r0, #39	; 0x27
 800832e:	e7f1      	b.n	8008314 <__hexdig_fun+0xa>
 8008330:	2000      	movs	r0, #0
 8008332:	4770      	bx	lr

08008334 <__gethex>:
 8008334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	4681      	mov	r9, r0
 800833a:	468a      	mov	sl, r1
 800833c:	4617      	mov	r7, r2
 800833e:	680a      	ldr	r2, [r1, #0]
 8008340:	b085      	sub	sp, #20
 8008342:	f102 0b02 	add.w	fp, r2, #2
 8008346:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800834a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800834e:	9302      	str	r3, [sp, #8]
 8008350:	32fe      	adds	r2, #254	; 0xfe
 8008352:	eb02 030b 	add.w	r3, r2, fp
 8008356:	46d8      	mov	r8, fp
 8008358:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	2830      	cmp	r0, #48	; 0x30
 8008360:	d0f7      	beq.n	8008352 <__gethex+0x1e>
 8008362:	f7ff ffd2 	bl	800830a <__hexdig_fun>
 8008366:	4604      	mov	r4, r0
 8008368:	2800      	cmp	r0, #0
 800836a:	d138      	bne.n	80083de <__gethex+0xaa>
 800836c:	2201      	movs	r2, #1
 800836e:	4640      	mov	r0, r8
 8008370:	49a7      	ldr	r1, [pc, #668]	; (8008610 <__gethex+0x2dc>)
 8008372:	f7ff ff17 	bl	80081a4 <strncmp>
 8008376:	4606      	mov	r6, r0
 8008378:	2800      	cmp	r0, #0
 800837a:	d169      	bne.n	8008450 <__gethex+0x11c>
 800837c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008380:	465d      	mov	r5, fp
 8008382:	f7ff ffc2 	bl	800830a <__hexdig_fun>
 8008386:	2800      	cmp	r0, #0
 8008388:	d064      	beq.n	8008454 <__gethex+0x120>
 800838a:	465a      	mov	r2, fp
 800838c:	7810      	ldrb	r0, [r2, #0]
 800838e:	4690      	mov	r8, r2
 8008390:	2830      	cmp	r0, #48	; 0x30
 8008392:	f102 0201 	add.w	r2, r2, #1
 8008396:	d0f9      	beq.n	800838c <__gethex+0x58>
 8008398:	f7ff ffb7 	bl	800830a <__hexdig_fun>
 800839c:	2301      	movs	r3, #1
 800839e:	fab0 f480 	clz	r4, r0
 80083a2:	465e      	mov	r6, fp
 80083a4:	0964      	lsrs	r4, r4, #5
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	4642      	mov	r2, r8
 80083aa:	4615      	mov	r5, r2
 80083ac:	7828      	ldrb	r0, [r5, #0]
 80083ae:	3201      	adds	r2, #1
 80083b0:	f7ff ffab 	bl	800830a <__hexdig_fun>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d1f8      	bne.n	80083aa <__gethex+0x76>
 80083b8:	2201      	movs	r2, #1
 80083ba:	4628      	mov	r0, r5
 80083bc:	4994      	ldr	r1, [pc, #592]	; (8008610 <__gethex+0x2dc>)
 80083be:	f7ff fef1 	bl	80081a4 <strncmp>
 80083c2:	b978      	cbnz	r0, 80083e4 <__gethex+0xb0>
 80083c4:	b946      	cbnz	r6, 80083d8 <__gethex+0xa4>
 80083c6:	1c6e      	adds	r6, r5, #1
 80083c8:	4632      	mov	r2, r6
 80083ca:	4615      	mov	r5, r2
 80083cc:	7828      	ldrb	r0, [r5, #0]
 80083ce:	3201      	adds	r2, #1
 80083d0:	f7ff ff9b 	bl	800830a <__hexdig_fun>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d1f8      	bne.n	80083ca <__gethex+0x96>
 80083d8:	1b73      	subs	r3, r6, r5
 80083da:	009e      	lsls	r6, r3, #2
 80083dc:	e004      	b.n	80083e8 <__gethex+0xb4>
 80083de:	2400      	movs	r4, #0
 80083e0:	4626      	mov	r6, r4
 80083e2:	e7e1      	b.n	80083a8 <__gethex+0x74>
 80083e4:	2e00      	cmp	r6, #0
 80083e6:	d1f7      	bne.n	80083d8 <__gethex+0xa4>
 80083e8:	782b      	ldrb	r3, [r5, #0]
 80083ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80083ee:	2b50      	cmp	r3, #80	; 0x50
 80083f0:	d13d      	bne.n	800846e <__gethex+0x13a>
 80083f2:	786b      	ldrb	r3, [r5, #1]
 80083f4:	2b2b      	cmp	r3, #43	; 0x2b
 80083f6:	d02f      	beq.n	8008458 <__gethex+0x124>
 80083f8:	2b2d      	cmp	r3, #45	; 0x2d
 80083fa:	d031      	beq.n	8008460 <__gethex+0x12c>
 80083fc:	f04f 0b00 	mov.w	fp, #0
 8008400:	1c69      	adds	r1, r5, #1
 8008402:	7808      	ldrb	r0, [r1, #0]
 8008404:	f7ff ff81 	bl	800830a <__hexdig_fun>
 8008408:	1e42      	subs	r2, r0, #1
 800840a:	b2d2      	uxtb	r2, r2
 800840c:	2a18      	cmp	r2, #24
 800840e:	d82e      	bhi.n	800846e <__gethex+0x13a>
 8008410:	f1a0 0210 	sub.w	r2, r0, #16
 8008414:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008418:	f7ff ff77 	bl	800830a <__hexdig_fun>
 800841c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8008420:	fa5f fc8c 	uxtb.w	ip, ip
 8008424:	f1bc 0f18 	cmp.w	ip, #24
 8008428:	d91d      	bls.n	8008466 <__gethex+0x132>
 800842a:	f1bb 0f00 	cmp.w	fp, #0
 800842e:	d000      	beq.n	8008432 <__gethex+0xfe>
 8008430:	4252      	negs	r2, r2
 8008432:	4416      	add	r6, r2
 8008434:	f8ca 1000 	str.w	r1, [sl]
 8008438:	b1dc      	cbz	r4, 8008472 <__gethex+0x13e>
 800843a:	9b01      	ldr	r3, [sp, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	bf14      	ite	ne
 8008440:	f04f 0800 	movne.w	r8, #0
 8008444:	f04f 0806 	moveq.w	r8, #6
 8008448:	4640      	mov	r0, r8
 800844a:	b005      	add	sp, #20
 800844c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008450:	4645      	mov	r5, r8
 8008452:	4626      	mov	r6, r4
 8008454:	2401      	movs	r4, #1
 8008456:	e7c7      	b.n	80083e8 <__gethex+0xb4>
 8008458:	f04f 0b00 	mov.w	fp, #0
 800845c:	1ca9      	adds	r1, r5, #2
 800845e:	e7d0      	b.n	8008402 <__gethex+0xce>
 8008460:	f04f 0b01 	mov.w	fp, #1
 8008464:	e7fa      	b.n	800845c <__gethex+0x128>
 8008466:	230a      	movs	r3, #10
 8008468:	fb03 0002 	mla	r0, r3, r2, r0
 800846c:	e7d0      	b.n	8008410 <__gethex+0xdc>
 800846e:	4629      	mov	r1, r5
 8008470:	e7e0      	b.n	8008434 <__gethex+0x100>
 8008472:	4621      	mov	r1, r4
 8008474:	eba5 0308 	sub.w	r3, r5, r8
 8008478:	3b01      	subs	r3, #1
 800847a:	2b07      	cmp	r3, #7
 800847c:	dc0a      	bgt.n	8008494 <__gethex+0x160>
 800847e:	4648      	mov	r0, r9
 8008480:	f000 fbb2 	bl	8008be8 <_Balloc>
 8008484:	4604      	mov	r4, r0
 8008486:	b940      	cbnz	r0, 800849a <__gethex+0x166>
 8008488:	4602      	mov	r2, r0
 800848a:	21e4      	movs	r1, #228	; 0xe4
 800848c:	4b61      	ldr	r3, [pc, #388]	; (8008614 <__gethex+0x2e0>)
 800848e:	4862      	ldr	r0, [pc, #392]	; (8008618 <__gethex+0x2e4>)
 8008490:	f001 f8ec 	bl	800966c <__assert_func>
 8008494:	3101      	adds	r1, #1
 8008496:	105b      	asrs	r3, r3, #1
 8008498:	e7ef      	b.n	800847a <__gethex+0x146>
 800849a:	2300      	movs	r3, #0
 800849c:	469b      	mov	fp, r3
 800849e:	f100 0a14 	add.w	sl, r0, #20
 80084a2:	f8cd a004 	str.w	sl, [sp, #4]
 80084a6:	45a8      	cmp	r8, r5
 80084a8:	d344      	bcc.n	8008534 <__gethex+0x200>
 80084aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084ae:	4658      	mov	r0, fp
 80084b0:	f848 bb04 	str.w	fp, [r8], #4
 80084b4:	eba8 080a 	sub.w	r8, r8, sl
 80084b8:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80084bc:	6122      	str	r2, [r4, #16]
 80084be:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80084c2:	f000 fc83 	bl	8008dcc <__hi0bits>
 80084c6:	683d      	ldr	r5, [r7, #0]
 80084c8:	eba8 0800 	sub.w	r8, r8, r0
 80084cc:	45a8      	cmp	r8, r5
 80084ce:	dd59      	ble.n	8008584 <__gethex+0x250>
 80084d0:	eba8 0805 	sub.w	r8, r8, r5
 80084d4:	4641      	mov	r1, r8
 80084d6:	4620      	mov	r0, r4
 80084d8:	f001 f801 	bl	80094de <__any_on>
 80084dc:	4683      	mov	fp, r0
 80084de:	b1b8      	cbz	r0, 8008510 <__gethex+0x1dc>
 80084e0:	f04f 0b01 	mov.w	fp, #1
 80084e4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80084e8:	1159      	asrs	r1, r3, #5
 80084ea:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80084ee:	f003 021f 	and.w	r2, r3, #31
 80084f2:	fa0b f202 	lsl.w	r2, fp, r2
 80084f6:	420a      	tst	r2, r1
 80084f8:	d00a      	beq.n	8008510 <__gethex+0x1dc>
 80084fa:	455b      	cmp	r3, fp
 80084fc:	dd06      	ble.n	800850c <__gethex+0x1d8>
 80084fe:	4620      	mov	r0, r4
 8008500:	f1a8 0102 	sub.w	r1, r8, #2
 8008504:	f000 ffeb 	bl	80094de <__any_on>
 8008508:	2800      	cmp	r0, #0
 800850a:	d138      	bne.n	800857e <__gethex+0x24a>
 800850c:	f04f 0b02 	mov.w	fp, #2
 8008510:	4641      	mov	r1, r8
 8008512:	4620      	mov	r0, r4
 8008514:	f7ff fea6 	bl	8008264 <rshift>
 8008518:	4446      	add	r6, r8
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	42b3      	cmp	r3, r6
 800851e:	da41      	bge.n	80085a4 <__gethex+0x270>
 8008520:	4621      	mov	r1, r4
 8008522:	4648      	mov	r0, r9
 8008524:	f000 fba0 	bl	8008c68 <_Bfree>
 8008528:	2300      	movs	r3, #0
 800852a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800852c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	e789      	b.n	8008448 <__gethex+0x114>
 8008534:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008538:	2a2e      	cmp	r2, #46	; 0x2e
 800853a:	d014      	beq.n	8008566 <__gethex+0x232>
 800853c:	2b20      	cmp	r3, #32
 800853e:	d106      	bne.n	800854e <__gethex+0x21a>
 8008540:	9b01      	ldr	r3, [sp, #4]
 8008542:	f843 bb04 	str.w	fp, [r3], #4
 8008546:	f04f 0b00 	mov.w	fp, #0
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	465b      	mov	r3, fp
 800854e:	7828      	ldrb	r0, [r5, #0]
 8008550:	9303      	str	r3, [sp, #12]
 8008552:	f7ff feda 	bl	800830a <__hexdig_fun>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	f000 000f 	and.w	r0, r0, #15
 800855c:	4098      	lsls	r0, r3
 800855e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008562:	3304      	adds	r3, #4
 8008564:	e79f      	b.n	80084a6 <__gethex+0x172>
 8008566:	45a8      	cmp	r8, r5
 8008568:	d8e8      	bhi.n	800853c <__gethex+0x208>
 800856a:	2201      	movs	r2, #1
 800856c:	4628      	mov	r0, r5
 800856e:	4928      	ldr	r1, [pc, #160]	; (8008610 <__gethex+0x2dc>)
 8008570:	9303      	str	r3, [sp, #12]
 8008572:	f7ff fe17 	bl	80081a4 <strncmp>
 8008576:	9b03      	ldr	r3, [sp, #12]
 8008578:	2800      	cmp	r0, #0
 800857a:	d1df      	bne.n	800853c <__gethex+0x208>
 800857c:	e793      	b.n	80084a6 <__gethex+0x172>
 800857e:	f04f 0b03 	mov.w	fp, #3
 8008582:	e7c5      	b.n	8008510 <__gethex+0x1dc>
 8008584:	da0b      	bge.n	800859e <__gethex+0x26a>
 8008586:	eba5 0808 	sub.w	r8, r5, r8
 800858a:	4621      	mov	r1, r4
 800858c:	4642      	mov	r2, r8
 800858e:	4648      	mov	r0, r9
 8008590:	f000 fd82 	bl	8009098 <__lshift>
 8008594:	4604      	mov	r4, r0
 8008596:	eba6 0608 	sub.w	r6, r6, r8
 800859a:	f100 0a14 	add.w	sl, r0, #20
 800859e:	f04f 0b00 	mov.w	fp, #0
 80085a2:	e7ba      	b.n	800851a <__gethex+0x1e6>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	42b3      	cmp	r3, r6
 80085a8:	dd74      	ble.n	8008694 <__gethex+0x360>
 80085aa:	1b9e      	subs	r6, r3, r6
 80085ac:	42b5      	cmp	r5, r6
 80085ae:	dc35      	bgt.n	800861c <__gethex+0x2e8>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d023      	beq.n	80085fe <__gethex+0x2ca>
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d025      	beq.n	8008606 <__gethex+0x2d2>
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d115      	bne.n	80085ea <__gethex+0x2b6>
 80085be:	42b5      	cmp	r5, r6
 80085c0:	d113      	bne.n	80085ea <__gethex+0x2b6>
 80085c2:	2d01      	cmp	r5, #1
 80085c4:	d10b      	bne.n	80085de <__gethex+0x2aa>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	9a02      	ldr	r2, [sp, #8]
 80085ca:	f04f 0862 	mov.w	r8, #98	; 0x62
 80085ce:	6013      	str	r3, [r2, #0]
 80085d0:	2301      	movs	r3, #1
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	f8ca 3000 	str.w	r3, [sl]
 80085d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085da:	601c      	str	r4, [r3, #0]
 80085dc:	e734      	b.n	8008448 <__gethex+0x114>
 80085de:	4620      	mov	r0, r4
 80085e0:	1e69      	subs	r1, r5, #1
 80085e2:	f000 ff7c 	bl	80094de <__any_on>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d1ed      	bne.n	80085c6 <__gethex+0x292>
 80085ea:	4621      	mov	r1, r4
 80085ec:	4648      	mov	r0, r9
 80085ee:	f000 fb3b 	bl	8008c68 <_Bfree>
 80085f2:	2300      	movs	r3, #0
 80085f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085f6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	e724      	b.n	8008448 <__gethex+0x114>
 80085fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1f2      	bne.n	80085ea <__gethex+0x2b6>
 8008604:	e7df      	b.n	80085c6 <__gethex+0x292>
 8008606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1dc      	bne.n	80085c6 <__gethex+0x292>
 800860c:	e7ed      	b.n	80085ea <__gethex+0x2b6>
 800860e:	bf00      	nop
 8008610:	0800a06a 	.word	0x0800a06a
 8008614:	0800a1d1 	.word	0x0800a1d1
 8008618:	0800a1e2 	.word	0x0800a1e2
 800861c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8008620:	f1bb 0f00 	cmp.w	fp, #0
 8008624:	d133      	bne.n	800868e <__gethex+0x35a>
 8008626:	f1b8 0f00 	cmp.w	r8, #0
 800862a:	d004      	beq.n	8008636 <__gethex+0x302>
 800862c:	4641      	mov	r1, r8
 800862e:	4620      	mov	r0, r4
 8008630:	f000 ff55 	bl	80094de <__any_on>
 8008634:	4683      	mov	fp, r0
 8008636:	2301      	movs	r3, #1
 8008638:	ea4f 1268 	mov.w	r2, r8, asr #5
 800863c:	f008 081f 	and.w	r8, r8, #31
 8008640:	fa03 f308 	lsl.w	r3, r3, r8
 8008644:	f04f 0802 	mov.w	r8, #2
 8008648:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800864c:	4631      	mov	r1, r6
 800864e:	4213      	tst	r3, r2
 8008650:	4620      	mov	r0, r4
 8008652:	bf18      	it	ne
 8008654:	f04b 0b02 	orrne.w	fp, fp, #2
 8008658:	1bad      	subs	r5, r5, r6
 800865a:	f7ff fe03 	bl	8008264 <rshift>
 800865e:	687e      	ldr	r6, [r7, #4]
 8008660:	f1bb 0f00 	cmp.w	fp, #0
 8008664:	d04a      	beq.n	80086fc <__gethex+0x3c8>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d016      	beq.n	800869a <__gethex+0x366>
 800866c:	2b03      	cmp	r3, #3
 800866e:	d018      	beq.n	80086a2 <__gethex+0x36e>
 8008670:	2b01      	cmp	r3, #1
 8008672:	d109      	bne.n	8008688 <__gethex+0x354>
 8008674:	f01b 0f02 	tst.w	fp, #2
 8008678:	d006      	beq.n	8008688 <__gethex+0x354>
 800867a:	f8da 3000 	ldr.w	r3, [sl]
 800867e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008682:	f01b 0f01 	tst.w	fp, #1
 8008686:	d10f      	bne.n	80086a8 <__gethex+0x374>
 8008688:	f048 0810 	orr.w	r8, r8, #16
 800868c:	e036      	b.n	80086fc <__gethex+0x3c8>
 800868e:	f04f 0b01 	mov.w	fp, #1
 8008692:	e7d0      	b.n	8008636 <__gethex+0x302>
 8008694:	f04f 0801 	mov.w	r8, #1
 8008698:	e7e2      	b.n	8008660 <__gethex+0x32c>
 800869a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800869c:	f1c3 0301 	rsb	r3, r3, #1
 80086a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80086a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0ef      	beq.n	8008688 <__gethex+0x354>
 80086a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80086ac:	f104 0214 	add.w	r2, r4, #20
 80086b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	2300      	movs	r3, #0
 80086b8:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80086bc:	4694      	mov	ip, r2
 80086be:	f852 1b04 	ldr.w	r1, [r2], #4
 80086c2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80086c6:	d01e      	beq.n	8008706 <__gethex+0x3d2>
 80086c8:	3101      	adds	r1, #1
 80086ca:	f8cc 1000 	str.w	r1, [ip]
 80086ce:	f1b8 0f02 	cmp.w	r8, #2
 80086d2:	f104 0214 	add.w	r2, r4, #20
 80086d6:	d13d      	bne.n	8008754 <__gethex+0x420>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	3b01      	subs	r3, #1
 80086dc:	42ab      	cmp	r3, r5
 80086de:	d10b      	bne.n	80086f8 <__gethex+0x3c4>
 80086e0:	2301      	movs	r3, #1
 80086e2:	1169      	asrs	r1, r5, #5
 80086e4:	f005 051f 	and.w	r5, r5, #31
 80086e8:	fa03 f505 	lsl.w	r5, r3, r5
 80086ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086f0:	421d      	tst	r5, r3
 80086f2:	bf18      	it	ne
 80086f4:	f04f 0801 	movne.w	r8, #1
 80086f8:	f048 0820 	orr.w	r8, r8, #32
 80086fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086fe:	601c      	str	r4, [r3, #0]
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	601e      	str	r6, [r3, #0]
 8008704:	e6a0      	b.n	8008448 <__gethex+0x114>
 8008706:	4290      	cmp	r0, r2
 8008708:	f842 3c04 	str.w	r3, [r2, #-4]
 800870c:	d8d6      	bhi.n	80086bc <__gethex+0x388>
 800870e:	68a2      	ldr	r2, [r4, #8]
 8008710:	4593      	cmp	fp, r2
 8008712:	db17      	blt.n	8008744 <__gethex+0x410>
 8008714:	6861      	ldr	r1, [r4, #4]
 8008716:	4648      	mov	r0, r9
 8008718:	3101      	adds	r1, #1
 800871a:	f000 fa65 	bl	8008be8 <_Balloc>
 800871e:	4682      	mov	sl, r0
 8008720:	b918      	cbnz	r0, 800872a <__gethex+0x3f6>
 8008722:	4602      	mov	r2, r0
 8008724:	2184      	movs	r1, #132	; 0x84
 8008726:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <__gethex+0x45c>)
 8008728:	e6b1      	b.n	800848e <__gethex+0x15a>
 800872a:	6922      	ldr	r2, [r4, #16]
 800872c:	f104 010c 	add.w	r1, r4, #12
 8008730:	3202      	adds	r2, #2
 8008732:	0092      	lsls	r2, r2, #2
 8008734:	300c      	adds	r0, #12
 8008736:	f7ff fd7c 	bl	8008232 <memcpy>
 800873a:	4621      	mov	r1, r4
 800873c:	4648      	mov	r0, r9
 800873e:	f000 fa93 	bl	8008c68 <_Bfree>
 8008742:	4654      	mov	r4, sl
 8008744:	6922      	ldr	r2, [r4, #16]
 8008746:	1c51      	adds	r1, r2, #1
 8008748:	6121      	str	r1, [r4, #16]
 800874a:	2101      	movs	r1, #1
 800874c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008750:	6151      	str	r1, [r2, #20]
 8008752:	e7bc      	b.n	80086ce <__gethex+0x39a>
 8008754:	6921      	ldr	r1, [r4, #16]
 8008756:	4559      	cmp	r1, fp
 8008758:	dd0b      	ble.n	8008772 <__gethex+0x43e>
 800875a:	2101      	movs	r1, #1
 800875c:	4620      	mov	r0, r4
 800875e:	f7ff fd81 	bl	8008264 <rshift>
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	3601      	adds	r6, #1
 8008766:	42b3      	cmp	r3, r6
 8008768:	f6ff aeda 	blt.w	8008520 <__gethex+0x1ec>
 800876c:	f04f 0801 	mov.w	r8, #1
 8008770:	e7c2      	b.n	80086f8 <__gethex+0x3c4>
 8008772:	f015 051f 	ands.w	r5, r5, #31
 8008776:	d0f9      	beq.n	800876c <__gethex+0x438>
 8008778:	9b01      	ldr	r3, [sp, #4]
 800877a:	f1c5 0520 	rsb	r5, r5, #32
 800877e:	441a      	add	r2, r3
 8008780:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008784:	f000 fb22 	bl	8008dcc <__hi0bits>
 8008788:	42a8      	cmp	r0, r5
 800878a:	dbe6      	blt.n	800875a <__gethex+0x426>
 800878c:	e7ee      	b.n	800876c <__gethex+0x438>
 800878e:	bf00      	nop
 8008790:	0800a1d1 	.word	0x0800a1d1

08008794 <L_shift>:
 8008794:	f1c2 0208 	rsb	r2, r2, #8
 8008798:	0092      	lsls	r2, r2, #2
 800879a:	b570      	push	{r4, r5, r6, lr}
 800879c:	f1c2 0620 	rsb	r6, r2, #32
 80087a0:	6843      	ldr	r3, [r0, #4]
 80087a2:	6804      	ldr	r4, [r0, #0]
 80087a4:	fa03 f506 	lsl.w	r5, r3, r6
 80087a8:	432c      	orrs	r4, r5
 80087aa:	40d3      	lsrs	r3, r2
 80087ac:	6004      	str	r4, [r0, #0]
 80087ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80087b2:	4288      	cmp	r0, r1
 80087b4:	d3f4      	bcc.n	80087a0 <L_shift+0xc>
 80087b6:	bd70      	pop	{r4, r5, r6, pc}

080087b8 <__match>:
 80087b8:	b530      	push	{r4, r5, lr}
 80087ba:	6803      	ldr	r3, [r0, #0]
 80087bc:	3301      	adds	r3, #1
 80087be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087c2:	b914      	cbnz	r4, 80087ca <__match+0x12>
 80087c4:	6003      	str	r3, [r0, #0]
 80087c6:	2001      	movs	r0, #1
 80087c8:	bd30      	pop	{r4, r5, pc}
 80087ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087d2:	2d19      	cmp	r5, #25
 80087d4:	bf98      	it	ls
 80087d6:	3220      	addls	r2, #32
 80087d8:	42a2      	cmp	r2, r4
 80087da:	d0f0      	beq.n	80087be <__match+0x6>
 80087dc:	2000      	movs	r0, #0
 80087de:	e7f3      	b.n	80087c8 <__match+0x10>

080087e0 <__hexnan>:
 80087e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	2500      	movs	r5, #0
 80087e6:	680b      	ldr	r3, [r1, #0]
 80087e8:	4682      	mov	sl, r0
 80087ea:	115e      	asrs	r6, r3, #5
 80087ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80087f0:	f013 031f 	ands.w	r3, r3, #31
 80087f4:	bf18      	it	ne
 80087f6:	3604      	addne	r6, #4
 80087f8:	1f37      	subs	r7, r6, #4
 80087fa:	4690      	mov	r8, r2
 80087fc:	46b9      	mov	r9, r7
 80087fe:	463c      	mov	r4, r7
 8008800:	46ab      	mov	fp, r5
 8008802:	b087      	sub	sp, #28
 8008804:	6801      	ldr	r1, [r0, #0]
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	f846 5c04 	str.w	r5, [r6, #-4]
 800880c:	9502      	str	r5, [sp, #8]
 800880e:	784a      	ldrb	r2, [r1, #1]
 8008810:	1c4b      	adds	r3, r1, #1
 8008812:	9303      	str	r3, [sp, #12]
 8008814:	b342      	cbz	r2, 8008868 <__hexnan+0x88>
 8008816:	4610      	mov	r0, r2
 8008818:	9105      	str	r1, [sp, #20]
 800881a:	9204      	str	r2, [sp, #16]
 800881c:	f7ff fd75 	bl	800830a <__hexdig_fun>
 8008820:	2800      	cmp	r0, #0
 8008822:	d14f      	bne.n	80088c4 <__hexnan+0xe4>
 8008824:	9a04      	ldr	r2, [sp, #16]
 8008826:	9905      	ldr	r1, [sp, #20]
 8008828:	2a20      	cmp	r2, #32
 800882a:	d818      	bhi.n	800885e <__hexnan+0x7e>
 800882c:	9b02      	ldr	r3, [sp, #8]
 800882e:	459b      	cmp	fp, r3
 8008830:	dd13      	ble.n	800885a <__hexnan+0x7a>
 8008832:	454c      	cmp	r4, r9
 8008834:	d206      	bcs.n	8008844 <__hexnan+0x64>
 8008836:	2d07      	cmp	r5, #7
 8008838:	dc04      	bgt.n	8008844 <__hexnan+0x64>
 800883a:	462a      	mov	r2, r5
 800883c:	4649      	mov	r1, r9
 800883e:	4620      	mov	r0, r4
 8008840:	f7ff ffa8 	bl	8008794 <L_shift>
 8008844:	4544      	cmp	r4, r8
 8008846:	d950      	bls.n	80088ea <__hexnan+0x10a>
 8008848:	2300      	movs	r3, #0
 800884a:	f1a4 0904 	sub.w	r9, r4, #4
 800884e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008852:	461d      	mov	r5, r3
 8008854:	464c      	mov	r4, r9
 8008856:	f8cd b008 	str.w	fp, [sp, #8]
 800885a:	9903      	ldr	r1, [sp, #12]
 800885c:	e7d7      	b.n	800880e <__hexnan+0x2e>
 800885e:	2a29      	cmp	r2, #41	; 0x29
 8008860:	d155      	bne.n	800890e <__hexnan+0x12e>
 8008862:	3102      	adds	r1, #2
 8008864:	f8ca 1000 	str.w	r1, [sl]
 8008868:	f1bb 0f00 	cmp.w	fp, #0
 800886c:	d04f      	beq.n	800890e <__hexnan+0x12e>
 800886e:	454c      	cmp	r4, r9
 8008870:	d206      	bcs.n	8008880 <__hexnan+0xa0>
 8008872:	2d07      	cmp	r5, #7
 8008874:	dc04      	bgt.n	8008880 <__hexnan+0xa0>
 8008876:	462a      	mov	r2, r5
 8008878:	4649      	mov	r1, r9
 800887a:	4620      	mov	r0, r4
 800887c:	f7ff ff8a 	bl	8008794 <L_shift>
 8008880:	4544      	cmp	r4, r8
 8008882:	d934      	bls.n	80088ee <__hexnan+0x10e>
 8008884:	4623      	mov	r3, r4
 8008886:	f1a8 0204 	sub.w	r2, r8, #4
 800888a:	f853 1b04 	ldr.w	r1, [r3], #4
 800888e:	429f      	cmp	r7, r3
 8008890:	f842 1f04 	str.w	r1, [r2, #4]!
 8008894:	d2f9      	bcs.n	800888a <__hexnan+0xaa>
 8008896:	1b3b      	subs	r3, r7, r4
 8008898:	f023 0303 	bic.w	r3, r3, #3
 800889c:	3304      	adds	r3, #4
 800889e:	3e03      	subs	r6, #3
 80088a0:	3401      	adds	r4, #1
 80088a2:	42a6      	cmp	r6, r4
 80088a4:	bf38      	it	cc
 80088a6:	2304      	movcc	r3, #4
 80088a8:	2200      	movs	r2, #0
 80088aa:	4443      	add	r3, r8
 80088ac:	f843 2b04 	str.w	r2, [r3], #4
 80088b0:	429f      	cmp	r7, r3
 80088b2:	d2fb      	bcs.n	80088ac <__hexnan+0xcc>
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	b91b      	cbnz	r3, 80088c0 <__hexnan+0xe0>
 80088b8:	4547      	cmp	r7, r8
 80088ba:	d126      	bne.n	800890a <__hexnan+0x12a>
 80088bc:	2301      	movs	r3, #1
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	2005      	movs	r0, #5
 80088c2:	e025      	b.n	8008910 <__hexnan+0x130>
 80088c4:	3501      	adds	r5, #1
 80088c6:	2d08      	cmp	r5, #8
 80088c8:	f10b 0b01 	add.w	fp, fp, #1
 80088cc:	dd06      	ble.n	80088dc <__hexnan+0xfc>
 80088ce:	4544      	cmp	r4, r8
 80088d0:	d9c3      	bls.n	800885a <__hexnan+0x7a>
 80088d2:	2300      	movs	r3, #0
 80088d4:	2501      	movs	r5, #1
 80088d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80088da:	3c04      	subs	r4, #4
 80088dc:	6822      	ldr	r2, [r4, #0]
 80088de:	f000 000f 	and.w	r0, r0, #15
 80088e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80088e6:	6020      	str	r0, [r4, #0]
 80088e8:	e7b7      	b.n	800885a <__hexnan+0x7a>
 80088ea:	2508      	movs	r5, #8
 80088ec:	e7b5      	b.n	800885a <__hexnan+0x7a>
 80088ee:	9b01      	ldr	r3, [sp, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0df      	beq.n	80088b4 <__hexnan+0xd4>
 80088f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088f8:	f1c3 0320 	rsb	r3, r3, #32
 80088fc:	40da      	lsrs	r2, r3
 80088fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008902:	4013      	ands	r3, r2
 8008904:	f846 3c04 	str.w	r3, [r6, #-4]
 8008908:	e7d4      	b.n	80088b4 <__hexnan+0xd4>
 800890a:	3f04      	subs	r7, #4
 800890c:	e7d2      	b.n	80088b4 <__hexnan+0xd4>
 800890e:	2004      	movs	r0, #4
 8008910:	b007      	add	sp, #28
 8008912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008918 <sbrk_aligned>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	4e0e      	ldr	r6, [pc, #56]	; (8008954 <sbrk_aligned+0x3c>)
 800891c:	460c      	mov	r4, r1
 800891e:	6831      	ldr	r1, [r6, #0]
 8008920:	4605      	mov	r5, r0
 8008922:	b911      	cbnz	r1, 800892a <sbrk_aligned+0x12>
 8008924:	f000 fe80 	bl	8009628 <_sbrk_r>
 8008928:	6030      	str	r0, [r6, #0]
 800892a:	4621      	mov	r1, r4
 800892c:	4628      	mov	r0, r5
 800892e:	f000 fe7b 	bl	8009628 <_sbrk_r>
 8008932:	1c43      	adds	r3, r0, #1
 8008934:	d00a      	beq.n	800894c <sbrk_aligned+0x34>
 8008936:	1cc4      	adds	r4, r0, #3
 8008938:	f024 0403 	bic.w	r4, r4, #3
 800893c:	42a0      	cmp	r0, r4
 800893e:	d007      	beq.n	8008950 <sbrk_aligned+0x38>
 8008940:	1a21      	subs	r1, r4, r0
 8008942:	4628      	mov	r0, r5
 8008944:	f000 fe70 	bl	8009628 <_sbrk_r>
 8008948:	3001      	adds	r0, #1
 800894a:	d101      	bne.n	8008950 <sbrk_aligned+0x38>
 800894c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008950:	4620      	mov	r0, r4
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	20000664 	.word	0x20000664

08008958 <_malloc_r>:
 8008958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800895c:	1ccd      	adds	r5, r1, #3
 800895e:	f025 0503 	bic.w	r5, r5, #3
 8008962:	3508      	adds	r5, #8
 8008964:	2d0c      	cmp	r5, #12
 8008966:	bf38      	it	cc
 8008968:	250c      	movcc	r5, #12
 800896a:	2d00      	cmp	r5, #0
 800896c:	4607      	mov	r7, r0
 800896e:	db01      	blt.n	8008974 <_malloc_r+0x1c>
 8008970:	42a9      	cmp	r1, r5
 8008972:	d905      	bls.n	8008980 <_malloc_r+0x28>
 8008974:	230c      	movs	r3, #12
 8008976:	2600      	movs	r6, #0
 8008978:	603b      	str	r3, [r7, #0]
 800897a:	4630      	mov	r0, r6
 800897c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008980:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a54 <_malloc_r+0xfc>
 8008984:	f000 f924 	bl	8008bd0 <__malloc_lock>
 8008988:	f8d8 3000 	ldr.w	r3, [r8]
 800898c:	461c      	mov	r4, r3
 800898e:	bb5c      	cbnz	r4, 80089e8 <_malloc_r+0x90>
 8008990:	4629      	mov	r1, r5
 8008992:	4638      	mov	r0, r7
 8008994:	f7ff ffc0 	bl	8008918 <sbrk_aligned>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	4604      	mov	r4, r0
 800899c:	d155      	bne.n	8008a4a <_malloc_r+0xf2>
 800899e:	f8d8 4000 	ldr.w	r4, [r8]
 80089a2:	4626      	mov	r6, r4
 80089a4:	2e00      	cmp	r6, #0
 80089a6:	d145      	bne.n	8008a34 <_malloc_r+0xdc>
 80089a8:	2c00      	cmp	r4, #0
 80089aa:	d048      	beq.n	8008a3e <_malloc_r+0xe6>
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	4631      	mov	r1, r6
 80089b0:	4638      	mov	r0, r7
 80089b2:	eb04 0903 	add.w	r9, r4, r3
 80089b6:	f000 fe37 	bl	8009628 <_sbrk_r>
 80089ba:	4581      	cmp	r9, r0
 80089bc:	d13f      	bne.n	8008a3e <_malloc_r+0xe6>
 80089be:	6821      	ldr	r1, [r4, #0]
 80089c0:	4638      	mov	r0, r7
 80089c2:	1a6d      	subs	r5, r5, r1
 80089c4:	4629      	mov	r1, r5
 80089c6:	f7ff ffa7 	bl	8008918 <sbrk_aligned>
 80089ca:	3001      	adds	r0, #1
 80089cc:	d037      	beq.n	8008a3e <_malloc_r+0xe6>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	442b      	add	r3, r5
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	f8d8 3000 	ldr.w	r3, [r8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d038      	beq.n	8008a4e <_malloc_r+0xf6>
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	42a2      	cmp	r2, r4
 80089e0:	d12b      	bne.n	8008a3a <_malloc_r+0xe2>
 80089e2:	2200      	movs	r2, #0
 80089e4:	605a      	str	r2, [r3, #4]
 80089e6:	e00f      	b.n	8008a08 <_malloc_r+0xb0>
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	1b52      	subs	r2, r2, r5
 80089ec:	d41f      	bmi.n	8008a2e <_malloc_r+0xd6>
 80089ee:	2a0b      	cmp	r2, #11
 80089f0:	d917      	bls.n	8008a22 <_malloc_r+0xca>
 80089f2:	1961      	adds	r1, r4, r5
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	6025      	str	r5, [r4, #0]
 80089f8:	bf18      	it	ne
 80089fa:	6059      	strne	r1, [r3, #4]
 80089fc:	6863      	ldr	r3, [r4, #4]
 80089fe:	bf08      	it	eq
 8008a00:	f8c8 1000 	streq.w	r1, [r8]
 8008a04:	5162      	str	r2, [r4, r5]
 8008a06:	604b      	str	r3, [r1, #4]
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f104 060b 	add.w	r6, r4, #11
 8008a0e:	f000 f8e5 	bl	8008bdc <__malloc_unlock>
 8008a12:	f026 0607 	bic.w	r6, r6, #7
 8008a16:	1d23      	adds	r3, r4, #4
 8008a18:	1af2      	subs	r2, r6, r3
 8008a1a:	d0ae      	beq.n	800897a <_malloc_r+0x22>
 8008a1c:	1b9b      	subs	r3, r3, r6
 8008a1e:	50a3      	str	r3, [r4, r2]
 8008a20:	e7ab      	b.n	800897a <_malloc_r+0x22>
 8008a22:	42a3      	cmp	r3, r4
 8008a24:	6862      	ldr	r2, [r4, #4]
 8008a26:	d1dd      	bne.n	80089e4 <_malloc_r+0x8c>
 8008a28:	f8c8 2000 	str.w	r2, [r8]
 8008a2c:	e7ec      	b.n	8008a08 <_malloc_r+0xb0>
 8008a2e:	4623      	mov	r3, r4
 8008a30:	6864      	ldr	r4, [r4, #4]
 8008a32:	e7ac      	b.n	800898e <_malloc_r+0x36>
 8008a34:	4634      	mov	r4, r6
 8008a36:	6876      	ldr	r6, [r6, #4]
 8008a38:	e7b4      	b.n	80089a4 <_malloc_r+0x4c>
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	e7cc      	b.n	80089d8 <_malloc_r+0x80>
 8008a3e:	230c      	movs	r3, #12
 8008a40:	4638      	mov	r0, r7
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	f000 f8ca 	bl	8008bdc <__malloc_unlock>
 8008a48:	e797      	b.n	800897a <_malloc_r+0x22>
 8008a4a:	6025      	str	r5, [r4, #0]
 8008a4c:	e7dc      	b.n	8008a08 <_malloc_r+0xb0>
 8008a4e:	605b      	str	r3, [r3, #4]
 8008a50:	deff      	udf	#255	; 0xff
 8008a52:	bf00      	nop
 8008a54:	20000660 	.word	0x20000660

08008a58 <__ascii_mbtowc>:
 8008a58:	b082      	sub	sp, #8
 8008a5a:	b901      	cbnz	r1, 8008a5e <__ascii_mbtowc+0x6>
 8008a5c:	a901      	add	r1, sp, #4
 8008a5e:	b142      	cbz	r2, 8008a72 <__ascii_mbtowc+0x1a>
 8008a60:	b14b      	cbz	r3, 8008a76 <__ascii_mbtowc+0x1e>
 8008a62:	7813      	ldrb	r3, [r2, #0]
 8008a64:	600b      	str	r3, [r1, #0]
 8008a66:	7812      	ldrb	r2, [r2, #0]
 8008a68:	1e10      	subs	r0, r2, #0
 8008a6a:	bf18      	it	ne
 8008a6c:	2001      	movne	r0, #1
 8008a6e:	b002      	add	sp, #8
 8008a70:	4770      	bx	lr
 8008a72:	4610      	mov	r0, r2
 8008a74:	e7fb      	b.n	8008a6e <__ascii_mbtowc+0x16>
 8008a76:	f06f 0001 	mvn.w	r0, #1
 8008a7a:	e7f8      	b.n	8008a6e <__ascii_mbtowc+0x16>

08008a7c <__sflush_r>:
 8008a7c:	898a      	ldrh	r2, [r1, #12]
 8008a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a80:	4605      	mov	r5, r0
 8008a82:	0710      	lsls	r0, r2, #28
 8008a84:	460c      	mov	r4, r1
 8008a86:	d457      	bmi.n	8008b38 <__sflush_r+0xbc>
 8008a88:	684b      	ldr	r3, [r1, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	dc04      	bgt.n	8008a98 <__sflush_r+0x1c>
 8008a8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dc01      	bgt.n	8008a98 <__sflush_r+0x1c>
 8008a94:	2000      	movs	r0, #0
 8008a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a9a:	2e00      	cmp	r6, #0
 8008a9c:	d0fa      	beq.n	8008a94 <__sflush_r+0x18>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008aa4:	682f      	ldr	r7, [r5, #0]
 8008aa6:	6a21      	ldr	r1, [r4, #32]
 8008aa8:	602b      	str	r3, [r5, #0]
 8008aaa:	d032      	beq.n	8008b12 <__sflush_r+0x96>
 8008aac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	075a      	lsls	r2, r3, #29
 8008ab2:	d505      	bpl.n	8008ac0 <__sflush_r+0x44>
 8008ab4:	6863      	ldr	r3, [r4, #4]
 8008ab6:	1ac0      	subs	r0, r0, r3
 8008ab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aba:	b10b      	cbz	r3, 8008ac0 <__sflush_r+0x44>
 8008abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008abe:	1ac0      	subs	r0, r0, r3
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	6a21      	ldr	r1, [r4, #32]
 8008aca:	47b0      	blx	r6
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	d106      	bne.n	8008ae0 <__sflush_r+0x64>
 8008ad2:	6829      	ldr	r1, [r5, #0]
 8008ad4:	291d      	cmp	r1, #29
 8008ad6:	d82b      	bhi.n	8008b30 <__sflush_r+0xb4>
 8008ad8:	4a28      	ldr	r2, [pc, #160]	; (8008b7c <__sflush_r+0x100>)
 8008ada:	410a      	asrs	r2, r1
 8008adc:	07d6      	lsls	r6, r2, #31
 8008ade:	d427      	bmi.n	8008b30 <__sflush_r+0xb4>
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	6062      	str	r2, [r4, #4]
 8008ae4:	6922      	ldr	r2, [r4, #16]
 8008ae6:	04d9      	lsls	r1, r3, #19
 8008ae8:	6022      	str	r2, [r4, #0]
 8008aea:	d504      	bpl.n	8008af6 <__sflush_r+0x7a>
 8008aec:	1c42      	adds	r2, r0, #1
 8008aee:	d101      	bne.n	8008af4 <__sflush_r+0x78>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b903      	cbnz	r3, 8008af6 <__sflush_r+0x7a>
 8008af4:	6560      	str	r0, [r4, #84]	; 0x54
 8008af6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008af8:	602f      	str	r7, [r5, #0]
 8008afa:	2900      	cmp	r1, #0
 8008afc:	d0ca      	beq.n	8008a94 <__sflush_r+0x18>
 8008afe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b02:	4299      	cmp	r1, r3
 8008b04:	d002      	beq.n	8008b0c <__sflush_r+0x90>
 8008b06:	4628      	mov	r0, r5
 8008b08:	f000 fde2 	bl	80096d0 <_free_r>
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	6360      	str	r0, [r4, #52]	; 0x34
 8008b10:	e7c1      	b.n	8008a96 <__sflush_r+0x1a>
 8008b12:	2301      	movs	r3, #1
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b0      	blx	r6
 8008b18:	1c41      	adds	r1, r0, #1
 8008b1a:	d1c8      	bne.n	8008aae <__sflush_r+0x32>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0c5      	beq.n	8008aae <__sflush_r+0x32>
 8008b22:	2b1d      	cmp	r3, #29
 8008b24:	d001      	beq.n	8008b2a <__sflush_r+0xae>
 8008b26:	2b16      	cmp	r3, #22
 8008b28:	d101      	bne.n	8008b2e <__sflush_r+0xb2>
 8008b2a:	602f      	str	r7, [r5, #0]
 8008b2c:	e7b2      	b.n	8008a94 <__sflush_r+0x18>
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b34:	81a3      	strh	r3, [r4, #12]
 8008b36:	e7ae      	b.n	8008a96 <__sflush_r+0x1a>
 8008b38:	690f      	ldr	r7, [r1, #16]
 8008b3a:	2f00      	cmp	r7, #0
 8008b3c:	d0aa      	beq.n	8008a94 <__sflush_r+0x18>
 8008b3e:	0793      	lsls	r3, r2, #30
 8008b40:	bf18      	it	ne
 8008b42:	2300      	movne	r3, #0
 8008b44:	680e      	ldr	r6, [r1, #0]
 8008b46:	bf08      	it	eq
 8008b48:	694b      	ldreq	r3, [r1, #20]
 8008b4a:	1bf6      	subs	r6, r6, r7
 8008b4c:	600f      	str	r7, [r1, #0]
 8008b4e:	608b      	str	r3, [r1, #8]
 8008b50:	2e00      	cmp	r6, #0
 8008b52:	dd9f      	ble.n	8008a94 <__sflush_r+0x18>
 8008b54:	4633      	mov	r3, r6
 8008b56:	463a      	mov	r2, r7
 8008b58:	4628      	mov	r0, r5
 8008b5a:	6a21      	ldr	r1, [r4, #32]
 8008b5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008b60:	47e0      	blx	ip
 8008b62:	2800      	cmp	r0, #0
 8008b64:	dc06      	bgt.n	8008b74 <__sflush_r+0xf8>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b70:	81a3      	strh	r3, [r4, #12]
 8008b72:	e790      	b.n	8008a96 <__sflush_r+0x1a>
 8008b74:	4407      	add	r7, r0
 8008b76:	1a36      	subs	r6, r6, r0
 8008b78:	e7ea      	b.n	8008b50 <__sflush_r+0xd4>
 8008b7a:	bf00      	nop
 8008b7c:	dfbffffe 	.word	0xdfbffffe

08008b80 <_fflush_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	690b      	ldr	r3, [r1, #16]
 8008b84:	4605      	mov	r5, r0
 8008b86:	460c      	mov	r4, r1
 8008b88:	b913      	cbnz	r3, 8008b90 <_fflush_r+0x10>
 8008b8a:	2500      	movs	r5, #0
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	bd38      	pop	{r3, r4, r5, pc}
 8008b90:	b118      	cbz	r0, 8008b9a <_fflush_r+0x1a>
 8008b92:	6a03      	ldr	r3, [r0, #32]
 8008b94:	b90b      	cbnz	r3, 8008b9a <_fflush_r+0x1a>
 8008b96:	f7fe fc61 	bl	800745c <__sinit>
 8008b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0f3      	beq.n	8008b8a <_fflush_r+0xa>
 8008ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ba4:	07d0      	lsls	r0, r2, #31
 8008ba6:	d404      	bmi.n	8008bb2 <_fflush_r+0x32>
 8008ba8:	0599      	lsls	r1, r3, #22
 8008baa:	d402      	bmi.n	8008bb2 <_fflush_r+0x32>
 8008bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bae:	f7ff fb3e 	bl	800822e <__retarget_lock_acquire_recursive>
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	f7ff ff61 	bl	8008a7c <__sflush_r>
 8008bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	07da      	lsls	r2, r3, #31
 8008bc0:	d4e4      	bmi.n	8008b8c <_fflush_r+0xc>
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	059b      	lsls	r3, r3, #22
 8008bc6:	d4e1      	bmi.n	8008b8c <_fflush_r+0xc>
 8008bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bca:	f7ff fb31 	bl	8008230 <__retarget_lock_release_recursive>
 8008bce:	e7dd      	b.n	8008b8c <_fflush_r+0xc>

08008bd0 <__malloc_lock>:
 8008bd0:	4801      	ldr	r0, [pc, #4]	; (8008bd8 <__malloc_lock+0x8>)
 8008bd2:	f7ff bb2c 	b.w	800822e <__retarget_lock_acquire_recursive>
 8008bd6:	bf00      	nop
 8008bd8:	2000065c 	.word	0x2000065c

08008bdc <__malloc_unlock>:
 8008bdc:	4801      	ldr	r0, [pc, #4]	; (8008be4 <__malloc_unlock+0x8>)
 8008bde:	f7ff bb27 	b.w	8008230 <__retarget_lock_release_recursive>
 8008be2:	bf00      	nop
 8008be4:	2000065c 	.word	0x2000065c

08008be8 <_Balloc>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	69c6      	ldr	r6, [r0, #28]
 8008bec:	4604      	mov	r4, r0
 8008bee:	460d      	mov	r5, r1
 8008bf0:	b976      	cbnz	r6, 8008c10 <_Balloc+0x28>
 8008bf2:	2010      	movs	r0, #16
 8008bf4:	f000 fdb4 	bl	8009760 <malloc>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	61e0      	str	r0, [r4, #28]
 8008bfc:	b920      	cbnz	r0, 8008c08 <_Balloc+0x20>
 8008bfe:	216b      	movs	r1, #107	; 0x6b
 8008c00:	4b17      	ldr	r3, [pc, #92]	; (8008c60 <_Balloc+0x78>)
 8008c02:	4818      	ldr	r0, [pc, #96]	; (8008c64 <_Balloc+0x7c>)
 8008c04:	f000 fd32 	bl	800966c <__assert_func>
 8008c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c0c:	6006      	str	r6, [r0, #0]
 8008c0e:	60c6      	str	r6, [r0, #12]
 8008c10:	69e6      	ldr	r6, [r4, #28]
 8008c12:	68f3      	ldr	r3, [r6, #12]
 8008c14:	b183      	cbz	r3, 8008c38 <_Balloc+0x50>
 8008c16:	69e3      	ldr	r3, [r4, #28]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c1e:	b9b8      	cbnz	r0, 8008c50 <_Balloc+0x68>
 8008c20:	2101      	movs	r1, #1
 8008c22:	fa01 f605 	lsl.w	r6, r1, r5
 8008c26:	1d72      	adds	r2, r6, #5
 8008c28:	4620      	mov	r0, r4
 8008c2a:	0092      	lsls	r2, r2, #2
 8008c2c:	f000 fd3c 	bl	80096a8 <_calloc_r>
 8008c30:	b160      	cbz	r0, 8008c4c <_Balloc+0x64>
 8008c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c36:	e00e      	b.n	8008c56 <_Balloc+0x6e>
 8008c38:	2221      	movs	r2, #33	; 0x21
 8008c3a:	2104      	movs	r1, #4
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fd33 	bl	80096a8 <_calloc_r>
 8008c42:	69e3      	ldr	r3, [r4, #28]
 8008c44:	60f0      	str	r0, [r6, #12]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e4      	bne.n	8008c16 <_Balloc+0x2e>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
 8008c50:	6802      	ldr	r2, [r0, #0]
 8008c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c56:	2300      	movs	r3, #0
 8008c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c5c:	e7f7      	b.n	8008c4e <_Balloc+0x66>
 8008c5e:	bf00      	nop
 8008c60:	0800a242 	.word	0x0800a242
 8008c64:	0800a259 	.word	0x0800a259

08008c68 <_Bfree>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	69c6      	ldr	r6, [r0, #28]
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	460c      	mov	r4, r1
 8008c70:	b976      	cbnz	r6, 8008c90 <_Bfree+0x28>
 8008c72:	2010      	movs	r0, #16
 8008c74:	f000 fd74 	bl	8009760 <malloc>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	61e8      	str	r0, [r5, #28]
 8008c7c:	b920      	cbnz	r0, 8008c88 <_Bfree+0x20>
 8008c7e:	218f      	movs	r1, #143	; 0x8f
 8008c80:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <_Bfree+0x3c>)
 8008c82:	4809      	ldr	r0, [pc, #36]	; (8008ca8 <_Bfree+0x40>)
 8008c84:	f000 fcf2 	bl	800966c <__assert_func>
 8008c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c8c:	6006      	str	r6, [r0, #0]
 8008c8e:	60c6      	str	r6, [r0, #12]
 8008c90:	b13c      	cbz	r4, 8008ca2 <_Bfree+0x3a>
 8008c92:	69eb      	ldr	r3, [r5, #28]
 8008c94:	6862      	ldr	r2, [r4, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c9c:	6021      	str	r1, [r4, #0]
 8008c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	0800a242 	.word	0x0800a242
 8008ca8:	0800a259 	.word	0x0800a259

08008cac <__multadd>:
 8008cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb0:	4607      	mov	r7, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	461e      	mov	r6, r3
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	690d      	ldr	r5, [r1, #16]
 8008cba:	f101 0c14 	add.w	ip, r1, #20
 8008cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	b299      	uxth	r1, r3
 8008cc6:	fb02 6101 	mla	r1, r2, r1, r6
 8008cca:	0c1e      	lsrs	r6, r3, #16
 8008ccc:	0c0b      	lsrs	r3, r1, #16
 8008cce:	fb02 3306 	mla	r3, r2, r6, r3
 8008cd2:	b289      	uxth	r1, r1
 8008cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cd8:	4285      	cmp	r5, r0
 8008cda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cde:	f84c 1b04 	str.w	r1, [ip], #4
 8008ce2:	dcec      	bgt.n	8008cbe <__multadd+0x12>
 8008ce4:	b30e      	cbz	r6, 8008d2a <__multadd+0x7e>
 8008ce6:	68a3      	ldr	r3, [r4, #8]
 8008ce8:	42ab      	cmp	r3, r5
 8008cea:	dc19      	bgt.n	8008d20 <__multadd+0x74>
 8008cec:	6861      	ldr	r1, [r4, #4]
 8008cee:	4638      	mov	r0, r7
 8008cf0:	3101      	adds	r1, #1
 8008cf2:	f7ff ff79 	bl	8008be8 <_Balloc>
 8008cf6:	4680      	mov	r8, r0
 8008cf8:	b928      	cbnz	r0, 8008d06 <__multadd+0x5a>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	21ba      	movs	r1, #186	; 0xba
 8008cfe:	4b0c      	ldr	r3, [pc, #48]	; (8008d30 <__multadd+0x84>)
 8008d00:	480c      	ldr	r0, [pc, #48]	; (8008d34 <__multadd+0x88>)
 8008d02:	f000 fcb3 	bl	800966c <__assert_func>
 8008d06:	6922      	ldr	r2, [r4, #16]
 8008d08:	f104 010c 	add.w	r1, r4, #12
 8008d0c:	3202      	adds	r2, #2
 8008d0e:	0092      	lsls	r2, r2, #2
 8008d10:	300c      	adds	r0, #12
 8008d12:	f7ff fa8e 	bl	8008232 <memcpy>
 8008d16:	4621      	mov	r1, r4
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f7ff ffa5 	bl	8008c68 <_Bfree>
 8008d1e:	4644      	mov	r4, r8
 8008d20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d24:	3501      	adds	r5, #1
 8008d26:	615e      	str	r6, [r3, #20]
 8008d28:	6125      	str	r5, [r4, #16]
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d30:	0800a1d1 	.word	0x0800a1d1
 8008d34:	0800a259 	.word	0x0800a259

08008d38 <__s2b>:
 8008d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d3c:	4615      	mov	r5, r2
 8008d3e:	2209      	movs	r2, #9
 8008d40:	461f      	mov	r7, r3
 8008d42:	3308      	adds	r3, #8
 8008d44:	460c      	mov	r4, r1
 8008d46:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	2100      	movs	r1, #0
 8008d50:	429a      	cmp	r2, r3
 8008d52:	db09      	blt.n	8008d68 <__s2b+0x30>
 8008d54:	4630      	mov	r0, r6
 8008d56:	f7ff ff47 	bl	8008be8 <_Balloc>
 8008d5a:	b940      	cbnz	r0, 8008d6e <__s2b+0x36>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	21d3      	movs	r1, #211	; 0xd3
 8008d60:	4b18      	ldr	r3, [pc, #96]	; (8008dc4 <__s2b+0x8c>)
 8008d62:	4819      	ldr	r0, [pc, #100]	; (8008dc8 <__s2b+0x90>)
 8008d64:	f000 fc82 	bl	800966c <__assert_func>
 8008d68:	0052      	lsls	r2, r2, #1
 8008d6a:	3101      	adds	r1, #1
 8008d6c:	e7f0      	b.n	8008d50 <__s2b+0x18>
 8008d6e:	9b08      	ldr	r3, [sp, #32]
 8008d70:	2d09      	cmp	r5, #9
 8008d72:	6143      	str	r3, [r0, #20]
 8008d74:	f04f 0301 	mov.w	r3, #1
 8008d78:	6103      	str	r3, [r0, #16]
 8008d7a:	dd16      	ble.n	8008daa <__s2b+0x72>
 8008d7c:	f104 0909 	add.w	r9, r4, #9
 8008d80:	46c8      	mov	r8, r9
 8008d82:	442c      	add	r4, r5
 8008d84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d88:	4601      	mov	r1, r0
 8008d8a:	220a      	movs	r2, #10
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	3b30      	subs	r3, #48	; 0x30
 8008d90:	f7ff ff8c 	bl	8008cac <__multadd>
 8008d94:	45a0      	cmp	r8, r4
 8008d96:	d1f5      	bne.n	8008d84 <__s2b+0x4c>
 8008d98:	f1a5 0408 	sub.w	r4, r5, #8
 8008d9c:	444c      	add	r4, r9
 8008d9e:	1b2d      	subs	r5, r5, r4
 8008da0:	1963      	adds	r3, r4, r5
 8008da2:	42bb      	cmp	r3, r7
 8008da4:	db04      	blt.n	8008db0 <__s2b+0x78>
 8008da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008daa:	2509      	movs	r5, #9
 8008dac:	340a      	adds	r4, #10
 8008dae:	e7f6      	b.n	8008d9e <__s2b+0x66>
 8008db0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008db4:	4601      	mov	r1, r0
 8008db6:	220a      	movs	r2, #10
 8008db8:	4630      	mov	r0, r6
 8008dba:	3b30      	subs	r3, #48	; 0x30
 8008dbc:	f7ff ff76 	bl	8008cac <__multadd>
 8008dc0:	e7ee      	b.n	8008da0 <__s2b+0x68>
 8008dc2:	bf00      	nop
 8008dc4:	0800a1d1 	.word	0x0800a1d1
 8008dc8:	0800a259 	.word	0x0800a259

08008dcc <__hi0bits>:
 8008dcc:	0c02      	lsrs	r2, r0, #16
 8008dce:	0412      	lsls	r2, r2, #16
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	b9ca      	cbnz	r2, 8008e08 <__hi0bits+0x3c>
 8008dd4:	0403      	lsls	r3, r0, #16
 8008dd6:	2010      	movs	r0, #16
 8008dd8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008ddc:	bf04      	itt	eq
 8008dde:	021b      	lsleq	r3, r3, #8
 8008de0:	3008      	addeq	r0, #8
 8008de2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008de6:	bf04      	itt	eq
 8008de8:	011b      	lsleq	r3, r3, #4
 8008dea:	3004      	addeq	r0, #4
 8008dec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008df0:	bf04      	itt	eq
 8008df2:	009b      	lsleq	r3, r3, #2
 8008df4:	3002      	addeq	r0, #2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	db05      	blt.n	8008e06 <__hi0bits+0x3a>
 8008dfa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008dfe:	f100 0001 	add.w	r0, r0, #1
 8008e02:	bf08      	it	eq
 8008e04:	2020      	moveq	r0, #32
 8008e06:	4770      	bx	lr
 8008e08:	2000      	movs	r0, #0
 8008e0a:	e7e5      	b.n	8008dd8 <__hi0bits+0xc>

08008e0c <__lo0bits>:
 8008e0c:	6803      	ldr	r3, [r0, #0]
 8008e0e:	4602      	mov	r2, r0
 8008e10:	f013 0007 	ands.w	r0, r3, #7
 8008e14:	d00b      	beq.n	8008e2e <__lo0bits+0x22>
 8008e16:	07d9      	lsls	r1, r3, #31
 8008e18:	d421      	bmi.n	8008e5e <__lo0bits+0x52>
 8008e1a:	0798      	lsls	r0, r3, #30
 8008e1c:	bf49      	itett	mi
 8008e1e:	085b      	lsrmi	r3, r3, #1
 8008e20:	089b      	lsrpl	r3, r3, #2
 8008e22:	2001      	movmi	r0, #1
 8008e24:	6013      	strmi	r3, [r2, #0]
 8008e26:	bf5c      	itt	pl
 8008e28:	2002      	movpl	r0, #2
 8008e2a:	6013      	strpl	r3, [r2, #0]
 8008e2c:	4770      	bx	lr
 8008e2e:	b299      	uxth	r1, r3
 8008e30:	b909      	cbnz	r1, 8008e36 <__lo0bits+0x2a>
 8008e32:	2010      	movs	r0, #16
 8008e34:	0c1b      	lsrs	r3, r3, #16
 8008e36:	b2d9      	uxtb	r1, r3
 8008e38:	b909      	cbnz	r1, 8008e3e <__lo0bits+0x32>
 8008e3a:	3008      	adds	r0, #8
 8008e3c:	0a1b      	lsrs	r3, r3, #8
 8008e3e:	0719      	lsls	r1, r3, #28
 8008e40:	bf04      	itt	eq
 8008e42:	091b      	lsreq	r3, r3, #4
 8008e44:	3004      	addeq	r0, #4
 8008e46:	0799      	lsls	r1, r3, #30
 8008e48:	bf04      	itt	eq
 8008e4a:	089b      	lsreq	r3, r3, #2
 8008e4c:	3002      	addeq	r0, #2
 8008e4e:	07d9      	lsls	r1, r3, #31
 8008e50:	d403      	bmi.n	8008e5a <__lo0bits+0x4e>
 8008e52:	085b      	lsrs	r3, r3, #1
 8008e54:	f100 0001 	add.w	r0, r0, #1
 8008e58:	d003      	beq.n	8008e62 <__lo0bits+0x56>
 8008e5a:	6013      	str	r3, [r2, #0]
 8008e5c:	4770      	bx	lr
 8008e5e:	2000      	movs	r0, #0
 8008e60:	4770      	bx	lr
 8008e62:	2020      	movs	r0, #32
 8008e64:	4770      	bx	lr
	...

08008e68 <__i2b>:
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	f7ff febb 	bl	8008be8 <_Balloc>
 8008e72:	4602      	mov	r2, r0
 8008e74:	b928      	cbnz	r0, 8008e82 <__i2b+0x1a>
 8008e76:	f240 1145 	movw	r1, #325	; 0x145
 8008e7a:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <__i2b+0x24>)
 8008e7c:	4804      	ldr	r0, [pc, #16]	; (8008e90 <__i2b+0x28>)
 8008e7e:	f000 fbf5 	bl	800966c <__assert_func>
 8008e82:	2301      	movs	r3, #1
 8008e84:	6144      	str	r4, [r0, #20]
 8008e86:	6103      	str	r3, [r0, #16]
 8008e88:	bd10      	pop	{r4, pc}
 8008e8a:	bf00      	nop
 8008e8c:	0800a1d1 	.word	0x0800a1d1
 8008e90:	0800a259 	.word	0x0800a259

08008e94 <__multiply>:
 8008e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	4691      	mov	r9, r2
 8008e9a:	690a      	ldr	r2, [r1, #16]
 8008e9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	bfbe      	ittt	lt
 8008ea6:	460b      	movlt	r3, r1
 8008ea8:	464c      	movlt	r4, r9
 8008eaa:	4699      	movlt	r9, r3
 8008eac:	6927      	ldr	r7, [r4, #16]
 8008eae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008eb2:	68a3      	ldr	r3, [r4, #8]
 8008eb4:	6861      	ldr	r1, [r4, #4]
 8008eb6:	eb07 060a 	add.w	r6, r7, sl
 8008eba:	42b3      	cmp	r3, r6
 8008ebc:	b085      	sub	sp, #20
 8008ebe:	bfb8      	it	lt
 8008ec0:	3101      	addlt	r1, #1
 8008ec2:	f7ff fe91 	bl	8008be8 <_Balloc>
 8008ec6:	b930      	cbnz	r0, 8008ed6 <__multiply+0x42>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008ece:	4b43      	ldr	r3, [pc, #268]	; (8008fdc <__multiply+0x148>)
 8008ed0:	4843      	ldr	r0, [pc, #268]	; (8008fe0 <__multiply+0x14c>)
 8008ed2:	f000 fbcb 	bl	800966c <__assert_func>
 8008ed6:	f100 0514 	add.w	r5, r0, #20
 8008eda:	462b      	mov	r3, r5
 8008edc:	2200      	movs	r2, #0
 8008ede:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ee2:	4543      	cmp	r3, r8
 8008ee4:	d321      	bcc.n	8008f2a <__multiply+0x96>
 8008ee6:	f104 0314 	add.w	r3, r4, #20
 8008eea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008eee:	f109 0314 	add.w	r3, r9, #20
 8008ef2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ef6:	9202      	str	r2, [sp, #8]
 8008ef8:	1b3a      	subs	r2, r7, r4
 8008efa:	3a15      	subs	r2, #21
 8008efc:	f022 0203 	bic.w	r2, r2, #3
 8008f00:	3204      	adds	r2, #4
 8008f02:	f104 0115 	add.w	r1, r4, #21
 8008f06:	428f      	cmp	r7, r1
 8008f08:	bf38      	it	cc
 8008f0a:	2204      	movcc	r2, #4
 8008f0c:	9201      	str	r2, [sp, #4]
 8008f0e:	9a02      	ldr	r2, [sp, #8]
 8008f10:	9303      	str	r3, [sp, #12]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d80c      	bhi.n	8008f30 <__multiply+0x9c>
 8008f16:	2e00      	cmp	r6, #0
 8008f18:	dd03      	ble.n	8008f22 <__multiply+0x8e>
 8008f1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d05a      	beq.n	8008fd8 <__multiply+0x144>
 8008f22:	6106      	str	r6, [r0, #16]
 8008f24:	b005      	add	sp, #20
 8008f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2a:	f843 2b04 	str.w	r2, [r3], #4
 8008f2e:	e7d8      	b.n	8008ee2 <__multiply+0x4e>
 8008f30:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f34:	f1ba 0f00 	cmp.w	sl, #0
 8008f38:	d023      	beq.n	8008f82 <__multiply+0xee>
 8008f3a:	46a9      	mov	r9, r5
 8008f3c:	f04f 0c00 	mov.w	ip, #0
 8008f40:	f104 0e14 	add.w	lr, r4, #20
 8008f44:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f48:	f8d9 1000 	ldr.w	r1, [r9]
 8008f4c:	fa1f fb82 	uxth.w	fp, r2
 8008f50:	b289      	uxth	r1, r1
 8008f52:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f56:	4461      	add	r1, ip
 8008f58:	f8d9 c000 	ldr.w	ip, [r9]
 8008f5c:	0c12      	lsrs	r2, r2, #16
 8008f5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008f62:	fb0a c202 	mla	r2, sl, r2, ip
 8008f66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f6a:	b289      	uxth	r1, r1
 8008f6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f70:	4577      	cmp	r7, lr
 8008f72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f76:	f849 1b04 	str.w	r1, [r9], #4
 8008f7a:	d8e3      	bhi.n	8008f44 <__multiply+0xb0>
 8008f7c:	9a01      	ldr	r2, [sp, #4]
 8008f7e:	f845 c002 	str.w	ip, [r5, r2]
 8008f82:	9a03      	ldr	r2, [sp, #12]
 8008f84:	3304      	adds	r3, #4
 8008f86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f8a:	f1b9 0f00 	cmp.w	r9, #0
 8008f8e:	d021      	beq.n	8008fd4 <__multiply+0x140>
 8008f90:	46ae      	mov	lr, r5
 8008f92:	f04f 0a00 	mov.w	sl, #0
 8008f96:	6829      	ldr	r1, [r5, #0]
 8008f98:	f104 0c14 	add.w	ip, r4, #20
 8008f9c:	f8bc b000 	ldrh.w	fp, [ip]
 8008fa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008fa4:	b289      	uxth	r1, r1
 8008fa6:	fb09 220b 	mla	r2, r9, fp, r2
 8008faa:	4452      	add	r2, sl
 8008fac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fb0:	f84e 1b04 	str.w	r1, [lr], #4
 8008fb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008fb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fbc:	f8be 1000 	ldrh.w	r1, [lr]
 8008fc0:	4567      	cmp	r7, ip
 8008fc2:	fb09 110a 	mla	r1, r9, sl, r1
 8008fc6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008fca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fce:	d8e5      	bhi.n	8008f9c <__multiply+0x108>
 8008fd0:	9a01      	ldr	r2, [sp, #4]
 8008fd2:	50a9      	str	r1, [r5, r2]
 8008fd4:	3504      	adds	r5, #4
 8008fd6:	e79a      	b.n	8008f0e <__multiply+0x7a>
 8008fd8:	3e01      	subs	r6, #1
 8008fda:	e79c      	b.n	8008f16 <__multiply+0x82>
 8008fdc:	0800a1d1 	.word	0x0800a1d1
 8008fe0:	0800a259 	.word	0x0800a259

08008fe4 <__pow5mult>:
 8008fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe8:	4615      	mov	r5, r2
 8008fea:	f012 0203 	ands.w	r2, r2, #3
 8008fee:	4606      	mov	r6, r0
 8008ff0:	460f      	mov	r7, r1
 8008ff2:	d007      	beq.n	8009004 <__pow5mult+0x20>
 8008ff4:	4c25      	ldr	r4, [pc, #148]	; (800908c <__pow5mult+0xa8>)
 8008ff6:	3a01      	subs	r2, #1
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ffe:	f7ff fe55 	bl	8008cac <__multadd>
 8009002:	4607      	mov	r7, r0
 8009004:	10ad      	asrs	r5, r5, #2
 8009006:	d03d      	beq.n	8009084 <__pow5mult+0xa0>
 8009008:	69f4      	ldr	r4, [r6, #28]
 800900a:	b97c      	cbnz	r4, 800902c <__pow5mult+0x48>
 800900c:	2010      	movs	r0, #16
 800900e:	f000 fba7 	bl	8009760 <malloc>
 8009012:	4602      	mov	r2, r0
 8009014:	61f0      	str	r0, [r6, #28]
 8009016:	b928      	cbnz	r0, 8009024 <__pow5mult+0x40>
 8009018:	f240 11b3 	movw	r1, #435	; 0x1b3
 800901c:	4b1c      	ldr	r3, [pc, #112]	; (8009090 <__pow5mult+0xac>)
 800901e:	481d      	ldr	r0, [pc, #116]	; (8009094 <__pow5mult+0xb0>)
 8009020:	f000 fb24 	bl	800966c <__assert_func>
 8009024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009028:	6004      	str	r4, [r0, #0]
 800902a:	60c4      	str	r4, [r0, #12]
 800902c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009034:	b94c      	cbnz	r4, 800904a <__pow5mult+0x66>
 8009036:	f240 2171 	movw	r1, #625	; 0x271
 800903a:	4630      	mov	r0, r6
 800903c:	f7ff ff14 	bl	8008e68 <__i2b>
 8009040:	2300      	movs	r3, #0
 8009042:	4604      	mov	r4, r0
 8009044:	f8c8 0008 	str.w	r0, [r8, #8]
 8009048:	6003      	str	r3, [r0, #0]
 800904a:	f04f 0900 	mov.w	r9, #0
 800904e:	07eb      	lsls	r3, r5, #31
 8009050:	d50a      	bpl.n	8009068 <__pow5mult+0x84>
 8009052:	4639      	mov	r1, r7
 8009054:	4622      	mov	r2, r4
 8009056:	4630      	mov	r0, r6
 8009058:	f7ff ff1c 	bl	8008e94 <__multiply>
 800905c:	4680      	mov	r8, r0
 800905e:	4639      	mov	r1, r7
 8009060:	4630      	mov	r0, r6
 8009062:	f7ff fe01 	bl	8008c68 <_Bfree>
 8009066:	4647      	mov	r7, r8
 8009068:	106d      	asrs	r5, r5, #1
 800906a:	d00b      	beq.n	8009084 <__pow5mult+0xa0>
 800906c:	6820      	ldr	r0, [r4, #0]
 800906e:	b938      	cbnz	r0, 8009080 <__pow5mult+0x9c>
 8009070:	4622      	mov	r2, r4
 8009072:	4621      	mov	r1, r4
 8009074:	4630      	mov	r0, r6
 8009076:	f7ff ff0d 	bl	8008e94 <__multiply>
 800907a:	6020      	str	r0, [r4, #0]
 800907c:	f8c0 9000 	str.w	r9, [r0]
 8009080:	4604      	mov	r4, r0
 8009082:	e7e4      	b.n	800904e <__pow5mult+0x6a>
 8009084:	4638      	mov	r0, r7
 8009086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800908a:	bf00      	nop
 800908c:	0800a3a8 	.word	0x0800a3a8
 8009090:	0800a242 	.word	0x0800a242
 8009094:	0800a259 	.word	0x0800a259

08009098 <__lshift>:
 8009098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	460c      	mov	r4, r1
 800909e:	4607      	mov	r7, r0
 80090a0:	4691      	mov	r9, r2
 80090a2:	6923      	ldr	r3, [r4, #16]
 80090a4:	6849      	ldr	r1, [r1, #4]
 80090a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090aa:	68a3      	ldr	r3, [r4, #8]
 80090ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090b0:	f108 0601 	add.w	r6, r8, #1
 80090b4:	42b3      	cmp	r3, r6
 80090b6:	db0b      	blt.n	80090d0 <__lshift+0x38>
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7ff fd95 	bl	8008be8 <_Balloc>
 80090be:	4605      	mov	r5, r0
 80090c0:	b948      	cbnz	r0, 80090d6 <__lshift+0x3e>
 80090c2:	4602      	mov	r2, r0
 80090c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80090c8:	4b27      	ldr	r3, [pc, #156]	; (8009168 <__lshift+0xd0>)
 80090ca:	4828      	ldr	r0, [pc, #160]	; (800916c <__lshift+0xd4>)
 80090cc:	f000 face 	bl	800966c <__assert_func>
 80090d0:	3101      	adds	r1, #1
 80090d2:	005b      	lsls	r3, r3, #1
 80090d4:	e7ee      	b.n	80090b4 <__lshift+0x1c>
 80090d6:	2300      	movs	r3, #0
 80090d8:	f100 0114 	add.w	r1, r0, #20
 80090dc:	f100 0210 	add.w	r2, r0, #16
 80090e0:	4618      	mov	r0, r3
 80090e2:	4553      	cmp	r3, sl
 80090e4:	db33      	blt.n	800914e <__lshift+0xb6>
 80090e6:	6920      	ldr	r0, [r4, #16]
 80090e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090ec:	f104 0314 	add.w	r3, r4, #20
 80090f0:	f019 091f 	ands.w	r9, r9, #31
 80090f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090fc:	d02b      	beq.n	8009156 <__lshift+0xbe>
 80090fe:	468a      	mov	sl, r1
 8009100:	2200      	movs	r2, #0
 8009102:	f1c9 0e20 	rsb	lr, r9, #32
 8009106:	6818      	ldr	r0, [r3, #0]
 8009108:	fa00 f009 	lsl.w	r0, r0, r9
 800910c:	4310      	orrs	r0, r2
 800910e:	f84a 0b04 	str.w	r0, [sl], #4
 8009112:	f853 2b04 	ldr.w	r2, [r3], #4
 8009116:	459c      	cmp	ip, r3
 8009118:	fa22 f20e 	lsr.w	r2, r2, lr
 800911c:	d8f3      	bhi.n	8009106 <__lshift+0x6e>
 800911e:	ebac 0304 	sub.w	r3, ip, r4
 8009122:	3b15      	subs	r3, #21
 8009124:	f023 0303 	bic.w	r3, r3, #3
 8009128:	3304      	adds	r3, #4
 800912a:	f104 0015 	add.w	r0, r4, #21
 800912e:	4584      	cmp	ip, r0
 8009130:	bf38      	it	cc
 8009132:	2304      	movcc	r3, #4
 8009134:	50ca      	str	r2, [r1, r3]
 8009136:	b10a      	cbz	r2, 800913c <__lshift+0xa4>
 8009138:	f108 0602 	add.w	r6, r8, #2
 800913c:	3e01      	subs	r6, #1
 800913e:	4638      	mov	r0, r7
 8009140:	4621      	mov	r1, r4
 8009142:	612e      	str	r6, [r5, #16]
 8009144:	f7ff fd90 	bl	8008c68 <_Bfree>
 8009148:	4628      	mov	r0, r5
 800914a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800914e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009152:	3301      	adds	r3, #1
 8009154:	e7c5      	b.n	80090e2 <__lshift+0x4a>
 8009156:	3904      	subs	r1, #4
 8009158:	f853 2b04 	ldr.w	r2, [r3], #4
 800915c:	459c      	cmp	ip, r3
 800915e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009162:	d8f9      	bhi.n	8009158 <__lshift+0xc0>
 8009164:	e7ea      	b.n	800913c <__lshift+0xa4>
 8009166:	bf00      	nop
 8009168:	0800a1d1 	.word	0x0800a1d1
 800916c:	0800a259 	.word	0x0800a259

08009170 <__mcmp>:
 8009170:	4603      	mov	r3, r0
 8009172:	690a      	ldr	r2, [r1, #16]
 8009174:	6900      	ldr	r0, [r0, #16]
 8009176:	b530      	push	{r4, r5, lr}
 8009178:	1a80      	subs	r0, r0, r2
 800917a:	d10d      	bne.n	8009198 <__mcmp+0x28>
 800917c:	3314      	adds	r3, #20
 800917e:	3114      	adds	r1, #20
 8009180:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009184:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009188:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800918c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009190:	4295      	cmp	r5, r2
 8009192:	d002      	beq.n	800919a <__mcmp+0x2a>
 8009194:	d304      	bcc.n	80091a0 <__mcmp+0x30>
 8009196:	2001      	movs	r0, #1
 8009198:	bd30      	pop	{r4, r5, pc}
 800919a:	42a3      	cmp	r3, r4
 800919c:	d3f4      	bcc.n	8009188 <__mcmp+0x18>
 800919e:	e7fb      	b.n	8009198 <__mcmp+0x28>
 80091a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091a4:	e7f8      	b.n	8009198 <__mcmp+0x28>
	...

080091a8 <__mdiff>:
 80091a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ac:	460d      	mov	r5, r1
 80091ae:	4607      	mov	r7, r0
 80091b0:	4611      	mov	r1, r2
 80091b2:	4628      	mov	r0, r5
 80091b4:	4614      	mov	r4, r2
 80091b6:	f7ff ffdb 	bl	8009170 <__mcmp>
 80091ba:	1e06      	subs	r6, r0, #0
 80091bc:	d111      	bne.n	80091e2 <__mdiff+0x3a>
 80091be:	4631      	mov	r1, r6
 80091c0:	4638      	mov	r0, r7
 80091c2:	f7ff fd11 	bl	8008be8 <_Balloc>
 80091c6:	4602      	mov	r2, r0
 80091c8:	b928      	cbnz	r0, 80091d6 <__mdiff+0x2e>
 80091ca:	f240 2137 	movw	r1, #567	; 0x237
 80091ce:	4b3a      	ldr	r3, [pc, #232]	; (80092b8 <__mdiff+0x110>)
 80091d0:	483a      	ldr	r0, [pc, #232]	; (80092bc <__mdiff+0x114>)
 80091d2:	f000 fa4b 	bl	800966c <__assert_func>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80091dc:	4610      	mov	r0, r2
 80091de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e2:	bfa4      	itt	ge
 80091e4:	4623      	movge	r3, r4
 80091e6:	462c      	movge	r4, r5
 80091e8:	4638      	mov	r0, r7
 80091ea:	6861      	ldr	r1, [r4, #4]
 80091ec:	bfa6      	itte	ge
 80091ee:	461d      	movge	r5, r3
 80091f0:	2600      	movge	r6, #0
 80091f2:	2601      	movlt	r6, #1
 80091f4:	f7ff fcf8 	bl	8008be8 <_Balloc>
 80091f8:	4602      	mov	r2, r0
 80091fa:	b918      	cbnz	r0, 8009204 <__mdiff+0x5c>
 80091fc:	f240 2145 	movw	r1, #581	; 0x245
 8009200:	4b2d      	ldr	r3, [pc, #180]	; (80092b8 <__mdiff+0x110>)
 8009202:	e7e5      	b.n	80091d0 <__mdiff+0x28>
 8009204:	f102 0814 	add.w	r8, r2, #20
 8009208:	46c2      	mov	sl, r8
 800920a:	f04f 0c00 	mov.w	ip, #0
 800920e:	6927      	ldr	r7, [r4, #16]
 8009210:	60c6      	str	r6, [r0, #12]
 8009212:	692e      	ldr	r6, [r5, #16]
 8009214:	f104 0014 	add.w	r0, r4, #20
 8009218:	f105 0914 	add.w	r9, r5, #20
 800921c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009220:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009224:	3410      	adds	r4, #16
 8009226:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800922a:	f859 3b04 	ldr.w	r3, [r9], #4
 800922e:	fa1f f18b 	uxth.w	r1, fp
 8009232:	4461      	add	r1, ip
 8009234:	fa1f fc83 	uxth.w	ip, r3
 8009238:	0c1b      	lsrs	r3, r3, #16
 800923a:	eba1 010c 	sub.w	r1, r1, ip
 800923e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009242:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009246:	b289      	uxth	r1, r1
 8009248:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800924c:	454e      	cmp	r6, r9
 800924e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009252:	f84a 1b04 	str.w	r1, [sl], #4
 8009256:	d8e6      	bhi.n	8009226 <__mdiff+0x7e>
 8009258:	1b73      	subs	r3, r6, r5
 800925a:	3b15      	subs	r3, #21
 800925c:	f023 0303 	bic.w	r3, r3, #3
 8009260:	3515      	adds	r5, #21
 8009262:	3304      	adds	r3, #4
 8009264:	42ae      	cmp	r6, r5
 8009266:	bf38      	it	cc
 8009268:	2304      	movcc	r3, #4
 800926a:	4418      	add	r0, r3
 800926c:	4443      	add	r3, r8
 800926e:	461e      	mov	r6, r3
 8009270:	4605      	mov	r5, r0
 8009272:	4575      	cmp	r5, lr
 8009274:	d30e      	bcc.n	8009294 <__mdiff+0xec>
 8009276:	f10e 0103 	add.w	r1, lr, #3
 800927a:	1a09      	subs	r1, r1, r0
 800927c:	f021 0103 	bic.w	r1, r1, #3
 8009280:	3803      	subs	r0, #3
 8009282:	4586      	cmp	lr, r0
 8009284:	bf38      	it	cc
 8009286:	2100      	movcc	r1, #0
 8009288:	440b      	add	r3, r1
 800928a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800928e:	b189      	cbz	r1, 80092b4 <__mdiff+0x10c>
 8009290:	6117      	str	r7, [r2, #16]
 8009292:	e7a3      	b.n	80091dc <__mdiff+0x34>
 8009294:	f855 8b04 	ldr.w	r8, [r5], #4
 8009298:	fa1f f188 	uxth.w	r1, r8
 800929c:	4461      	add	r1, ip
 800929e:	140c      	asrs	r4, r1, #16
 80092a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092a4:	b289      	uxth	r1, r1
 80092a6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80092aa:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80092ae:	f846 1b04 	str.w	r1, [r6], #4
 80092b2:	e7de      	b.n	8009272 <__mdiff+0xca>
 80092b4:	3f01      	subs	r7, #1
 80092b6:	e7e8      	b.n	800928a <__mdiff+0xe2>
 80092b8:	0800a1d1 	.word	0x0800a1d1
 80092bc:	0800a259 	.word	0x0800a259

080092c0 <__ulp>:
 80092c0:	4b0e      	ldr	r3, [pc, #56]	; (80092fc <__ulp+0x3c>)
 80092c2:	400b      	ands	r3, r1
 80092c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	dc08      	bgt.n	80092de <__ulp+0x1e>
 80092cc:	425b      	negs	r3, r3
 80092ce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80092d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092d6:	da04      	bge.n	80092e2 <__ulp+0x22>
 80092d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80092dc:	4113      	asrs	r3, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	e008      	b.n	80092f4 <__ulp+0x34>
 80092e2:	f1a2 0314 	sub.w	r3, r2, #20
 80092e6:	2b1e      	cmp	r3, #30
 80092e8:	bfd6      	itet	le
 80092ea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80092ee:	2201      	movgt	r2, #1
 80092f0:	40da      	lsrle	r2, r3
 80092f2:	2300      	movs	r3, #0
 80092f4:	4619      	mov	r1, r3
 80092f6:	4610      	mov	r0, r2
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	7ff00000 	.word	0x7ff00000

08009300 <__b2d>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	6905      	ldr	r5, [r0, #16]
 8009304:	f100 0714 	add.w	r7, r0, #20
 8009308:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800930c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009310:	1f2e      	subs	r6, r5, #4
 8009312:	4620      	mov	r0, r4
 8009314:	f7ff fd5a 	bl	8008dcc <__hi0bits>
 8009318:	f1c0 0220 	rsb	r2, r0, #32
 800931c:	280a      	cmp	r0, #10
 800931e:	4603      	mov	r3, r0
 8009320:	f8df c068 	ldr.w	ip, [pc, #104]	; 800938c <__b2d+0x8c>
 8009324:	600a      	str	r2, [r1, #0]
 8009326:	dc12      	bgt.n	800934e <__b2d+0x4e>
 8009328:	f1c0 0e0b 	rsb	lr, r0, #11
 800932c:	fa24 f20e 	lsr.w	r2, r4, lr
 8009330:	42b7      	cmp	r7, r6
 8009332:	ea42 010c 	orr.w	r1, r2, ip
 8009336:	bf2c      	ite	cs
 8009338:	2200      	movcs	r2, #0
 800933a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800933e:	3315      	adds	r3, #21
 8009340:	fa04 f303 	lsl.w	r3, r4, r3
 8009344:	fa22 f20e 	lsr.w	r2, r2, lr
 8009348:	431a      	orrs	r2, r3
 800934a:	4610      	mov	r0, r2
 800934c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800934e:	42b7      	cmp	r7, r6
 8009350:	bf2e      	itee	cs
 8009352:	2200      	movcs	r2, #0
 8009354:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009358:	f1a5 0608 	subcc.w	r6, r5, #8
 800935c:	3b0b      	subs	r3, #11
 800935e:	d012      	beq.n	8009386 <__b2d+0x86>
 8009360:	f1c3 0520 	rsb	r5, r3, #32
 8009364:	fa22 f105 	lsr.w	r1, r2, r5
 8009368:	409c      	lsls	r4, r3
 800936a:	430c      	orrs	r4, r1
 800936c:	42be      	cmp	r6, r7
 800936e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8009372:	bf94      	ite	ls
 8009374:	2400      	movls	r4, #0
 8009376:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800937a:	409a      	lsls	r2, r3
 800937c:	40ec      	lsrs	r4, r5
 800937e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009382:	4322      	orrs	r2, r4
 8009384:	e7e1      	b.n	800934a <__b2d+0x4a>
 8009386:	ea44 010c 	orr.w	r1, r4, ip
 800938a:	e7de      	b.n	800934a <__b2d+0x4a>
 800938c:	3ff00000 	.word	0x3ff00000

08009390 <__d2b>:
 8009390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009392:	2101      	movs	r1, #1
 8009394:	4617      	mov	r7, r2
 8009396:	461c      	mov	r4, r3
 8009398:	9e08      	ldr	r6, [sp, #32]
 800939a:	f7ff fc25 	bl	8008be8 <_Balloc>
 800939e:	4605      	mov	r5, r0
 80093a0:	b930      	cbnz	r0, 80093b0 <__d2b+0x20>
 80093a2:	4602      	mov	r2, r0
 80093a4:	f240 310f 	movw	r1, #783	; 0x30f
 80093a8:	4b22      	ldr	r3, [pc, #136]	; (8009434 <__d2b+0xa4>)
 80093aa:	4823      	ldr	r0, [pc, #140]	; (8009438 <__d2b+0xa8>)
 80093ac:	f000 f95e 	bl	800966c <__assert_func>
 80093b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80093b4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80093b8:	bb24      	cbnz	r4, 8009404 <__d2b+0x74>
 80093ba:	2f00      	cmp	r7, #0
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	d026      	beq.n	800940e <__d2b+0x7e>
 80093c0:	4668      	mov	r0, sp
 80093c2:	9700      	str	r7, [sp, #0]
 80093c4:	f7ff fd22 	bl	8008e0c <__lo0bits>
 80093c8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093cc:	b1e8      	cbz	r0, 800940a <__d2b+0x7a>
 80093ce:	f1c0 0320 	rsb	r3, r0, #32
 80093d2:	fa02 f303 	lsl.w	r3, r2, r3
 80093d6:	430b      	orrs	r3, r1
 80093d8:	40c2      	lsrs	r2, r0
 80093da:	616b      	str	r3, [r5, #20]
 80093dc:	9201      	str	r2, [sp, #4]
 80093de:	9b01      	ldr	r3, [sp, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	bf14      	ite	ne
 80093e4:	2102      	movne	r1, #2
 80093e6:	2101      	moveq	r1, #1
 80093e8:	61ab      	str	r3, [r5, #24]
 80093ea:	6129      	str	r1, [r5, #16]
 80093ec:	b1bc      	cbz	r4, 800941e <__d2b+0x8e>
 80093ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80093f2:	4404      	add	r4, r0
 80093f4:	6034      	str	r4, [r6, #0]
 80093f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fc:	6018      	str	r0, [r3, #0]
 80093fe:	4628      	mov	r0, r5
 8009400:	b003      	add	sp, #12
 8009402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009408:	e7d7      	b.n	80093ba <__d2b+0x2a>
 800940a:	6169      	str	r1, [r5, #20]
 800940c:	e7e7      	b.n	80093de <__d2b+0x4e>
 800940e:	a801      	add	r0, sp, #4
 8009410:	f7ff fcfc 	bl	8008e0c <__lo0bits>
 8009414:	9b01      	ldr	r3, [sp, #4]
 8009416:	2101      	movs	r1, #1
 8009418:	616b      	str	r3, [r5, #20]
 800941a:	3020      	adds	r0, #32
 800941c:	e7e5      	b.n	80093ea <__d2b+0x5a>
 800941e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009422:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009426:	6030      	str	r0, [r6, #0]
 8009428:	6918      	ldr	r0, [r3, #16]
 800942a:	f7ff fccf 	bl	8008dcc <__hi0bits>
 800942e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009432:	e7e2      	b.n	80093fa <__d2b+0x6a>
 8009434:	0800a1d1 	.word	0x0800a1d1
 8009438:	0800a259 	.word	0x0800a259

0800943c <__ratio>:
 800943c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009440:	4688      	mov	r8, r1
 8009442:	4669      	mov	r1, sp
 8009444:	4681      	mov	r9, r0
 8009446:	f7ff ff5b 	bl	8009300 <__b2d>
 800944a:	460f      	mov	r7, r1
 800944c:	4604      	mov	r4, r0
 800944e:	460d      	mov	r5, r1
 8009450:	4640      	mov	r0, r8
 8009452:	a901      	add	r1, sp, #4
 8009454:	f7ff ff54 	bl	8009300 <__b2d>
 8009458:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800945c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009460:	468b      	mov	fp, r1
 8009462:	eba3 0c02 	sub.w	ip, r3, r2
 8009466:	e9dd 3200 	ldrd	r3, r2, [sp]
 800946a:	1a9b      	subs	r3, r3, r2
 800946c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009470:	2b00      	cmp	r3, #0
 8009472:	bfd5      	itete	le
 8009474:	460a      	movle	r2, r1
 8009476:	462a      	movgt	r2, r5
 8009478:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800947c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009480:	bfd8      	it	le
 8009482:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009486:	465b      	mov	r3, fp
 8009488:	4602      	mov	r2, r0
 800948a:	4639      	mov	r1, r7
 800948c:	4620      	mov	r0, r4
 800948e:	f7f7 f945 	bl	800071c <__aeabi_ddiv>
 8009492:	b003      	add	sp, #12
 8009494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009498 <__copybits>:
 8009498:	3901      	subs	r1, #1
 800949a:	b570      	push	{r4, r5, r6, lr}
 800949c:	1149      	asrs	r1, r1, #5
 800949e:	6914      	ldr	r4, [r2, #16]
 80094a0:	3101      	adds	r1, #1
 80094a2:	f102 0314 	add.w	r3, r2, #20
 80094a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80094aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094ae:	1f05      	subs	r5, r0, #4
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	d30c      	bcc.n	80094ce <__copybits+0x36>
 80094b4:	1aa3      	subs	r3, r4, r2
 80094b6:	3b11      	subs	r3, #17
 80094b8:	f023 0303 	bic.w	r3, r3, #3
 80094bc:	3211      	adds	r2, #17
 80094be:	42a2      	cmp	r2, r4
 80094c0:	bf88      	it	hi
 80094c2:	2300      	movhi	r3, #0
 80094c4:	4418      	add	r0, r3
 80094c6:	2300      	movs	r3, #0
 80094c8:	4288      	cmp	r0, r1
 80094ca:	d305      	bcc.n	80094d8 <__copybits+0x40>
 80094cc:	bd70      	pop	{r4, r5, r6, pc}
 80094ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80094d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80094d6:	e7eb      	b.n	80094b0 <__copybits+0x18>
 80094d8:	f840 3b04 	str.w	r3, [r0], #4
 80094dc:	e7f4      	b.n	80094c8 <__copybits+0x30>

080094de <__any_on>:
 80094de:	f100 0214 	add.w	r2, r0, #20
 80094e2:	6900      	ldr	r0, [r0, #16]
 80094e4:	114b      	asrs	r3, r1, #5
 80094e6:	4298      	cmp	r0, r3
 80094e8:	b510      	push	{r4, lr}
 80094ea:	db11      	blt.n	8009510 <__any_on+0x32>
 80094ec:	dd0a      	ble.n	8009504 <__any_on+0x26>
 80094ee:	f011 011f 	ands.w	r1, r1, #31
 80094f2:	d007      	beq.n	8009504 <__any_on+0x26>
 80094f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094f8:	fa24 f001 	lsr.w	r0, r4, r1
 80094fc:	fa00 f101 	lsl.w	r1, r0, r1
 8009500:	428c      	cmp	r4, r1
 8009502:	d10b      	bne.n	800951c <__any_on+0x3e>
 8009504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009508:	4293      	cmp	r3, r2
 800950a:	d803      	bhi.n	8009514 <__any_on+0x36>
 800950c:	2000      	movs	r0, #0
 800950e:	bd10      	pop	{r4, pc}
 8009510:	4603      	mov	r3, r0
 8009512:	e7f7      	b.n	8009504 <__any_on+0x26>
 8009514:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009518:	2900      	cmp	r1, #0
 800951a:	d0f5      	beq.n	8009508 <__any_on+0x2a>
 800951c:	2001      	movs	r0, #1
 800951e:	e7f6      	b.n	800950e <__any_on+0x30>

08009520 <__sread>:
 8009520:	b510      	push	{r4, lr}
 8009522:	460c      	mov	r4, r1
 8009524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009528:	f000 f86c 	bl	8009604 <_read_r>
 800952c:	2800      	cmp	r0, #0
 800952e:	bfab      	itete	ge
 8009530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009532:	89a3      	ldrhlt	r3, [r4, #12]
 8009534:	181b      	addge	r3, r3, r0
 8009536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800953a:	bfac      	ite	ge
 800953c:	6563      	strge	r3, [r4, #84]	; 0x54
 800953e:	81a3      	strhlt	r3, [r4, #12]
 8009540:	bd10      	pop	{r4, pc}

08009542 <__swrite>:
 8009542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009546:	461f      	mov	r7, r3
 8009548:	898b      	ldrh	r3, [r1, #12]
 800954a:	4605      	mov	r5, r0
 800954c:	05db      	lsls	r3, r3, #23
 800954e:	460c      	mov	r4, r1
 8009550:	4616      	mov	r6, r2
 8009552:	d505      	bpl.n	8009560 <__swrite+0x1e>
 8009554:	2302      	movs	r3, #2
 8009556:	2200      	movs	r2, #0
 8009558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955c:	f000 f840 	bl	80095e0 <_lseek_r>
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	4632      	mov	r2, r6
 8009564:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009568:	81a3      	strh	r3, [r4, #12]
 800956a:	4628      	mov	r0, r5
 800956c:	463b      	mov	r3, r7
 800956e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009576:	f000 b867 	b.w	8009648 <_write_r>

0800957a <__sseek>:
 800957a:	b510      	push	{r4, lr}
 800957c:	460c      	mov	r4, r1
 800957e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009582:	f000 f82d 	bl	80095e0 <_lseek_r>
 8009586:	1c43      	adds	r3, r0, #1
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	bf15      	itete	ne
 800958c:	6560      	strne	r0, [r4, #84]	; 0x54
 800958e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009596:	81a3      	strheq	r3, [r4, #12]
 8009598:	bf18      	it	ne
 800959a:	81a3      	strhne	r3, [r4, #12]
 800959c:	bd10      	pop	{r4, pc}

0800959e <__sclose>:
 800959e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a2:	f000 b80d 	b.w	80095c0 <_close_r>

080095a6 <__ascii_wctomb>:
 80095a6:	4603      	mov	r3, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	b141      	cbz	r1, 80095be <__ascii_wctomb+0x18>
 80095ac:	2aff      	cmp	r2, #255	; 0xff
 80095ae:	d904      	bls.n	80095ba <__ascii_wctomb+0x14>
 80095b0:	228a      	movs	r2, #138	; 0x8a
 80095b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	4770      	bx	lr
 80095ba:	2001      	movs	r0, #1
 80095bc:	700a      	strb	r2, [r1, #0]
 80095be:	4770      	bx	lr

080095c0 <_close_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	2300      	movs	r3, #0
 80095c4:	4d05      	ldr	r5, [pc, #20]	; (80095dc <_close_r+0x1c>)
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	f7f8 fd3e 	bl	800204c <_close>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_close_r+0x1a>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_close_r+0x1a>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	20000668 	.word	0x20000668

080095e0 <_lseek_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	4604      	mov	r4, r0
 80095e4:	4608      	mov	r0, r1
 80095e6:	4611      	mov	r1, r2
 80095e8:	2200      	movs	r2, #0
 80095ea:	4d05      	ldr	r5, [pc, #20]	; (8009600 <_lseek_r+0x20>)
 80095ec:	602a      	str	r2, [r5, #0]
 80095ee:	461a      	mov	r2, r3
 80095f0:	f7f8 fd50 	bl	8002094 <_lseek>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_lseek_r+0x1e>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_lseek_r+0x1e>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	20000668 	.word	0x20000668

08009604 <_read_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4604      	mov	r4, r0
 8009608:	4608      	mov	r0, r1
 800960a:	4611      	mov	r1, r2
 800960c:	2200      	movs	r2, #0
 800960e:	4d05      	ldr	r5, [pc, #20]	; (8009624 <_read_r+0x20>)
 8009610:	602a      	str	r2, [r5, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	f7f8 fce1 	bl	8001fda <_read>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_read_r+0x1e>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	b103      	cbz	r3, 8009622 <_read_r+0x1e>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	20000668 	.word	0x20000668

08009628 <_sbrk_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	2300      	movs	r3, #0
 800962c:	4d05      	ldr	r5, [pc, #20]	; (8009644 <_sbrk_r+0x1c>)
 800962e:	4604      	mov	r4, r0
 8009630:	4608      	mov	r0, r1
 8009632:	602b      	str	r3, [r5, #0]
 8009634:	f7f8 fd3a 	bl	80020ac <_sbrk>
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	d102      	bne.n	8009642 <_sbrk_r+0x1a>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	b103      	cbz	r3, 8009642 <_sbrk_r+0x1a>
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	20000668 	.word	0x20000668

08009648 <_write_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	4611      	mov	r1, r2
 8009650:	2200      	movs	r2, #0
 8009652:	4d05      	ldr	r5, [pc, #20]	; (8009668 <_write_r+0x20>)
 8009654:	602a      	str	r2, [r5, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	f7f8 fcdc 	bl	8002014 <_write>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_write_r+0x1e>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_write_r+0x1e>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	20000668 	.word	0x20000668

0800966c <__assert_func>:
 800966c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800966e:	4614      	mov	r4, r2
 8009670:	461a      	mov	r2, r3
 8009672:	4b09      	ldr	r3, [pc, #36]	; (8009698 <__assert_func+0x2c>)
 8009674:	4605      	mov	r5, r0
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68d8      	ldr	r0, [r3, #12]
 800967a:	b14c      	cbz	r4, 8009690 <__assert_func+0x24>
 800967c:	4b07      	ldr	r3, [pc, #28]	; (800969c <__assert_func+0x30>)
 800967e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009682:	9100      	str	r1, [sp, #0]
 8009684:	462b      	mov	r3, r5
 8009686:	4906      	ldr	r1, [pc, #24]	; (80096a0 <__assert_func+0x34>)
 8009688:	f000 f872 	bl	8009770 <fiprintf>
 800968c:	f000 f882 	bl	8009794 <abort>
 8009690:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <__assert_func+0x38>)
 8009692:	461c      	mov	r4, r3
 8009694:	e7f3      	b.n	800967e <__assert_func+0x12>
 8009696:	bf00      	nop
 8009698:	200001d8 	.word	0x200001d8
 800969c:	0800a3b4 	.word	0x0800a3b4
 80096a0:	0800a3c1 	.word	0x0800a3c1
 80096a4:	0800a3ef 	.word	0x0800a3ef

080096a8 <_calloc_r>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	fba1 5402 	umull	r5, r4, r1, r2
 80096ae:	b934      	cbnz	r4, 80096be <_calloc_r+0x16>
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7ff f951 	bl	8008958 <_malloc_r>
 80096b6:	4606      	mov	r6, r0
 80096b8:	b928      	cbnz	r0, 80096c6 <_calloc_r+0x1e>
 80096ba:	4630      	mov	r0, r6
 80096bc:	bd70      	pop	{r4, r5, r6, pc}
 80096be:	220c      	movs	r2, #12
 80096c0:	2600      	movs	r6, #0
 80096c2:	6002      	str	r2, [r0, #0]
 80096c4:	e7f9      	b.n	80096ba <_calloc_r+0x12>
 80096c6:	462a      	mov	r2, r5
 80096c8:	4621      	mov	r1, r4
 80096ca:	f7fe fd7d 	bl	80081c8 <memset>
 80096ce:	e7f4      	b.n	80096ba <_calloc_r+0x12>

080096d0 <_free_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	4605      	mov	r5, r0
 80096d4:	2900      	cmp	r1, #0
 80096d6:	d040      	beq.n	800975a <_free_r+0x8a>
 80096d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096dc:	1f0c      	subs	r4, r1, #4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	bfb8      	it	lt
 80096e2:	18e4      	addlt	r4, r4, r3
 80096e4:	f7ff fa74 	bl	8008bd0 <__malloc_lock>
 80096e8:	4a1c      	ldr	r2, [pc, #112]	; (800975c <_free_r+0x8c>)
 80096ea:	6813      	ldr	r3, [r2, #0]
 80096ec:	b933      	cbnz	r3, 80096fc <_free_r+0x2c>
 80096ee:	6063      	str	r3, [r4, #4]
 80096f0:	6014      	str	r4, [r2, #0]
 80096f2:	4628      	mov	r0, r5
 80096f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096f8:	f7ff ba70 	b.w	8008bdc <__malloc_unlock>
 80096fc:	42a3      	cmp	r3, r4
 80096fe:	d908      	bls.n	8009712 <_free_r+0x42>
 8009700:	6820      	ldr	r0, [r4, #0]
 8009702:	1821      	adds	r1, r4, r0
 8009704:	428b      	cmp	r3, r1
 8009706:	bf01      	itttt	eq
 8009708:	6819      	ldreq	r1, [r3, #0]
 800970a:	685b      	ldreq	r3, [r3, #4]
 800970c:	1809      	addeq	r1, r1, r0
 800970e:	6021      	streq	r1, [r4, #0]
 8009710:	e7ed      	b.n	80096ee <_free_r+0x1e>
 8009712:	461a      	mov	r2, r3
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	b10b      	cbz	r3, 800971c <_free_r+0x4c>
 8009718:	42a3      	cmp	r3, r4
 800971a:	d9fa      	bls.n	8009712 <_free_r+0x42>
 800971c:	6811      	ldr	r1, [r2, #0]
 800971e:	1850      	adds	r0, r2, r1
 8009720:	42a0      	cmp	r0, r4
 8009722:	d10b      	bne.n	800973c <_free_r+0x6c>
 8009724:	6820      	ldr	r0, [r4, #0]
 8009726:	4401      	add	r1, r0
 8009728:	1850      	adds	r0, r2, r1
 800972a:	4283      	cmp	r3, r0
 800972c:	6011      	str	r1, [r2, #0]
 800972e:	d1e0      	bne.n	80096f2 <_free_r+0x22>
 8009730:	6818      	ldr	r0, [r3, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	4408      	add	r0, r1
 8009736:	6010      	str	r0, [r2, #0]
 8009738:	6053      	str	r3, [r2, #4]
 800973a:	e7da      	b.n	80096f2 <_free_r+0x22>
 800973c:	d902      	bls.n	8009744 <_free_r+0x74>
 800973e:	230c      	movs	r3, #12
 8009740:	602b      	str	r3, [r5, #0]
 8009742:	e7d6      	b.n	80096f2 <_free_r+0x22>
 8009744:	6820      	ldr	r0, [r4, #0]
 8009746:	1821      	adds	r1, r4, r0
 8009748:	428b      	cmp	r3, r1
 800974a:	bf01      	itttt	eq
 800974c:	6819      	ldreq	r1, [r3, #0]
 800974e:	685b      	ldreq	r3, [r3, #4]
 8009750:	1809      	addeq	r1, r1, r0
 8009752:	6021      	streq	r1, [r4, #0]
 8009754:	6063      	str	r3, [r4, #4]
 8009756:	6054      	str	r4, [r2, #4]
 8009758:	e7cb      	b.n	80096f2 <_free_r+0x22>
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20000660 	.word	0x20000660

08009760 <malloc>:
 8009760:	4b02      	ldr	r3, [pc, #8]	; (800976c <malloc+0xc>)
 8009762:	4601      	mov	r1, r0
 8009764:	6818      	ldr	r0, [r3, #0]
 8009766:	f7ff b8f7 	b.w	8008958 <_malloc_r>
 800976a:	bf00      	nop
 800976c:	200001d8 	.word	0x200001d8

08009770 <fiprintf>:
 8009770:	b40e      	push	{r1, r2, r3}
 8009772:	b503      	push	{r0, r1, lr}
 8009774:	4601      	mov	r1, r0
 8009776:	ab03      	add	r3, sp, #12
 8009778:	4805      	ldr	r0, [pc, #20]	; (8009790 <fiprintf+0x20>)
 800977a:	f853 2b04 	ldr.w	r2, [r3], #4
 800977e:	6800      	ldr	r0, [r0, #0]
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	f000 f835 	bl	80097f0 <_vfiprintf_r>
 8009786:	b002      	add	sp, #8
 8009788:	f85d eb04 	ldr.w	lr, [sp], #4
 800978c:	b003      	add	sp, #12
 800978e:	4770      	bx	lr
 8009790:	200001d8 	.word	0x200001d8

08009794 <abort>:
 8009794:	2006      	movs	r0, #6
 8009796:	b508      	push	{r3, lr}
 8009798:	f000 fc1a 	bl	8009fd0 <raise>
 800979c:	2001      	movs	r0, #1
 800979e:	f7f8 fc12 	bl	8001fc6 <_exit>

080097a2 <__sfputc_r>:
 80097a2:	6893      	ldr	r3, [r2, #8]
 80097a4:	b410      	push	{r4}
 80097a6:	3b01      	subs	r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	6093      	str	r3, [r2, #8]
 80097ac:	da07      	bge.n	80097be <__sfputc_r+0x1c>
 80097ae:	6994      	ldr	r4, [r2, #24]
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	db01      	blt.n	80097b8 <__sfputc_r+0x16>
 80097b4:	290a      	cmp	r1, #10
 80097b6:	d102      	bne.n	80097be <__sfputc_r+0x1c>
 80097b8:	bc10      	pop	{r4}
 80097ba:	f000 bac7 	b.w	8009d4c <__swbuf_r>
 80097be:	6813      	ldr	r3, [r2, #0]
 80097c0:	1c58      	adds	r0, r3, #1
 80097c2:	6010      	str	r0, [r2, #0]
 80097c4:	7019      	strb	r1, [r3, #0]
 80097c6:	4608      	mov	r0, r1
 80097c8:	bc10      	pop	{r4}
 80097ca:	4770      	bx	lr

080097cc <__sfputs_r>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	4606      	mov	r6, r0
 80097d0:	460f      	mov	r7, r1
 80097d2:	4614      	mov	r4, r2
 80097d4:	18d5      	adds	r5, r2, r3
 80097d6:	42ac      	cmp	r4, r5
 80097d8:	d101      	bne.n	80097de <__sfputs_r+0x12>
 80097da:	2000      	movs	r0, #0
 80097dc:	e007      	b.n	80097ee <__sfputs_r+0x22>
 80097de:	463a      	mov	r2, r7
 80097e0:	4630      	mov	r0, r6
 80097e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e6:	f7ff ffdc 	bl	80097a2 <__sfputc_r>
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	d1f3      	bne.n	80097d6 <__sfputs_r+0xa>
 80097ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080097f0 <_vfiprintf_r>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	460d      	mov	r5, r1
 80097f6:	4614      	mov	r4, r2
 80097f8:	4698      	mov	r8, r3
 80097fa:	4606      	mov	r6, r0
 80097fc:	b09d      	sub	sp, #116	; 0x74
 80097fe:	b118      	cbz	r0, 8009808 <_vfiprintf_r+0x18>
 8009800:	6a03      	ldr	r3, [r0, #32]
 8009802:	b90b      	cbnz	r3, 8009808 <_vfiprintf_r+0x18>
 8009804:	f7fd fe2a 	bl	800745c <__sinit>
 8009808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800980a:	07d9      	lsls	r1, r3, #31
 800980c:	d405      	bmi.n	800981a <_vfiprintf_r+0x2a>
 800980e:	89ab      	ldrh	r3, [r5, #12]
 8009810:	059a      	lsls	r2, r3, #22
 8009812:	d402      	bmi.n	800981a <_vfiprintf_r+0x2a>
 8009814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009816:	f7fe fd0a 	bl	800822e <__retarget_lock_acquire_recursive>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	071b      	lsls	r3, r3, #28
 800981e:	d501      	bpl.n	8009824 <_vfiprintf_r+0x34>
 8009820:	692b      	ldr	r3, [r5, #16]
 8009822:	b99b      	cbnz	r3, 800984c <_vfiprintf_r+0x5c>
 8009824:	4629      	mov	r1, r5
 8009826:	4630      	mov	r0, r6
 8009828:	f000 face 	bl	8009dc8 <__swsetup_r>
 800982c:	b170      	cbz	r0, 800984c <_vfiprintf_r+0x5c>
 800982e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009830:	07dc      	lsls	r4, r3, #31
 8009832:	d504      	bpl.n	800983e <_vfiprintf_r+0x4e>
 8009834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009838:	b01d      	add	sp, #116	; 0x74
 800983a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983e:	89ab      	ldrh	r3, [r5, #12]
 8009840:	0598      	lsls	r0, r3, #22
 8009842:	d4f7      	bmi.n	8009834 <_vfiprintf_r+0x44>
 8009844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009846:	f7fe fcf3 	bl	8008230 <__retarget_lock_release_recursive>
 800984a:	e7f3      	b.n	8009834 <_vfiprintf_r+0x44>
 800984c:	2300      	movs	r3, #0
 800984e:	9309      	str	r3, [sp, #36]	; 0x24
 8009850:	2320      	movs	r3, #32
 8009852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009856:	2330      	movs	r3, #48	; 0x30
 8009858:	f04f 0901 	mov.w	r9, #1
 800985c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009860:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009a10 <_vfiprintf_r+0x220>
 8009864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009868:	4623      	mov	r3, r4
 800986a:	469a      	mov	sl, r3
 800986c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009870:	b10a      	cbz	r2, 8009876 <_vfiprintf_r+0x86>
 8009872:	2a25      	cmp	r2, #37	; 0x25
 8009874:	d1f9      	bne.n	800986a <_vfiprintf_r+0x7a>
 8009876:	ebba 0b04 	subs.w	fp, sl, r4
 800987a:	d00b      	beq.n	8009894 <_vfiprintf_r+0xa4>
 800987c:	465b      	mov	r3, fp
 800987e:	4622      	mov	r2, r4
 8009880:	4629      	mov	r1, r5
 8009882:	4630      	mov	r0, r6
 8009884:	f7ff ffa2 	bl	80097cc <__sfputs_r>
 8009888:	3001      	adds	r0, #1
 800988a:	f000 80a9 	beq.w	80099e0 <_vfiprintf_r+0x1f0>
 800988e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009890:	445a      	add	r2, fp
 8009892:	9209      	str	r2, [sp, #36]	; 0x24
 8009894:	f89a 3000 	ldrb.w	r3, [sl]
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 80a1 	beq.w	80099e0 <_vfiprintf_r+0x1f0>
 800989e:	2300      	movs	r3, #0
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098a8:	f10a 0a01 	add.w	sl, sl, #1
 80098ac:	9304      	str	r3, [sp, #16]
 80098ae:	9307      	str	r3, [sp, #28]
 80098b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098b4:	931a      	str	r3, [sp, #104]	; 0x68
 80098b6:	4654      	mov	r4, sl
 80098b8:	2205      	movs	r2, #5
 80098ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098be:	4854      	ldr	r0, [pc, #336]	; (8009a10 <_vfiprintf_r+0x220>)
 80098c0:	f000 fba2 	bl	800a008 <memchr>
 80098c4:	9a04      	ldr	r2, [sp, #16]
 80098c6:	b9d8      	cbnz	r0, 8009900 <_vfiprintf_r+0x110>
 80098c8:	06d1      	lsls	r1, r2, #27
 80098ca:	bf44      	itt	mi
 80098cc:	2320      	movmi	r3, #32
 80098ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098d2:	0713      	lsls	r3, r2, #28
 80098d4:	bf44      	itt	mi
 80098d6:	232b      	movmi	r3, #43	; 0x2b
 80098d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098dc:	f89a 3000 	ldrb.w	r3, [sl]
 80098e0:	2b2a      	cmp	r3, #42	; 0x2a
 80098e2:	d015      	beq.n	8009910 <_vfiprintf_r+0x120>
 80098e4:	4654      	mov	r4, sl
 80098e6:	2000      	movs	r0, #0
 80098e8:	f04f 0c0a 	mov.w	ip, #10
 80098ec:	9a07      	ldr	r2, [sp, #28]
 80098ee:	4621      	mov	r1, r4
 80098f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f4:	3b30      	subs	r3, #48	; 0x30
 80098f6:	2b09      	cmp	r3, #9
 80098f8:	d94d      	bls.n	8009996 <_vfiprintf_r+0x1a6>
 80098fa:	b1b0      	cbz	r0, 800992a <_vfiprintf_r+0x13a>
 80098fc:	9207      	str	r2, [sp, #28]
 80098fe:	e014      	b.n	800992a <_vfiprintf_r+0x13a>
 8009900:	eba0 0308 	sub.w	r3, r0, r8
 8009904:	fa09 f303 	lsl.w	r3, r9, r3
 8009908:	4313      	orrs	r3, r2
 800990a:	46a2      	mov	sl, r4
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	e7d2      	b.n	80098b6 <_vfiprintf_r+0xc6>
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	1d19      	adds	r1, r3, #4
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	9103      	str	r1, [sp, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	bfbb      	ittet	lt
 800991c:	425b      	neglt	r3, r3
 800991e:	f042 0202 	orrlt.w	r2, r2, #2
 8009922:	9307      	strge	r3, [sp, #28]
 8009924:	9307      	strlt	r3, [sp, #28]
 8009926:	bfb8      	it	lt
 8009928:	9204      	strlt	r2, [sp, #16]
 800992a:	7823      	ldrb	r3, [r4, #0]
 800992c:	2b2e      	cmp	r3, #46	; 0x2e
 800992e:	d10c      	bne.n	800994a <_vfiprintf_r+0x15a>
 8009930:	7863      	ldrb	r3, [r4, #1]
 8009932:	2b2a      	cmp	r3, #42	; 0x2a
 8009934:	d134      	bne.n	80099a0 <_vfiprintf_r+0x1b0>
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	3402      	adds	r4, #2
 800993a:	1d1a      	adds	r2, r3, #4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	9203      	str	r2, [sp, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	bfb8      	it	lt
 8009944:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009948:	9305      	str	r3, [sp, #20]
 800994a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a14 <_vfiprintf_r+0x224>
 800994e:	2203      	movs	r2, #3
 8009950:	4650      	mov	r0, sl
 8009952:	7821      	ldrb	r1, [r4, #0]
 8009954:	f000 fb58 	bl	800a008 <memchr>
 8009958:	b138      	cbz	r0, 800996a <_vfiprintf_r+0x17a>
 800995a:	2240      	movs	r2, #64	; 0x40
 800995c:	9b04      	ldr	r3, [sp, #16]
 800995e:	eba0 000a 	sub.w	r0, r0, sl
 8009962:	4082      	lsls	r2, r0
 8009964:	4313      	orrs	r3, r2
 8009966:	3401      	adds	r4, #1
 8009968:	9304      	str	r3, [sp, #16]
 800996a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800996e:	2206      	movs	r2, #6
 8009970:	4829      	ldr	r0, [pc, #164]	; (8009a18 <_vfiprintf_r+0x228>)
 8009972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009976:	f000 fb47 	bl	800a008 <memchr>
 800997a:	2800      	cmp	r0, #0
 800997c:	d03f      	beq.n	80099fe <_vfiprintf_r+0x20e>
 800997e:	4b27      	ldr	r3, [pc, #156]	; (8009a1c <_vfiprintf_r+0x22c>)
 8009980:	bb1b      	cbnz	r3, 80099ca <_vfiprintf_r+0x1da>
 8009982:	9b03      	ldr	r3, [sp, #12]
 8009984:	3307      	adds	r3, #7
 8009986:	f023 0307 	bic.w	r3, r3, #7
 800998a:	3308      	adds	r3, #8
 800998c:	9303      	str	r3, [sp, #12]
 800998e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009990:	443b      	add	r3, r7
 8009992:	9309      	str	r3, [sp, #36]	; 0x24
 8009994:	e768      	b.n	8009868 <_vfiprintf_r+0x78>
 8009996:	460c      	mov	r4, r1
 8009998:	2001      	movs	r0, #1
 800999a:	fb0c 3202 	mla	r2, ip, r2, r3
 800999e:	e7a6      	b.n	80098ee <_vfiprintf_r+0xfe>
 80099a0:	2300      	movs	r3, #0
 80099a2:	f04f 0c0a 	mov.w	ip, #10
 80099a6:	4619      	mov	r1, r3
 80099a8:	3401      	adds	r4, #1
 80099aa:	9305      	str	r3, [sp, #20]
 80099ac:	4620      	mov	r0, r4
 80099ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b2:	3a30      	subs	r2, #48	; 0x30
 80099b4:	2a09      	cmp	r2, #9
 80099b6:	d903      	bls.n	80099c0 <_vfiprintf_r+0x1d0>
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d0c6      	beq.n	800994a <_vfiprintf_r+0x15a>
 80099bc:	9105      	str	r1, [sp, #20]
 80099be:	e7c4      	b.n	800994a <_vfiprintf_r+0x15a>
 80099c0:	4604      	mov	r4, r0
 80099c2:	2301      	movs	r3, #1
 80099c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099c8:	e7f0      	b.n	80099ac <_vfiprintf_r+0x1bc>
 80099ca:	ab03      	add	r3, sp, #12
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	462a      	mov	r2, r5
 80099d0:	4630      	mov	r0, r6
 80099d2:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <_vfiprintf_r+0x230>)
 80099d4:	a904      	add	r1, sp, #16
 80099d6:	f3af 8000 	nop.w
 80099da:	4607      	mov	r7, r0
 80099dc:	1c78      	adds	r0, r7, #1
 80099de:	d1d6      	bne.n	800998e <_vfiprintf_r+0x19e>
 80099e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099e2:	07d9      	lsls	r1, r3, #31
 80099e4:	d405      	bmi.n	80099f2 <_vfiprintf_r+0x202>
 80099e6:	89ab      	ldrh	r3, [r5, #12]
 80099e8:	059a      	lsls	r2, r3, #22
 80099ea:	d402      	bmi.n	80099f2 <_vfiprintf_r+0x202>
 80099ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ee:	f7fe fc1f 	bl	8008230 <__retarget_lock_release_recursive>
 80099f2:	89ab      	ldrh	r3, [r5, #12]
 80099f4:	065b      	lsls	r3, r3, #25
 80099f6:	f53f af1d 	bmi.w	8009834 <_vfiprintf_r+0x44>
 80099fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099fc:	e71c      	b.n	8009838 <_vfiprintf_r+0x48>
 80099fe:	ab03      	add	r3, sp, #12
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	462a      	mov	r2, r5
 8009a04:	4630      	mov	r0, r6
 8009a06:	4b06      	ldr	r3, [pc, #24]	; (8009a20 <_vfiprintf_r+0x230>)
 8009a08:	a904      	add	r1, sp, #16
 8009a0a:	f000 f87d 	bl	8009b08 <_printf_i>
 8009a0e:	e7e4      	b.n	80099da <_vfiprintf_r+0x1ea>
 8009a10:	0800a3f0 	.word	0x0800a3f0
 8009a14:	0800a3f6 	.word	0x0800a3f6
 8009a18:	0800a3fa 	.word	0x0800a3fa
 8009a1c:	00000000 	.word	0x00000000
 8009a20:	080097cd 	.word	0x080097cd

08009a24 <_printf_common>:
 8009a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a28:	4616      	mov	r6, r2
 8009a2a:	4699      	mov	r9, r3
 8009a2c:	688a      	ldr	r2, [r1, #8]
 8009a2e:	690b      	ldr	r3, [r1, #16]
 8009a30:	4607      	mov	r7, r0
 8009a32:	4293      	cmp	r3, r2
 8009a34:	bfb8      	it	lt
 8009a36:	4613      	movlt	r3, r2
 8009a38:	6033      	str	r3, [r6, #0]
 8009a3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a3e:	460c      	mov	r4, r1
 8009a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a44:	b10a      	cbz	r2, 8009a4a <_printf_common+0x26>
 8009a46:	3301      	adds	r3, #1
 8009a48:	6033      	str	r3, [r6, #0]
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	0699      	lsls	r1, r3, #26
 8009a4e:	bf42      	ittt	mi
 8009a50:	6833      	ldrmi	r3, [r6, #0]
 8009a52:	3302      	addmi	r3, #2
 8009a54:	6033      	strmi	r3, [r6, #0]
 8009a56:	6825      	ldr	r5, [r4, #0]
 8009a58:	f015 0506 	ands.w	r5, r5, #6
 8009a5c:	d106      	bne.n	8009a6c <_printf_common+0x48>
 8009a5e:	f104 0a19 	add.w	sl, r4, #25
 8009a62:	68e3      	ldr	r3, [r4, #12]
 8009a64:	6832      	ldr	r2, [r6, #0]
 8009a66:	1a9b      	subs	r3, r3, r2
 8009a68:	42ab      	cmp	r3, r5
 8009a6a:	dc2b      	bgt.n	8009ac4 <_printf_common+0xa0>
 8009a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a70:	1e13      	subs	r3, r2, #0
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	bf18      	it	ne
 8009a76:	2301      	movne	r3, #1
 8009a78:	0692      	lsls	r2, r2, #26
 8009a7a:	d430      	bmi.n	8009ade <_printf_common+0xba>
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	4638      	mov	r0, r7
 8009a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a84:	47c0      	blx	r8
 8009a86:	3001      	adds	r0, #1
 8009a88:	d023      	beq.n	8009ad2 <_printf_common+0xae>
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	6922      	ldr	r2, [r4, #16]
 8009a8e:	f003 0306 	and.w	r3, r3, #6
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	bf14      	ite	ne
 8009a96:	2500      	movne	r5, #0
 8009a98:	6833      	ldreq	r3, [r6, #0]
 8009a9a:	f04f 0600 	mov.w	r6, #0
 8009a9e:	bf08      	it	eq
 8009aa0:	68e5      	ldreq	r5, [r4, #12]
 8009aa2:	f104 041a 	add.w	r4, r4, #26
 8009aa6:	bf08      	it	eq
 8009aa8:	1aed      	subeq	r5, r5, r3
 8009aaa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009aae:	bf08      	it	eq
 8009ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	bfc4      	itt	gt
 8009ab8:	1a9b      	subgt	r3, r3, r2
 8009aba:	18ed      	addgt	r5, r5, r3
 8009abc:	42b5      	cmp	r5, r6
 8009abe:	d11a      	bne.n	8009af6 <_printf_common+0xd2>
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	e008      	b.n	8009ad6 <_printf_common+0xb2>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	4652      	mov	r2, sl
 8009ac8:	4649      	mov	r1, r9
 8009aca:	4638      	mov	r0, r7
 8009acc:	47c0      	blx	r8
 8009ace:	3001      	adds	r0, #1
 8009ad0:	d103      	bne.n	8009ada <_printf_common+0xb6>
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ada:	3501      	adds	r5, #1
 8009adc:	e7c1      	b.n	8009a62 <_printf_common+0x3e>
 8009ade:	2030      	movs	r0, #48	; 0x30
 8009ae0:	18e1      	adds	r1, r4, r3
 8009ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009aec:	4422      	add	r2, r4
 8009aee:	3302      	adds	r3, #2
 8009af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009af4:	e7c2      	b.n	8009a7c <_printf_common+0x58>
 8009af6:	2301      	movs	r3, #1
 8009af8:	4622      	mov	r2, r4
 8009afa:	4649      	mov	r1, r9
 8009afc:	4638      	mov	r0, r7
 8009afe:	47c0      	blx	r8
 8009b00:	3001      	adds	r0, #1
 8009b02:	d0e6      	beq.n	8009ad2 <_printf_common+0xae>
 8009b04:	3601      	adds	r6, #1
 8009b06:	e7d9      	b.n	8009abc <_printf_common+0x98>

08009b08 <_printf_i>:
 8009b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b0c:	7e0f      	ldrb	r7, [r1, #24]
 8009b0e:	4691      	mov	r9, r2
 8009b10:	2f78      	cmp	r7, #120	; 0x78
 8009b12:	4680      	mov	r8, r0
 8009b14:	460c      	mov	r4, r1
 8009b16:	469a      	mov	sl, r3
 8009b18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b1e:	d807      	bhi.n	8009b30 <_printf_i+0x28>
 8009b20:	2f62      	cmp	r7, #98	; 0x62
 8009b22:	d80a      	bhi.n	8009b3a <_printf_i+0x32>
 8009b24:	2f00      	cmp	r7, #0
 8009b26:	f000 80d5 	beq.w	8009cd4 <_printf_i+0x1cc>
 8009b2a:	2f58      	cmp	r7, #88	; 0x58
 8009b2c:	f000 80c1 	beq.w	8009cb2 <_printf_i+0x1aa>
 8009b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b38:	e03a      	b.n	8009bb0 <_printf_i+0xa8>
 8009b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b3e:	2b15      	cmp	r3, #21
 8009b40:	d8f6      	bhi.n	8009b30 <_printf_i+0x28>
 8009b42:	a101      	add	r1, pc, #4	; (adr r1, 8009b48 <_printf_i+0x40>)
 8009b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b48:	08009ba1 	.word	0x08009ba1
 8009b4c:	08009bb5 	.word	0x08009bb5
 8009b50:	08009b31 	.word	0x08009b31
 8009b54:	08009b31 	.word	0x08009b31
 8009b58:	08009b31 	.word	0x08009b31
 8009b5c:	08009b31 	.word	0x08009b31
 8009b60:	08009bb5 	.word	0x08009bb5
 8009b64:	08009b31 	.word	0x08009b31
 8009b68:	08009b31 	.word	0x08009b31
 8009b6c:	08009b31 	.word	0x08009b31
 8009b70:	08009b31 	.word	0x08009b31
 8009b74:	08009cbb 	.word	0x08009cbb
 8009b78:	08009be1 	.word	0x08009be1
 8009b7c:	08009c75 	.word	0x08009c75
 8009b80:	08009b31 	.word	0x08009b31
 8009b84:	08009b31 	.word	0x08009b31
 8009b88:	08009cdd 	.word	0x08009cdd
 8009b8c:	08009b31 	.word	0x08009b31
 8009b90:	08009be1 	.word	0x08009be1
 8009b94:	08009b31 	.word	0x08009b31
 8009b98:	08009b31 	.word	0x08009b31
 8009b9c:	08009c7d 	.word	0x08009c7d
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	1d1a      	adds	r2, r3, #4
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	602a      	str	r2, [r5, #0]
 8009ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e0a0      	b.n	8009cf6 <_printf_i+0x1ee>
 8009bb4:	6820      	ldr	r0, [r4, #0]
 8009bb6:	682b      	ldr	r3, [r5, #0]
 8009bb8:	0607      	lsls	r7, r0, #24
 8009bba:	f103 0104 	add.w	r1, r3, #4
 8009bbe:	6029      	str	r1, [r5, #0]
 8009bc0:	d501      	bpl.n	8009bc6 <_printf_i+0xbe>
 8009bc2:	681e      	ldr	r6, [r3, #0]
 8009bc4:	e003      	b.n	8009bce <_printf_i+0xc6>
 8009bc6:	0646      	lsls	r6, r0, #25
 8009bc8:	d5fb      	bpl.n	8009bc2 <_printf_i+0xba>
 8009bca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009bce:	2e00      	cmp	r6, #0
 8009bd0:	da03      	bge.n	8009bda <_printf_i+0xd2>
 8009bd2:	232d      	movs	r3, #45	; 0x2d
 8009bd4:	4276      	negs	r6, r6
 8009bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bda:	230a      	movs	r3, #10
 8009bdc:	4859      	ldr	r0, [pc, #356]	; (8009d44 <_printf_i+0x23c>)
 8009bde:	e012      	b.n	8009c06 <_printf_i+0xfe>
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	6820      	ldr	r0, [r4, #0]
 8009be4:	1d19      	adds	r1, r3, #4
 8009be6:	6029      	str	r1, [r5, #0]
 8009be8:	0605      	lsls	r5, r0, #24
 8009bea:	d501      	bpl.n	8009bf0 <_printf_i+0xe8>
 8009bec:	681e      	ldr	r6, [r3, #0]
 8009bee:	e002      	b.n	8009bf6 <_printf_i+0xee>
 8009bf0:	0641      	lsls	r1, r0, #25
 8009bf2:	d5fb      	bpl.n	8009bec <_printf_i+0xe4>
 8009bf4:	881e      	ldrh	r6, [r3, #0]
 8009bf6:	2f6f      	cmp	r7, #111	; 0x6f
 8009bf8:	bf0c      	ite	eq
 8009bfa:	2308      	moveq	r3, #8
 8009bfc:	230a      	movne	r3, #10
 8009bfe:	4851      	ldr	r0, [pc, #324]	; (8009d44 <_printf_i+0x23c>)
 8009c00:	2100      	movs	r1, #0
 8009c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c06:	6865      	ldr	r5, [r4, #4]
 8009c08:	2d00      	cmp	r5, #0
 8009c0a:	bfa8      	it	ge
 8009c0c:	6821      	ldrge	r1, [r4, #0]
 8009c0e:	60a5      	str	r5, [r4, #8]
 8009c10:	bfa4      	itt	ge
 8009c12:	f021 0104 	bicge.w	r1, r1, #4
 8009c16:	6021      	strge	r1, [r4, #0]
 8009c18:	b90e      	cbnz	r6, 8009c1e <_printf_i+0x116>
 8009c1a:	2d00      	cmp	r5, #0
 8009c1c:	d04b      	beq.n	8009cb6 <_printf_i+0x1ae>
 8009c1e:	4615      	mov	r5, r2
 8009c20:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c24:	fb03 6711 	mls	r7, r3, r1, r6
 8009c28:	5dc7      	ldrb	r7, [r0, r7]
 8009c2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c2e:	4637      	mov	r7, r6
 8009c30:	42bb      	cmp	r3, r7
 8009c32:	460e      	mov	r6, r1
 8009c34:	d9f4      	bls.n	8009c20 <_printf_i+0x118>
 8009c36:	2b08      	cmp	r3, #8
 8009c38:	d10b      	bne.n	8009c52 <_printf_i+0x14a>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	07de      	lsls	r6, r3, #31
 8009c3e:	d508      	bpl.n	8009c52 <_printf_i+0x14a>
 8009c40:	6923      	ldr	r3, [r4, #16]
 8009c42:	6861      	ldr	r1, [r4, #4]
 8009c44:	4299      	cmp	r1, r3
 8009c46:	bfde      	ittt	le
 8009c48:	2330      	movle	r3, #48	; 0x30
 8009c4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c4e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009c52:	1b52      	subs	r2, r2, r5
 8009c54:	6122      	str	r2, [r4, #16]
 8009c56:	464b      	mov	r3, r9
 8009c58:	4621      	mov	r1, r4
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	f8cd a000 	str.w	sl, [sp]
 8009c60:	aa03      	add	r2, sp, #12
 8009c62:	f7ff fedf 	bl	8009a24 <_printf_common>
 8009c66:	3001      	adds	r0, #1
 8009c68:	d14a      	bne.n	8009d00 <_printf_i+0x1f8>
 8009c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c6e:	b004      	add	sp, #16
 8009c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	f043 0320 	orr.w	r3, r3, #32
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	2778      	movs	r7, #120	; 0x78
 8009c7e:	4832      	ldr	r0, [pc, #200]	; (8009d48 <_printf_i+0x240>)
 8009c80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	6829      	ldr	r1, [r5, #0]
 8009c88:	061f      	lsls	r7, r3, #24
 8009c8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c8e:	d402      	bmi.n	8009c96 <_printf_i+0x18e>
 8009c90:	065f      	lsls	r7, r3, #25
 8009c92:	bf48      	it	mi
 8009c94:	b2b6      	uxthmi	r6, r6
 8009c96:	07df      	lsls	r7, r3, #31
 8009c98:	bf48      	it	mi
 8009c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8009c9e:	6029      	str	r1, [r5, #0]
 8009ca0:	bf48      	it	mi
 8009ca2:	6023      	strmi	r3, [r4, #0]
 8009ca4:	b91e      	cbnz	r6, 8009cae <_printf_i+0x1a6>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	f023 0320 	bic.w	r3, r3, #32
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	2310      	movs	r3, #16
 8009cb0:	e7a6      	b.n	8009c00 <_printf_i+0xf8>
 8009cb2:	4824      	ldr	r0, [pc, #144]	; (8009d44 <_printf_i+0x23c>)
 8009cb4:	e7e4      	b.n	8009c80 <_printf_i+0x178>
 8009cb6:	4615      	mov	r5, r2
 8009cb8:	e7bd      	b.n	8009c36 <_printf_i+0x12e>
 8009cba:	682b      	ldr	r3, [r5, #0]
 8009cbc:	6826      	ldr	r6, [r4, #0]
 8009cbe:	1d18      	adds	r0, r3, #4
 8009cc0:	6961      	ldr	r1, [r4, #20]
 8009cc2:	6028      	str	r0, [r5, #0]
 8009cc4:	0635      	lsls	r5, r6, #24
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	d501      	bpl.n	8009cce <_printf_i+0x1c6>
 8009cca:	6019      	str	r1, [r3, #0]
 8009ccc:	e002      	b.n	8009cd4 <_printf_i+0x1cc>
 8009cce:	0670      	lsls	r0, r6, #25
 8009cd0:	d5fb      	bpl.n	8009cca <_printf_i+0x1c2>
 8009cd2:	8019      	strh	r1, [r3, #0]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4615      	mov	r5, r2
 8009cd8:	6123      	str	r3, [r4, #16]
 8009cda:	e7bc      	b.n	8009c56 <_printf_i+0x14e>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	2100      	movs	r1, #0
 8009ce0:	1d1a      	adds	r2, r3, #4
 8009ce2:	602a      	str	r2, [r5, #0]
 8009ce4:	681d      	ldr	r5, [r3, #0]
 8009ce6:	6862      	ldr	r2, [r4, #4]
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f000 f98d 	bl	800a008 <memchr>
 8009cee:	b108      	cbz	r0, 8009cf4 <_printf_i+0x1ec>
 8009cf0:	1b40      	subs	r0, r0, r5
 8009cf2:	6060      	str	r0, [r4, #4]
 8009cf4:	6863      	ldr	r3, [r4, #4]
 8009cf6:	6123      	str	r3, [r4, #16]
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cfe:	e7aa      	b.n	8009c56 <_printf_i+0x14e>
 8009d00:	462a      	mov	r2, r5
 8009d02:	4649      	mov	r1, r9
 8009d04:	4640      	mov	r0, r8
 8009d06:	6923      	ldr	r3, [r4, #16]
 8009d08:	47d0      	blx	sl
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d0ad      	beq.n	8009c6a <_printf_i+0x162>
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	079b      	lsls	r3, r3, #30
 8009d12:	d413      	bmi.n	8009d3c <_printf_i+0x234>
 8009d14:	68e0      	ldr	r0, [r4, #12]
 8009d16:	9b03      	ldr	r3, [sp, #12]
 8009d18:	4298      	cmp	r0, r3
 8009d1a:	bfb8      	it	lt
 8009d1c:	4618      	movlt	r0, r3
 8009d1e:	e7a6      	b.n	8009c6e <_printf_i+0x166>
 8009d20:	2301      	movs	r3, #1
 8009d22:	4632      	mov	r2, r6
 8009d24:	4649      	mov	r1, r9
 8009d26:	4640      	mov	r0, r8
 8009d28:	47d0      	blx	sl
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	d09d      	beq.n	8009c6a <_printf_i+0x162>
 8009d2e:	3501      	adds	r5, #1
 8009d30:	68e3      	ldr	r3, [r4, #12]
 8009d32:	9903      	ldr	r1, [sp, #12]
 8009d34:	1a5b      	subs	r3, r3, r1
 8009d36:	42ab      	cmp	r3, r5
 8009d38:	dcf2      	bgt.n	8009d20 <_printf_i+0x218>
 8009d3a:	e7eb      	b.n	8009d14 <_printf_i+0x20c>
 8009d3c:	2500      	movs	r5, #0
 8009d3e:	f104 0619 	add.w	r6, r4, #25
 8009d42:	e7f5      	b.n	8009d30 <_printf_i+0x228>
 8009d44:	0800a401 	.word	0x0800a401
 8009d48:	0800a412 	.word	0x0800a412

08009d4c <__swbuf_r>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	460e      	mov	r6, r1
 8009d50:	4614      	mov	r4, r2
 8009d52:	4605      	mov	r5, r0
 8009d54:	b118      	cbz	r0, 8009d5e <__swbuf_r+0x12>
 8009d56:	6a03      	ldr	r3, [r0, #32]
 8009d58:	b90b      	cbnz	r3, 8009d5e <__swbuf_r+0x12>
 8009d5a:	f7fd fb7f 	bl	800745c <__sinit>
 8009d5e:	69a3      	ldr	r3, [r4, #24]
 8009d60:	60a3      	str	r3, [r4, #8]
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	071a      	lsls	r2, r3, #28
 8009d66:	d525      	bpl.n	8009db4 <__swbuf_r+0x68>
 8009d68:	6923      	ldr	r3, [r4, #16]
 8009d6a:	b31b      	cbz	r3, 8009db4 <__swbuf_r+0x68>
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	6922      	ldr	r2, [r4, #16]
 8009d70:	b2f6      	uxtb	r6, r6
 8009d72:	1a98      	subs	r0, r3, r2
 8009d74:	6963      	ldr	r3, [r4, #20]
 8009d76:	4637      	mov	r7, r6
 8009d78:	4283      	cmp	r3, r0
 8009d7a:	dc04      	bgt.n	8009d86 <__swbuf_r+0x3a>
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f7fe fefe 	bl	8008b80 <_fflush_r>
 8009d84:	b9e0      	cbnz	r0, 8009dc0 <__swbuf_r+0x74>
 8009d86:	68a3      	ldr	r3, [r4, #8]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	60a3      	str	r3, [r4, #8]
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	6022      	str	r2, [r4, #0]
 8009d92:	701e      	strb	r6, [r3, #0]
 8009d94:	6962      	ldr	r2, [r4, #20]
 8009d96:	1c43      	adds	r3, r0, #1
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d004      	beq.n	8009da6 <__swbuf_r+0x5a>
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	07db      	lsls	r3, r3, #31
 8009da0:	d506      	bpl.n	8009db0 <__swbuf_r+0x64>
 8009da2:	2e0a      	cmp	r6, #10
 8009da4:	d104      	bne.n	8009db0 <__swbuf_r+0x64>
 8009da6:	4621      	mov	r1, r4
 8009da8:	4628      	mov	r0, r5
 8009daa:	f7fe fee9 	bl	8008b80 <_fflush_r>
 8009dae:	b938      	cbnz	r0, 8009dc0 <__swbuf_r+0x74>
 8009db0:	4638      	mov	r0, r7
 8009db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db4:	4621      	mov	r1, r4
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 f806 	bl	8009dc8 <__swsetup_r>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d0d5      	beq.n	8009d6c <__swbuf_r+0x20>
 8009dc0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009dc4:	e7f4      	b.n	8009db0 <__swbuf_r+0x64>
	...

08009dc8 <__swsetup_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4b2a      	ldr	r3, [pc, #168]	; (8009e74 <__swsetup_r+0xac>)
 8009dcc:	4605      	mov	r5, r0
 8009dce:	6818      	ldr	r0, [r3, #0]
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	b118      	cbz	r0, 8009ddc <__swsetup_r+0x14>
 8009dd4:	6a03      	ldr	r3, [r0, #32]
 8009dd6:	b90b      	cbnz	r3, 8009ddc <__swsetup_r+0x14>
 8009dd8:	f7fd fb40 	bl	800745c <__sinit>
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009de2:	0718      	lsls	r0, r3, #28
 8009de4:	d422      	bmi.n	8009e2c <__swsetup_r+0x64>
 8009de6:	06d9      	lsls	r1, r3, #27
 8009de8:	d407      	bmi.n	8009dfa <__swsetup_r+0x32>
 8009dea:	2309      	movs	r3, #9
 8009dec:	602b      	str	r3, [r5, #0]
 8009dee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	e034      	b.n	8009e64 <__swsetup_r+0x9c>
 8009dfa:	0758      	lsls	r0, r3, #29
 8009dfc:	d512      	bpl.n	8009e24 <__swsetup_r+0x5c>
 8009dfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e00:	b141      	cbz	r1, 8009e14 <__swsetup_r+0x4c>
 8009e02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e06:	4299      	cmp	r1, r3
 8009e08:	d002      	beq.n	8009e10 <__swsetup_r+0x48>
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f7ff fc60 	bl	80096d0 <_free_r>
 8009e10:	2300      	movs	r3, #0
 8009e12:	6363      	str	r3, [r4, #52]	; 0x34
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	6063      	str	r3, [r4, #4]
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	6023      	str	r3, [r4, #0]
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	f043 0308 	orr.w	r3, r3, #8
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	6923      	ldr	r3, [r4, #16]
 8009e2e:	b94b      	cbnz	r3, 8009e44 <__swsetup_r+0x7c>
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e3a:	d003      	beq.n	8009e44 <__swsetup_r+0x7c>
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f000 f83f 	bl	8009ec2 <__smakebuf_r>
 8009e44:	89a0      	ldrh	r0, [r4, #12]
 8009e46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e4a:	f010 0301 	ands.w	r3, r0, #1
 8009e4e:	d00a      	beq.n	8009e66 <__swsetup_r+0x9e>
 8009e50:	2300      	movs	r3, #0
 8009e52:	60a3      	str	r3, [r4, #8]
 8009e54:	6963      	ldr	r3, [r4, #20]
 8009e56:	425b      	negs	r3, r3
 8009e58:	61a3      	str	r3, [r4, #24]
 8009e5a:	6923      	ldr	r3, [r4, #16]
 8009e5c:	b943      	cbnz	r3, 8009e70 <__swsetup_r+0xa8>
 8009e5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e62:	d1c4      	bne.n	8009dee <__swsetup_r+0x26>
 8009e64:	bd38      	pop	{r3, r4, r5, pc}
 8009e66:	0781      	lsls	r1, r0, #30
 8009e68:	bf58      	it	pl
 8009e6a:	6963      	ldrpl	r3, [r4, #20]
 8009e6c:	60a3      	str	r3, [r4, #8]
 8009e6e:	e7f4      	b.n	8009e5a <__swsetup_r+0x92>
 8009e70:	2000      	movs	r0, #0
 8009e72:	e7f7      	b.n	8009e64 <__swsetup_r+0x9c>
 8009e74:	200001d8 	.word	0x200001d8

08009e78 <__swhatbuf_r>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e80:	4615      	mov	r5, r2
 8009e82:	2900      	cmp	r1, #0
 8009e84:	461e      	mov	r6, r3
 8009e86:	b096      	sub	sp, #88	; 0x58
 8009e88:	da0c      	bge.n	8009ea4 <__swhatbuf_r+0x2c>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e92:	bf0c      	ite	eq
 8009e94:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e98:	2340      	movne	r3, #64	; 0x40
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	6031      	str	r1, [r6, #0]
 8009e9e:	602b      	str	r3, [r5, #0]
 8009ea0:	b016      	add	sp, #88	; 0x58
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}
 8009ea4:	466a      	mov	r2, sp
 8009ea6:	f000 f849 	bl	8009f3c <_fstat_r>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	dbed      	blt.n	8009e8a <__swhatbuf_r+0x12>
 8009eae:	9901      	ldr	r1, [sp, #4]
 8009eb0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009eb4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009eb8:	4259      	negs	r1, r3
 8009eba:	4159      	adcs	r1, r3
 8009ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ec0:	e7eb      	b.n	8009e9a <__swhatbuf_r+0x22>

08009ec2 <__smakebuf_r>:
 8009ec2:	898b      	ldrh	r3, [r1, #12]
 8009ec4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ec6:	079d      	lsls	r5, r3, #30
 8009ec8:	4606      	mov	r6, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	d507      	bpl.n	8009ede <__smakebuf_r+0x1c>
 8009ece:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ed2:	6023      	str	r3, [r4, #0]
 8009ed4:	6123      	str	r3, [r4, #16]
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	6163      	str	r3, [r4, #20]
 8009eda:	b002      	add	sp, #8
 8009edc:	bd70      	pop	{r4, r5, r6, pc}
 8009ede:	466a      	mov	r2, sp
 8009ee0:	ab01      	add	r3, sp, #4
 8009ee2:	f7ff ffc9 	bl	8009e78 <__swhatbuf_r>
 8009ee6:	9900      	ldr	r1, [sp, #0]
 8009ee8:	4605      	mov	r5, r0
 8009eea:	4630      	mov	r0, r6
 8009eec:	f7fe fd34 	bl	8008958 <_malloc_r>
 8009ef0:	b948      	cbnz	r0, 8009f06 <__smakebuf_r+0x44>
 8009ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef6:	059a      	lsls	r2, r3, #22
 8009ef8:	d4ef      	bmi.n	8009eda <__smakebuf_r+0x18>
 8009efa:	f023 0303 	bic.w	r3, r3, #3
 8009efe:	f043 0302 	orr.w	r3, r3, #2
 8009f02:	81a3      	strh	r3, [r4, #12]
 8009f04:	e7e3      	b.n	8009ece <__smakebuf_r+0xc>
 8009f06:	89a3      	ldrh	r3, [r4, #12]
 8009f08:	6020      	str	r0, [r4, #0]
 8009f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f0e:	81a3      	strh	r3, [r4, #12]
 8009f10:	9b00      	ldr	r3, [sp, #0]
 8009f12:	6120      	str	r0, [r4, #16]
 8009f14:	6163      	str	r3, [r4, #20]
 8009f16:	9b01      	ldr	r3, [sp, #4]
 8009f18:	b15b      	cbz	r3, 8009f32 <__smakebuf_r+0x70>
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f20:	f000 f81e 	bl	8009f60 <_isatty_r>
 8009f24:	b128      	cbz	r0, 8009f32 <__smakebuf_r+0x70>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f023 0303 	bic.w	r3, r3, #3
 8009f2c:	f043 0301 	orr.w	r3, r3, #1
 8009f30:	81a3      	strh	r3, [r4, #12]
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	431d      	orrs	r5, r3
 8009f36:	81a5      	strh	r5, [r4, #12]
 8009f38:	e7cf      	b.n	8009eda <__smakebuf_r+0x18>
	...

08009f3c <_fstat_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4d06      	ldr	r5, [pc, #24]	; (8009f5c <_fstat_r+0x20>)
 8009f42:	4604      	mov	r4, r0
 8009f44:	4608      	mov	r0, r1
 8009f46:	4611      	mov	r1, r2
 8009f48:	602b      	str	r3, [r5, #0]
 8009f4a:	f7f8 f88a 	bl	8002062 <_fstat>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d102      	bne.n	8009f58 <_fstat_r+0x1c>
 8009f52:	682b      	ldr	r3, [r5, #0]
 8009f54:	b103      	cbz	r3, 8009f58 <_fstat_r+0x1c>
 8009f56:	6023      	str	r3, [r4, #0]
 8009f58:	bd38      	pop	{r3, r4, r5, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20000668 	.word	0x20000668

08009f60 <_isatty_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	2300      	movs	r3, #0
 8009f64:	4d05      	ldr	r5, [pc, #20]	; (8009f7c <_isatty_r+0x1c>)
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	f7f8 f888 	bl	8002080 <_isatty>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_isatty_r+0x1a>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_isatty_r+0x1a>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	20000668 	.word	0x20000668

08009f80 <_raise_r>:
 8009f80:	291f      	cmp	r1, #31
 8009f82:	b538      	push	{r3, r4, r5, lr}
 8009f84:	4604      	mov	r4, r0
 8009f86:	460d      	mov	r5, r1
 8009f88:	d904      	bls.n	8009f94 <_raise_r+0x14>
 8009f8a:	2316      	movs	r3, #22
 8009f8c:	6003      	str	r3, [r0, #0]
 8009f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009f96:	b112      	cbz	r2, 8009f9e <_raise_r+0x1e>
 8009f98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f9c:	b94b      	cbnz	r3, 8009fb2 <_raise_r+0x32>
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f000 f830 	bl	800a004 <_getpid_r>
 8009fa4:	462a      	mov	r2, r5
 8009fa6:	4601      	mov	r1, r0
 8009fa8:	4620      	mov	r0, r4
 8009faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fae:	f000 b817 	b.w	8009fe0 <_kill_r>
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d00a      	beq.n	8009fcc <_raise_r+0x4c>
 8009fb6:	1c59      	adds	r1, r3, #1
 8009fb8:	d103      	bne.n	8009fc2 <_raise_r+0x42>
 8009fba:	2316      	movs	r3, #22
 8009fbc:	6003      	str	r3, [r0, #0]
 8009fbe:	2001      	movs	r0, #1
 8009fc0:	e7e7      	b.n	8009f92 <_raise_r+0x12>
 8009fc2:	2400      	movs	r4, #0
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fca:	4798      	blx	r3
 8009fcc:	2000      	movs	r0, #0
 8009fce:	e7e0      	b.n	8009f92 <_raise_r+0x12>

08009fd0 <raise>:
 8009fd0:	4b02      	ldr	r3, [pc, #8]	; (8009fdc <raise+0xc>)
 8009fd2:	4601      	mov	r1, r0
 8009fd4:	6818      	ldr	r0, [r3, #0]
 8009fd6:	f7ff bfd3 	b.w	8009f80 <_raise_r>
 8009fda:	bf00      	nop
 8009fdc:	200001d8 	.word	0x200001d8

08009fe0 <_kill_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	4d06      	ldr	r5, [pc, #24]	; (800a000 <_kill_r+0x20>)
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	4608      	mov	r0, r1
 8009fea:	4611      	mov	r1, r2
 8009fec:	602b      	str	r3, [r5, #0]
 8009fee:	f7f7 ffda 	bl	8001fa6 <_kill>
 8009ff2:	1c43      	adds	r3, r0, #1
 8009ff4:	d102      	bne.n	8009ffc <_kill_r+0x1c>
 8009ff6:	682b      	ldr	r3, [r5, #0]
 8009ff8:	b103      	cbz	r3, 8009ffc <_kill_r+0x1c>
 8009ffa:	6023      	str	r3, [r4, #0]
 8009ffc:	bd38      	pop	{r3, r4, r5, pc}
 8009ffe:	bf00      	nop
 800a000:	20000668 	.word	0x20000668

0800a004 <_getpid_r>:
 800a004:	f7f7 bfc8 	b.w	8001f98 <_getpid>

0800a008 <memchr>:
 800a008:	4603      	mov	r3, r0
 800a00a:	b510      	push	{r4, lr}
 800a00c:	b2c9      	uxtb	r1, r1
 800a00e:	4402      	add	r2, r0
 800a010:	4293      	cmp	r3, r2
 800a012:	4618      	mov	r0, r3
 800a014:	d101      	bne.n	800a01a <memchr+0x12>
 800a016:	2000      	movs	r0, #0
 800a018:	e003      	b.n	800a022 <memchr+0x1a>
 800a01a:	7804      	ldrb	r4, [r0, #0]
 800a01c:	3301      	adds	r3, #1
 800a01e:	428c      	cmp	r4, r1
 800a020:	d1f6      	bne.n	800a010 <memchr+0x8>
 800a022:	bd10      	pop	{r4, pc}

0800a024 <_init>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	bf00      	nop
 800a028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02a:	bc08      	pop	{r3}
 800a02c:	469e      	mov	lr, r3
 800a02e:	4770      	bx	lr

0800a030 <_fini>:
 800a030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a032:	bf00      	nop
 800a034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a036:	bc08      	pop	{r3}
 800a038:	469e      	mov	lr, r3
 800a03a:	4770      	bx	lr
