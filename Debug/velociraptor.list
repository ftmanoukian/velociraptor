
velociraptor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa0  08005fa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005fa0  08005fa0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fa0  08005fa0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000000c  08005fb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08005fb4  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010677  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000274c  00000000  00000000  000306ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00032e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9b  00000000  00000000  00033e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f45  00000000  00000000  00034af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d15  00000000  00000000  0004ca38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d85a  00000000  00000000  0005e74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004484  00000000  00000000  000ebfa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f042c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f5c 	.word	0x08005f5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08005f5c 	.word	0x08005f5c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <ADXL345_Select>:

adxl_data_t adxl_data;
adxl_data2_t adxl_data2;
//adxl_data2_t adxl_data2;

void ADXL345_Select(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADXL345_SPI_CS_PORT, ADXL345_SPI_CS_PIN, GPIO_PIN_RESET); // CS low
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073e:	4802      	ldr	r0, [pc, #8]	; (8000748 <ADXL345_Select+0x14>)
 8000740:	f002 fcb7 	bl	80030b2 <HAL_GPIO_WritePin>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40010800 	.word	0x40010800

0800074c <ADXL345_Deselect>:

void ADXL345_Deselect(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADXL345_SPI_CS_PORT, ADXL345_SPI_CS_PIN, GPIO_PIN_SET); // CS high
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000756:	4802      	ldr	r0, [pc, #8]	; (8000760 <ADXL345_Deselect+0x14>)
 8000758:	f002 fcab 	bl	80030b2 <HAL_GPIO_WritePin>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40010800 	.word	0x40010800

08000764 <ADXL345_Init>:

void ADXL345_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	ADXL345_WriteRegister(0x2D, 0x08); // POWER_CTL register (0x2D): Set to measurement mode
 8000768:	2108      	movs	r1, #8
 800076a:	202d      	movs	r0, #45	; 0x2d
 800076c:	f000 f84e 	bl	800080c <ADXL345_WriteRegister>

	// Set the output data rate (ODR) and range
	ADXL345_WriteRegister(0x2C, 0x09); // BW_RATE register (0x2C): Set ODR to 100 Hz (0x0A)
 8000770:	2109      	movs	r1, #9
 8000772:	202c      	movs	r0, #44	; 0x2c
 8000774:	f000 f84a 	bl	800080c <ADXL345_WriteRegister>

	// Set the full-scale range
	ADXL345_WriteRegister(0x31, 0x09); // DATA_FORMAT register (0x31): Full-resolution, ±16g (0x0B)
 8000778:	2109      	movs	r1, #9
 800077a:	2031      	movs	r0, #49	; 0x31
 800077c:	f000 f846 	bl	800080c <ADXL345_WriteRegister>

	// Ensure FIFO is in bypass mode
	ADXL345_WriteRegister(0x38, 0x00); // FIFO_CTL register (0x38): FIFO in bypass mode
 8000780:	2100      	movs	r1, #0
 8000782:	2038      	movs	r0, #56	; 0x38
 8000784:	f000 f842 	bl	800080c <ADXL345_WriteRegister>

	// Enable Data Ready interrupt
	ADXL345_WriteRegister(0x2E, 0x80); // INT_ENABLE register (0x2E): Enable Data Ready interrupt
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	202e      	movs	r0, #46	; 0x2e
 800078c:	f000 f83e 	bl	800080c <ADXL345_WriteRegister>

	// Map Data Ready interrupt to INT1
	ADXL345_WriteRegister(0x2F, 0x00); // INT_MAP register (0x2F): Route Data Ready to INT1 (bit 0 = 0)
 8000790:	2100      	movs	r1, #0
 8000792:	202f      	movs	r0, #47	; 0x2f
 8000794:	f000 f83a 	bl	800080c <ADXL345_WriteRegister>

	// lectura inicial para disparar el modo continuo (si no no anda!)
	ADXL345_ReadXYZ(&(adxl_data.accel[0].x), &(adxl_data.accel[0].y), &(adxl_data.accel[0].z));
 8000798:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <ADXL345_Init+0x50>)
 800079a:	4907      	ldr	r1, [pc, #28]	; (80007b8 <ADXL345_Init+0x54>)
 800079c:	4807      	ldr	r0, [pc, #28]	; (80007bc <ADXL345_Init+0x58>)
 800079e:	f000 f853 	bl	8000848 <ADXL345_ReadXYZ>

	adxl_data2.ptr = 0;
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <ADXL345_Init+0x5c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
	adxl_data2.x_avg = 0;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <ADXL345_Init+0x5c>)
 80007aa:	f04f 0200 	mov.w	r2, #0
 80007ae:	645a      	str	r2, [r3, #68]	; 0x44
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000002e 	.word	0x2000002e
 80007b8:	2000002c 	.word	0x2000002c
 80007bc:	2000002a 	.word	0x2000002a
 80007c0:	20000038 	.word	0x20000038

080007c4 <ADXL345_ReadRegister>:

uint8_t ADXL345_ReadRegister(uint8_t reg) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
    uint8_t receivedData;
    reg |= 0x80; // Set MSB to 1 for read operation
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	71fb      	strb	r3, [r7, #7]

    ADXL345_Select();
 80007d8:	f7ff ffac 	bl	8000734 <ADXL345_Select>
    HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);   // Send register address
 80007dc:	1df9      	adds	r1, r7, #7
 80007de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007e2:	2201      	movs	r2, #1
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <ADXL345_ReadRegister+0x44>)
 80007e6:	f003 f9e9 	bl	8003bbc <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY); // Read register value
 80007ea:	f107 010f 	add.w	r1, r7, #15
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007f2:	2201      	movs	r2, #1
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <ADXL345_ReadRegister+0x44>)
 80007f6:	f003 fb25 	bl	8003e44 <HAL_SPI_Receive>
    ADXL345_Deselect();
 80007fa:	f7ff ffa7 	bl	800074c <ADXL345_Deselect>

    return receivedData;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000b0 	.word	0x200000b0

0800080c <ADXL345_WriteRegister>:

void ADXL345_WriteRegister(uint8_t reg, uint8_t value) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	4613      	mov	r3, r2
 800081a:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2];

    // Combine register address and value into a transmission array
    txData[0] = reg;       // Register address
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	733b      	strb	r3, [r7, #12]
    txData[1] = value;     // Data to write
 8000820:	79bb      	ldrb	r3, [r7, #6]
 8000822:	737b      	strb	r3, [r7, #13]

    ADXL345_Select();
 8000824:	f7ff ff86 	bl	8000734 <ADXL345_Select>
    HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY); // Transmit register address and data
 8000828:	f107 010c 	add.w	r1, r7, #12
 800082c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000830:	2202      	movs	r2, #2
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <ADXL345_WriteRegister+0x38>)
 8000834:	f003 f9c2 	bl	8003bbc <HAL_SPI_Transmit>
    ADXL345_Deselect();
 8000838:	f7ff ff88 	bl	800074c <ADXL345_Deselect>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000b0 	.word	0x200000b0

08000848 <ADXL345_ReadXYZ>:

void ADXL345_ReadXYZ(int16_t *x, int16_t *y, int16_t *z) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
    uint8_t x0, x1, y0, y1, z0, z1;

    // Read X-axis
    x0 = ADXL345_ReadRegister(0x32); // X0
 8000854:	2032      	movs	r0, #50	; 0x32
 8000856:	f7ff ffb5 	bl	80007c4 <ADXL345_ReadRegister>
 800085a:	4603      	mov	r3, r0
 800085c:	75fb      	strb	r3, [r7, #23]
    x1 = ADXL345_ReadRegister(0x33); // X1
 800085e:	2033      	movs	r0, #51	; 0x33
 8000860:	f7ff ffb0 	bl	80007c4 <ADXL345_ReadRegister>
 8000864:	4603      	mov	r3, r0
 8000866:	75bb      	strb	r3, [r7, #22]

    // Read Y-axis
    y0 = ADXL345_ReadRegister(0x34); // Y0
 8000868:	2034      	movs	r0, #52	; 0x34
 800086a:	f7ff ffab 	bl	80007c4 <ADXL345_ReadRegister>
 800086e:	4603      	mov	r3, r0
 8000870:	757b      	strb	r3, [r7, #21]
    y1 = ADXL345_ReadRegister(0x35); // Y1
 8000872:	2035      	movs	r0, #53	; 0x35
 8000874:	f7ff ffa6 	bl	80007c4 <ADXL345_ReadRegister>
 8000878:	4603      	mov	r3, r0
 800087a:	753b      	strb	r3, [r7, #20]

    // Read Z-axis
    z0 = ADXL345_ReadRegister(0x36); // Z0
 800087c:	2036      	movs	r0, #54	; 0x36
 800087e:	f7ff ffa1 	bl	80007c4 <ADXL345_ReadRegister>
 8000882:	4603      	mov	r3, r0
 8000884:	74fb      	strb	r3, [r7, #19]
    z1 = ADXL345_ReadRegister(0x37); // Z1
 8000886:	2037      	movs	r0, #55	; 0x37
 8000888:	f7ff ff9c 	bl	80007c4 <ADXL345_ReadRegister>
 800088c:	4603      	mov	r3, r0
 800088e:	74bb      	strb	r3, [r7, #18]

    // Combine high and low bytes
    *x = (int16_t)((x1 << 8) | x0);
 8000890:	7dbb      	ldrb	r3, [r7, #22]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	b21a      	sxth	r2, r3
 8000896:	7dfb      	ldrb	r3, [r7, #23]
 8000898:	b21b      	sxth	r3, r3
 800089a:	4313      	orrs	r3, r2
 800089c:	b21a      	sxth	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((y1 << 8) | y0);
 80008a2:	7d3b      	ldrb	r3, [r7, #20]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	7d7b      	ldrb	r3, [r7, #21]
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((z1 << 8) | z0);
 80008b4:	7cbb      	ldrb	r3, [r7, #18]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21a      	sxth	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	801a      	strh	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <ADXL345_ReadX>:

void ADXL345_ReadX(int16_t *x)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b084      	sub	sp, #16
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
	uint8_t x0, x1;
	x0 = ADXL345_ReadRegister(0x32); // X0
 80008d6:	2032      	movs	r0, #50	; 0x32
 80008d8:	f7ff ff74 	bl	80007c4 <ADXL345_ReadRegister>
 80008dc:	4603      	mov	r3, r0
 80008de:	73fb      	strb	r3, [r7, #15]
	x1 = ADXL345_ReadRegister(0x33); // X1
 80008e0:	2033      	movs	r0, #51	; 0x33
 80008e2:	f7ff ff6f 	bl	80007c4 <ADXL345_ReadRegister>
 80008e6:	4603      	mov	r3, r0
 80008e8:	73bb      	strb	r3, [r7, #14]
	*x = (int16_t) ((x1 << 8) | x0);
 80008ea:	7bbb      	ldrb	r3, [r7, #14]
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	801a      	strh	r2, [r3, #0]
}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <ADXL345_CheckDevice>:

uint8_t ADXL345_CheckDevice(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
    uint8_t deviceID = ADXL345_ReadRegister(0x00); // 0x00 is the DEVID register
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff ff5a 	bl	80007c4 <ADXL345_ReadRegister>
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
    if (deviceID == 0xE5) {
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2be5      	cmp	r3, #229	; 0xe5
 8000918:	d101      	bne.n	800091e <ADXL345_CheckDevice+0x1a>
        return 1; // Device is present and responding correctly
 800091a:	2301      	movs	r3, #1
 800091c:	e000      	b.n	8000920 <ADXL345_CheckDevice+0x1c>
    } else {
        return 0; // Device is not responding
 800091e:	2300      	movs	r3, #0
    }
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <ADXL345_IRQHandler>:

void ADXL345_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

	ADXL345_ReadXYZ(x, y, z);

	adxl_data.active_buffer = !adxl_data.active_buffer;*/

	ADXL345_ReadX(&(adxl_data2.x_read[adxl_data2.ptr]));
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <ADXL345_IRQHandler+0x84>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4a1d      	ldr	r2, [pc, #116]	; (80009ac <ADXL345_IRQHandler+0x84>)
 8000936:	4413      	add	r3, r2
 8000938:	3302      	adds	r3, #2
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ffc7 	bl	80008ce <ADXL345_ReadX>

	adxl_data2.ptr++;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <ADXL345_IRQHandler+0x84>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <ADXL345_IRQHandler+0x84>)
 800094a:	701a      	strb	r2, [r3, #0]
	adxl_data2.ptr %= BUF_LEN;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <ADXL345_IRQHandler+0x84>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	f003 031f 	and.w	r3, r3, #31
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <ADXL345_IRQHandler+0x84>)
 8000958:	701a      	strb	r2, [r3, #0]

	int16_t accum = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	80fb      	strh	r3, [r7, #6]
	for(uint8_t n_sample = 0; n_sample < BUF_LEN; n_sample++)
 800095e:	2300      	movs	r3, #0
 8000960:	717b      	strb	r3, [r7, #5]
 8000962:	e00d      	b.n	8000980 <ADXL345_IRQHandler+0x58>
	{
		accum += adxl_data2.x_read[n_sample];
 8000964:	797b      	ldrb	r3, [r7, #5]
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <ADXL345_IRQHandler+0x84>)
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	4413      	add	r3, r2
 800096c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000970:	b29a      	uxth	r2, r3
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	4413      	add	r3, r2
 8000976:	b29b      	uxth	r3, r3
 8000978:	80fb      	strh	r3, [r7, #6]
	for(uint8_t n_sample = 0; n_sample < BUF_LEN; n_sample++)
 800097a:	797b      	ldrb	r3, [r7, #5]
 800097c:	3301      	adds	r3, #1
 800097e:	717b      	strb	r3, [r7, #5]
 8000980:	797b      	ldrb	r3, [r7, #5]
 8000982:	2b1f      	cmp	r3, #31
 8000984:	d9ee      	bls.n	8000964 <ADXL345_IRQHandler+0x3c>
	}
	adxl_data2.x_avg = (float) accum / (float) BUF_LEN;
 8000986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fc98 	bl	80002c0 <__aeabi_i2f>
 8000990:	4603      	mov	r3, r0
 8000992:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fd9a 	bl	80004d0 <__aeabi_fdiv>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <ADXL345_IRQHandler+0x84>)
 80009a2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000038 	.word	0x20000038

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f001 fb14 	bl	8001fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f815 	bl	80009e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f000 fa64 	bl	8000e88 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c0:	f000 fa3c 	bl	8000e3c <MX_DMA_Init>
  MX_TIM4_Init();
 80009c4:	f000 f978 	bl	8000cb8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80009c8:	f000 fa0e 	bl	8000de8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80009cc:	f000 f926 	bl	8000c1c <MX_TIM3_Init>
  MX_ADC2_Init();
 80009d0:	f000 f864 	bl	8000a9c <MX_ADC2_Init>
  MX_TIM2_Init();
 80009d4:	f000 f8d6 	bl	8000b84 <MX_TIM2_Init>
  MX_SPI1_Init();
 80009d8:	f000 f89e 	bl	8000b18 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  velociraptor3_init();
 80009dc:	f000 fd5e 	bl	800149c <velociraptor3_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	velociraptor3_main_loop();
 80009e0:	f000 fe94 	bl	800170c <velociraptor3_main_loop>
 80009e4:	e7fc      	b.n	80009e0 <main+0x30>

080009e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b094      	sub	sp, #80	; 0x50
 80009ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f0:	2228      	movs	r2, #40	; 0x28
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f005 fa85 	bl	8005f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a16:	2301      	movs	r3, #1
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 fb73 	bl	8003128 <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a48:	f000 face 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2102      	movs	r1, #2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 fddf 	bl	800362c <HAL_RCC_ClockConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a74:	f000 fab8 	bl	8000fe8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a80:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 ff5f 	bl	8003948 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a90:	f000 faaa 	bl	8000fe8 <Error_Handler>
  }
}
 8000a94:	bf00      	nop
 8000a96:	3750      	adds	r7, #80	; 0x50
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_ADC2_Init+0x74>)
 8000aae:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <MX_ADC2_Init+0x78>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_ADC2_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_ADC2_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_ADC2_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_ADC2_Init+0x74>)
 8000ac6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000aca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_ADC2_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_ADC2_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_ADC2_Init+0x74>)
 8000ada:	f001 fb07 	bl	80020ec <HAL_ADC_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000ae4:	f000 fa80 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_ADC2_Init+0x74>)
 8000afa:	f001 fc89 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000b04:	f000 fa70 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000080 	.word	0x20000080
 8000b14:	40012800 	.word	0x40012800

08000b18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b1e:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <MX_SPI1_Init+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b4c:	2218      	movs	r2, #24
 8000b4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b64:	220a      	movs	r2, #10
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_SPI1_Init+0x64>)
 8000b6a:	f002 ffa3 	bl	8003ab4 <HAL_SPI_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b74:	f000 fa38 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000b0 	.word	0x200000b0
 8000b80:	40013000 	.word	0x40013000

08000b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000baa:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bb8:	2209      	movs	r2, #9
 8000bba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc8:	4813      	ldr	r0, [pc, #76]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000bca:	f003 fd08 	bl	80045de <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bd4:	f000 fa08 	bl	8000fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000be6:	f004 f847 	bl	8004c78 <HAL_TIM_ConfigClockSource>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bf0:	f000 f9fa 	bl	8000fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_TIM2_Init+0x94>)
 8000c02:	f004 fbdd 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c0c:	f000 f9ec 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000108 	.word	0x20000108

08000c1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_TIM3_Init+0x94>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <MX_TIM3_Init+0x98>)
 8000c3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <MX_TIM3_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_TIM3_Init+0x94>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1080-1;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_TIM3_Init+0x94>)
 8000c4c:	f240 4237 	movw	r2, #1079	; 0x437
 8000c50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_TIM3_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_TIM3_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c5e:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <MX_TIM3_Init+0x94>)
 8000c60:	f003 fcbd 	bl	80045de <HAL_TIM_Base_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c6a:	f000 f9bd 	bl	8000fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_TIM3_Init+0x94>)
 8000c7c:	f003 fffc 	bl	8004c78 <HAL_TIM_ConfigClockSource>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c86:	f000 f9af 	bl	8000fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c8a:	2320      	movs	r3, #32
 8000c8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c92:	463b      	mov	r3, r7
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_TIM3_Init+0x94>)
 8000c98:	f004 fb92 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000ca2:	f000 f9a1 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000150 	.word	0x20000150
 8000cb4:	40000400 	.word	0x40000400

08000cb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ce8:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000cea:	4a3e      	ldr	r2, [pc, #248]	; (8000de4 <MX_TIM4_Init+0x12c>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cee:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 720-1;
 8000cfa:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000cfc:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000d00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d0e:	4834      	ldr	r0, [pc, #208]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d10:	f003 fc65 	bl	80045de <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d1a:	f000 f965 	bl	8000fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	482d      	ldr	r0, [pc, #180]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d2c:	f003 ffa4 	bl	8004c78 <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d36:	f000 f957 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d3a:	4829      	ldr	r0, [pc, #164]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d3c:	f003 fcf0 	bl	8004720 <HAL_TIM_PWM_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d46:	f000 f94f 	bl	8000fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	4619      	mov	r1, r3
 8000d58:	4821      	ldr	r0, [pc, #132]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d5a:	f004 fb31 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d64:	f000 f940 	bl	8000fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d68:	2360      	movs	r3, #96	; 0x60
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4818      	ldr	r0, [pc, #96]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d80:	f003 feb8 	bl	8004af4 <HAL_TIM_PWM_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d8a:	f000 f92d 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2204      	movs	r2, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4812      	ldr	r0, [pc, #72]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d96:	f003 fead 	bl	8004af4 <HAL_TIM_PWM_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000da0:	f000 f922 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2208      	movs	r2, #8
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000dac:	f003 fea2 	bl	8004af4 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000db6:	f000 f917 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000dc2:	f003 fe97 	bl	8004af4 <HAL_TIM_PWM_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000dcc:	f000 f90c 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000dd2:	f000 fa23 	bl	800121c <HAL_TIM_MspPostInit>

}
 8000dd6:	bf00      	nop
 8000dd8:	3738      	adds	r7, #56	; 0x38
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000198 	.word	0x20000198
 8000de4:	40000800 	.word	0x40000800

08000de8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <MX_USART1_UART_Init+0x50>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e20:	f004 fb3e 	bl	80054a0 <HAL_UART_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e2a:	f000 f8dd 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001e0 	.word	0x200001e0
 8000e38:	40013800 	.word	0x40013800

08000e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_DMA_Init+0x48>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <MX_DMA_Init+0x48>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6153      	str	r3, [r2, #20]
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <MX_DMA_Init+0x48>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	200e      	movs	r0, #14
 8000e60:	f001 fd41 	bl	80028e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e64:	200e      	movs	r0, #14
 8000e66:	f001 fd5a 	bl	800291e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f001 fd39 	bl	80028e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e74:	200f      	movs	r0, #15
 8000e76:	f001 fd52 	bl	800291e <HAL_NVIC_EnableIRQ>

}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9c:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a4c      	ldr	r2, [pc, #304]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b4a      	ldr	r3, [pc, #296]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb4:	4b47      	ldr	r3, [pc, #284]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a46      	ldr	r2, [pc, #280]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000eba:	f043 0320 	orr.w	r3, r3, #32
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0320 	and.w	r3, r3, #32
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a40      	ldr	r2, [pc, #256]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <MX_GPIO_Init+0x14c>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f02:	4835      	ldr	r0, [pc, #212]	; (8000fd8 <MX_GPIO_Init+0x150>)
 8000f04:	f002 f8d5 	bl	80030b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f248 111e 	movw	r1, #33054	; 0x811e
 8000f0e:	4833      	ldr	r0, [pc, #204]	; (8000fdc <MX_GPIO_Init+0x154>)
 8000f10:	f002 f8cf 	bl	80030b2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	482a      	ldr	r0, [pc, #168]	; (8000fd8 <MX_GPIO_Init+0x150>)
 8000f2e:	f001 ff25 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4824      	ldr	r0, [pc, #144]	; (8000fd8 <MX_GPIO_Init+0x150>)
 8000f48:	f001 ff18 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f4c:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8000f50:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4619      	mov	r1, r3
 8000f64:	481d      	ldr	r0, [pc, #116]	; (8000fdc <MX_GPIO_Init+0x154>)
 8000f66:	f001 ff09 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <MX_GPIO_Init+0x158>)
 8000f80:	f001 fefc 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_GPIO_Init+0x15c>)
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4619      	mov	r1, r3
 8000f98:	4810      	ldr	r0, [pc, #64]	; (8000fdc <MX_GPIO_Init+0x154>)
 8000f9a:	f001 feef 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4809      	ldr	r0, [pc, #36]	; (8000fdc <MX_GPIO_Init+0x154>)
 8000fb8:	f001 fee0 	bl	8002d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2028      	movs	r0, #40	; 0x28
 8000fc2:	f001 fc90 	bl	80028e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fc6:	2028      	movs	r0, #40	; 0x28
 8000fc8:	f001 fca9 	bl	800291e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40011000 	.word	0x40011000
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	10110000 	.word	0x10110000

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_MspInit+0x5c>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_MspInit+0x5c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6193      	str	r3, [r2, #24]
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_MspInit+0x5c>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_MspInit+0x5c>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_MspInit+0x5c>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_MspInit+0x5c>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_MspInit+0x60>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_MspInit+0x60>)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000

08001058 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <HAL_ADC_MspInit+0x6c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d121      	bne.n	80010bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0-WKUP     ------> ADC2_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010a8:	2301      	movs	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ac:	2303      	movs	r3, #3
 80010ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_ADC_MspInit+0x74>)
 80010b8:	f001 fe60 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40012800 	.word	0x40012800
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010800 	.word	0x40010800

080010d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a22      	ldr	r2, [pc, #136]	; (8001174 <HAL_SPI_MspInit+0xa4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d13d      	bne.n	800116c <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <HAL_SPI_MspInit+0xa8>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a20      	ldr	r2, [pc, #128]	; (8001178 <HAL_SPI_MspInit+0xa8>)
 80010f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_SPI_MspInit+0xa8>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_SPI_MspInit+0xa8>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_SPI_MspInit+0xa8>)
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_SPI_MspInit+0xa8>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001120:	2328      	movs	r3, #40	; 0x28
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4812      	ldr	r0, [pc, #72]	; (800117c <HAL_SPI_MspInit+0xac>)
 8001134:	f001 fe22 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001138:	2310      	movs	r3, #16
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <HAL_SPI_MspInit+0xac>)
 800114c:	f001 fe16 	bl	8002d7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_SPI_MspInit+0xb0>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
 8001166:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_SPI_MspInit+0xb0>)
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40013000 	.word	0x40013000
 8001178:	40021000 	.word	0x40021000
 800117c:	40010c00 	.word	0x40010c00
 8001180:	40010000 	.word	0x40010000

08001184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001194:	d114      	bne.n	80011c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_TIM_Base_MspInit+0x8c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <HAL_TIM_Base_MspInit+0x8c>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_TIM_Base_MspInit+0x8c>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	201c      	movs	r0, #28
 80011b4:	f001 fb97 	bl	80028e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011b8:	201c      	movs	r0, #28
 80011ba:	f001 fbb0 	bl	800291e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011be:	e022      	b.n	8001206 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a13      	ldr	r2, [pc, #76]	; (8001214 <HAL_TIM_Base_MspInit+0x90>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d10c      	bne.n	80011e4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_TIM_Base_MspInit+0x8c>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_TIM_Base_MspInit+0x8c>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	61d3      	str	r3, [r2, #28]
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_TIM_Base_MspInit+0x8c>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
}
 80011e2:	e010      	b.n	8001206 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HAL_TIM_Base_MspInit+0x94>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10b      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_TIM_Base_MspInit+0x8c>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_TIM_Base_MspInit+0x8c>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_TIM_Base_MspInit+0x8c>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	40000400 	.word	0x40000400
 8001218:	40000800 	.word	0x40000800

0800121c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <HAL_TIM_MspPostInit+0x5c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d118      	bne.n	800126e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_TIM_MspPostInit+0x60>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_TIM_MspPostInit+0x60>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_TIM_MspPostInit+0x60>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001254:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2302      	movs	r3, #2
 8001260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_TIM_MspPostInit+0x64>)
 800126a:	f001 fd87 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40000800 	.word	0x40000800
 800127c:	40021000 	.word	0x40021000
 8001280:	40010c00 	.word	0x40010c00

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a47      	ldr	r2, [pc, #284]	; (80013bc <HAL_UART_MspInit+0x138>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	f040 8086 	bne.w	80013b2 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a6:	4b46      	ldr	r3, [pc, #280]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	4a45      	ldr	r2, [pc, #276]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6193      	str	r3, [r2, #24]
 80012b2:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4a3f      	ldr	r2, [pc, #252]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	6193      	str	r3, [r2, #24]
 80012ca:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <HAL_UART_MspInit+0x13c>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4836      	ldr	r0, [pc, #216]	; (80013c4 <HAL_UART_MspInit+0x140>)
 80012ec:	f001 fd46 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	482f      	ldr	r0, [pc, #188]	; (80013c4 <HAL_UART_MspInit+0x140>)
 8001306:	f001 fd39 	bl	8002d7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800130a:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <HAL_UART_MspInit+0x144>)
 800130c:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <HAL_UART_MspInit+0x148>)
 800130e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_UART_MspInit+0x144>)
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001316:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <HAL_UART_MspInit+0x144>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800131c:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_UART_MspInit+0x144>)
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001322:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_UART_MspInit+0x144>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <HAL_UART_MspInit+0x144>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <HAL_UART_MspInit+0x144>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_UART_MspInit+0x144>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800133a:	4823      	ldr	r0, [pc, #140]	; (80013c8 <HAL_UART_MspInit+0x144>)
 800133c:	f001 fb0a 	bl	8002954 <HAL_DMA_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001346:	f7ff fe4f 	bl	8000fe8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <HAL_UART_MspInit+0x144>)
 800134e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_UART_MspInit+0x144>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <HAL_UART_MspInit+0x14c>)
 8001358:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <HAL_UART_MspInit+0x150>)
 800135a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_UART_MspInit+0x14c>)
 800135e:	2210      	movs	r2, #16
 8001360:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_UART_MspInit+0x14c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_UART_MspInit+0x14c>)
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_UART_MspInit+0x14c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_UART_MspInit+0x14c>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_UART_MspInit+0x14c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_UART_MspInit+0x14c>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001386:	4812      	ldr	r0, [pc, #72]	; (80013d0 <HAL_UART_MspInit+0x14c>)
 8001388:	f001 fae4 	bl	8002954 <HAL_DMA_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001392:	f7ff fe29 	bl	8000fe8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <HAL_UART_MspInit+0x14c>)
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <HAL_UART_MspInit+0x14c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2025      	movs	r0, #37	; 0x25
 80013a8:	f001 fa9d 	bl	80028e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ac:	2025      	movs	r0, #37	; 0x25
 80013ae:	f001 fab6 	bl	800291e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	20000228 	.word	0x20000228
 80013cc:	40020058 	.word	0x40020058
 80013d0:	2000026c 	.word	0x2000026c
 80013d4:	40020044 	.word	0x40020044

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler+0x4>

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141e:	f000 fe25 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <DMA1_Channel4_IRQHandler+0x10>)
 800142e:	f001 fb9f 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000026c 	.word	0x2000026c

0800143c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <DMA1_Channel5_IRQHandler+0x10>)
 8001442:	f001 fb95 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  //rx_process_flag = 1;
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000228 	.word	0x20000228

08001450 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <TIM2_IRQHandler+0x14>)
 8001456:	f003 fa5d 	bl	8004914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  velociraptor3_timer_handler();
 800145a:	f000 f9dd 	bl	8001818 <velociraptor3_timer_handler>
  /* USER CODE END TIM2_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000108 	.word	0x20000108

08001468 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <USART1_IRQHandler+0x10>)
 800146e:	f004 f867 	bl	8005540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001e0 	.word	0x200001e0

0800147c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001480:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001484:	f001 fe2e 	bl	80030e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  ADXL345_IRQHandler();
 8001488:	f7ff fa4e 	bl	8000928 <ADXL345_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <velociraptor3_init>:
	float l_speed, r_speed;
	float brake_factor;
} speed;

void velociraptor3_init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
	ADXL345_Deselect();
 80014a2:	f7ff f953 	bl	800074c <ADXL345_Deselect>
	if (ADXL345_CheckDevice())
 80014a6:	f7ff fa2d 	bl	8000904 <ADXL345_CheckDevice>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01b      	beq.n	80014e8 <velociraptor3_init+0x4c>
	{
		for(uint8_t i = 0; i < 2; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	e014      	b.n	80014e0 <velociraptor3_init+0x44>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014bc:	481a      	ldr	r0, [pc, #104]	; (8001528 <velociraptor3_init+0x8c>)
 80014be:	f001 fdf8 	bl	80030b2 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80014c2:	2032      	movs	r0, #50	; 0x32
 80014c4:	f000 fdee 	bl	80020a4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ce:	4816      	ldr	r0, [pc, #88]	; (8001528 <velociraptor3_init+0x8c>)
 80014d0:	f001 fdef 	bl	80030b2 <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80014d4:	2032      	movs	r0, #50	; 0x32
 80014d6:	f000 fde5 	bl	80020a4 <HAL_Delay>
		for(uint8_t i = 0; i < 2; i++)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	3301      	adds	r3, #1
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d9e7      	bls.n	80014b6 <velociraptor3_init+0x1a>
 80014e6:	e00e      	b.n	8001506 <velociraptor3_init+0x6a>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <velociraptor3_init+0x8c>)
 80014f0:	f001 fddf 	bl	80030b2 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80014f4:	2032      	movs	r0, #50	; 0x32
 80014f6:	f000 fdd5 	bl	80020a4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001500:	4809      	ldr	r0, [pc, #36]	; (8001528 <velociraptor3_init+0x8c>)
 8001502:	f001 fdd6 	bl	80030b2 <HAL_GPIO_WritePin>
	}
	ADXL345_Init();
 8001506:	f7ff f92d 	bl	8000764 <ADXL345_Init>

	velociraptor3_debounce_init();
 800150a:	f000 f82b 	bl	8001564 <velociraptor3_debounce_init>
	velociraptor3_sensors_init();
 800150e:	f000 f8c1 	bl	8001694 <velociraptor3_sensors_init>
	velociraptor3_pid_init();
 8001512:	f000 f899 	bl	8001648 <velociraptor3_pid_init>
	velociraptor3_speed_init();
 8001516:	f000 f881 	bl	800161c <velociraptor3_speed_init>
	velociraptor3_timers_init();
 800151a:	f000 f807 	bl	800152c <velociraptor3_timers_init>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40010800 	.word	0x40010800

0800152c <velociraptor3_timers_init>:

void velociraptor3_timers_init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	// Timer ADC
	HAL_TIM_Base_Start_IT(&htim2);
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <velociraptor3_timers_init+0x30>)
 8001532:	f003 f8a3 	bl	800467c <HAL_TIM_Base_Start_IT>

	// Timer Motores
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001536:	2100      	movs	r1, #0
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <velociraptor3_timers_init+0x34>)
 800153a:	f003 f949 	bl	80047d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800153e:	2104      	movs	r1, #4
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <velociraptor3_timers_init+0x34>)
 8001542:	f003 f945 	bl	80047d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001546:	2108      	movs	r1, #8
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <velociraptor3_timers_init+0x34>)
 800154a:	f003 f941 	bl	80047d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800154e:	210c      	movs	r1, #12
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <velociraptor3_timers_init+0x34>)
 8001552:	f003 f93d 	bl	80047d0 <HAL_TIM_PWM_Start>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000108 	.word	0x20000108
 8001560:	20000198 	.word	0x20000198

08001564 <velociraptor3_debounce_init>:

void velociraptor3_debounce_init(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
	debounce[0].gpio = GPIOB;
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <velociraptor3_debounce_init+0xac>)
 800156c:	4a29      	ldr	r2, [pc, #164]	; (8001614 <velociraptor3_debounce_init+0xb0>)
 800156e:	601a      	str	r2, [r3, #0]
	debounce[1].gpio = GPIOB;
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <velociraptor3_debounce_init+0xac>)
 8001572:	4a28      	ldr	r2, [pc, #160]	; (8001614 <velociraptor3_debounce_init+0xb0>)
 8001574:	60da      	str	r2, [r3, #12]
	debounce[2].gpio = GPIOC;
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <velociraptor3_debounce_init+0xac>)
 8001578:	4a27      	ldr	r2, [pc, #156]	; (8001618 <velociraptor3_debounce_init+0xb4>)
 800157a:	619a      	str	r2, [r3, #24]
	debounce[3].gpio = GPIOC;
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <velociraptor3_debounce_init+0xac>)
 800157e:	4a26      	ldr	r2, [pc, #152]	; (8001618 <velociraptor3_debounce_init+0xb4>)
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
	debounce[0].pin = GPIO_PIN_11;
 8001582:	4b23      	ldr	r3, [pc, #140]	; (8001610 <velociraptor3_debounce_init+0xac>)
 8001584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001588:	809a      	strh	r2, [r3, #4]
	debounce[1].pin = GPIO_PIN_10;
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <velociraptor3_debounce_init+0xac>)
 800158c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001590:	821a      	strh	r2, [r3, #16]
	debounce[2].pin = GPIO_PIN_15;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <velociraptor3_debounce_init+0xac>)
 8001594:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001598:	839a      	strh	r2, [r3, #28]
	debounce[3].pin = GPIO_PIN_14;
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <velociraptor3_debounce_init+0xac>)
 800159c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015a0:	851a      	strh	r2, [r3, #40]	; 0x28

	for(uint8_t i = 0; i < 4; i++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	e02a      	b.n	80015fe <velociraptor3_debounce_init+0x9a>
	{
		debounce[i].state = GPIO_PIN_SET;
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	4919      	ldr	r1, [pc, #100]	; (8001610 <velociraptor3_debounce_init+0xac>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3306      	adds	r3, #6
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
		debounce[i].prev_state = GPIO_PIN_SET;
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	4914      	ldr	r1, [pc, #80]	; (8001610 <velociraptor3_debounce_init+0xac>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	3307      	adds	r3, #7
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
		debounce[i].flag = 0;
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	490f      	ldr	r1, [pc, #60]	; (8001610 <velociraptor3_debounce_init+0xac>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3308      	adds	r3, #8
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
		debounce[i].ticks = 0;
 80015e4:	79fa      	ldrb	r2, [r7, #7]
 80015e6:	490a      	ldr	r1, [pc, #40]	; (8001610 <velociraptor3_debounce_init+0xac>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3309      	adds	r3, #9
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	3301      	adds	r3, #1
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d9d1      	bls.n	80015a8 <velociraptor3_debounce_init+0x44>
	}
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	200002b4 	.word	0x200002b4
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40011000 	.word	0x40011000

0800161c <velociraptor3_speed_init>:

void velociraptor3_speed_init(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
	speed.max_speed = 1.0f;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <velociraptor3_speed_init+0x24>)
 8001622:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001626:	601a      	str	r2, [r3, #0]
	speed.brake_factor = 0.8f;
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <velociraptor3_speed_init+0x24>)
 800162a:	4a06      	ldr	r2, [pc, #24]	; (8001644 <velociraptor3_speed_init+0x28>)
 800162c:	615a      	str	r2, [r3, #20]
	speed.slope_correction = 0.0f;
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <velociraptor3_speed_init+0x24>)
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000330 	.word	0x20000330
 8001644:	3f4ccccd 	.word	0x3f4ccccd

08001648 <velociraptor3_pid_init>:

void velociraptor3_pid_init(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	pid.correction = 0.f;
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <velociraptor3_pid_init+0x40>)
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
	pid.error_dv = 0.f;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <velociraptor3_pid_init+0x40>)
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
	pid.error_int = 0.f;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <velociraptor3_pid_init+0x40>)
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	609a      	str	r2, [r3, #8]

	// TODO: cargar desde mem
	pid.kp = 1.f;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <velociraptor3_pid_init+0x40>)
 8001666:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800166a:	611a      	str	r2, [r3, #16]
	pid.ki = 0.001f;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <velociraptor3_pid_init+0x40>)
 800166e:	4a07      	ldr	r2, [pc, #28]	; (800168c <velociraptor3_pid_init+0x44>)
 8001670:	619a      	str	r2, [r3, #24]
	pid.kd = .7f;
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <velociraptor3_pid_init+0x40>)
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <velociraptor3_pid_init+0x48>)
 8001676:	615a      	str	r2, [r3, #20]

	pid.prev_error = 0.f;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <velociraptor3_pid_init+0x40>)
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	200002e4 	.word	0x200002e4
 800168c:	3a83126f 	.word	0x3a83126f
 8001690:	3f333333 	.word	0x3f333333

08001694 <velociraptor3_sensors_init>:

void velociraptor3_sensors_init(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
	sensors.active_sensor = 0;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <velociraptor3_sensors_init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2020 	strb.w	r2, [r3, #32]
	sensors.active_buffer = BUFFER_0;
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	sensors.flag_data_ready = 0;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	sensors.prev_error = 0.f;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
	sensors.track_color = B_OVER_W;		// TODO: cargar desde mem
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	
	sensors.threshold[0] = 1000;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c6:	821a      	strh	r2, [r3, #16]
	sensors.threshold[1] = 1500;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016ca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016ce:	825a      	strh	r2, [r3, #18]
	sensors.threshold[2] = 1500;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016d6:	829a      	strh	r2, [r3, #20]
	sensors.threshold[3] = 1800;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016da:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80016de:	82da      	strh	r2, [r3, #22]
	sensors.threshold[4] = 2000;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016e6:	831a      	strh	r2, [r3, #24]
	sensors.threshold[5] = 1500;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016ee:	835a      	strh	r2, [r3, #26]
	sensors.threshold[6] = 1500;
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016f2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016f6:	839a      	strh	r2, [r3, #28]
	sensors.threshold[7] = 1500;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <velociraptor3_sensors_init+0x74>)
 80016fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016fe:	83da      	strh	r2, [r3, #30]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000300 	.word	0x20000300

0800170c <velociraptor3_main_loop>:

void velociraptor3_main_loop(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	velociraptor3_debounce_loop();
 8001710:	f000 fbb8 	bl	8001e84 <velociraptor3_debounce_loop>

	switch(robot_state)
 8001714:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <velociraptor3_main_loop+0xf8>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d053      	beq.n	80017c4 <velociraptor3_main_loop+0xb8>
 800171c:	2b02      	cmp	r3, #2
 800171e:	dc6f      	bgt.n	8001800 <velociraptor3_main_loop+0xf4>
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <velociraptor3_main_loop+0x1e>
 8001724:	2b01      	cmp	r3, #1
 8001726:	d02e      	beq.n	8001786 <velociraptor3_main_loop+0x7a>
			robot_state = stopped;
		}

		break;
	}
}
 8001728:	e06a      	b.n	8001800 <velociraptor3_main_loop+0xf4>
		if(debounce[2].flag && !debounce[2].state)
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <velociraptor3_main_loop+0xfc>)
 800172c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00f      	beq.n	8001754 <velociraptor3_main_loop+0x48>
 8001734:	4b34      	ldr	r3, [pc, #208]	; (8001808 <velociraptor3_main_loop+0xfc>)
 8001736:	7f9b      	ldrb	r3, [r3, #30]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10b      	bne.n	8001754 <velociraptor3_main_loop+0x48>
			debounce[2].flag = 0;
 800173c:	4b32      	ldr	r3, [pc, #200]	; (8001808 <velociraptor3_main_loop+0xfc>)
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2020 	strb.w	r2, [r3, #32]
			pid.error_int = 0.f;
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <velociraptor3_main_loop+0x100>)
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
			robot_state = running;
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <velociraptor3_main_loop+0xf8>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
		break;
 8001752:	e050      	b.n	80017f6 <velociraptor3_main_loop+0xea>
		else if(debounce[1].flag && !debounce[1].state)
 8001754:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <velociraptor3_main_loop+0xfc>)
 8001756:	7d1b      	ldrb	r3, [r3, #20]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d04c      	beq.n	80017f6 <velociraptor3_main_loop+0xea>
 800175c:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <velociraptor3_main_loop+0xfc>)
 800175e:	7c9b      	ldrb	r3, [r3, #18]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d148      	bne.n	80017f6 <velociraptor3_main_loop+0xea>
			debounce[1].flag = 0;
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <velociraptor3_main_loop+0xfc>)
 8001766:	2200      	movs	r2, #0
 8001768:	751a      	strb	r2, [r3, #20]
			speed.l_speed = 1.0f;
 800176a:	4b29      	ldr	r3, [pc, #164]	; (8001810 <velociraptor3_main_loop+0x104>)
 800176c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001770:	60da      	str	r2, [r3, #12]
			speed.r_speed = 1.0f;
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <velociraptor3_main_loop+0x104>)
 8001774:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001778:	611a      	str	r2, [r3, #16]
			velociraptor3_setpwm();
 800177a:	f000 fa8b 	bl	8001c94 <velociraptor3_setpwm>
			robot_state = cleaning;
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <velociraptor3_main_loop+0xf8>)
 8001780:	2202      	movs	r2, #2
 8001782:	701a      	strb	r2, [r3, #0]
		break;
 8001784:	e037      	b.n	80017f6 <velociraptor3_main_loop+0xea>
		if(sensors.flag_data_ready)
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <velociraptor3_main_loop+0x108>)
 8001788:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <velociraptor3_main_loop+0x90>
			sensors.flag_data_ready = 0;
 8001790:	4b20      	ldr	r3, [pc, #128]	; (8001814 <velociraptor3_main_loop+0x108>)
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			velociraptor3_motors_pid();
 8001798:	f000 f8ba 	bl	8001910 <velociraptor3_motors_pid>
		if(debounce[3].flag && !debounce[3].state)
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <velociraptor3_main_loop+0xfc>)
 800179e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d029      	beq.n	80017fa <velociraptor3_main_loop+0xee>
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <velociraptor3_main_loop+0xfc>)
 80017a8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d124      	bne.n	80017fa <velociraptor3_main_loop+0xee>
			debounce[3].flag = 0;
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <velociraptor3_main_loop+0xfc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			velociraptor3_brake();
 80017b8:	f000 fa4e 	bl	8001c58 <velociraptor3_brake>
			robot_state = stopped;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <velociraptor3_main_loop+0xf8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
		break;
 80017c2:	e01a      	b.n	80017fa <velociraptor3_main_loop+0xee>
		if(debounce[1].flag && debounce[1].state)
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <velociraptor3_main_loop+0xfc>)
 80017c6:	7d1b      	ldrb	r3, [r3, #20]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d018      	beq.n	80017fe <velociraptor3_main_loop+0xf2>
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <velociraptor3_main_loop+0xfc>)
 80017ce:	7c9b      	ldrb	r3, [r3, #18]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d014      	beq.n	80017fe <velociraptor3_main_loop+0xf2>
			debounce[1].flag = 0;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <velociraptor3_main_loop+0xfc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	751a      	strb	r2, [r3, #20]
			speed.l_speed = 0.0f;
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <velociraptor3_main_loop+0x104>)
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
			speed.r_speed = 0.0f;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <velociraptor3_main_loop+0x104>)
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
			velociraptor3_setpwm();
 80017ea:	f000 fa53 	bl	8001c94 <velociraptor3_setpwm>
			robot_state = stopped;
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <velociraptor3_main_loop+0xf8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
		break;
 80017f4:	e003      	b.n	80017fe <velociraptor3_main_loop+0xf2>
		break;
 80017f6:	bf00      	nop
 80017f8:	e002      	b.n	8001800 <velociraptor3_main_loop+0xf4>
		break;
 80017fa:	bf00      	nop
 80017fc:	e000      	b.n	8001800 <velociraptor3_main_loop+0xf4>
		break;
 80017fe:	bf00      	nop
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200002b0 	.word	0x200002b0
 8001808:	200002b4 	.word	0x200002b4
 800180c:	200002e4 	.word	0x200002e4
 8001810:	20000330 	.word	0x20000330
 8001814:	20000300 	.word	0x20000300

08001818 <velociraptor3_timer_handler>:

void velociraptor3_timer_handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	velociraptor3_sensors_routine();
 800181c:	f000 f802 	bl	8001824 <velociraptor3_sensors_routine>
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <velociraptor3_sensors_routine>:

void velociraptor3_sensors_routine(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
	uint16_t adc_read = HAL_ADC_GetValue(&hadc2);
 800182a:	4836      	ldr	r0, [pc, #216]	; (8001904 <velociraptor3_sensors_routine+0xe0>)
 800182c:	f000 fde4 	bl	80023f8 <HAL_ADC_GetValue>
 8001830:	4603      	mov	r3, r0
 8001832:	80fb      	strh	r3, [r7, #6]
	sensors.sensor_val[sensors.active_sensor] = (uint8_t) (adc_read > sensors.threshold[sensors.active_sensor % 8]);
 8001834:	4b34      	ldr	r3, [pc, #208]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 8001836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	4a32      	ldr	r2, [pc, #200]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 8001840:	3308      	adds	r3, #8
 8001842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001846:	88fa      	ldrh	r2, [r7, #6]
 8001848:	429a      	cmp	r2, r3
 800184a:	bf8c      	ite	hi
 800184c:	2301      	movhi	r3, #1
 800184e:	2300      	movls	r3, #0
 8001850:	b2d9      	uxtb	r1, r3
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 8001854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001858:	461a      	mov	r2, r3
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 800185c:	5499      	strb	r1, [r3, r2]

	sensors.active_sensor += 1;
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 8001860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001864:	3301      	adds	r3, #1
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 800186a:	f883 2020 	strb.w	r2, [r3, #32]
	sensors.active_sensor %= 16;
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 8001870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 800187c:	f883 2020 	strb.w	r2, [r3, #32]

	if(!(sensors.active_sensor % 8))
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 8001882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d111      	bne.n	80018b4 <velociraptor3_sensors_routine+0x90>
	{
		if(!sensors.active_sensor) sensors.active_buffer = BUFFER_0;
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 8001892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d104      	bne.n	80018a4 <velociraptor3_sensors_routine+0x80>
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 800189c:	2200      	movs	r2, #0
 800189e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80018a2:	e003      	b.n	80018ac <velociraptor3_sensors_routine+0x88>
		else sensors.active_buffer = BUFFER_1;
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		sensors.flag_data_ready = 1;
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, sensors.active_sensor & 1);
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 80018b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	2102      	movs	r1, #2
 80018c4:	4811      	ldr	r0, [pc, #68]	; (800190c <velociraptor3_sensors_routine+0xe8>)
 80018c6:	f001 fbf4 	bl	80030b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, sensors.active_sensor & 2);
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	2104      	movs	r1, #4
 80018da:	480c      	ldr	r0, [pc, #48]	; (800190c <velociraptor3_sensors_routine+0xe8>)
 80018dc:	f001 fbe9 	bl	80030b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, sensors.active_sensor & 4);
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <velociraptor3_sensors_routine+0xe4>)
 80018e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	2108      	movs	r1, #8
 80018f0:	4806      	ldr	r0, [pc, #24]	; (800190c <velociraptor3_sensors_routine+0xe8>)
 80018f2:	f001 fbde 	bl	80030b2 <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc2);
 80018f6:	4803      	ldr	r0, [pc, #12]	; (8001904 <velociraptor3_sensors_routine+0xe0>)
 80018f8:	f000 fcd0 	bl	800229c <HAL_ADC_Start>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000080 	.word	0x20000080
 8001908:	20000300 	.word	0x20000300
 800190c:	40010800 	.word	0x40010800

08001910 <velociraptor3_motors_pid>:

void velociraptor3_motors_pid(void)
{
 8001910:	b598      	push	{r3, r4, r7, lr}
 8001912:	af00      	add	r7, sp, #0
	velociraptor3_calc_error();
 8001914:	f000 f8fe 	bl	8001b14 <velociraptor3_calc_error>
	velociraptor3_calc_slope();
 8001918:	f000 f8c2 	bl	8001aa0 <velociraptor3_calc_slope>

	pid.error_int += sensors.error;
 800191c:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a5d      	ldr	r2, [pc, #372]	; (8001a98 <velociraptor3_motors_pid+0x188>)
 8001922:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fc16 	bl	8000158 <__addsf3>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	4b58      	ldr	r3, [pc, #352]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 8001932:	609a      	str	r2, [r3, #8]
	pid.error_dv = sensors.error - pid.prev_error;
 8001934:	4b58      	ldr	r3, [pc, #352]	; (8001a98 <velociraptor3_motors_pid+0x188>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	4a56      	ldr	r2, [pc, #344]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 800193a:	6852      	ldr	r2, [r2, #4]
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fc08 	bl	8000154 <__aeabi_fsub>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	4b52      	ldr	r3, [pc, #328]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 800194a:	60da      	str	r2, [r3, #12]

	pid.correction = pid.kp * sensors.error;
 800194c:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	4a51      	ldr	r2, [pc, #324]	; (8001a98 <velociraptor3_motors_pid+0x188>)
 8001952:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fd06 	bl	8000368 <__aeabi_fmul>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 8001962:	601a      	str	r2, [r3, #0]
	pid.correction += pid.ki * pid.error_int;
 8001964:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 8001966:	681c      	ldr	r4, [r3, #0]
 8001968:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a49      	ldr	r2, [pc, #292]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 800196e:	6892      	ldr	r2, [r2, #8]
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fcf8 	bl	8000368 <__aeabi_fmul>
 8001978:	4603      	mov	r3, r0
 800197a:	4619      	mov	r1, r3
 800197c:	4620      	mov	r0, r4
 800197e:	f7fe fbeb 	bl	8000158 <__addsf3>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 8001988:	601a      	str	r2, [r3, #0]
	pid.correction += pid.kd * pid.error_dv;
 800198a:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 800198c:	681c      	ldr	r4, [r3, #0]
 800198e:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4a40      	ldr	r2, [pc, #256]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 8001994:	68d2      	ldr	r2, [r2, #12]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fce5 	bl	8000368 <__aeabi_fmul>
 800199e:	4603      	mov	r3, r0
 80019a0:	4619      	mov	r1, r3
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7fe fbd8 	bl	8000158 <__addsf3>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 80019ae:	601a      	str	r2, [r3, #0]

	speed.base_speed = 1.0f;
 80019b0:	4b3a      	ldr	r3, [pc, #232]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 80019b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019b6:	605a      	str	r2, [r3, #4]
	if(pid.correction > 0.0f)
 80019b8:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fe8d 	bl	80006e0 <__aeabi_fcmpgt>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d013      	beq.n	80019f4 <velociraptor3_motors_pid+0xe4>
	{
		speed.base_speed -= pid.correction * speed.brake_factor;
 80019cc:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 80019ce:	685c      	ldr	r4, [r3, #4]
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a31      	ldr	r2, [pc, #196]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 80019d6:	6952      	ldr	r2, [r2, #20]
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fcc4 	bl	8000368 <__aeabi_fmul>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7fe fbb5 	bl	8000154 <__aeabi_fsub>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	e012      	b.n	8001a1a <velociraptor3_motors_pid+0x10a>
	}
	else
	{
		speed.base_speed += pid.correction * speed.brake_factor;
 80019f4:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 80019f6:	685c      	ldr	r4, [r3, #4]
 80019f8:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 80019fe:	6952      	ldr	r2, [r2, #20]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fcb0 	bl	8000368 <__aeabi_fmul>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7fe fba3 	bl	8000158 <__addsf3>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 8001a18:	605a      	str	r2, [r3, #4]
	}
	speed.base_speed *= (1.0f - speed.slope_correction);
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 8001a1c:	685c      	ldr	r4, [r3, #4]
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a28:	f7fe fb94 	bl	8000154 <__aeabi_fsub>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7fe fc99 	bl	8000368 <__aeabi_fmul>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 8001a3c:	605a      	str	r2, [r3, #4]

	speed.l_speed = speed.max_speed * (speed.base_speed + pid.correction);
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 8001a40:	681c      	ldr	r4, [r3, #0]
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fb83 	bl	8000158 <__addsf3>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7fe fc86 	bl	8000368 <__aeabi_fmul>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 8001a62:	60da      	str	r2, [r3, #12]
	speed.r_speed = speed.max_speed * (speed.base_speed - pid.correction);
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 8001a66:	681c      	ldr	r4, [r3, #0]
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <velociraptor3_motors_pid+0x184>)
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fb6e 	bl	8000154 <__aeabi_fsub>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7fe fc73 	bl	8000368 <__aeabi_fmul>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <velociraptor3_motors_pid+0x18c>)
 8001a88:	611a      	str	r2, [r3, #16]

	velociraptor3_setpwm();
 8001a8a:	f000 f903 	bl	8001c94 <velociraptor3_setpwm>
}
 8001a8e:	bf00      	nop
 8001a90:	bd98      	pop	{r3, r4, r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200002e4 	.word	0x200002e4
 8001a98:	20000300 	.word	0x20000300
 8001a9c:	20000330 	.word	0x20000330

08001aa0 <velociraptor3_calc_slope>:

void velociraptor3_calc_slope(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	if(adxl_data2.x_avg > 80.f)
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <velociraptor3_calc_slope+0x60>)
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	4916      	ldr	r1, [pc, #88]	; (8001b04 <velociraptor3_calc_slope+0x64>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fe18 	bl	80006e0 <__aeabi_fcmpgt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <velociraptor3_calc_slope+0x20>
	{
		speed.slope_correction = 1.0f;
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <velociraptor3_calc_slope+0x68>)
 8001ab8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001abc:	609a      	str	r2, [r3, #8]
	}
	else
	{
		speed.slope_correction = 0.0f;
	}
}
 8001abe:	e01c      	b.n	8001afa <velociraptor3_calc_slope+0x5a>
	else if(adxl_data2.x_avg > 30.f)
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <velociraptor3_calc_slope+0x60>)
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	4911      	ldr	r1, [pc, #68]	; (8001b0c <velociraptor3_calc_slope+0x6c>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fe0a 	bl	80006e0 <__aeabi_fcmpgt>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00f      	beq.n	8001af2 <velociraptor3_calc_slope+0x52>
		speed.slope_correction = (adxl_data2.x_avg - 30.f) * 0.02f;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <velociraptor3_calc_slope+0x60>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	490d      	ldr	r1, [pc, #52]	; (8001b0c <velociraptor3_calc_slope+0x6c>)
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fb3b 	bl	8000154 <__aeabi_fsub>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	490b      	ldr	r1, [pc, #44]	; (8001b10 <velociraptor3_calc_slope+0x70>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fc40 	bl	8000368 <__aeabi_fmul>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <velociraptor3_calc_slope+0x68>)
 8001aee:	609a      	str	r2, [r3, #8]
}
 8001af0:	e003      	b.n	8001afa <velociraptor3_calc_slope+0x5a>
		speed.slope_correction = 0.0f;
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <velociraptor3_calc_slope+0x68>)
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000038 	.word	0x20000038
 8001b04:	42a00000 	.word	0x42a00000
 8001b08:	20000330 	.word	0x20000330
 8001b0c:	41f00000 	.word	0x41f00000
 8001b10:	3ca3d70a 	.word	0x3ca3d70a

08001b14 <velociraptor3_calc_error>:

void velociraptor3_calc_error(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
	uint8_t * buffer_ptr;
	uint8_t white_count = 0, black_count;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
	float white_sum = 0, black_sum = 0;
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]

	// buffer apuntando a la posición de lectura (buffer inact.)
	buffer_ptr = sensors.sensor_val;
 8001b2a:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001b2c:	607b      	str	r3, [r7, #4]
	buffer_ptr += 8 * (sensors.active_buffer == BUFFER_1);
 8001b2e:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001b30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <velociraptor3_calc_error+0x28>
 8001b38:	2308      	movs	r3, #8
 8001b3a:	e000      	b.n	8001b3e <velociraptor3_calc_error+0x2a>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	607b      	str	r3, [r7, #4]

	// análisis de sensores
	for(uint8_t n = 0; n < 8; n++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	72fb      	strb	r3, [r7, #11]
 8001b48:	e02e      	b.n	8001ba8 <velociraptor3_calc_error+0x94>
	{
		white_count += sensors.sensor_val[n];
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	4a40      	ldr	r2, [pc, #256]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001b4e:	5cd2      	ldrb	r2, [r2, r3]
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	4413      	add	r3, r2
 8001b54:	75fb      	strb	r3, [r7, #23]
		
		if(!sensors.sensor_val[n]) black_sum += ((float) n - 3.5f);
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	4a3d      	ldr	r2, [pc, #244]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d110      	bne.n	8001b82 <velociraptor3_calc_error+0x6e>
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fba8 	bl	80002b8 <__aeabi_ui2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	493a      	ldr	r1, [pc, #232]	; (8001c54 <velociraptor3_calc_error+0x140>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe faf1 	bl	8000154 <__aeabi_fsub>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4619      	mov	r1, r3
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7fe faee 	bl	8000158 <__addsf3>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e00f      	b.n	8001ba2 <velociraptor3_calc_error+0x8e>
		else white_sum += ((float) n - 3.5f);
 8001b82:	7afb      	ldrb	r3, [r7, #11]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fb97 	bl	80002b8 <__aeabi_ui2f>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4931      	ldr	r1, [pc, #196]	; (8001c54 <velociraptor3_calc_error+0x140>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fae0 	bl	8000154 <__aeabi_fsub>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4619      	mov	r1, r3
 8001b98:	6938      	ldr	r0, [r7, #16]
 8001b9a:	f7fe fadd 	bl	8000158 <__addsf3>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	613b      	str	r3, [r7, #16]
	for(uint8_t n = 0; n < 8; n++)
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	72fb      	strb	r3, [r7, #11]
 8001ba8:	7afb      	ldrb	r3, [r7, #11]
 8001baa:	2b07      	cmp	r3, #7
 8001bac:	d9cd      	bls.n	8001b4a <velociraptor3_calc_error+0x36>
	}

	// auxiliar nomá
	black_count = 8 - white_count;
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	f1c3 0308 	rsb	r3, r3, #8
 8001bb4:	70fb      	strb	r3, [r7, #3]

	// división sólo si hay sensores activos!!!
	if(sensors.track_color == W_OVER_B || (sensors.track_color == AUTO && white_count < 4))
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001bb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <velociraptor3_calc_error+0xbc>
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001bc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d118      	bne.n	8001bfc <velociraptor3_calc_error+0xe8>
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d815      	bhi.n	8001bfc <velociraptor3_calc_error+0xe8>
	{
		if(white_count > 0) sensors.error = (float) white_sum / ((float) white_count * 3.5f);
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d034      	beq.n	8001c40 <velociraptor3_calc_error+0x12c>
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fb6d 	bl	80002b8 <__aeabi_ui2f>
 8001bde:	4603      	mov	r3, r0
 8001be0:	491c      	ldr	r1, [pc, #112]	; (8001c54 <velociraptor3_calc_error+0x140>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fbc0 	bl	8000368 <__aeabi_fmul>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4619      	mov	r1, r3
 8001bec:	6938      	ldr	r0, [r7, #16]
 8001bee:	f7fe fc6f 	bl	80004d0 <__aeabi_fdiv>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
 8001bfa:	e021      	b.n	8001c40 <velociraptor3_calc_error+0x12c>
	}
	else if(sensors.track_color == B_OVER_W || (sensors.track_color == AUTO && black_count < 4))
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001bfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d007      	beq.n	8001c16 <velociraptor3_calc_error+0x102>
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001c08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d117      	bne.n	8001c40 <velociraptor3_calc_error+0x12c>
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d814      	bhi.n	8001c40 <velociraptor3_calc_error+0x12c>
	{
		if(black_count > 0) sensors.error = (float) black_sum / ((float) black_count * 3.5f);
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d011      	beq.n	8001c40 <velociraptor3_calc_error+0x12c>
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fb4a 	bl	80002b8 <__aeabi_ui2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	490b      	ldr	r1, [pc, #44]	; (8001c54 <velociraptor3_calc_error+0x140>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fb9d 	bl	8000368 <__aeabi_fmul>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4619      	mov	r1, r3
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7fe fc4c 	bl	80004d0 <__aeabi_fdiv>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	sensors.prev_error = sensors.error;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	4a02      	ldr	r2, [pc, #8]	; (8001c50 <velociraptor3_calc_error+0x13c>)
 8001c46:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001c48:	bf00      	nop
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000300 	.word	0x20000300
 8001c54:	40600000 	.word	0x40600000

08001c58 <velociraptor3_brake>:

void velociraptor3_brake(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
	uint32_t aux_arrel = __HAL_TIM_GET_AUTORELOAD(&htim4);
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <velociraptor3_brake+0x38>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, aux_arrel);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <velociraptor3_brake+0x38>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, aux_arrel);
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <velociraptor3_brake+0x38>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, aux_arrel);
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <velociraptor3_brake+0x38>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, aux_arrel);
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <velociraptor3_brake+0x38>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000198 	.word	0x20000198

08001c94 <velociraptor3_setpwm>:

void velociraptor3_setpwm(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
	float local_speed;
	const float lower_lim = (float) MIN_SPEED / (float) MAX_SPEED;
 8001c9a:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <velociraptor3_setpwm+0x1dc>)
 8001c9c:	607b      	str	r3, [r7, #4]

	for(uint8_t n_motor = MOTOR_L; n_motor <= MOTOR_R; n_motor++)
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	72fb      	strb	r3, [r7, #11]
 8001ca2:	e0db      	b.n	8001e5c <velociraptor3_setpwm+0x1c8>
	{
		local_speed = (n_motor == MOTOR_L) ? speed.l_speed : speed.r_speed;
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d102      	bne.n	8001cb0 <velociraptor3_setpwm+0x1c>
 8001caa:	4b72      	ldr	r3, [pc, #456]	; (8001e74 <velociraptor3_setpwm+0x1e0>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	e001      	b.n	8001cb4 <velociraptor3_setpwm+0x20>
 8001cb0:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <velociraptor3_setpwm+0x1e0>)
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	60fb      	str	r3, [r7, #12]

		if(local_speed > 1.0f) local_speed = 1.0f;
 8001cb6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f7fe fd10 	bl	80006e0 <__aeabi_fcmpgt>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <velociraptor3_setpwm+0x38>
 8001cc6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cca:	60fb      	str	r3, [r7, #12]
		if(local_speed < -1.0f) local_speed = -1.0f;
 8001ccc:	496a      	ldr	r1, [pc, #424]	; (8001e78 <velociraptor3_setpwm+0x1e4>)
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7fe fce8 	bl	80006a4 <__aeabi_fcmplt>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <velociraptor3_setpwm+0x4a>
 8001cda:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <velociraptor3_setpwm+0x1e4>)
 8001cdc:	60fb      	str	r3, [r7, #12]

		if(local_speed < 0.0f)
 8001cde:	f04f 0100 	mov.w	r1, #0
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7fe fcde 	bl	80006a4 <__aeabi_fcmplt>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d04a      	beq.n	8001d84 <velociraptor3_setpwm+0xf0>
		{
			local_speed *= -1;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cf4:	60fb      	str	r3, [r7, #12]
			local_speed *= (1.0f - lower_lim);
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001cfc:	f7fe fa2a 	bl	8000154 <__aeabi_fsub>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4619      	mov	r1, r3
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7fe fb2f 	bl	8000368 <__aeabi_fmul>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	60fb      	str	r3, [r7, #12]
			local_speed += lower_lim;
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7fe fa21 	bl	8000158 <__addsf3>
 8001d16:	4603      	mov	r3, r0
 8001d18:	60fb      	str	r3, [r7, #12]
			local_speed *= (MAX_SPEED - 1);
 8001d1a:	4958      	ldr	r1, [pc, #352]	; (8001e7c <velociraptor3_setpwm+0x1e8>)
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f7fe fb23 	bl	8000368 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	60fb      	str	r3, [r7, #12]

			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_3 : TIM_CHANNEL_2, (uint16_t) local_speed);
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d008      	beq.n	8001d3e <velociraptor3_setpwm+0xaa>
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7fe fce1 	bl	80006f4 <__aeabi_f2uiz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	4b52      	ldr	r3, [pc, #328]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	639a      	str	r2, [r3, #56]	; 0x38
 8001d3c:	e015      	b.n	8001d6a <velociraptor3_setpwm+0xd6>
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d109      	bne.n	8001d58 <velociraptor3_setpwm+0xc4>
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f7fe fcd5 	bl	80006f4 <__aeabi_f2uiz>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b299      	uxth	r1, r3
 8001d4e:	4b4c      	ldr	r3, [pc, #304]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	460b      	mov	r3, r1
 8001d54:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d56:	e008      	b.n	8001d6a <velociraptor3_setpwm+0xd6>
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f7fe fccb 	bl	80006f4 <__aeabi_f2uiz>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	b299      	uxth	r1, r3
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	460b      	mov	r3, r1
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_4 : TIM_CHANNEL_1, 0);
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d004      	beq.n	8001d7a <velociraptor3_setpwm+0xe6>
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	635a      	str	r2, [r3, #52]	; 0x34
 8001d78:	e06d      	b.n	8001e56 <velociraptor3_setpwm+0x1c2>
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
 8001d82:	e068      	b.n	8001e56 <velociraptor3_setpwm+0x1c2>
		}
		else if(local_speed > 0.0f)
 8001d84:	f04f 0100 	mov.w	r1, #0
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7fe fca9 	bl	80006e0 <__aeabi_fcmpgt>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d040      	beq.n	8001e16 <velociraptor3_setpwm+0x182>
		{
			local_speed *= (1.0f - lower_lim);
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001d9a:	f7fe f9db 	bl	8000154 <__aeabi_fsub>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7fe fae0 	bl	8000368 <__aeabi_fmul>
 8001da8:	4603      	mov	r3, r0
 8001daa:	60fb      	str	r3, [r7, #12]
			local_speed += lower_lim;
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7fe f9d2 	bl	8000158 <__addsf3>
 8001db4:	4603      	mov	r3, r0
 8001db6:	60fb      	str	r3, [r7, #12]
			local_speed *= (MAX_SPEED - 1);
 8001db8:	4930      	ldr	r1, [pc, #192]	; (8001e7c <velociraptor3_setpwm+0x1e8>)
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7fe fad4 	bl	8000368 <__aeabi_fmul>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]

			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_4 : TIM_CHANNEL_1, (uint16_t) local_speed);
 8001dc4:	7afb      	ldrb	r3, [r7, #11]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d008      	beq.n	8001ddc <velociraptor3_setpwm+0x148>
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7fe fc92 	bl	80006f4 <__aeabi_f2uiz>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dda:	e007      	b.n	8001dec <velociraptor3_setpwm+0x158>
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7fe fc89 	bl	80006f4 <__aeabi_f2uiz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_3 : TIM_CHANNEL_2, 0);
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d004      	beq.n	8001dfc <velociraptor3_setpwm+0x168>
 8001df2:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dfa:	e02c      	b.n	8001e56 <velociraptor3_setpwm+0x1c2>
 8001dfc:	7afb      	ldrb	r3, [r7, #11]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d104      	bne.n	8001e0c <velociraptor3_setpwm+0x178>
 8001e02:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	2300      	movs	r3, #0
 8001e08:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001e0a:	e024      	b.n	8001e56 <velociraptor3_setpwm+0x1c2>
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2300      	movs	r3, #0
 8001e12:	6413      	str	r3, [r2, #64]	; 0x40
 8001e14:	e01f      	b.n	8001e56 <velociraptor3_setpwm+0x1c2>
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_1 : TIM_CHANNEL_3, 0);
 8001e16:	7afb      	ldrb	r3, [r7, #11]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d104      	bne.n	8001e26 <velociraptor3_setpwm+0x192>
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2200      	movs	r2, #0
 8001e22:	635a      	str	r2, [r3, #52]	; 0x34
 8001e24:	e00b      	b.n	8001e3e <velociraptor3_setpwm+0x1aa>
 8001e26:	7afb      	ldrb	r3, [r7, #11]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d004      	beq.n	8001e36 <velociraptor3_setpwm+0x1a2>
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2300      	movs	r3, #0
 8001e32:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001e34:	e003      	b.n	8001e3e <velociraptor3_setpwm+0x1aa>
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_2 : TIM_CHANNEL_4, 0);
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d104      	bne.n	8001e4e <velociraptor3_setpwm+0x1ba>
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e4c:	e003      	b.n	8001e56 <velociraptor3_setpwm+0x1c2>
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <velociraptor3_setpwm+0x1ec>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2200      	movs	r2, #0
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
	for(uint8_t n_motor = MOTOR_L; n_motor <= MOTOR_R; n_motor++)
 8001e56:	7afb      	ldrb	r3, [r7, #11]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	72fb      	strb	r3, [r7, #11]
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	f67f af20 	bls.w	8001ca4 <velociraptor3_setpwm+0x10>
		}
	}
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	3ef8e38e 	.word	0x3ef8e38e
 8001e74:	20000330 	.word	0x20000330
 8001e78:	bf800000 	.word	0xbf800000
 8001e7c:	4433c000 	.word	0x4433c000
 8001e80:	20000198 	.word	0x20000198

08001e84 <velociraptor3_debounce_loop>:

void velociraptor3_debounce_loop(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	e076      	b.n	8001f7e <velociraptor3_debounce_loop+0xfa>
	{
		GPIO_PinState current_state = HAL_GPIO_ReadPin(debounce[i].gpio, debounce[i].pin);
 8001e90:	79fa      	ldrb	r2, [r7, #7]
 8001e92:	493f      	ldr	r1, [pc, #252]	; (8001f90 <velociraptor3_debounce_loop+0x10c>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	79fa      	ldrb	r2, [r7, #7]
 8001ea2:	493b      	ldr	r1, [pc, #236]	; (8001f90 <velociraptor3_debounce_loop+0x10c>)
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	3304      	adds	r3, #4
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f001 f8e6 	bl	8003084 <HAL_GPIO_ReadPin>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71bb      	strb	r3, [r7, #6]
		if(current_state != debounce[i].prev_state)
 8001ebc:	79fa      	ldrb	r2, [r7, #7]
 8001ebe:	4934      	ldr	r1, [pc, #208]	; (8001f90 <velociraptor3_debounce_loop+0x10c>)
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3307      	adds	r3, #7
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	79ba      	ldrb	r2, [r7, #6]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d013      	beq.n	8001efc <velociraptor3_debounce_loop+0x78>
		{
			debounce[i].prev_state = current_state;
 8001ed4:	79fa      	ldrb	r2, [r7, #7]
 8001ed6:	492e      	ldr	r1, [pc, #184]	; (8001f90 <velociraptor3_debounce_loop+0x10c>)
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3307      	adds	r3, #7
 8001ee4:	79ba      	ldrb	r2, [r7, #6]
 8001ee6:	701a      	strb	r2, [r3, #0]
			debounce[i].ticks = DEBOUNCE_TICKS;
 8001ee8:	79fa      	ldrb	r2, [r7, #7]
 8001eea:	4929      	ldr	r1, [pc, #164]	; (8001f90 <velociraptor3_debounce_loop+0x10c>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3309      	adds	r3, #9
 8001ef8:	2214      	movs	r2, #20
 8001efa:	701a      	strb	r2, [r3, #0]
		}
		if(debounce[i].ticks)
 8001efc:	79fa      	ldrb	r2, [r7, #7]
 8001efe:	4924      	ldr	r1, [pc, #144]	; (8001f90 <velociraptor3_debounce_loop+0x10c>)
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	3309      	adds	r3, #9
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d032      	beq.n	8001f78 <velociraptor3_debounce_loop+0xf4>
		{
			debounce[i].ticks--;
 8001f12:	79fa      	ldrb	r2, [r7, #7]
 8001f14:	491e      	ldr	r1, [pc, #120]	; (8001f90 <velociraptor3_debounce_loop+0x10c>)
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	3309      	adds	r3, #9
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b2d8      	uxtb	r0, r3
 8001f28:	4919      	ldr	r1, [pc, #100]	; (8001f90 <velociraptor3_debounce_loop+0x10c>)
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	3309      	adds	r3, #9
 8001f36:	4602      	mov	r2, r0
 8001f38:	701a      	strb	r2, [r3, #0]
			if(!debounce[i].ticks)
 8001f3a:	79fa      	ldrb	r2, [r7, #7]
 8001f3c:	4914      	ldr	r1, [pc, #80]	; (8001f90 <velociraptor3_debounce_loop+0x10c>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	3309      	adds	r3, #9
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d113      	bne.n	8001f78 <velociraptor3_debounce_loop+0xf4>
			{
				debounce[i].state = current_state;
 8001f50:	79fa      	ldrb	r2, [r7, #7]
 8001f52:	490f      	ldr	r1, [pc, #60]	; (8001f90 <velociraptor3_debounce_loop+0x10c>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3306      	adds	r3, #6
 8001f60:	79ba      	ldrb	r2, [r7, #6]
 8001f62:	701a      	strb	r2, [r3, #0]
				debounce[i].flag = 1;
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	490a      	ldr	r1, [pc, #40]	; (8001f90 <velociraptor3_debounce_loop+0x10c>)
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	3308      	adds	r3, #8
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d985      	bls.n	8001e90 <velociraptor3_debounce_loop+0xc>
			}
		}
	}
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200002b4 	.word	0x200002b4

08001f94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f94:	f7ff fa7c 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f98:	480b      	ldr	r0, [pc, #44]	; (8001fc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f9a:	490c      	ldr	r1, [pc, #48]	; (8001fcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f9c:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fb0:	4c09      	ldr	r4, [pc, #36]	; (8001fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f003 ffa9 	bl	8005f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fc2:	f7fe fcf5 	bl	80009b0 <main>
  bx lr
 8001fc6:	4770      	bx	lr
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fd0:	08005fa8 	.word	0x08005fa8
  ldr r2, =_sbss
 8001fd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fd8:	2000034c 	.word	0x2000034c

08001fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC1_2_IRQHandler>
	...

08001fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_Init+0x28>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_Init+0x28>)
 8001fea:	f043 0310 	orr.w	r3, r3, #16
 8001fee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 fc6d 	bl	80028d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff6:	200f      	movs	r0, #15
 8001ff8:	f000 f808 	bl	800200c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffc:	f7fe fffa 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40022000 	.word	0x40022000

0800200c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_InitTick+0x54>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x58>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002022:	fbb3 f3f1 	udiv	r3, r3, r1
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fc85 	bl	800293a <HAL_SYSTICK_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00e      	b.n	8002058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d80a      	bhi.n	8002056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002048:	f000 fc4d 	bl	80028e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800204c:	4a06      	ldr	r2, [pc, #24]	; (8002068 <HAL_InitTick+0x5c>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000000 	.word	0x20000000
 8002064:	20000008 	.word	0x20000008
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_IncTick+0x1c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_IncTick+0x20>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a03      	ldr	r2, [pc, #12]	; (800208c <HAL_IncTick+0x20>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	20000008 	.word	0x20000008
 800208c:	20000348 	.word	0x20000348

08002090 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return uwTick;
 8002094:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <HAL_GetTick+0x10>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	20000348 	.word	0x20000348

080020a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff fff0 	bl	8002090 <HAL_GetTick>
 80020b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020bc:	d005      	beq.n	80020ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_Delay+0x44>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ca:	bf00      	nop
 80020cc:	f7ff ffe0 	bl	8002090 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d8f7      	bhi.n	80020cc <HAL_Delay+0x28>
  {
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000008 	.word	0x20000008

080020ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0be      	b.n	800228c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe ff94 	bl	8001058 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fabf 	bl	80026b4 <ADC_ConversionStop_Disable>
 8002136:	4603      	mov	r3, r0
 8002138:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 8099 	bne.w	800227a <HAL_ADC_Init+0x18e>
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 8095 	bne.w	800227a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002158:	f023 0302 	bic.w	r3, r3, #2
 800215c:	f043 0202 	orr.w	r2, r3, #2
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800216c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7b1b      	ldrb	r3, [r3, #12]
 8002172:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002174:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	4313      	orrs	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002184:	d003      	beq.n	800218e <HAL_ADC_Init+0xa2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d102      	bne.n	8002194 <HAL_ADC_Init+0xa8>
 800218e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002192:	e000      	b.n	8002196 <HAL_ADC_Init+0xaa>
 8002194:	2300      	movs	r3, #0
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7d1b      	ldrb	r3, [r3, #20]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d119      	bne.n	80021d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7b1b      	ldrb	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	035a      	lsls	r2, r3, #13
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	e00b      	b.n	80021d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	4b28      	ldr	r3, [pc, #160]	; (8002294 <HAL_ADC_Init+0x1a8>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002208:	d003      	beq.n	8002212 <HAL_ADC_Init+0x126>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d104      	bne.n	800221c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	3b01      	subs	r3, #1
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	430a      	orrs	r2, r1
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_ADC_Init+0x1ac>)
 8002238:	4013      	ands	r3, r2
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	d10b      	bne.n	8002258 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002256:	e018      	b.n	800228a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	f023 0312 	bic.w	r3, r3, #18
 8002260:	f043 0210 	orr.w	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002278:	e007      	b.n	800228a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800228a:	7dfb      	ldrb	r3, [r7, #23]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	ffe1f7fd 	.word	0xffe1f7fd
 8002298:	ff1f0efe 	.word	0xff1f0efe

0800229c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_Start+0x1a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e098      	b.n	80023e8 <HAL_ADC_Start+0x14c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f99e 	bl	8002600 <ADC_Enable>
 80022c4:	4603      	mov	r3, r0
 80022c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 8087 	bne.w	80023de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a41      	ldr	r2, [pc, #260]	; (80023f0 <HAL_ADC_Start+0x154>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d105      	bne.n	80022fa <HAL_ADC_Start+0x5e>
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_ADC_Start+0x158>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d115      	bne.n	8002326 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	2b00      	cmp	r3, #0
 8002312:	d026      	beq.n	8002362 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800231c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002324:	e01d      	b.n	8002362 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a2f      	ldr	r2, [pc, #188]	; (80023f4 <HAL_ADC_Start+0x158>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_ADC_Start+0xaa>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2b      	ldr	r2, [pc, #172]	; (80023f0 <HAL_ADC_Start+0x154>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10d      	bne.n	8002362 <HAL_ADC_Start+0xc6>
 8002346:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_ADC_Start+0x158>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800235a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	f023 0206 	bic.w	r2, r3, #6
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
 800237a:	e002      	b.n	8002382 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f06f 0202 	mvn.w	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800239e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023a2:	d113      	bne.n	80023cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023a8:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <HAL_ADC_Start+0x154>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d105      	bne.n	80023ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_ADC_Start+0x158>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	e00c      	b.n	80023e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e003      	b.n	80023e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40012800 	.word	0x40012800
 80023f4:	40012400 	.word	0x40012400

080023f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x20>
 800242c:	2302      	movs	r3, #2
 800242e:	e0dc      	b.n	80025ea <HAL_ADC_ConfigChannel+0x1da>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b06      	cmp	r3, #6
 800243e:	d81c      	bhi.n	800247a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	3b05      	subs	r3, #5
 8002452:	221f      	movs	r2, #31
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	4019      	ands	r1, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	3b05      	subs	r3, #5
 800246c:	fa00 f203 	lsl.w	r2, r0, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	635a      	str	r2, [r3, #52]	; 0x34
 8002478:	e03c      	b.n	80024f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d81c      	bhi.n	80024bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	3b23      	subs	r3, #35	; 0x23
 8002494:	221f      	movs	r2, #31
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	4019      	ands	r1, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b23      	subs	r3, #35	; 0x23
 80024ae:	fa00 f203 	lsl.w	r2, r0, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
 80024ba:	e01b      	b.n	80024f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	3b41      	subs	r3, #65	; 0x41
 80024ce:	221f      	movs	r2, #31
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	4019      	ands	r1, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b41      	subs	r3, #65	; 0x41
 80024e8:	fa00 f203 	lsl.w	r2, r0, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b09      	cmp	r3, #9
 80024fa:	d91c      	bls.n	8002536 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68d9      	ldr	r1, [r3, #12]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	3b1e      	subs	r3, #30
 800250e:	2207      	movs	r2, #7
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	4019      	ands	r1, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6898      	ldr	r0, [r3, #8]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	3b1e      	subs	r3, #30
 8002528:	fa00 f203 	lsl.w	r2, r0, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	e019      	b.n	800256a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6919      	ldr	r1, [r3, #16]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	2207      	movs	r2, #7
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	4019      	ands	r1, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6898      	ldr	r0, [r3, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	fa00 f203 	lsl.w	r2, r0, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b10      	cmp	r3, #16
 8002570:	d003      	beq.n	800257a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002576:	2b11      	cmp	r3, #17
 8002578:	d132      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d125      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d126      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d11a      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a13      	ldr	r2, [pc, #76]	; (80025fc <HAL_ADC_ConfigChannel+0x1ec>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	0c9a      	lsrs	r2, r3, #18
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025c0:	e002      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f9      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x1b2>
 80025ce:	e007      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	f043 0220 	orr.w	r2, r3, #32
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40012400 	.word	0x40012400
 80025f8:	20000000 	.word	0x20000000
 80025fc:	431bde83 	.word	0x431bde83

08002600 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d040      	beq.n	80026a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0201 	orr.w	r2, r2, #1
 800262c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <ADC_Enable+0xac>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <ADC_Enable+0xb0>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	0c9b      	lsrs	r3, r3, #18
 800263a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800263c:	e002      	b.n	8002644 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3b01      	subs	r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f9      	bne.n	800263e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800264a:	f7ff fd21 	bl	8002090 <HAL_GetTick>
 800264e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002650:	e01f      	b.n	8002692 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002652:	f7ff fd1d 	bl	8002090 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d918      	bls.n	8002692 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d011      	beq.n	8002692 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	f043 0210 	orr.w	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e007      	b.n	80026a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d1d8      	bne.n	8002652 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000000 	.word	0x20000000
 80026b0:	431bde83 	.word	0x431bde83

080026b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d12e      	bne.n	800272c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026de:	f7ff fcd7 	bl	8002090 <HAL_GetTick>
 80026e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026e4:	e01b      	b.n	800271e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026e6:	f7ff fcd3 	bl	8002090 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d914      	bls.n	800271e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10d      	bne.n	800271e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	f043 0210 	orr.w	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	f043 0201 	orr.w	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e007      	b.n	800272e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d0dc      	beq.n	80026e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4906      	ldr	r1, [pc, #24]	; (80027d0 <__NVIC_EnableIRQ+0x34>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	; (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800289c:	d301      	bcc.n	80028a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289e:	2301      	movs	r3, #1
 80028a0:	e00f      	b.n	80028c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <SysTick_Config+0x40>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028aa:	210f      	movs	r1, #15
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b0:	f7ff ff90 	bl	80027d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <SysTick_Config+0x40>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <SysTick_Config+0x40>)
 80028bc:	2207      	movs	r2, #7
 80028be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	e000e010 	.word	0xe000e010

080028d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff2d 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f8:	f7ff ff42 	bl	8002780 <__NVIC_GetPriorityGrouping>
 80028fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	6978      	ldr	r0, [r7, #20]
 8002904:	f7ff ff90 	bl	8002828 <NVIC_EncodePriority>
 8002908:	4602      	mov	r2, r0
 800290a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff5f 	bl	80027d4 <__NVIC_SetPriority>
}
 8002916:	bf00      	nop
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff35 	bl	800279c <__NVIC_EnableIRQ>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ffa2 	bl	800288c <SysTick_Config>
 8002948:	4603      	mov	r3, r0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e043      	b.n	80029f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_DMA_Init+0xa8>)
 8002972:	4413      	add	r3, r2
 8002974:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <HAL_DMA_Init+0xac>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	009a      	lsls	r2, r3, #2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <HAL_DMA_Init+0xb0>)
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800299e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	bffdfff8 	.word	0xbffdfff8
 8002a00:	cccccccd 	.word	0xcccccccd
 8002a04:	40020000 	.word	0x40020000

08002a08 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d008      	beq.n	8002a32 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2204      	movs	r2, #4
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e020      	b.n	8002a74 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 020e 	bic.w	r2, r2, #14
 8002a40:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d005      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	e051      	b.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 020e 	bic.w	r2, r2, #14
 8002ab2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_DMA_Abort_IT+0xd4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d029      	beq.n	8002b22 <HAL_DMA_Abort_IT+0xa2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a21      	ldr	r2, [pc, #132]	; (8002b58 <HAL_DMA_Abort_IT+0xd8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d022      	beq.n	8002b1e <HAL_DMA_Abort_IT+0x9e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_DMA_Abort_IT+0xdc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01a      	beq.n	8002b18 <HAL_DMA_Abort_IT+0x98>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <HAL_DMA_Abort_IT+0xe0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d012      	beq.n	8002b12 <HAL_DMA_Abort_IT+0x92>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <HAL_DMA_Abort_IT+0xe4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00a      	beq.n	8002b0c <HAL_DMA_Abort_IT+0x8c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <HAL_DMA_Abort_IT+0xe8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d102      	bne.n	8002b06 <HAL_DMA_Abort_IT+0x86>
 8002b00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b04:	e00e      	b.n	8002b24 <HAL_DMA_Abort_IT+0xa4>
 8002b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b0a:	e00b      	b.n	8002b24 <HAL_DMA_Abort_IT+0xa4>
 8002b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b10:	e008      	b.n	8002b24 <HAL_DMA_Abort_IT+0xa4>
 8002b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b16:	e005      	b.n	8002b24 <HAL_DMA_Abort_IT+0xa4>
 8002b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b1c:	e002      	b.n	8002b24 <HAL_DMA_Abort_IT+0xa4>
 8002b1e:	2310      	movs	r3, #16
 8002b20:	e000      	b.n	8002b24 <HAL_DMA_Abort_IT+0xa4>
 8002b22:	2301      	movs	r3, #1
 8002b24:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <HAL_DMA_Abort_IT+0xec>)
 8002b26:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
    } 
  }
  return status;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40020008 	.word	0x40020008
 8002b58:	4002001c 	.word	0x4002001c
 8002b5c:	40020030 	.word	0x40020030
 8002b60:	40020044 	.word	0x40020044
 8002b64:	40020058 	.word	0x40020058
 8002b68:	4002006c 	.word	0x4002006c
 8002b6c:	40020000 	.word	0x40020000

08002b70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d04f      	beq.n	8002c38 <HAL_DMA_IRQHandler+0xc8>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d04a      	beq.n	8002c38 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0204 	bic.w	r2, r2, #4
 8002bbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a66      	ldr	r2, [pc, #408]	; (8002d60 <HAL_DMA_IRQHandler+0x1f0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d029      	beq.n	8002c1e <HAL_DMA_IRQHandler+0xae>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a65      	ldr	r2, [pc, #404]	; (8002d64 <HAL_DMA_IRQHandler+0x1f4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d022      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xaa>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a63      	ldr	r2, [pc, #396]	; (8002d68 <HAL_DMA_IRQHandler+0x1f8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01a      	beq.n	8002c14 <HAL_DMA_IRQHandler+0xa4>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a62      	ldr	r2, [pc, #392]	; (8002d6c <HAL_DMA_IRQHandler+0x1fc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d012      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x9e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a60      	ldr	r2, [pc, #384]	; (8002d70 <HAL_DMA_IRQHandler+0x200>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00a      	beq.n	8002c08 <HAL_DMA_IRQHandler+0x98>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a5f      	ldr	r2, [pc, #380]	; (8002d74 <HAL_DMA_IRQHandler+0x204>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d102      	bne.n	8002c02 <HAL_DMA_IRQHandler+0x92>
 8002bfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c00:	e00e      	b.n	8002c20 <HAL_DMA_IRQHandler+0xb0>
 8002c02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c06:	e00b      	b.n	8002c20 <HAL_DMA_IRQHandler+0xb0>
 8002c08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c0c:	e008      	b.n	8002c20 <HAL_DMA_IRQHandler+0xb0>
 8002c0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c12:	e005      	b.n	8002c20 <HAL_DMA_IRQHandler+0xb0>
 8002c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c18:	e002      	b.n	8002c20 <HAL_DMA_IRQHandler+0xb0>
 8002c1a:	2340      	movs	r3, #64	; 0x40
 8002c1c:	e000      	b.n	8002c20 <HAL_DMA_IRQHandler+0xb0>
 8002c1e:	2304      	movs	r3, #4
 8002c20:	4a55      	ldr	r2, [pc, #340]	; (8002d78 <HAL_DMA_IRQHandler+0x208>)
 8002c22:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8094 	beq.w	8002d56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c36:	e08e      	b.n	8002d56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d056      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x186>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d051      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 020a 	bic.w	r2, r2, #10
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a38      	ldr	r2, [pc, #224]	; (8002d60 <HAL_DMA_IRQHandler+0x1f0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d029      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x166>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a37      	ldr	r2, [pc, #220]	; (8002d64 <HAL_DMA_IRQHandler+0x1f4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d022      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x162>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a35      	ldr	r2, [pc, #212]	; (8002d68 <HAL_DMA_IRQHandler+0x1f8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01a      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x15c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a34      	ldr	r2, [pc, #208]	; (8002d6c <HAL_DMA_IRQHandler+0x1fc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d012      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x156>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a32      	ldr	r2, [pc, #200]	; (8002d70 <HAL_DMA_IRQHandler+0x200>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x150>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a31      	ldr	r2, [pc, #196]	; (8002d74 <HAL_DMA_IRQHandler+0x204>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d102      	bne.n	8002cba <HAL_DMA_IRQHandler+0x14a>
 8002cb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cb8:	e00e      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x168>
 8002cba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cbe:	e00b      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x168>
 8002cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc4:	e008      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x168>
 8002cc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cca:	e005      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x168>
 8002ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd0:	e002      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x168>
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	e000      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x168>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <HAL_DMA_IRQHandler+0x208>)
 8002cda:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d034      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cf4:	e02f      	b.n	8002d56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d028      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x1e8>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d023      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 020e 	bic.w	r2, r2, #14
 8002d1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	2101      	movs	r1, #1
 8002d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
    }
  }
  return;
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
}
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40020008 	.word	0x40020008
 8002d64:	4002001c 	.word	0x4002001c
 8002d68:	40020030 	.word	0x40020030
 8002d6c:	40020044 	.word	0x40020044
 8002d70:	40020058 	.word	0x40020058
 8002d74:	4002006c 	.word	0x4002006c
 8002d78:	40020000 	.word	0x40020000

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b08b      	sub	sp, #44	; 0x2c
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d8e:	e169      	b.n	8003064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d90:	2201      	movs	r2, #1
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f040 8158 	bne.w	800305e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a9a      	ldr	r2, [pc, #616]	; (800301c <HAL_GPIO_Init+0x2a0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d05e      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
 8002db8:	4a98      	ldr	r2, [pc, #608]	; (800301c <HAL_GPIO_Init+0x2a0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d875      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002dbe:	4a98      	ldr	r2, [pc, #608]	; (8003020 <HAL_GPIO_Init+0x2a4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d058      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
 8002dc4:	4a96      	ldr	r2, [pc, #600]	; (8003020 <HAL_GPIO_Init+0x2a4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d86f      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002dca:	4a96      	ldr	r2, [pc, #600]	; (8003024 <HAL_GPIO_Init+0x2a8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d052      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
 8002dd0:	4a94      	ldr	r2, [pc, #592]	; (8003024 <HAL_GPIO_Init+0x2a8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d869      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002dd6:	4a94      	ldr	r2, [pc, #592]	; (8003028 <HAL_GPIO_Init+0x2ac>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d04c      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
 8002ddc:	4a92      	ldr	r2, [pc, #584]	; (8003028 <HAL_GPIO_Init+0x2ac>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d863      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002de2:	4a92      	ldr	r2, [pc, #584]	; (800302c <HAL_GPIO_Init+0x2b0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d046      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
 8002de8:	4a90      	ldr	r2, [pc, #576]	; (800302c <HAL_GPIO_Init+0x2b0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d85d      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002dee:	2b12      	cmp	r3, #18
 8002df0:	d82a      	bhi.n	8002e48 <HAL_GPIO_Init+0xcc>
 8002df2:	2b12      	cmp	r3, #18
 8002df4:	d859      	bhi.n	8002eaa <HAL_GPIO_Init+0x12e>
 8002df6:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <HAL_GPIO_Init+0x80>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e77 	.word	0x08002e77
 8002e00:	08002e51 	.word	0x08002e51
 8002e04:	08002e63 	.word	0x08002e63
 8002e08:	08002ea5 	.word	0x08002ea5
 8002e0c:	08002eab 	.word	0x08002eab
 8002e10:	08002eab 	.word	0x08002eab
 8002e14:	08002eab 	.word	0x08002eab
 8002e18:	08002eab 	.word	0x08002eab
 8002e1c:	08002eab 	.word	0x08002eab
 8002e20:	08002eab 	.word	0x08002eab
 8002e24:	08002eab 	.word	0x08002eab
 8002e28:	08002eab 	.word	0x08002eab
 8002e2c:	08002eab 	.word	0x08002eab
 8002e30:	08002eab 	.word	0x08002eab
 8002e34:	08002eab 	.word	0x08002eab
 8002e38:	08002eab 	.word	0x08002eab
 8002e3c:	08002eab 	.word	0x08002eab
 8002e40:	08002e59 	.word	0x08002e59
 8002e44:	08002e6d 	.word	0x08002e6d
 8002e48:	4a79      	ldr	r2, [pc, #484]	; (8003030 <HAL_GPIO_Init+0x2b4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e4e:	e02c      	b.n	8002eaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	623b      	str	r3, [r7, #32]
          break;
 8002e56:	e029      	b.n	8002eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	623b      	str	r3, [r7, #32]
          break;
 8002e60:	e024      	b.n	8002eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	3308      	adds	r3, #8
 8002e68:	623b      	str	r3, [r7, #32]
          break;
 8002e6a:	e01f      	b.n	8002eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	330c      	adds	r3, #12
 8002e72:	623b      	str	r3, [r7, #32]
          break;
 8002e74:	e01a      	b.n	8002eac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e7e:	2304      	movs	r3, #4
 8002e80:	623b      	str	r3, [r7, #32]
          break;
 8002e82:	e013      	b.n	8002eac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	611a      	str	r2, [r3, #16]
          break;
 8002e96:	e009      	b.n	8002eac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e98:	2308      	movs	r3, #8
 8002e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	615a      	str	r2, [r3, #20]
          break;
 8002ea2:	e003      	b.n	8002eac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
          break;
 8002ea8:	e000      	b.n	8002eac <HAL_GPIO_Init+0x130>
          break;
 8002eaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2bff      	cmp	r3, #255	; 0xff
 8002eb0:	d801      	bhi.n	8002eb6 <HAL_GPIO_Init+0x13a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	e001      	b.n	8002eba <HAL_GPIO_Init+0x13e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2bff      	cmp	r3, #255	; 0xff
 8002ec0:	d802      	bhi.n	8002ec8 <HAL_GPIO_Init+0x14c>
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	e002      	b.n	8002ece <HAL_GPIO_Init+0x152>
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	3b08      	subs	r3, #8
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	210f      	movs	r1, #15
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	401a      	ands	r2, r3
 8002ee0:	6a39      	ldr	r1, [r7, #32]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80b1 	beq.w	800305e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002efc:	4b4d      	ldr	r3, [pc, #308]	; (8003034 <HAL_GPIO_Init+0x2b8>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	4a4c      	ldr	r2, [pc, #304]	; (8003034 <HAL_GPIO_Init+0x2b8>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6193      	str	r3, [r2, #24]
 8002f08:	4b4a      	ldr	r3, [pc, #296]	; (8003034 <HAL_GPIO_Init+0x2b8>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f14:	4a48      	ldr	r2, [pc, #288]	; (8003038 <HAL_GPIO_Init+0x2bc>)
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4013      	ands	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a40      	ldr	r2, [pc, #256]	; (800303c <HAL_GPIO_Init+0x2c0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_GPIO_Init+0x1ec>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a3f      	ldr	r2, [pc, #252]	; (8003040 <HAL_GPIO_Init+0x2c4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00d      	beq.n	8002f64 <HAL_GPIO_Init+0x1e8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a3e      	ldr	r2, [pc, #248]	; (8003044 <HAL_GPIO_Init+0x2c8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <HAL_GPIO_Init+0x1e4>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a3d      	ldr	r2, [pc, #244]	; (8003048 <HAL_GPIO_Init+0x2cc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <HAL_GPIO_Init+0x1e0>
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e006      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	e004      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e002      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	f002 0203 	and.w	r2, r2, #3
 8002f70:	0092      	lsls	r2, r2, #2
 8002f72:	4093      	lsls	r3, r2
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f7a:	492f      	ldr	r1, [pc, #188]	; (8003038 <HAL_GPIO_Init+0x2bc>)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d006      	beq.n	8002fa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f94:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	492c      	ldr	r1, [pc, #176]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]
 8002fa0:	e006      	b.n	8002fb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	4928      	ldr	r1, [pc, #160]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d006      	beq.n	8002fca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fbc:	4b23      	ldr	r3, [pc, #140]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	4922      	ldr	r1, [pc, #136]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60cb      	str	r3, [r1, #12]
 8002fc8:	e006      	b.n	8002fd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fca:	4b20      	ldr	r3, [pc, #128]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	491e      	ldr	r1, [pc, #120]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	4918      	ldr	r1, [pc, #96]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
 8002ff0:	e006      	b.n	8003000 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4914      	ldr	r1, [pc, #80]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d021      	beq.n	8003050 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <HAL_GPIO_Init+0x2d0>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	490e      	ldr	r1, [pc, #56]	; (800304c <HAL_GPIO_Init+0x2d0>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
 8003018:	e021      	b.n	800305e <HAL_GPIO_Init+0x2e2>
 800301a:	bf00      	nop
 800301c:	10320000 	.word	0x10320000
 8003020:	10310000 	.word	0x10310000
 8003024:	10220000 	.word	0x10220000
 8003028:	10210000 	.word	0x10210000
 800302c:	10120000 	.word	0x10120000
 8003030:	10110000 	.word	0x10110000
 8003034:	40021000 	.word	0x40021000
 8003038:	40010000 	.word	0x40010000
 800303c:	40010800 	.word	0x40010800
 8003040:	40010c00 	.word	0x40010c00
 8003044:	40011000 	.word	0x40011000
 8003048:	40011400 	.word	0x40011400
 800304c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_GPIO_Init+0x304>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	43db      	mvns	r3, r3
 8003058:	4909      	ldr	r1, [pc, #36]	; (8003080 <HAL_GPIO_Init+0x304>)
 800305a:	4013      	ands	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	3301      	adds	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	f47f ae8e 	bne.w	8002d90 <HAL_GPIO_Init+0x14>
  }
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	372c      	adds	r7, #44	; 0x2c
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr
 8003080:	40010400 	.word	0x40010400

08003084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	887b      	ldrh	r3, [r7, #2]
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	e001      	b.n	80030a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	460b      	mov	r3, r1
 80030bc:	807b      	strh	r3, [r7, #2]
 80030be:	4613      	mov	r3, r2
 80030c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030c2:	787b      	ldrb	r3, [r7, #1]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030c8:	887a      	ldrh	r2, [r7, #2]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030ce:	e003      	b.n	80030d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030d0:	887b      	ldrh	r3, [r7, #2]
 80030d2:	041a      	lsls	r2, r3, #16
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	611a      	str	r2, [r3, #16]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030fa:	4a05      	ldr	r2, [pc, #20]	; (8003110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f806 	bl	8003114 <HAL_GPIO_EXTI_Callback>
  }
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40010400 	.word	0x40010400

08003114 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e272      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8087 	beq.w	8003256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003148:	4b92      	ldr	r3, [pc, #584]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b04      	cmp	r3, #4
 8003152:	d00c      	beq.n	800316e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003154:	4b8f      	ldr	r3, [pc, #572]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b08      	cmp	r3, #8
 800315e:	d112      	bne.n	8003186 <HAL_RCC_OscConfig+0x5e>
 8003160:	4b8c      	ldr	r3, [pc, #560]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316c:	d10b      	bne.n	8003186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316e:	4b89      	ldr	r3, [pc, #548]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d06c      	beq.n	8003254 <HAL_RCC_OscConfig+0x12c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d168      	bne.n	8003254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e24c      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x76>
 8003190:	4b80      	ldr	r3, [pc, #512]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a7f      	ldr	r2, [pc, #508]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e02e      	b.n	80031fc <HAL_RCC_OscConfig+0xd4>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x98>
 80031a6:	4b7b      	ldr	r3, [pc, #492]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a7a      	ldr	r2, [pc, #488]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b78      	ldr	r3, [pc, #480]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a77      	ldr	r2, [pc, #476]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e01d      	b.n	80031fc <HAL_RCC_OscConfig+0xd4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0xbc>
 80031ca:	4b72      	ldr	r3, [pc, #456]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a71      	ldr	r2, [pc, #452]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a6e      	ldr	r2, [pc, #440]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e00b      	b.n	80031fc <HAL_RCC_OscConfig+0xd4>
 80031e4:	4b6b      	ldr	r3, [pc, #428]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a6a      	ldr	r2, [pc, #424]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a67      	ldr	r2, [pc, #412]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d013      	beq.n	800322c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7fe ff44 	bl	8002090 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800320c:	f7fe ff40 	bl	8002090 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e200      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	4b5d      	ldr	r3, [pc, #372]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0xe4>
 800322a:	e014      	b.n	8003256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7fe ff30 	bl	8002090 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003234:	f7fe ff2c 	bl	8002090 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	; 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e1ec      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	4b53      	ldr	r3, [pc, #332]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x10c>
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d063      	beq.n	800332a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003262:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800326e:	4b49      	ldr	r3, [pc, #292]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b08      	cmp	r3, #8
 8003278:	d11c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x18c>
 800327a:	4b46      	ldr	r3, [pc, #280]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d116      	bne.n	80032b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003286:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_RCC_OscConfig+0x176>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d001      	beq.n	800329e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e1c0      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329e:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4939      	ldr	r1, [pc, #228]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	e03a      	b.n	800332a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d020      	beq.n	80032fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032bc:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fe fee5 	bl	8002090 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ca:	f7fe fee1 	bl	8002090 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1a1      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032dc:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e8:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4927      	ldr	r1, [pc, #156]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	600b      	str	r3, [r1, #0]
 80032fc:	e015      	b.n	800332a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_RCC_OscConfig+0x270>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fe fec4 	bl	8002090 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330c:	f7fe fec0 	bl	8002090 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e180      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d03a      	beq.n	80033ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d019      	beq.n	8003372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333e:	4b17      	ldr	r3, [pc, #92]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003344:	f7fe fea4 	bl	8002090 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334c:	f7fe fea0 	bl	8002090 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e160      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <HAL_RCC_OscConfig+0x26c>)
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800336a:	2001      	movs	r0, #1
 800336c:	f000 face 	bl	800390c <RCC_Delay>
 8003370:	e01c      	b.n	80033ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_RCC_OscConfig+0x274>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003378:	f7fe fe8a 	bl	8002090 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800337e:	e00f      	b.n	80033a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003380:	f7fe fe86 	bl	8002090 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d908      	bls.n	80033a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e146      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
 8003398:	42420000 	.word	0x42420000
 800339c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a0:	4b92      	ldr	r3, [pc, #584]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e9      	bne.n	8003380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80a6 	beq.w	8003506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033be:	4b8b      	ldr	r3, [pc, #556]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10d      	bne.n	80033e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	4a87      	ldr	r2, [pc, #540]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d4:	61d3      	str	r3, [r2, #28]
 80033d6:	4b85      	ldr	r3, [pc, #532]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e6:	4b82      	ldr	r3, [pc, #520]	; (80035f0 <HAL_RCC_OscConfig+0x4c8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d118      	bne.n	8003424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f2:	4b7f      	ldr	r3, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0x4c8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a7e      	ldr	r2, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x4c8>)
 80033f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fe:	f7fe fe47 	bl	8002090 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003406:	f7fe fe43 	bl	8002090 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b64      	cmp	r3, #100	; 0x64
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e103      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003418:	4b75      	ldr	r3, [pc, #468]	; (80035f0 <HAL_RCC_OscConfig+0x4c8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d106      	bne.n	800343a <HAL_RCC_OscConfig+0x312>
 800342c:	4b6f      	ldr	r3, [pc, #444]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4a6e      	ldr	r2, [pc, #440]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6213      	str	r3, [r2, #32]
 8003438:	e02d      	b.n	8003496 <HAL_RCC_OscConfig+0x36e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0x334>
 8003442:	4b6a      	ldr	r3, [pc, #424]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4a69      	ldr	r2, [pc, #420]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	6213      	str	r3, [r2, #32]
 800344e:	4b67      	ldr	r3, [pc, #412]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	4a66      	ldr	r2, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	6213      	str	r3, [r2, #32]
 800345a:	e01c      	b.n	8003496 <HAL_RCC_OscConfig+0x36e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	2b05      	cmp	r3, #5
 8003462:	d10c      	bne.n	800347e <HAL_RCC_OscConfig+0x356>
 8003464:	4b61      	ldr	r3, [pc, #388]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4a60      	ldr	r2, [pc, #384]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 800346a:	f043 0304 	orr.w	r3, r3, #4
 800346e:	6213      	str	r3, [r2, #32]
 8003470:	4b5e      	ldr	r3, [pc, #376]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4a5d      	ldr	r2, [pc, #372]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6213      	str	r3, [r2, #32]
 800347c:	e00b      	b.n	8003496 <HAL_RCC_OscConfig+0x36e>
 800347e:	4b5b      	ldr	r3, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4a5a      	ldr	r2, [pc, #360]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	6213      	str	r3, [r2, #32]
 800348a:	4b58      	ldr	r3, [pc, #352]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4a57      	ldr	r2, [pc, #348]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003490:	f023 0304 	bic.w	r3, r3, #4
 8003494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d015      	beq.n	80034ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349e:	f7fe fdf7 	bl	8002090 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a4:	e00a      	b.n	80034bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7fe fdf3 	bl	8002090 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e0b1      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034bc:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ee      	beq.n	80034a6 <HAL_RCC_OscConfig+0x37e>
 80034c8:	e014      	b.n	80034f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ca:	f7fe fde1 	bl	8002090 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fe fddd 	bl	8002090 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e09b      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e8:	4b40      	ldr	r3, [pc, #256]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ee      	bne.n	80034d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d105      	bne.n	8003506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fa:	4b3c      	ldr	r3, [pc, #240]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4a3b      	ldr	r2, [pc, #236]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8087 	beq.w	800361e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003510:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b08      	cmp	r3, #8
 800351a:	d061      	beq.n	80035e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d146      	bne.n	80035b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003524:	4b33      	ldr	r3, [pc, #204]	; (80035f4 <HAL_RCC_OscConfig+0x4cc>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352a:	f7fe fdb1 	bl	8002090 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003532:	f7fe fdad 	bl	8002090 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e06d      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f0      	bne.n	8003532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003558:	d108      	bne.n	800356c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800355a:	4b24      	ldr	r3, [pc, #144]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4921      	ldr	r1, [pc, #132]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800356c:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a19      	ldr	r1, [r3, #32]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	430b      	orrs	r3, r1
 800357e:	491b      	ldr	r1, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_OscConfig+0x4cc>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7fe fd81 	bl	8002090 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003592:	f7fe fd7d 	bl	8002090 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e03d      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x46a>
 80035b0:	e035      	b.n	800361e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_RCC_OscConfig+0x4cc>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fe fd6a 	bl	8002090 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe fd66 	bl	8002090 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e026      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x498>
 80035de:	e01e      	b.n	800361e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e019      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_OscConfig+0x500>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	429a      	cmp	r2, r3
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000

0800362c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0d0      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b6a      	ldr	r3, [pc, #424]	; (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d910      	bls.n	8003670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b67      	ldr	r3, [pc, #412]	; (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 0207 	bic.w	r2, r3, #7
 8003656:	4965      	ldr	r1, [pc, #404]	; (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b63      	ldr	r3, [pc, #396]	; (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0b8      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003692:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a0:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	494d      	ldr	r1, [pc, #308]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d040      	beq.n	800374c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d115      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	4b41      	ldr	r3, [pc, #260]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e073      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	4b3d      	ldr	r3, [pc, #244]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e06b      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370a:	4b39      	ldr	r3, [pc, #228]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4936      	ldr	r1, [pc, #216]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800371c:	f7fe fcb8 	bl	8002090 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7fe fcb4 	bl	8002090 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e053      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 020c 	and.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	429a      	cmp	r2, r3
 800374a:	d1eb      	bne.n	8003724 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800374c:	4b27      	ldr	r3, [pc, #156]	; (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d210      	bcs.n	800377c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 0207 	bic.w	r2, r3, #7
 8003762:	4922      	ldr	r1, [pc, #136]	; (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e032      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4916      	ldr	r1, [pc, #88]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	490e      	ldr	r1, [pc, #56]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ba:	f000 f821 	bl	8003800 <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	490a      	ldr	r1, [pc, #40]	; (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <HAL_RCC_ClockConfig+0x1cc>)
 80037d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1d0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fc16 	bl	800200c <HAL_InitTick>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40022000 	.word	0x40022000
 80037f0:	40021000 	.word	0x40021000
 80037f4:	08005f74 	.word	0x08005f74
 80037f8:	20000000 	.word	0x20000000
 80037fc:	20000004 	.word	0x20000004

08003800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_RCC_GetSysClockFreq+0x94>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b04      	cmp	r3, #4
 8003828:	d002      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x30>
 800382a:	2b08      	cmp	r3, #8
 800382c:	d003      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x36>
 800382e:	e027      	b.n	8003880 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003830:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_RCC_GetSysClockFreq+0x98>)
 8003832:	613b      	str	r3, [r7, #16]
      break;
 8003834:	e027      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	0c9b      	lsrs	r3, r3, #18
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	4a17      	ldr	r2, [pc, #92]	; (800389c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003840:	5cd3      	ldrb	r3, [r2, r3]
 8003842:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d010      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_RCC_GetSysClockFreq+0x94>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	0c5b      	lsrs	r3, r3, #17
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <HAL_RCC_GetSysClockFreq+0x98>)
 8003862:	fb03 f202 	mul.w	r2, r3, r2
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e004      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003874:	fb02 f303 	mul.w	r3, r2, r3
 8003878:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	613b      	str	r3, [r7, #16]
      break;
 800387e:	e002      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetSysClockFreq+0x98>)
 8003882:	613b      	str	r3, [r7, #16]
      break;
 8003884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003886:	693b      	ldr	r3, [r7, #16]
}
 8003888:	4618      	mov	r0, r3
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	007a1200 	.word	0x007a1200
 800389c:	08005f8c 	.word	0x08005f8c
 80038a0:	08005f9c 	.word	0x08005f9c
 80038a4:	003d0900 	.word	0x003d0900

080038a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ac:	4b02      	ldr	r3, [pc, #8]	; (80038b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr
 80038b8:	20000000 	.word	0x20000000

080038bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038c0:	f7ff fff2 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4903      	ldr	r1, [pc, #12]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000
 80038e0:	08005f84 	.word	0x08005f84

080038e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038e8:	f7ff ffde 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	0adb      	lsrs	r3, r3, #11
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4903      	ldr	r1, [pc, #12]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40021000 	.word	0x40021000
 8003908:	08005f84 	.word	0x08005f84

0800390c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <RCC_Delay+0x34>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <RCC_Delay+0x38>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0a5b      	lsrs	r3, r3, #9
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003928:	bf00      	nop
  }
  while (Delay --);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1e5a      	subs	r2, r3, #1
 800392e:	60fa      	str	r2, [r7, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1f9      	bne.n	8003928 <RCC_Delay+0x1c>
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr
 8003940:	20000000 	.word	0x20000000
 8003944:	10624dd3 	.word	0x10624dd3

08003948 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d07d      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003964:	2300      	movs	r3, #0
 8003966:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003968:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10d      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003974:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	4a4b      	ldr	r2, [pc, #300]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	61d3      	str	r3, [r2, #28]
 8003980:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398c:	2301      	movs	r3, #1
 800398e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	4b46      	ldr	r3, [pc, #280]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d118      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399c:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a8:	f7fe fb72 	bl	8002090 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ae:	e008      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b0:	f7fe fb6e 	bl	8002090 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e06d      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ce:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d02e      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d027      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ec:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039f6:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039fc:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a02:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d014      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a12:	f7fe fb3d 	bl	8002090 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fe fb39 	bl	8002090 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e036      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a30:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ee      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4917      	ldr	r1, [pc, #92]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d105      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a54:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	490b      	ldr	r1, [pc, #44]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4904      	ldr	r1, [pc, #16]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40007000 	.word	0x40007000
 8003ab0:	42420440 	.word	0x42420440

08003ab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e076      	b.n	8003bb4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d108      	bne.n	8003ae0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad6:	d009      	beq.n	8003aec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	61da      	str	r2, [r3, #28]
 8003ade:	e005      	b.n	8003aec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fae2 	bl	80010d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	ea42 0103 	orr.w	r1, r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	0c1a      	lsrs	r2, r3, #16
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f002 0204 	and.w	r2, r2, #4
 8003b92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bcc:	f7fe fa60 	bl	8002090 <HAL_GetTick>
 8003bd0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d001      	beq.n	8003be6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
 8003be4:	e12a      	b.n	8003e3c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_SPI_Transmit+0x36>
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e122      	b.n	8003e3c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_SPI_Transmit+0x48>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e11b      	b.n	8003e3c <HAL_SPI_Transmit+0x280>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2203      	movs	r2, #3
 8003c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	88fa      	ldrh	r2, [r7, #6]
 8003c2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c52:	d10f      	bne.n	8003c74 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d007      	beq.n	8003c92 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9a:	d152      	bne.n	8003d42 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_SPI_Transmit+0xee>
 8003ca4:	8b7b      	ldrh	r3, [r7, #26]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d145      	bne.n	8003d36 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	881a      	ldrh	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	1c9a      	adds	r2, r3, #2
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cce:	e032      	b.n	8003d36 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d112      	bne.n	8003d04 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	881a      	ldrh	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	1c9a      	adds	r2, r3, #2
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d02:	e018      	b.n	8003d36 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d04:	f7fe f9c4 	bl	8002090 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d803      	bhi.n	8003d1c <HAL_SPI_Transmit+0x160>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1a:	d102      	bne.n	8003d22 <HAL_SPI_Transmit+0x166>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e082      	b.n	8003e3c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1c7      	bne.n	8003cd0 <HAL_SPI_Transmit+0x114>
 8003d40:	e053      	b.n	8003dea <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_SPI_Transmit+0x194>
 8003d4a:	8b7b      	ldrh	r3, [r7, #26]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d147      	bne.n	8003de0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	7812      	ldrb	r2, [r2, #0]
 8003d5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d76:	e033      	b.n	8003de0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d113      	bne.n	8003dae <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dac:	e018      	b.n	8003de0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dae:	f7fe f96f 	bl	8002090 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d803      	bhi.n	8003dc6 <HAL_SPI_Transmit+0x20a>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc4:	d102      	bne.n	8003dcc <HAL_SPI_Transmit+0x210>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e02d      	b.n	8003e3c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1c6      	bne.n	8003d78 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fbc4 	bl	800457c <SPI_EndRxTxTransaction>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
  }
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d001      	beq.n	8003e64 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
 8003e62:	e104      	b.n	800406e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6c:	d112      	bne.n	8003e94 <HAL_SPI_Receive+0x50>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10e      	bne.n	8003e94 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e7e:	88fa      	ldrh	r2, [r7, #6]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f8f3 	bl	8004076 <HAL_SPI_TransmitReceive>
 8003e90:	4603      	mov	r3, r0
 8003e92:	e0ec      	b.n	800406e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e94:	f7fe f8fc 	bl	8002090 <HAL_GetTick>
 8003e98:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_SPI_Receive+0x62>
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e0e1      	b.n	800406e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_SPI_Receive+0x74>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e0da      	b.n	800406e <HAL_SPI_Receive+0x22a>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	88fa      	ldrh	r2, [r7, #6]
 8003ede:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f06:	d10f      	bne.n	8003f28 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f26:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d007      	beq.n	8003f46 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d170      	bne.n	8004030 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f4e:	e035      	b.n	8003fbc <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d115      	bne.n	8003f8a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f103 020c 	add.w	r2, r3, #12
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	7812      	ldrb	r2, [r2, #0]
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f88:	e018      	b.n	8003fbc <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f8a:	f7fe f881 	bl	8002090 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d803      	bhi.n	8003fa2 <HAL_SPI_Receive+0x15e>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fa0:	d102      	bne.n	8003fa8 <HAL_SPI_Receive+0x164>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e058      	b.n	800406e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1c4      	bne.n	8003f50 <HAL_SPI_Receive+0x10c>
 8003fc6:	e038      	b.n	800403a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d113      	bne.n	8003ffe <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	b292      	uxth	r2, r2
 8003fe2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ffc:	e018      	b.n	8004030 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ffe:	f7fe f847 	bl	8002090 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d803      	bhi.n	8004016 <HAL_SPI_Receive+0x1d2>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004014:	d102      	bne.n	800401c <HAL_SPI_Receive+0x1d8>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e01e      	b.n	800406e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1c6      	bne.n	8003fc8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa4a 	bl	80044d8 <SPI_EndRxTransaction>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800406c:	2300      	movs	r3, #0
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b08a      	sub	sp, #40	; 0x28
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004084:	2301      	movs	r3, #1
 8004086:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004088:	f7fe f802 	bl	8002090 <HAL_GetTick>
 800408c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004094:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d00c      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x4a>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ac:	d106      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x46>
 80040b6:	7ffb      	ldrb	r3, [r7, #31]
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d001      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
 80040be:	e17f      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x5c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x5c>
 80040cc:	887b      	ldrh	r3, [r7, #2]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e174      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_SPI_TransmitReceive+0x6e>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e16d      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d003      	beq.n	8004100 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2205      	movs	r2, #5
 80040fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	887a      	ldrh	r2, [r7, #2]
 8004116:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	887a      	ldrh	r2, [r7, #2]
 8004122:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	887a      	ldrh	r2, [r7, #2]
 8004128:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d007      	beq.n	8004154 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004152:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415c:	d17e      	bne.n	800425c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_SPI_TransmitReceive+0xf6>
 8004166:	8afb      	ldrh	r3, [r7, #22]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d16c      	bne.n	8004246 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	881a      	ldrh	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	1c9a      	adds	r2, r3, #2
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004190:	e059      	b.n	8004246 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b02      	cmp	r3, #2
 800419e:	d11b      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x162>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_SPI_TransmitReceive+0x162>
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d113      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	881a      	ldrh	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	1c9a      	adds	r2, r3, #2
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d119      	bne.n	800421a <HAL_SPI_TransmitReceive+0x1a4>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d014      	beq.n	800421a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	b292      	uxth	r2, r2
 80041fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004216:	2301      	movs	r3, #1
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800421a:	f7fd ff39 	bl	8002090 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004226:	429a      	cmp	r2, r3
 8004228:	d80d      	bhi.n	8004246 <HAL_SPI_TransmitReceive+0x1d0>
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004230:	d009      	beq.n	8004246 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e0bc      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1a0      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x11c>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d19b      	bne.n	8004192 <HAL_SPI_TransmitReceive+0x11c>
 800425a:	e082      	b.n	8004362 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_SPI_TransmitReceive+0x1f4>
 8004264:	8afb      	ldrh	r3, [r7, #22]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d171      	bne.n	800434e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	7812      	ldrb	r2, [r2, #0]
 8004276:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004290:	e05d      	b.n	800434e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d11c      	bne.n	80042da <HAL_SPI_TransmitReceive+0x264>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d017      	beq.n	80042da <HAL_SPI_TransmitReceive+0x264>
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d114      	bne.n	80042da <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	7812      	ldrb	r2, [r2, #0]
 80042bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d119      	bne.n	800431c <HAL_SPI_TransmitReceive+0x2a6>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d014      	beq.n	800431c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004318:	2301      	movs	r3, #1
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800431c:	f7fd feb8 	bl	8002090 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004328:	429a      	cmp	r2, r3
 800432a:	d803      	bhi.n	8004334 <HAL_SPI_TransmitReceive+0x2be>
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004332:	d102      	bne.n	800433a <HAL_SPI_TransmitReceive+0x2c4>
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e038      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d19c      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x21c>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d197      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004362:	6a3a      	ldr	r2, [r7, #32]
 8004364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f908 	bl	800457c <SPI_EndRxTxTransaction>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e01d      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80043be:	2300      	movs	r3, #0
  }
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3728      	adds	r7, #40	; 0x28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043d8:	f7fd fe5a 	bl	8002090 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	4413      	add	r3, r2
 80043e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043e8:	f7fd fe52 	bl	8002090 <HAL_GetTick>
 80043ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043ee:	4b39      	ldr	r3, [pc, #228]	; (80044d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	015b      	lsls	r3, r3, #5
 80043f4:	0d1b      	lsrs	r3, r3, #20
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	fb02 f303 	mul.w	r3, r2, r3
 80043fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fe:	e054      	b.n	80044aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004406:	d050      	beq.n	80044aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004408:	f7fd fe42 	bl	8002090 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	429a      	cmp	r2, r3
 8004416:	d902      	bls.n	800441e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d13d      	bne.n	800449a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800442c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004436:	d111      	bne.n	800445c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004440:	d004      	beq.n	800444c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444a:	d107      	bne.n	800445c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004464:	d10f      	bne.n	8004486 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e017      	b.n	80044ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4013      	ands	r3, r2
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	bf0c      	ite	eq
 80044ba:	2301      	moveq	r3, #1
 80044bc:	2300      	movne	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d19b      	bne.n	8004400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000000 	.word	0x20000000

080044d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ec:	d111      	bne.n	8004512 <SPI_EndRxTransaction+0x3a>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f6:	d004      	beq.n	8004502 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004500:	d107      	bne.n	8004512 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004510:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800451a:	d117      	bne.n	800454c <SPI_EndRxTransaction+0x74>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004524:	d112      	bne.n	800454c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2200      	movs	r2, #0
 800452e:	2101      	movs	r1, #1
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff ff49 	bl	80043c8 <SPI_WaitFlagStateUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01a      	beq.n	8004572 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e013      	b.n	8004574 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2200      	movs	r2, #0
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff ff36 	bl	80043c8 <SPI_WaitFlagStateUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f043 0220 	orr.w	r2, r3, #32
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e000      	b.n	8004574 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2201      	movs	r2, #1
 8004590:	2102      	movs	r1, #2
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f7ff ff18 	bl	80043c8 <SPI_WaitFlagStateUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e013      	b.n	80045d6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2180      	movs	r1, #128	; 0x80
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7ff ff05 	bl	80043c8 <SPI_WaitFlagStateUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e000      	b.n	80045d6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e041      	b.n	8004674 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7fc fdbd 	bl	8001184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f000 fc1f 	bl	8004e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	d001      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e03a      	b.n	800470a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a18      	ldr	r2, [pc, #96]	; (8004714 <HAL_TIM_Base_Start_IT+0x98>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00e      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x58>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046be:	d009      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x58>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a14      	ldr	r2, [pc, #80]	; (8004718 <HAL_TIM_Base_Start_IT+0x9c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x58>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a13      	ldr	r2, [pc, #76]	; (800471c <HAL_TIM_Base_Start_IT+0xa0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d111      	bne.n	80046f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d010      	beq.n	8004708 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f6:	e007      	b.n	8004708 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800

08004720 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e041      	b.n	80047b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f839 	bl	80047be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3304      	adds	r3, #4
 800475c:	4619      	mov	r1, r3
 800475e:	4610      	mov	r0, r2
 8004760:	f000 fb7e 	bl	8004e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d109      	bne.n	80047f4 <HAL_TIM_PWM_Start+0x24>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e022      	b.n	800483a <HAL_TIM_PWM_Start+0x6a>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d109      	bne.n	800480e <HAL_TIM_PWM_Start+0x3e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	bf14      	ite	ne
 8004806:	2301      	movne	r3, #1
 8004808:	2300      	moveq	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	e015      	b.n	800483a <HAL_TIM_PWM_Start+0x6a>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d109      	bne.n	8004828 <HAL_TIM_PWM_Start+0x58>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e008      	b.n	800483a <HAL_TIM_PWM_Start+0x6a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e05e      	b.n	8004900 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <HAL_TIM_PWM_Start+0x82>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004850:	e013      	b.n	800487a <HAL_TIM_PWM_Start+0xaa>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d104      	bne.n	8004862 <HAL_TIM_PWM_Start+0x92>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004860:	e00b      	b.n	800487a <HAL_TIM_PWM_Start+0xaa>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d104      	bne.n	8004872 <HAL_TIM_PWM_Start+0xa2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004870:	e003      	b.n	800487a <HAL_TIM_PWM_Start+0xaa>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2201      	movs	r2, #1
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fd78 	bl	8005378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <HAL_TIM_PWM_Start+0x138>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d107      	bne.n	80048a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a18      	ldr	r2, [pc, #96]	; (8004908 <HAL_TIM_PWM_Start+0x138>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_TIM_PWM_Start+0xfa>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d009      	beq.n	80048ca <HAL_TIM_PWM_Start+0xfa>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a14      	ldr	r2, [pc, #80]	; (800490c <HAL_TIM_PWM_Start+0x13c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_TIM_PWM_Start+0xfa>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a12      	ldr	r2, [pc, #72]	; (8004910 <HAL_TIM_PWM_Start+0x140>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d111      	bne.n	80048ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b06      	cmp	r3, #6
 80048da:	d010      	beq.n	80048fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	e007      	b.n	80048fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800

08004914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d020      	beq.n	8004978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01b      	beq.n	8004978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0202 	mvn.w	r2, #2
 8004948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa63 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004964:	e005      	b.n	8004972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa56 	bl	8004e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fa65 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d020      	beq.n	80049c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01b      	beq.n	80049c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0204 	mvn.w	r2, #4
 8004994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2202      	movs	r2, #2
 800499a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa3d 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa30 	bl	8004e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fa3f 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d020      	beq.n	8004a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01b      	beq.n	8004a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0208 	mvn.w	r2, #8
 80049e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2204      	movs	r2, #4
 80049e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa17 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 80049fc:	e005      	b.n	8004a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fa0a 	bl	8004e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fa19 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d020      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01b      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0210 	mvn.w	r2, #16
 8004a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2208      	movs	r2, #8
 8004a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f9f1 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004a48:	e005      	b.n	8004a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f9e4 	bl	8004e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f9f3 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00c      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0201 	mvn.w	r2, #1
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9c3 	bl	8004e06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fcf5 	bl	800548e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f9c3 	bl	8004e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00c      	beq.n	8004aec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0220 	mvn.w	r2, #32
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fcc8 	bl	800547c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0ae      	b.n	8004c70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b0c      	cmp	r3, #12
 8004b1e:	f200 809f 	bhi.w	8004c60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b22:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b5d 	.word	0x08004b5d
 8004b2c:	08004c61 	.word	0x08004c61
 8004b30:	08004c61 	.word	0x08004c61
 8004b34:	08004c61 	.word	0x08004c61
 8004b38:	08004b9d 	.word	0x08004b9d
 8004b3c:	08004c61 	.word	0x08004c61
 8004b40:	08004c61 	.word	0x08004c61
 8004b44:	08004c61 	.word	0x08004c61
 8004b48:	08004bdf 	.word	0x08004bdf
 8004b4c:	08004c61 	.word	0x08004c61
 8004b50:	08004c61 	.word	0x08004c61
 8004b54:	08004c61 	.word	0x08004c61
 8004b58:	08004c1f 	.word	0x08004c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f9ea 	bl	8004f3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0208 	orr.w	r2, r2, #8
 8004b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0204 	bic.w	r2, r2, #4
 8004b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6999      	ldr	r1, [r3, #24]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	619a      	str	r2, [r3, #24]
      break;
 8004b9a:	e064      	b.n	8004c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fa30 	bl	8005008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6999      	ldr	r1, [r3, #24]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	021a      	lsls	r2, r3, #8
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	619a      	str	r2, [r3, #24]
      break;
 8004bdc:	e043      	b.n	8004c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fa79 	bl	80050dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0208 	orr.w	r2, r2, #8
 8004bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0204 	bic.w	r2, r2, #4
 8004c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	61da      	str	r2, [r3, #28]
      break;
 8004c1c:	e023      	b.n	8004c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fac3 	bl	80051b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69d9      	ldr	r1, [r3, #28]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	021a      	lsls	r2, r3, #8
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	61da      	str	r2, [r3, #28]
      break;
 8004c5e:	e002      	b.n	8004c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	75fb      	strb	r3, [r7, #23]
      break;
 8004c64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_TIM_ConfigClockSource+0x1c>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e0b4      	b.n	8004dfe <HAL_TIM_ConfigClockSource+0x186>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ccc:	d03e      	beq.n	8004d4c <HAL_TIM_ConfigClockSource+0xd4>
 8004cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd2:	f200 8087 	bhi.w	8004de4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cda:	f000 8086 	beq.w	8004dea <HAL_TIM_ConfigClockSource+0x172>
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d87f      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce4:	2b70      	cmp	r3, #112	; 0x70
 8004ce6:	d01a      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0xa6>
 8004ce8:	2b70      	cmp	r3, #112	; 0x70
 8004cea:	d87b      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cec:	2b60      	cmp	r3, #96	; 0x60
 8004cee:	d050      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x11a>
 8004cf0:	2b60      	cmp	r3, #96	; 0x60
 8004cf2:	d877      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf4:	2b50      	cmp	r3, #80	; 0x50
 8004cf6:	d03c      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0xfa>
 8004cf8:	2b50      	cmp	r3, #80	; 0x50
 8004cfa:	d873      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d058      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x13a>
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d86f      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b30      	cmp	r3, #48	; 0x30
 8004d06:	d064      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d08:	2b30      	cmp	r3, #48	; 0x30
 8004d0a:	d86b      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d060      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d867      	bhi.n	8004de4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d05c      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d05a      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d1c:	e062      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d2e:	f000 fb04 	bl	800533a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	609a      	str	r2, [r3, #8]
      break;
 8004d4a:	e04f      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d5c:	f000 faed 	bl	800533a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d6e:	609a      	str	r2, [r3, #8]
      break;
 8004d70:	e03c      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f000 fa64 	bl	800524c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2150      	movs	r1, #80	; 0x50
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fabb 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004d90:	e02c      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f000 fa82 	bl	80052a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2160      	movs	r1, #96	; 0x60
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 faab 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004db0:	e01c      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f000 fa44 	bl	800524c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2140      	movs	r1, #64	; 0x40
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fa9b 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004dd0:	e00c      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f000 fa92 	bl	8005306 <TIM_ITRx_SetConfig>
      break;
 8004de2:	e003      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
      break;
 8004de8:	e000      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr

08004e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a2f      	ldr	r2, [pc, #188]	; (8004f30 <TIM_Base_SetConfig+0xd0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <TIM_Base_SetConfig+0x30>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7e:	d007      	beq.n	8004e90 <TIM_Base_SetConfig+0x30>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a2c      	ldr	r2, [pc, #176]	; (8004f34 <TIM_Base_SetConfig+0xd4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0x30>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a2b      	ldr	r2, [pc, #172]	; (8004f38 <TIM_Base_SetConfig+0xd8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d108      	bne.n	8004ea2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a22      	ldr	r2, [pc, #136]	; (8004f30 <TIM_Base_SetConfig+0xd0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00b      	beq.n	8004ec2 <TIM_Base_SetConfig+0x62>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb0:	d007      	beq.n	8004ec2 <TIM_Base_SetConfig+0x62>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1f      	ldr	r2, [pc, #124]	; (8004f34 <TIM_Base_SetConfig+0xd4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d003      	beq.n	8004ec2 <TIM_Base_SetConfig+0x62>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <TIM_Base_SetConfig+0xd8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d108      	bne.n	8004ed4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a0d      	ldr	r2, [pc, #52]	; (8004f30 <TIM_Base_SetConfig+0xd0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d103      	bne.n	8004f08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	611a      	str	r2, [r3, #16]
  }
}
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800

08004f3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f023 0201 	bic.w	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 0302 	bic.w	r3, r3, #2
 8004f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <TIM_OC1_SetConfig+0xc8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10c      	bne.n	8004fb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f023 0308 	bic.w	r3, r3, #8
 8004f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a13      	ldr	r2, [pc, #76]	; (8005004 <TIM_OC1_SetConfig+0xc8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d111      	bne.n	8004fde <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	621a      	str	r2, [r3, #32]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40012c00 	.word	0x40012c00

08005008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f023 0210 	bic.w	r2, r3, #16
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0320 	bic.w	r3, r3, #32
 8005052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <TIM_OC2_SetConfig+0xd0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d10d      	bne.n	8005084 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800506e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005082:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a14      	ldr	r2, [pc, #80]	; (80050d8 <TIM_OC2_SetConfig+0xd0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d113      	bne.n	80050b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr
 80050d8:	40012c00 	.word	0x40012c00

080050dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0303 	bic.w	r3, r3, #3
 8005112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <TIM_OC3_SetConfig+0xd0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d10d      	bne.n	8005156 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a14      	ldr	r2, [pc, #80]	; (80051ac <TIM_OC3_SetConfig+0xd0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d113      	bne.n	8005186 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800516c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	621a      	str	r2, [r3, #32]
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40012c00 	.word	0x40012c00

080051b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	031b      	lsls	r3, r3, #12
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a0f      	ldr	r2, [pc, #60]	; (8005248 <TIM_OC4_SetConfig+0x98>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d109      	bne.n	8005224 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	019b      	lsls	r3, r3, #6
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr
 8005248:	40012c00 	.word	0x40012c00

0800524c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0201 	bic.w	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 030a 	bic.w	r3, r3, #10
 8005288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0210 	bic.w	r2, r3, #16
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	031b      	lsls	r3, r3, #12
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	621a      	str	r2, [r3, #32]
}
 80052fc:	bf00      	nop
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr

08005306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	f043 0307 	orr.w	r3, r3, #7
 8005328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	609a      	str	r2, [r3, #8]
}
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr

0800533a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800533a:	b480      	push	{r7}
 800533c:	b087      	sub	sp, #28
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
 8005346:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005354:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	021a      	lsls	r2, r3, #8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	431a      	orrs	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4313      	orrs	r3, r2
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	609a      	str	r2, [r3, #8]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	2201      	movs	r2, #1
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1a      	ldr	r2, [r3, #32]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	43db      	mvns	r3, r3
 800539a:	401a      	ands	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	fa01 f303 	lsl.w	r3, r1, r3
 80053b0:	431a      	orrs	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e046      	b.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a16      	ldr	r2, [pc, #88]	; (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00e      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005424:	d009      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a12      	ldr	r2, [pc, #72]	; (8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a10      	ldr	r2, [pc, #64]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d10c      	bne.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	4313      	orrs	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr
 8005470:	40012c00 	.word	0x40012c00
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800

0800547c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr

080054a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e042      	b.n	8005538 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fb fedc 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2224      	movs	r2, #36	; 0x24
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fc7f 	bl	8005de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005508:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005518:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b0ba      	sub	sp, #232	; 0xe8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005566:	2300      	movs	r3, #0
 8005568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800556c:	2300      	movs	r3, #0
 800556e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800557e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10f      	bne.n	80055a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_UART_IRQHandler+0x66>
 8005592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fb63 	bl	8005c6a <UART_Receive_IT>
      return;
 80055a4:	e25b      	b.n	8005a5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80de 	beq.w	800576c <HAL_UART_IRQHandler+0x22c>
 80055b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d106      	bne.n	80055ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80d1 	beq.w	800576c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <HAL_UART_IRQHandler+0xae>
 80055d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f043 0201 	orr.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_UART_IRQHandler+0xd2>
 80055fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	f043 0202 	orr.w	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <HAL_UART_IRQHandler+0xf6>
 800561e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	f043 0204 	orr.w	r2, r3, #4
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d011      	beq.n	8005666 <HAL_UART_IRQHandler+0x126>
 8005642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800564e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565e:	f043 0208 	orr.w	r2, r3, #8
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 81f2 	beq.w	8005a54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_UART_IRQHandler+0x14e>
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 faee 	bl	8005c6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	bf14      	ite	ne
 800569c:	2301      	movne	r3, #1
 800569e:	2300      	moveq	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <HAL_UART_IRQHandler+0x17a>
 80056b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d04f      	beq.n	800575a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9f8 	bl	8005ab0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d041      	beq.n	8005752 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3314      	adds	r3, #20
 80056d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3314      	adds	r3, #20
 80056f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1d9      	bne.n	80056ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d013      	beq.n	800574a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	4a7e      	ldr	r2, [pc, #504]	; (8005920 <HAL_UART_IRQHandler+0x3e0>)
 8005728:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	4618      	mov	r0, r3
 8005730:	f7fd f9a6 	bl	8002a80 <HAL_DMA_Abort_IT>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d016      	beq.n	8005768 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	e00e      	b.n	8005768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f99c 	bl	8005a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	e00a      	b.n	8005768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f998 	bl	8005a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	e006      	b.n	8005768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f994 	bl	8005a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005766:	e175      	b.n	8005a54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	bf00      	nop
    return;
 800576a:	e173      	b.n	8005a54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	2b01      	cmp	r3, #1
 8005772:	f040 814f 	bne.w	8005a14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8148 	beq.w	8005a14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8141 	beq.w	8005a14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 80b6 	beq.w	8005924 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8145 	beq.w	8005a58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057d6:	429a      	cmp	r2, r3
 80057d8:	f080 813e 	bcs.w	8005a58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	f000 8088 	beq.w	8005900 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005806:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800580a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800580e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800581c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005820:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005828:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005834:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1d9      	bne.n	80057f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800584c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3314      	adds	r3, #20
 800585c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005860:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005864:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005868:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e1      	bne.n	800583c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3314      	adds	r3, #20
 800587e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800588e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3314      	adds	r3, #20
 8005898:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800589c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800589e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e3      	bne.n	8005878 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	330c      	adds	r3, #12
 80058de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80058e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e3      	bne.n	80058be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd f884 	bl	8002a08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800590e:	b29b      	uxth	r3, r3
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	b29b      	uxth	r3, r3
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8bf 	bl	8005a9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800591c:	e09c      	b.n	8005a58 <HAL_UART_IRQHandler+0x518>
 800591e:	bf00      	nop
 8005920:	08005b75 	.word	0x08005b75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800592c:	b29b      	uxth	r3, r3
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 808e 	beq.w	8005a5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8089 	beq.w	8005a5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	330c      	adds	r3, #12
 800596a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800596e:	647a      	str	r2, [r7, #68]	; 0x44
 8005970:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800597c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e3      	bne.n	800594a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3314      	adds	r3, #20
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	623b      	str	r3, [r7, #32]
   return(result);
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059a6:	633a      	str	r2, [r7, #48]	; 0x30
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e3      	bne.n	8005982 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0310 	bic.w	r3, r3, #16
 80059de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	330c      	adds	r3, #12
 80059e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059ec:	61fa      	str	r2, [r7, #28]
 80059ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	69fa      	ldr	r2, [r7, #28]
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	617b      	str	r3, [r7, #20]
   return(result);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e3      	bne.n	80059c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f844 	bl	8005a9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a12:	e023      	b.n	8005a5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d009      	beq.n	8005a34 <HAL_UART_IRQHandler+0x4f4>
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f8b5 	bl	8005b9c <UART_Transmit_IT>
    return;
 8005a32:	e014      	b.n	8005a5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00e      	beq.n	8005a5e <HAL_UART_IRQHandler+0x51e>
 8005a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f8f4 	bl	8005c3a <UART_EndTransmit_IT>
    return;
 8005a52:	e004      	b.n	8005a5e <HAL_UART_IRQHandler+0x51e>
    return;
 8005a54:	bf00      	nop
 8005a56:	e002      	b.n	8005a5e <HAL_UART_IRQHandler+0x51e>
      return;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <HAL_UART_IRQHandler+0x51e>
      return;
 8005a5c:	bf00      	nop
  }
}
 8005a5e:	37e8      	adds	r7, #232	; 0xe8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr

08005a76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr

08005a88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr

08005a9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr

08005ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b095      	sub	sp, #84	; 0x54
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ad8:	643a      	str	r2, [r7, #64]	; 0x40
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ade:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e5      	bne.n	8005ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3314      	adds	r3, #20
 8005b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d119      	bne.n	8005b5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f023 0310 	bic.w	r3, r3, #16
 8005b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b48:	61ba      	str	r2, [r7, #24]
 8005b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6979      	ldr	r1, [r7, #20]
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	613b      	str	r3, [r7, #16]
   return(result);
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e5      	bne.n	8005b28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b6a:	bf00      	nop
 8005b6c:	3754      	adds	r7, #84	; 0x54
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr

08005b74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7ff ff7a 	bl	8005a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b21      	cmp	r3, #33	; 0x21
 8005bae:	d13e      	bne.n	8005c2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb8:	d114      	bne.n	8005be4 <UART_Transmit_IT+0x48>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d110      	bne.n	8005be4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	1c9a      	adds	r2, r3, #2
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	621a      	str	r2, [r3, #32]
 8005be2:	e008      	b.n	8005bf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	1c59      	adds	r1, r3, #1
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6211      	str	r1, [r2, #32]
 8005bee:	781a      	ldrb	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	4619      	mov	r1, r3
 8005c04:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10f      	bne.n	8005c2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	e000      	b.n	8005c30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c2e:	2302      	movs	r3, #2
  }
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr

08005c3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff ff02 	bl	8005a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b08c      	sub	sp, #48	; 0x30
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b22      	cmp	r3, #34	; 0x22
 8005c7c:	f040 80ae 	bne.w	8005ddc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c88:	d117      	bne.n	8005cba <UART_Receive_IT+0x50>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d113      	bne.n	8005cba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	1c9a      	adds	r2, r3, #2
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8005cb8:	e026      	b.n	8005d08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ccc:	d007      	beq.n	8005cde <UART_Receive_IT+0x74>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <UART_Receive_IT+0x82>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	e008      	b.n	8005cfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	4619      	mov	r1, r3
 8005d16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d15d      	bne.n	8005dd8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0220 	bic.w	r2, r2, #32
 8005d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0201 	bic.w	r2, r2, #1
 8005d4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d135      	bne.n	8005dce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	613b      	str	r3, [r7, #16]
   return(result);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f023 0310 	bic.w	r3, r3, #16
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d88:	623a      	str	r2, [r7, #32]
 8005d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	69f9      	ldr	r1, [r7, #28]
 8005d8e:	6a3a      	ldr	r2, [r7, #32]
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e5      	bne.n	8005d68 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d10a      	bne.n	8005dc0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fe67 	bl	8005a9a <HAL_UARTEx_RxEventCallback>
 8005dcc:	e002      	b.n	8005dd4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff fe51 	bl	8005a76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e002      	b.n	8005dde <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e000      	b.n	8005dde <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ddc:	2302      	movs	r3, #2
  }
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3730      	adds	r7, #48	; 0x30
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e22:	f023 030c 	bic.w	r3, r3, #12
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6812      	ldr	r2, [r2, #0]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a2c      	ldr	r2, [pc, #176]	; (8005efc <UART_SetConfig+0x114>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d103      	bne.n	8005e58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e50:	f7fd fd48 	bl	80038e4 <HAL_RCC_GetPCLK2Freq>
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	e002      	b.n	8005e5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e58:	f7fd fd30 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 8005e5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	009a      	lsls	r2, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e74:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <UART_SetConfig+0x118>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	0119      	lsls	r1, r3, #4
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	009a      	lsls	r2, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e94:	4b1a      	ldr	r3, [pc, #104]	; (8005f00 <UART_SetConfig+0x118>)
 8005e96:	fba3 0302 	umull	r0, r3, r3, r2
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	2064      	movs	r0, #100	; 0x64
 8005e9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	3332      	adds	r3, #50	; 0x32
 8005ea8:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <UART_SetConfig+0x118>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb4:	4419      	add	r1, r3
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009a      	lsls	r2, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <UART_SetConfig+0x118>)
 8005ece:	fba3 0302 	umull	r0, r3, r3, r2
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	2064      	movs	r0, #100	; 0x64
 8005ed6:	fb00 f303 	mul.w	r3, r0, r3
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	3332      	adds	r3, #50	; 0x32
 8005ee0:	4a07      	ldr	r2, [pc, #28]	; (8005f00 <UART_SetConfig+0x118>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	f003 020f 	and.w	r2, r3, #15
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ef4:	bf00      	nop
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40013800 	.word	0x40013800
 8005f00:	51eb851f 	.word	0x51eb851f

08005f04 <memset>:
 8005f04:	4603      	mov	r3, r0
 8005f06:	4402      	add	r2, r0
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d100      	bne.n	8005f0e <memset+0xa>
 8005f0c:	4770      	bx	lr
 8005f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f12:	e7f9      	b.n	8005f08 <memset+0x4>

08005f14 <__libc_init_array>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	2600      	movs	r6, #0
 8005f18:	4d0c      	ldr	r5, [pc, #48]	; (8005f4c <__libc_init_array+0x38>)
 8005f1a:	4c0d      	ldr	r4, [pc, #52]	; (8005f50 <__libc_init_array+0x3c>)
 8005f1c:	1b64      	subs	r4, r4, r5
 8005f1e:	10a4      	asrs	r4, r4, #2
 8005f20:	42a6      	cmp	r6, r4
 8005f22:	d109      	bne.n	8005f38 <__libc_init_array+0x24>
 8005f24:	f000 f81a 	bl	8005f5c <_init>
 8005f28:	2600      	movs	r6, #0
 8005f2a:	4d0a      	ldr	r5, [pc, #40]	; (8005f54 <__libc_init_array+0x40>)
 8005f2c:	4c0a      	ldr	r4, [pc, #40]	; (8005f58 <__libc_init_array+0x44>)
 8005f2e:	1b64      	subs	r4, r4, r5
 8005f30:	10a4      	asrs	r4, r4, #2
 8005f32:	42a6      	cmp	r6, r4
 8005f34:	d105      	bne.n	8005f42 <__libc_init_array+0x2e>
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3c:	4798      	blx	r3
 8005f3e:	3601      	adds	r6, #1
 8005f40:	e7ee      	b.n	8005f20 <__libc_init_array+0xc>
 8005f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f46:	4798      	blx	r3
 8005f48:	3601      	adds	r6, #1
 8005f4a:	e7f2      	b.n	8005f32 <__libc_init_array+0x1e>
 8005f4c:	08005fa0 	.word	0x08005fa0
 8005f50:	08005fa0 	.word	0x08005fa0
 8005f54:	08005fa0 	.word	0x08005fa0
 8005f58:	08005fa4 	.word	0x08005fa4

08005f5c <_init>:
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	bf00      	nop
 8005f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f62:	bc08      	pop	{r3}
 8005f64:	469e      	mov	lr, r3
 8005f66:	4770      	bx	lr

08005f68 <_fini>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	bf00      	nop
 8005f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6e:	bc08      	pop	{r3}
 8005f70:	469e      	mov	lr, r3
 8005f72:	4770      	bx	lr
