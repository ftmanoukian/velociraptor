
velociraptor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800422c  0800422c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800422c  0800422c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800422c  0800422c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  08004240  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004240  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db15  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000216f  00000000  00000000  0002db8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0002fd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a84  00000000  00000000  00030a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000178cf  00000000  00000000  000314ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f32c  00000000  00000000  00048dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bb2a  00000000  00000000  000580e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000394c  00000000  00000000  000e3c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000e7560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080041e8 	.word	0x080041e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080041e8 	.word	0x080041e8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f000 ffc2 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f81d 	bl	800077a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f000 fa32 	bl	8000ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000744:	f000 fa12 	bl	8000b6c <MX_DMA_Init>
  MX_ADC1_Init();
 8000748:	f000 f874 	bl	8000834 <MX_ADC1_Init>
  MX_TIM4_Init();
 800074c:	f000 f94c 	bl	80009e8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000750:	f000 f9e2 	bl	8000b18 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000754:	f000 f8fa 	bl	800094c <MX_TIM3_Init>
  MX_ADC2_Init();
 8000758:	f000 f8ba 	bl	80008d0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  velociraptor_start();
 800075c:	f000 fc66 	bl	800102c <velociraptor_start>
  velociraptor_setmotorspeed(MOTOR_L, 0.0f);
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	2001      	movs	r0, #1
 8000766:	f000 fccb 	bl	8001100 <velociraptor_setmotorspeed>
  velociraptor_setmotorspeed(MOTOR_R, 0.0f);
 800076a:	f04f 0100 	mov.w	r1, #0
 800076e:	2002      	movs	r0, #2
 8000770:	f000 fcc6 	bl	8001100 <velociraptor_setmotorspeed>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	velociraptor_main_loop();
 8000774:	f000 fef2 	bl	800155c <velociraptor_main_loop>
 8000778:	e7fc      	b.n	8000774 <main+0x40>

0800077a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b094      	sub	sp, #80	; 0x50
 800077e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000780:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000784:	2228      	movs	r2, #40	; 0x28
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fd01 	bl	8004190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	2302      	movs	r3, #2
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 80007c6:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 f90d 	bl	80029f0 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007dc:	f000 fa6c 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2102      	movs	r1, #2
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fb78 	bl	8002ef4 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x94>
  {
    Error_Handler();
 800080a:	f000 fa55 	bl	8000cb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800080e:	2302      	movs	r3, #2
 8000810:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000816:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fcf8 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000826:	f000 fa47 	bl	8000cb8 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	; 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_ADC1_Init+0x94>)
 8000846:	4a21      	ldr	r2, [pc, #132]	; (80008cc <MX_ADC1_Init+0x98>)
 8000848:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_ADC1_Init+0x94>)
 800084c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000850:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_ADC1_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_ADC1_Init+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_ADC1_Init+0x94>)
 8000860:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000864:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_ADC1_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_ADC1_Init+0x94>)
 800086e:	2202      	movs	r2, #2
 8000870:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000872:	4815      	ldr	r0, [pc, #84]	; (80008c8 <MX_ADC1_Init+0x94>)
 8000874:	f000 ff86 	bl	8001784 <HAL_ADC_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800087e:	f000 fa1b 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000882:	2308      	movs	r3, #8
 8000884:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000886:	2301      	movs	r3, #1
 8000888:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_ADC1_Init+0x94>)
 8000894:	f001 fa02 	bl	8001c9c <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 fa0b 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008a2:	2309      	movs	r3, #9
 80008a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_ADC1_Init+0x94>)
 80008b0:	f001 f9f4 	bl	8001c9c <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80008ba:	f000 f9fd 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000028 	.word	0x20000028
 80008cc:	40012400 	.word	0x40012400

080008d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_ADC2_Init+0x74>)
 80008e2:	4a19      	ldr	r2, [pc, #100]	; (8000948 <MX_ADC2_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_ADC2_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_ADC2_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_ADC2_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_ADC2_Init+0x74>)
 80008fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_ADC2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_ADC2_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_ADC2_Init+0x74>)
 800090e:	f000 ff39 	bl	8001784 <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000918:	f000 f9ce 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000920:	2301      	movs	r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_ADC2_Init+0x74>)
 800092e:	f001 f9b5 	bl	8001c9c <HAL_ADC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000938:	f000 f9be 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000058 	.word	0x20000058
 8000948:	40012800 	.word	0x40012800

0800094c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_TIM3_Init+0x94>)
 800096a:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <MX_TIM3_Init+0x98>)
 800096c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_TIM3_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_TIM3_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1080-1;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_TIM3_Init+0x94>)
 800097c:	f240 4237 	movw	r2, #1079	; 0x437
 8000980:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_TIM3_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_TIM3_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <MX_TIM3_Init+0x94>)
 8000990:	f002 fcf4 	bl	800337c <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800099a:	f000 f98d 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_TIM3_Init+0x94>)
 80009ac:	f002 ff3c 	bl	8003828 <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 f97f 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009ba:	2320      	movs	r3, #32
 80009bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_TIM3_Init+0x94>)
 80009c8:	f003 faa6 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009d2:	f000 f971 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000cc 	.word	0x200000cc
 80009e4:	40000400 	.word	0x40000400

080009e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08e      	sub	sp, #56	; 0x38
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a18:	4b3d      	ldr	r3, [pc, #244]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000a1a:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <MX_TIM4_Init+0x12c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 720-1;
 8000a2a:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000a2c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000a30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a38:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a3e:	4834      	ldr	r0, [pc, #208]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000a40:	f002 fc9c 	bl	800337c <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a4a:	f000 f935 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	482d      	ldr	r0, [pc, #180]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000a5c:	f002 fee4 	bl	8003828 <HAL_TIM_ConfigClockSource>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a66:	f000 f927 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a6a:	4829      	ldr	r0, [pc, #164]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000a6c:	f002 fd20 	bl	80034b0 <HAL_TIM_PWM_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000a76:	f000 f91f 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	4619      	mov	r1, r3
 8000a88:	4821      	ldr	r0, [pc, #132]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000a8a:	f003 fa45 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a94:	f000 f910 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a98:	2360      	movs	r3, #96	; 0x60
 8000a9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	4818      	ldr	r0, [pc, #96]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000ab0:	f002 fdf8 	bl	80036a4 <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000aba:	f000 f8fd 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4812      	ldr	r0, [pc, #72]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000ac6:	f002 fded 	bl	80036a4 <HAL_TIM_PWM_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000ad0:	f000 f8f2 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000adc:	f002 fde2 	bl	80036a4 <HAL_TIM_PWM_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000ae6:	f000 f8e7 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	220c      	movs	r2, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000af2:	f002 fdd7 	bl	80036a4 <HAL_TIM_PWM_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000afc:	f000 f8dc 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_TIM4_Init+0x128>)
 8000b02:	f000 f9d7 	bl	8000eb4 <HAL_TIM_MspPostInit>

}
 8000b06:	bf00      	nop
 8000b08:	3738      	adds	r7, #56	; 0x38
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000114 	.word	0x20000114
 8000b14:	40000800 	.word	0x40000800

08000b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_USART1_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b50:	f003 fa40 	bl	8003fd4 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b5a:	f000 f8ad 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000015c 	.word	0x2000015c
 8000b68:	40013800 	.word	0x40013800

08000b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_DMA_Init+0x38>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <MX_DMA_Init+0x38>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6153      	str	r3, [r2, #20]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_DMA_Init+0x38>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	200b      	movs	r0, #11
 8000b90:	f001 fb55 	bl	800223e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b94:	200b      	movs	r0, #11
 8000b96:	f001 fb6e 	bl	8002276 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a39      	ldr	r2, [pc, #228]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000bda:	f043 0320 	orr.w	r3, r3, #32
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0320 	and.w	r3, r3, #32
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a2d      	ldr	r2, [pc, #180]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_GPIO_Init+0x100>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c22:	4822      	ldr	r0, [pc, #136]	; (8000cac <MX_GPIO_Init+0x104>)
 8000c24:	f001 fecb 	bl	80029be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	211e      	movs	r1, #30
 8000c2c:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000c2e:	f001 fec6 	bl	80029be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4818      	ldr	r0, [pc, #96]	; (8000cac <MX_GPIO_Init+0x104>)
 8000c4c:	f001 fd1c 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c50:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	4811      	ldr	r0, [pc, #68]	; (8000cac <MX_GPIO_Init+0x104>)
 8000c66:	f001 fd0f 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000c6a:	231e      	movs	r3, #30
 8000c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000c82:	f001 fd01 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_GPIO_Init+0x10c>)
 8000c9c:	f001 fcf4 	bl	8002688 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40011000 	.word	0x40011000
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_MspInit+0x5c>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <HAL_MspInit+0x5c>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x5c>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_MspInit+0x5c>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_MspInit+0x60>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_MspInit+0x60>)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000

08000d28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0318 	add.w	r3, r7, #24
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a3c      	ldr	r2, [pc, #240]	; (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d14a      	bne.n	8000dde <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a3a      	ldr	r2, [pc, #232]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a34      	ldr	r2, [pc, #208]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0318 	add.w	r3, r7, #24
 8000d84:	4619      	mov	r1, r3
 8000d86:	482d      	ldr	r0, [pc, #180]	; (8000e3c <HAL_ADC_MspInit+0x114>)
 8000d88:	f001 fc7e 	bl	8002688 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d8c:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <HAL_ADC_MspInit+0x118>)
 8000d8e:	4a2d      	ldr	r2, [pc, #180]	; (8000e44 <HAL_ADC_MspInit+0x11c>)
 8000d90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <HAL_ADC_MspInit+0x118>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <HAL_ADC_MspInit+0x118>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <HAL_ADC_MspInit+0x118>)
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <HAL_ADC_MspInit+0x118>)
 8000da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000daa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <HAL_ADC_MspInit+0x118>)
 8000dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <HAL_ADC_MspInit+0x118>)
 8000db6:	2220      	movs	r2, #32
 8000db8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_ADC_MspInit+0x118>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dc0:	481f      	ldr	r0, [pc, #124]	; (8000e40 <HAL_ADC_MspInit+0x118>)
 8000dc2:	f001 fa73 	bl	80022ac <HAL_DMA_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000dcc:	f7ff ff74 	bl	8000cb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <HAL_ADC_MspInit+0x118>)
 8000dd4:	621a      	str	r2, [r3, #32]
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <HAL_ADC_MspInit+0x118>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ddc:	e026      	b.n	8000e2c <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <HAL_ADC_MspInit+0x120>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d121      	bne.n	8000e2c <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_ADC_MspInit+0x110>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4809      	ldr	r0, [pc, #36]	; (8000e4c <HAL_ADC_MspInit+0x124>)
 8000e28:	f001 fc2e 	bl	8002688 <HAL_GPIO_Init>
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40012400 	.word	0x40012400
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010c00 	.word	0x40010c00
 8000e40:	20000088 	.word	0x20000088
 8000e44:	40020008 	.word	0x40020008
 8000e48:	40012800 	.word	0x40012800
 8000e4c:	40010800 	.word	0x40010800

08000e50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <HAL_TIM_Base_MspInit+0x58>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d10c      	bne.n	8000e7c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_TIM_Base_MspInit+0x5c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a11      	ldr	r2, [pc, #68]	; (8000eac <HAL_TIM_Base_MspInit+0x5c>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_TIM_Base_MspInit+0x5c>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e7a:	e010      	b.n	8000e9e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_TIM_Base_MspInit+0x60>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d10b      	bne.n	8000e9e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_TIM_Base_MspInit+0x5c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_TIM_Base_MspInit+0x5c>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_TIM_Base_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40000800 	.word	0x40000800

08000eb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <HAL_TIM_MspPostInit+0x5c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d118      	bne.n	8000f06 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_TIM_MspPostInit+0x60>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_TIM_MspPostInit+0x60>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_TIM_MspPostInit+0x60>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0308 	and.w	r3, r3, #8
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000eec:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ef0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <HAL_TIM_MspPostInit+0x64>)
 8000f02:	f001 fbc1 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40000800 	.word	0x40000800
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010c00 	.word	0x40010c00

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <HAL_UART_MspInit+0x8c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d131      	bne.n	8000fa0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_UART_MspInit+0x90>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <HAL_UART_MspInit+0x94>)
 8000f82:	f001 fb81 	bl	8002688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <HAL_UART_MspInit+0x94>)
 8000f9c:	f001 fb74 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40013800 	.word	0x40013800
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40010800 	.word	0x40010800

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffa:	f000 fba7 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  velociraptor_sensor_handler();
 8000ffe:	f000 f981 	bl	8001304 <velociraptor_sensor_handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <DMA1_Channel1_IRQHandler+0x14>)
 800100e:	f001 fa07 	bl	8002420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  velociraptor_encoder_handler();
 8001012:	f000 fa0b 	bl	800142c <velociraptor_encoder_handler>
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000088 	.word	0x20000088

08001020 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <velociraptor_start>:
uint32_t prev_dwt_tick = 0;
uint32_t cycle_dwt_ticks = 0;
uint32_t isr_dwt_ticks = 0;

void velociraptor_start(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001032:	2100      	movs	r1, #0
 8001034:	482b      	ldr	r0, [pc, #172]	; (80010e4 <velociraptor_start+0xb8>)
 8001036:	f002 fa93 	bl	8003560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800103a:	2104      	movs	r1, #4
 800103c:	4829      	ldr	r0, [pc, #164]	; (80010e4 <velociraptor_start+0xb8>)
 800103e:	f002 fa8f 	bl	8003560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001042:	2108      	movs	r1, #8
 8001044:	4827      	ldr	r0, [pc, #156]	; (80010e4 <velociraptor_start+0xb8>)
 8001046:	f002 fa8b 	bl	8003560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800104a:	210c      	movs	r1, #12
 800104c:	4825      	ldr	r0, [pc, #148]	; (80010e4 <velociraptor_start+0xb8>)
 800104e:	f002 fa87 	bl	8003560 <HAL_TIM_PWM_Start>

	for(uint8_t i = 0; i < 2; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	e014      	b.n	8001082 <velociraptor_start+0x56>
	{
		encoders_data.step_ticks[i] = 0;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <velociraptor_start+0xbc>)
 800105c:	3304      	adds	r3, #4
 800105e:	2100      	movs	r1, #0
 8001060:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		encoders_data.prev_ticks[i] = 0;
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <velociraptor_start+0xbc>)
 8001068:	3302      	adds	r3, #2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
		encoders_data.prev_state[i] = 0;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <velociraptor_start+0xbc>)
 8001076:	4413      	add	r3, r2
 8001078:	2200      	movs	r2, #0
 800107a:	751a      	strb	r2, [r3, #20]
	for(uint8_t i = 0; i < 2; i++)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	3301      	adds	r3, #1
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d9e7      	bls.n	8001058 <velociraptor_start+0x2c>
	}

	encoders_data.upp_thr[0] = 2500;
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <velociraptor_start+0xbc>)
 800108a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800108e:	82da      	strh	r2, [r3, #22]
	encoders_data.lwr_thr[0] = 1500;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <velociraptor_start+0xbc>)
 8001092:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001096:	835a      	strh	r2, [r3, #26]

	encoders_data.upp_thr[1] = 1000;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <velociraptor_start+0xbc>)
 800109a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800109e:	831a      	strh	r2, [r3, #24]
	encoders_data.lwr_thr[1] = 750;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <velociraptor_start+0xbc>)
 80010a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80010a6:	839a      	strh	r2, [r3, #28]

	encoders_data.tick_cntr = 0;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <velociraptor_start+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) encoders_data.adc_read, 2);
 80010ae:	2202      	movs	r2, #2
 80010b0:	490e      	ldr	r1, [pc, #56]	; (80010ec <velociraptor_start+0xc0>)
 80010b2:	480f      	ldr	r0, [pc, #60]	; (80010f0 <velociraptor_start+0xc4>)
 80010b4:	f000 fcec 	bl	8001a90 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 80010b8:	480e      	ldr	r0, [pc, #56]	; (80010f4 <velociraptor_start+0xc8>)
 80010ba:	f002 f9af 	bl	800341c <HAL_TIM_Base_Start>

	CoreDebug -> DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <velociraptor_start+0xcc>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <velociraptor_start+0xcc>)
 80010c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010c8:	60d3      	str	r3, [r2, #12]
	DWT -> CYCCNT = 0;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <velociraptor_start+0xd0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
	DWT -> CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <velociraptor_start+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a09      	ldr	r2, [pc, #36]	; (80010fc <velociraptor_start+0xd0>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000114 	.word	0x20000114
 80010e8:	200001a4 	.word	0x200001a4
 80010ec:	200001a8 	.word	0x200001a8
 80010f0:	20000028 	.word	0x20000028
 80010f4:	200000cc 	.word	0x200000cc
 80010f8:	e000edf0 	.word	0xe000edf0
 80010fc:	e0001000 	.word	0xe0001000

08001100 <velociraptor_setmotorspeed>:

void velociraptor_setmotorspeed(uint8_t n_motor, float speed)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
	if (speed > 1.0f) speed = 1.0f;
 800110c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001110:	6838      	ldr	r0, [r7, #0]
 8001112:	f7ff fae5 	bl	80006e0 <__aeabi_fcmpgt>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <velociraptor_setmotorspeed+0x22>
 800111c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001120:	603b      	str	r3, [r7, #0]
	if (speed < -1.0f) speed = -1.0f;
 8001122:	4965      	ldr	r1, [pc, #404]	; (80012b8 <velociraptor_setmotorspeed+0x1b8>)
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f7ff fabd 	bl	80006a4 <__aeabi_fcmplt>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <velociraptor_setmotorspeed+0x34>
 8001130:	4b61      	ldr	r3, [pc, #388]	; (80012b8 <velociraptor_setmotorspeed+0x1b8>)
 8001132:	603b      	str	r3, [r7, #0]

	float lower_lim = (float) MIN_LOADED_SPEED / (float) MAXSPEED;
 8001134:	4b61      	ldr	r3, [pc, #388]	; (80012bc <velociraptor_setmotorspeed+0x1bc>)
 8001136:	60fb      	str	r3, [r7, #12]

	if (speed < 0.0f)
 8001138:	f04f 0100 	mov.w	r1, #0
 800113c:	6838      	ldr	r0, [r7, #0]
 800113e:	f7ff fab1 	bl	80006a4 <__aeabi_fcmplt>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d04a      	beq.n	80011de <velociraptor_setmotorspeed+0xde>
	{
		speed *= -1;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800114e:	603b      	str	r3, [r7, #0]
		speed *= (1.0f - lower_lim);
 8001150:	68f9      	ldr	r1, [r7, #12]
 8001152:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001156:	f7fe fffd 	bl	8000154 <__aeabi_fsub>
 800115a:	4603      	mov	r3, r0
 800115c:	4619      	mov	r1, r3
 800115e:	6838      	ldr	r0, [r7, #0]
 8001160:	f7ff f902 	bl	8000368 <__aeabi_fmul>
 8001164:	4603      	mov	r3, r0
 8001166:	603b      	str	r3, [r7, #0]
		speed += lower_lim;
 8001168:	68f9      	ldr	r1, [r7, #12]
 800116a:	6838      	ldr	r0, [r7, #0]
 800116c:	f7fe fff4 	bl	8000158 <__addsf3>
 8001170:	4603      	mov	r3, r0
 8001172:	603b      	str	r3, [r7, #0]
		speed *= (MAXSPEED - 1);
 8001174:	4952      	ldr	r1, [pc, #328]	; (80012c0 <velociraptor_setmotorspeed+0x1c0>)
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f7ff f8f6 	bl	8000368 <__aeabi_fmul>
 800117c:	4603      	mov	r3, r0
 800117e:	603b      	str	r3, [r7, #0]

		__HAL_TIM_SET_COMPARE(
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d008      	beq.n	8001198 <velociraptor_setmotorspeed+0x98>
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f7ff fab4 	bl	80006f4 <__aeabi_f2uiz>
 800118c:	4603      	mov	r3, r0
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	639a      	str	r2, [r3, #56]	; 0x38
 8001196:	e015      	b.n	80011c4 <velociraptor_setmotorspeed+0xc4>
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d109      	bne.n	80011b2 <velociraptor_setmotorspeed+0xb2>
 800119e:	6838      	ldr	r0, [r7, #0]
 80011a0:	f7ff faa8 	bl	80006f4 <__aeabi_f2uiz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b299      	uxth	r1, r3
 80011a8:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	460b      	mov	r3, r1
 80011ae:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011b0:	e008      	b.n	80011c4 <velociraptor_setmotorspeed+0xc4>
 80011b2:	6838      	ldr	r0, [r7, #0]
 80011b4:	f7ff fa9e 	bl	80006f4 <__aeabi_f2uiz>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b299      	uxth	r1, r3
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	460b      	mov	r3, r1
 80011c2:	6413      	str	r3, [r2, #64]	; 0x40
			&htim4,
			(n_motor == MOTOR_L) ? TIM_CHANNEL_3 : TIM_CHANNEL_2,
			(uint16_t) speed);
		__HAL_TIM_SET_COMPARE(
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d004      	beq.n	80011d4 <velociraptor_setmotorspeed+0xd4>
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_1 : TIM_CHANNEL_3, 0);
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_2 : TIM_CHANNEL_4, 0);
	}
}
 80011d2:	e06d      	b.n	80012b0 <velociraptor_setmotorspeed+0x1b0>
		__HAL_TIM_SET_COMPARE(
 80011d4:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80011dc:	e068      	b.n	80012b0 <velociraptor_setmotorspeed+0x1b0>
	else if (speed > 0.0f)
 80011de:	f04f 0100 	mov.w	r1, #0
 80011e2:	6838      	ldr	r0, [r7, #0]
 80011e4:	f7ff fa7c 	bl	80006e0 <__aeabi_fcmpgt>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d040      	beq.n	8001270 <velociraptor_setmotorspeed+0x170>
		speed *= (1.0f - lower_lim);
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80011f4:	f7fe ffae 	bl	8000154 <__aeabi_fsub>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4619      	mov	r1, r3
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f7ff f8b3 	bl	8000368 <__aeabi_fmul>
 8001202:	4603      	mov	r3, r0
 8001204:	603b      	str	r3, [r7, #0]
		speed += lower_lim;
 8001206:	68f9      	ldr	r1, [r7, #12]
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	f7fe ffa5 	bl	8000158 <__addsf3>
 800120e:	4603      	mov	r3, r0
 8001210:	603b      	str	r3, [r7, #0]
		speed *= (MAXSPEED - 1);
 8001212:	492b      	ldr	r1, [pc, #172]	; (80012c0 <velociraptor_setmotorspeed+0x1c0>)
 8001214:	6838      	ldr	r0, [r7, #0]
 8001216:	f7ff f8a7 	bl	8000368 <__aeabi_fmul>
 800121a:	4603      	mov	r3, r0
 800121c:	603b      	str	r3, [r7, #0]
		__HAL_TIM_SET_COMPARE(
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d008      	beq.n	8001236 <velociraptor_setmotorspeed+0x136>
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff fa65 	bl	80006f4 <__aeabi_f2uiz>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
 8001234:	e007      	b.n	8001246 <velociraptor_setmotorspeed+0x146>
 8001236:	6838      	ldr	r0, [r7, #0]
 8001238:	f7ff fa5c 	bl	80006f4 <__aeabi_f2uiz>
 800123c:	4603      	mov	r3, r0
 800123e:	b29a      	uxth	r2, r3
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d004      	beq.n	8001256 <velociraptor_setmotorspeed+0x156>
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001254:	e02c      	b.n	80012b0 <velociraptor_setmotorspeed+0x1b0>
		__HAL_TIM_SET_COMPARE(
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d104      	bne.n	8001266 <velociraptor_setmotorspeed+0x166>
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001264:	e024      	b.n	80012b0 <velociraptor_setmotorspeed+0x1b0>
		__HAL_TIM_SET_COMPARE(
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800126e:	e01f      	b.n	80012b0 <velociraptor_setmotorspeed+0x1b0>
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_1 : TIM_CHANNEL_3, 0);
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d104      	bne.n	8001280 <velociraptor_setmotorspeed+0x180>
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
 800127e:	e00b      	b.n	8001298 <velociraptor_setmotorspeed+0x198>
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d004      	beq.n	8001290 <velociraptor_setmotorspeed+0x190>
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	2300      	movs	r3, #0
 800128c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800128e:	e003      	b.n	8001298 <velociraptor_setmotorspeed+0x198>
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2300      	movs	r3, #0
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_2 : TIM_CHANNEL_4, 0);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d104      	bne.n	80012a8 <velociraptor_setmotorspeed+0x1a8>
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012a6:	e003      	b.n	80012b0 <velociraptor_setmotorspeed+0x1b0>
		__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_2 : TIM_CHANNEL_4, 0);
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <velociraptor_setmotorspeed+0x1c4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2200      	movs	r2, #0
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	bf800000 	.word	0xbf800000
 80012bc:	3ef8e38e 	.word	0x3ef8e38e
 80012c0:	4433c000 	.word	0x4433c000
 80012c4:	20000114 	.word	0x20000114

080012c8 <velociraptor_brake>:

void velociraptor_brake(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
	uint32_t aux_arrel = __HAL_TIM_GET_AUTORELOAD(&htim4);
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <velociraptor_brake+0x38>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, aux_arrel);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <velociraptor_brake+0x38>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, aux_arrel);
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <velociraptor_brake+0x38>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, aux_arrel);
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <velociraptor_brake+0x38>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, aux_arrel);
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <velociraptor_brake+0x38>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	20000114 	.word	0x20000114

08001304 <velociraptor_sensor_handler>:
uint8_t n_sensor = 0;
float error = 0, prev_error = 0;
#define SENSOR_THRESHOLD  1000

void velociraptor_sensor_handler(void)
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
	sensor_data[n_sensor] = HAL_ADC_GetValue(&hadc2);
 800130a:	4840      	ldr	r0, [pc, #256]	; (800140c <velociraptor_sensor_handler+0x108>)
 800130c:	f000 fc9e 	bl	8001c4c <HAL_ADC_GetValue>
 8001310:	4601      	mov	r1, r0
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <velociraptor_sensor_handler+0x10c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	b289      	uxth	r1, r1
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <velociraptor_sensor_handler+0x110>)
 800131c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	n_sensor += 1;
 8001320:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <velociraptor_sensor_handler+0x10c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <velociraptor_sensor_handler+0x10c>)
 800132a:	701a      	strb	r2, [r3, #0]
	n_sensor %= 8;
 800132c:	4b38      	ldr	r3, [pc, #224]	; (8001410 <velociraptor_sensor_handler+0x10c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <velociraptor_sensor_handler+0x10c>)
 8001338:	701a      	strb	r2, [r3, #0]

	if(!n_sensor)
 800133a:	4b35      	ldr	r3, [pc, #212]	; (8001410 <velociraptor_sensor_handler+0x10c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d13e      	bne.n	80013c0 <velociraptor_sensor_handler+0xbc>
	{
		int32_t active_sensors = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
		int32_t weighted_sum = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]

		prev_error = error;
 800134a:	4b33      	ldr	r3, [pc, #204]	; (8001418 <velociraptor_sensor_handler+0x114>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a33      	ldr	r2, [pc, #204]	; (800141c <velociraptor_sensor_handler+0x118>)
 8001350:	6013      	str	r3, [r2, #0]

		for(uint8_t n = 0; n < 8; n++)
 8001352:	2300      	movs	r3, #0
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	e010      	b.n	800137a <velociraptor_sensor_handler+0x76>
		{
			if(sensor_data[n] > SENSOR_THRESHOLD)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4a2e      	ldr	r2, [pc, #184]	; (8001414 <velociraptor_sensor_handler+0x110>)
 800135c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001364:	d906      	bls.n	8001374 <velociraptor_sensor_handler+0x70>
			{
				active_sensors += 1;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3301      	adds	r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
				weighted_sum += n;
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	4413      	add	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
		for(uint8_t n = 0; n < 8; n++)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	3301      	adds	r3, #1
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b07      	cmp	r3, #7
 800137e:	d9eb      	bls.n	8001358 <velociraptor_sensor_handler+0x54>
			}
		}

		if(active_sensors > 0)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	dd19      	ble.n	80013ba <velociraptor_sensor_handler+0xb6>
		{
			error = (float) weighted_sum / (float) active_sensors;
 8001386:	68b8      	ldr	r0, [r7, #8]
 8001388:	f7fe ff9a 	bl	80002c0 <__aeabi_i2f>
 800138c:	4604      	mov	r4, r0
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7fe ff96 	bl	80002c0 <__aeabi_i2f>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff f899 	bl	80004d0 <__aeabi_fdiv>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <velociraptor_sensor_handler+0x114>)
 80013a4:	601a      	str	r2, [r3, #0]
			error -= 3.5f;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <velociraptor_sensor_handler+0x114>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	491d      	ldr	r1, [pc, #116]	; (8001420 <velociraptor_sensor_handler+0x11c>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe fed1 	bl	8000154 <__aeabi_fsub>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <velociraptor_sensor_handler+0x114>)
 80013b8:	601a      	str	r2, [r3, #0]
		}

		new_data_flag = 1;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <velociraptor_sensor_handler+0x120>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, n_sensor & 1);
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <velociraptor_sensor_handler+0x10c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	2102      	movs	r1, #2
 80013ce:	4816      	ldr	r0, [pc, #88]	; (8001428 <velociraptor_sensor_handler+0x124>)
 80013d0:	f001 faf5 	bl	80029be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, n_sensor & 2);
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <velociraptor_sensor_handler+0x10c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	2104      	movs	r1, #4
 80013e2:	4811      	ldr	r0, [pc, #68]	; (8001428 <velociraptor_sensor_handler+0x124>)
 80013e4:	f001 faeb 	bl	80029be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, n_sensor & 4);
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <velociraptor_sensor_handler+0x10c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	2108      	movs	r1, #8
 80013f6:	480c      	ldr	r0, [pc, #48]	; (8001428 <velociraptor_sensor_handler+0x124>)
 80013f8:	f001 fae1 	bl	80029be <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc2);
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <velociraptor_sensor_handler+0x108>)
 80013fe:	f000 fa99 	bl	8001934 <HAL_ADC_Start>
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
 800140a:	bf00      	nop
 800140c:	20000058 	.word	0x20000058
 8001410:	200001f4 	.word	0x200001f4
 8001414:	200001d4 	.word	0x200001d4
 8001418:	200001f8 	.word	0x200001f8
 800141c:	200001fc 	.word	0x200001fc
 8001420:	40600000 	.word	0x40600000
 8001424:	200001c5 	.word	0x200001c5
 8001428:	40010800 	.word	0x40010800

0800142c <velociraptor_encoder_handler>:

void velociraptor_encoder_handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
	uint32_t dwt_start_tick = DWT -> CYCCNT;
 8001432:	4b45      	ldr	r3, [pc, #276]	; (8001548 <velociraptor_encoder_handler+0x11c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	60bb      	str	r3, [r7, #8]

	for(uint8_t i = 0; i < 2; i++)
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e065      	b.n	800150a <velociraptor_encoder_handler+0xde>
	{
		if(encoders_data.prev_state[i] == 0)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	4a42      	ldr	r2, [pc, #264]	; (800154c <velociraptor_encoder_handler+0x120>)
 8001442:	4413      	add	r3, r2
 8001444:	7d1b      	ldrb	r3, [r3, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d14a      	bne.n	80014e0 <velociraptor_encoder_handler+0xb4>
		{
			if(encoders_data.adc_read[i] > encoders_data.upp_thr[i])
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	4a3f      	ldr	r2, [pc, #252]	; (800154c <velociraptor_encoder_handler+0x120>)
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	889a      	ldrh	r2, [r3, #4]
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	493d      	ldr	r1, [pc, #244]	; (800154c <velociraptor_encoder_handler+0x120>)
 8001458:	3308      	adds	r3, #8
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	440b      	add	r3, r1
 800145e:	88db      	ldrh	r3, [r3, #6]
 8001460:	429a      	cmp	r2, r3
 8001462:	d94f      	bls.n	8001504 <velociraptor_encoder_handler+0xd8>
			{
				//flanco positivo
				encoders_data.prev_state[i] = 1;
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	4a39      	ldr	r2, [pc, #228]	; (800154c <velociraptor_encoder_handler+0x120>)
 8001468:	4413      	add	r3, r2
 800146a:	2201      	movs	r2, #1
 800146c:	751a      	strb	r2, [r3, #20]

				if(encoders_data.prev_ticks[i] > encoders_data.tick_cntr)
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	4a36      	ldr	r2, [pc, #216]	; (800154c <velociraptor_encoder_handler+0x120>)
 8001472:	3302      	adds	r3, #2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <velociraptor_encoder_handler+0x120>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d914      	bls.n	80014ac <velociraptor_encoder_handler+0x80>
				{
					uint32_t aux = 0xFFFFFFFF - encoders_data.prev_ticks[i];
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	4a31      	ldr	r2, [pc, #196]	; (800154c <velociraptor_encoder_handler+0x120>)
 8001486:	3302      	adds	r3, #2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	43db      	mvns	r3, r3
 8001490:	607b      	str	r3, [r7, #4]
					encoders_data.step_ticks[i] = encoders_data.tick_cntr + aux;
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <velociraptor_encoder_handler+0x120>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b299      	uxth	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	b29a      	uxth	r2, r3
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	440a      	add	r2, r1
 80014a0:	b291      	uxth	r1, r2
 80014a2:	4a2a      	ldr	r2, [pc, #168]	; (800154c <velociraptor_encoder_handler+0x120>)
 80014a4:	3304      	adds	r3, #4
 80014a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014aa:	e010      	b.n	80014ce <velociraptor_encoder_handler+0xa2>
				}
				else
				{
					encoders_data.step_ticks[i] = encoders_data.tick_cntr - encoders_data.prev_ticks[i];
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <velociraptor_encoder_handler+0x120>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b299      	uxth	r1, r3
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	4a25      	ldr	r2, [pc, #148]	; (800154c <velociraptor_encoder_handler+0x120>)
 80014b6:	3302      	adds	r3, #2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	1a8a      	subs	r2, r1, r2
 80014c4:	b291      	uxth	r1, r2
 80014c6:	4a21      	ldr	r2, [pc, #132]	; (800154c <velociraptor_encoder_handler+0x120>)
 80014c8:	3304      	adds	r3, #4
 80014ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}

				encoders_data.prev_ticks[i] = encoders_data.tick_cntr;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	4a1e      	ldr	r2, [pc, #120]	; (800154c <velociraptor_encoder_handler+0x120>)
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	491d      	ldr	r1, [pc, #116]	; (800154c <velociraptor_encoder_handler+0x120>)
 80014d6:	3302      	adds	r3, #2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	e011      	b.n	8001504 <velociraptor_encoder_handler+0xd8>
			}
		}
		else
		{
			if(encoders_data.adc_read[i] < encoders_data.lwr_thr[i])
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	4a1a      	ldr	r2, [pc, #104]	; (800154c <velociraptor_encoder_handler+0x120>)
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	889a      	ldrh	r2, [r3, #4]
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	4917      	ldr	r1, [pc, #92]	; (800154c <velociraptor_encoder_handler+0x120>)
 80014ee:	330c      	adds	r3, #12
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	440b      	add	r3, r1
 80014f4:	885b      	ldrh	r3, [r3, #2]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d204      	bcs.n	8001504 <velociraptor_encoder_handler+0xd8>
			{
				//flanco negativo
				encoders_data.prev_state[i] = 0;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	4a13      	ldr	r2, [pc, #76]	; (800154c <velociraptor_encoder_handler+0x120>)
 80014fe:	4413      	add	r3, r2
 8001500:	2200      	movs	r2, #0
 8001502:	751a      	strb	r2, [r3, #20]
	for(uint8_t i = 0; i < 2; i++)
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	3301      	adds	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d996      	bls.n	800143e <velociraptor_encoder_handler+0x12>
			}
		}
	}
	encoders_data.tick_cntr++;
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <velociraptor_encoder_handler+0x120>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	4a0d      	ldr	r2, [pc, #52]	; (800154c <velociraptor_encoder_handler+0x120>)
 8001518:	6013      	str	r3, [r2, #0]

	isr_dwt_ticks = DWT -> CYCCNT - dwt_start_tick;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <velociraptor_encoder_handler+0x11c>)
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <velociraptor_encoder_handler+0x124>)
 8001524:	6013      	str	r3, [r2, #0]
	cycle_dwt_ticks = DWT -> CYCCNT - prev_dwt_tick;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <velociraptor_encoder_handler+0x11c>)
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <velociraptor_encoder_handler+0x128>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	4a09      	ldr	r2, [pc, #36]	; (8001558 <velociraptor_encoder_handler+0x12c>)
 8001532:	6013      	str	r3, [r2, #0]
	prev_dwt_tick = DWT -> CYCCNT;
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <velociraptor_encoder_handler+0x11c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a06      	ldr	r2, [pc, #24]	; (8001554 <velociraptor_encoder_handler+0x128>)
 800153a:	6013      	str	r3, [r2, #0]

}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e0001000 	.word	0xe0001000
 800154c:	200001a4 	.word	0x200001a4
 8001550:	200001d0 	.word	0x200001d0
 8001554:	200001c8 	.word	0x200001c8
 8001558:	200001cc 	.word	0x200001cc

0800155c <velociraptor_main_loop>:

float base_speed = 0.75f;
float max_error = 0.5f;

void velociraptor_main_loop(void)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
	switch(velo_mde_state)
 8001562:	4b3e      	ldr	r3, [pc, #248]	; (800165c <velociraptor_main_loop+0x100>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <velociraptor_main_loop+0x14>
 800156a:	2b01      	cmp	r3, #1
 800156c:	d016      	beq.n	800159c <velociraptor_main_loop+0x40>
 800156e:	e06a      	b.n	8001646 <velociraptor_main_loop+0xea>
	{
	case STOPPED:
		velociraptor_setmotorspeed(MOTOR_L, 0);
 8001570:	f04f 0100 	mov.w	r1, #0
 8001574:	2001      	movs	r0, #1
 8001576:	f7ff fdc3 	bl	8001100 <velociraptor_setmotorspeed>
		velociraptor_setmotorspeed(MOTOR_R, 0);
 800157a:	f04f 0100 	mov.w	r1, #0
 800157e:	2002      	movs	r0, #2
 8001580:	f7ff fdbe 	bl	8001100 <velociraptor_setmotorspeed>

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET)
 8001584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001588:	4835      	ldr	r0, [pc, #212]	; (8001660 <velociraptor_main_loop+0x104>)
 800158a:	f001 fa01 	bl	8002990 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d15c      	bne.n	800164e <velociraptor_main_loop+0xf2>
		{
			velo_mde_state = RUNNING;
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <velociraptor_main_loop+0x100>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
		}
		break;
 800159a:	e058      	b.n	800164e <velociraptor_main_loop+0xf2>

	case RUNNING:
		if(new_data_flag)
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <velociraptor_main_loop+0x108>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d042      	beq.n	800162a <velociraptor_main_loop+0xce>
		{
			new_data_flag = 0;
 80015a4:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <velociraptor_main_loop+0x108>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
			float local_base_speed = 1.0f - (error / 3.5f * -1 * (error < 0)) * 0.01f;
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <velociraptor_main_loop+0x10c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	492f      	ldr	r1, [pc, #188]	; (800166c <velociraptor_main_loop+0x110>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff8d 	bl	80004d0 <__aeabi_fdiv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461c      	mov	r4, r3
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <velociraptor_main_loop+0x10c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f04f 0100 	mov.w	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f86e 	bl	80006a4 <__aeabi_fcmplt>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <velociraptor_main_loop+0x78>
 80015ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015d2:	e001      	b.n	80015d8 <velociraptor_main_loop+0x7c>
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	4621      	mov	r1, r4
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe fec4 	bl	8000368 <__aeabi_fmul>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4923      	ldr	r1, [pc, #140]	; (8001670 <velociraptor_main_loop+0x114>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe febf 	bl	8000368 <__aeabi_fmul>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe fdb1 	bl	8000158 <__addsf3>
 80015f6:	4603      	mov	r3, r0
 80015f8:	60fb      	str	r3, [r7, #12]
			float vel_l = local_base_speed + error;
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <velociraptor_main_loop+0x10c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4619      	mov	r1, r3
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7fe fda9 	bl	8000158 <__addsf3>
 8001606:	4603      	mov	r3, r0
 8001608:	60bb      	str	r3, [r7, #8]
			float vel_r = local_base_speed - error;
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <velociraptor_main_loop+0x10c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7fe fd9f 	bl	8000154 <__aeabi_fsub>
 8001616:	4603      	mov	r3, r0
 8001618:	607b      	str	r3, [r7, #4]
			velociraptor_setmotorspeed(MOTOR_L, vel_l);
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff fd6f 	bl	8001100 <velociraptor_setmotorspeed>
			velociraptor_setmotorspeed(MOTOR_R, vel_r);
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	2002      	movs	r0, #2
 8001626:	f7ff fd6b 	bl	8001100 <velociraptor_setmotorspeed>
		}

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET)
 800162a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <velociraptor_main_loop+0x104>)
 8001630:	f001 f9ae 	bl	8002990 <HAL_GPIO_ReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10b      	bne.n	8001652 <velociraptor_main_loop+0xf6>
		{
			velo_mde_state = STOPPED;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <velociraptor_main_loop+0x100>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
			velociraptor_brake();
 8001640:	f7ff fe42 	bl	80012c8 <velociraptor_brake>
		}

		break;
 8001644:	e005      	b.n	8001652 <velociraptor_main_loop+0xf6>

	default:
		velo_mde_state = STOPPED;
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <velociraptor_main_loop+0x100>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
	}
}
 800164c:	e002      	b.n	8001654 <velociraptor_main_loop+0xf8>
		break;
 800164e:	bf00      	nop
 8001650:	e000      	b.n	8001654 <velociraptor_main_loop+0xf8>
		break;
 8001652:	bf00      	nop
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}
 800165c:	200001c4 	.word	0x200001c4
 8001660:	40011000 	.word	0x40011000
 8001664:	200001c5 	.word	0x200001c5
 8001668:	200001f8 	.word	0x200001f8
 800166c:	40600000 	.word	0x40600000
 8001670:	3c23d70a 	.word	0x3c23d70a

08001674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001674:	f7ff fcd4 	bl	8001020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480b      	ldr	r0, [pc, #44]	; (80016a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800167a:	490c      	ldr	r1, [pc, #48]	; (80016ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800167c:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001690:	4c09      	ldr	r4, [pc, #36]	; (80016b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169e:	f002 fd7f 	bl	80041a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016a2:	f7ff f847 	bl	8000734 <main>
  bx lr
 80016a6:	4770      	bx	lr
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016b0:	08004234 	.word	0x08004234
  ldr r2, =_sbss
 80016b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016b8:	20000204 	.word	0x20000204

080016bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC1_2_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x28>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x28>)
 80016ca:	f043 0310 	orr.w	r3, r3, #16
 80016ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 fda9 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	200f      	movs	r0, #15
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff faf2 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40022000 	.word	0x40022000

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fdc1 	bl	8002292 <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001728:	f000 fd89 	bl	800223e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000008 	.word	0x20000008
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_IncTick+0x1c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_IncTick+0x20>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a03      	ldr	r2, [pc, #12]	; (800176c <HAL_IncTick+0x20>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	20000008 	.word	0x20000008
 800176c:	20000200 	.word	0x20000200

08001770 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <HAL_GetTick+0x10>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000200 	.word	0x20000200

08001784 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0be      	b.n	8001924 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fab0 	bl	8000d28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 fbb9 	bl	8001f40 <ADC_ConversionStop_Disable>
 80017ce:	4603      	mov	r3, r0
 80017d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 8099 	bne.w	8001912 <HAL_ADC_Init+0x18e>
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 8095 	bne.w	8001912 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017f0:	f023 0302 	bic.w	r3, r3, #2
 80017f4:	f043 0202 	orr.w	r2, r3, #2
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001804:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7b1b      	ldrb	r3, [r3, #12]
 800180a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800180c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4313      	orrs	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800181c:	d003      	beq.n	8001826 <HAL_ADC_Init+0xa2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <HAL_ADC_Init+0xa8>
 8001826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182a:	e000      	b.n	800182e <HAL_ADC_Init+0xaa>
 800182c:	2300      	movs	r3, #0
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7d1b      	ldrb	r3, [r3, #20]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d119      	bne.n	8001870 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7b1b      	ldrb	r3, [r3, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	3b01      	subs	r3, #1
 800184a:	035a      	lsls	r2, r3, #13
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	e00b      	b.n	8001870 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f043 0220 	orr.w	r2, r3, #32
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	4b28      	ldr	r3, [pc, #160]	; (800192c <HAL_ADC_Init+0x1a8>)
 800188c:	4013      	ands	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6812      	ldr	r2, [r2, #0]
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	430b      	orrs	r3, r1
 8001896:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a0:	d003      	beq.n	80018aa <HAL_ADC_Init+0x126>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d104      	bne.n	80018b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	051b      	lsls	r3, r3, #20
 80018b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_ADC_Init+0x1ac>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d10b      	bne.n	80018f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	f023 0303 	bic.w	r3, r3, #3
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018ee:	e018      	b.n	8001922 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	f023 0312 	bic.w	r3, r3, #18
 80018f8:	f043 0210 	orr.w	r2, r3, #16
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	f043 0201 	orr.w	r2, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001910:	e007      	b.n	8001922 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	f043 0210 	orr.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001922:	7dfb      	ldrb	r3, [r7, #23]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	ffe1f7fd 	.word	0xffe1f7fd
 8001930:	ff1f0efe 	.word	0xff1f0efe

08001934 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_ADC_Start+0x1a>
 800194a:	2302      	movs	r3, #2
 800194c:	e098      	b.n	8001a80 <HAL_ADC_Start+0x14c>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fa98 	bl	8001e8c <ADC_Enable>
 800195c:	4603      	mov	r3, r0
 800195e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 8087 	bne.w	8001a76 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a41      	ldr	r2, [pc, #260]	; (8001a88 <HAL_ADC_Start+0x154>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d105      	bne.n	8001992 <HAL_ADC_Start+0x5e>
 8001986:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_ADC_Start+0x158>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d115      	bne.n	80019be <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d026      	beq.n	80019fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019bc:	e01d      	b.n	80019fa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <HAL_ADC_Start+0x158>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d004      	beq.n	80019de <HAL_ADC_Start+0xaa>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2b      	ldr	r2, [pc, #172]	; (8001a88 <HAL_ADC_Start+0x154>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10d      	bne.n	80019fa <HAL_ADC_Start+0xc6>
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_ADC_Start+0x158>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	f023 0206 	bic.w	r2, r3, #6
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a12:	e002      	b.n	8001a1a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f06f 0202 	mvn.w	r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a3a:	d113      	bne.n	8001a64 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a40:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_ADC_Start+0x154>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d105      	bne.n	8001a52 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_ADC_Start+0x158>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d108      	bne.n	8001a64 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	e00c      	b.n	8001a7e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	e003      	b.n	8001a7e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40012800 	.word	0x40012800
 8001a8c:	40012400 	.word	0x40012400

08001a90 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a64      	ldr	r2, [pc, #400]	; (8001c38 <HAL_ADC_Start_DMA+0x1a8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d004      	beq.n	8001ab4 <HAL_ADC_Start_DMA+0x24>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a63      	ldr	r2, [pc, #396]	; (8001c3c <HAL_ADC_Start_DMA+0x1ac>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d106      	bne.n	8001ac2 <HAL_ADC_Start_DMA+0x32>
 8001ab4:	4b60      	ldr	r3, [pc, #384]	; (8001c38 <HAL_ADC_Start_DMA+0x1a8>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 80b3 	bne.w	8001c28 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_Start_DMA+0x40>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e0ae      	b.n	8001c2e <HAL_ADC_Start_DMA+0x19e>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f9d7 	bl	8001e8c <ADC_Enable>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f040 809a 	bne.w	8001c1e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a4e      	ldr	r2, [pc, #312]	; (8001c3c <HAL_ADC_Start_DMA+0x1ac>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d105      	bne.n	8001b14 <HAL_ADC_Start_DMA+0x84>
 8001b08:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <HAL_ADC_Start_DMA+0x1a8>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d115      	bne.n	8001b40 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d026      	beq.n	8001b7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b3e:	e01d      	b.n	8001b7c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a39      	ldr	r2, [pc, #228]	; (8001c38 <HAL_ADC_Start_DMA+0x1a8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_ADC_Start_DMA+0xd0>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a38      	ldr	r2, [pc, #224]	; (8001c3c <HAL_ADC_Start_DMA+0x1ac>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d10d      	bne.n	8001b7c <HAL_ADC_Start_DMA+0xec>
 8001b60:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <HAL_ADC_Start_DMA+0x1a8>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f023 0206 	bic.w	r2, r3, #6
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b94:	e002      	b.n	8001b9c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a25      	ldr	r2, [pc, #148]	; (8001c40 <HAL_ADC_Start_DMA+0x1b0>)
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <HAL_ADC_Start_DMA+0x1b4>)
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <HAL_ADC_Start_DMA+0x1b8>)
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0202 	mvn.w	r2, #2
 8001bc4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a18      	ldr	r0, [r3, #32]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	334c      	adds	r3, #76	; 0x4c
 8001be0:	4619      	mov	r1, r3
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f000 fbbb 	bl	8002360 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bf4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bf8:	d108      	bne.n	8001c0c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001c08:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c0a:	e00f      	b.n	8001c2c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c1a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c1c:	e006      	b.n	8001c2c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001c26:	e001      	b.n	8001c2c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40012400 	.word	0x40012400
 8001c3c:	40012800 	.word	0x40012800
 8001c40:	08001fc3 	.word	0x08001fc3
 8001c44:	0800203f 	.word	0x0800203f
 8001c48:	0800205b 	.word	0x0800205b

08001c4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x20>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e0dc      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x1da>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b06      	cmp	r3, #6
 8001cca:	d81c      	bhi.n	8001d06 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b05      	subs	r3, #5
 8001cde:	221f      	movs	r2, #31
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4019      	ands	r1, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b05      	subs	r3, #5
 8001cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34
 8001d04:	e03c      	b.n	8001d80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d81c      	bhi.n	8001d48 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b23      	subs	r3, #35	; 0x23
 8001d20:	221f      	movs	r2, #31
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	4019      	ands	r1, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	3b23      	subs	r3, #35	; 0x23
 8001d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
 8001d46:	e01b      	b.n	8001d80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	3b41      	subs	r3, #65	; 0x41
 8001d5a:	221f      	movs	r2, #31
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4019      	ands	r1, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	3b41      	subs	r3, #65	; 0x41
 8001d74:	fa00 f203 	lsl.w	r2, r0, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b09      	cmp	r3, #9
 8001d86:	d91c      	bls.n	8001dc2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68d9      	ldr	r1, [r3, #12]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	3b1e      	subs	r3, #30
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4019      	ands	r1, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6898      	ldr	r0, [r3, #8]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	3b1e      	subs	r3, #30
 8001db4:	fa00 f203 	lsl.w	r2, r0, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	e019      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6919      	ldr	r1, [r3, #16]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4019      	ands	r1, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6898      	ldr	r0, [r3, #8]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	fa00 f203 	lsl.w	r2, r0, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d003      	beq.n	8001e06 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e02:	2b11      	cmp	r3, #17
 8001e04:	d132      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d125      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d126      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e2c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d11a      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	0c9a      	lsrs	r2, r3, #18
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e4c:	e002      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f9      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x1b2>
 8001e5a:	e007      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	40012400 	.word	0x40012400
 8001e84:	20000000 	.word	0x20000000
 8001e88:	431bde83 	.word	0x431bde83

08001e8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d040      	beq.n	8001f2c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <ADC_Enable+0xac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <ADC_Enable+0xb0>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	0c9b      	lsrs	r3, r3, #18
 8001ec6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ec8:	e002      	b.n	8001ed0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f9      	bne.n	8001eca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ed6:	f7ff fc4b 	bl	8001770 <HAL_GetTick>
 8001eda:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001edc:	e01f      	b.n	8001f1e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ede:	f7ff fc47 	bl	8001770 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d918      	bls.n	8001f1e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d011      	beq.n	8001f1e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	f043 0210 	orr.w	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e007      	b.n	8001f2e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d1d8      	bne.n	8001ede <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	431bde83 	.word	0x431bde83

08001f40 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d12e      	bne.n	8001fb8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f6a:	f7ff fc01 	bl	8001770 <HAL_GetTick>
 8001f6e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f70:	e01b      	b.n	8001faa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f72:	f7ff fbfd 	bl	8001770 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d914      	bls.n	8001faa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d10d      	bne.n	8001faa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	f043 0210 	orr.w	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e007      	b.n	8001fba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d0dc      	beq.n	8001f72 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d127      	bne.n	800202c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ff2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ff6:	d115      	bne.n	8002024 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d111      	bne.n	8002024 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7ff fe1d 	bl	8001c64 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800202a:	e004      	b.n	8002036 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f7ff fe12 	bl	8001c76 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	f043 0204 	orr.w	r2, r3, #4
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7ff fe01 	bl	8001c88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4906      	ldr	r1, [pc, #24]	; (8002128 <__NVIC_EnableIRQ+0x34>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100

0800212c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db0a      	blt.n	8002156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <__NVIC_SetPriority+0x4c>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	440b      	add	r3, r1
 8002150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002154:	e00a      	b.n	800216c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4908      	ldr	r1, [pc, #32]	; (800217c <__NVIC_SetPriority+0x50>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3b04      	subs	r3, #4
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	440b      	add	r3, r1
 800216a:	761a      	strb	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	2b04      	cmp	r3, #4
 800219c:	bf28      	it	cs
 800219e:	2304      	movcs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <NVIC_EncodePriority+0x30>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b03      	subs	r3, #3
 80021ae:	e000      	b.n	80021b2 <NVIC_EncodePriority+0x32>
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	4313      	orrs	r3, r2
         );
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002208:	f7ff ff90 	bl	800212c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff2d 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002250:	f7ff ff42 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 8002254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff90 	bl	8002180 <NVIC_EncodePriority>
 8002260:	4602      	mov	r2, r0
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff5f 	bl	800212c <__NVIC_SetPriority>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff35 	bl	80020f4 <__NVIC_EnableIRQ>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ffa2 	bl	80021e4 <SysTick_Config>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e043      	b.n	800234a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b22      	ldr	r3, [pc, #136]	; (8002354 <HAL_DMA_Init+0xa8>)
 80022ca:	4413      	add	r3, r2
 80022cc:	4a22      	ldr	r2, [pc, #136]	; (8002358 <HAL_DMA_Init+0xac>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	009a      	lsls	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	; (800235c <HAL_DMA_Init+0xb0>)
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	bffdfff8 	.word	0xbffdfff8
 8002358:	cccccccd 	.word	0xcccccccd
 800235c:	40020000 	.word	0x40020000

08002360 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_DMA_Start_IT+0x20>
 800237c:	2302      	movs	r3, #2
 800237e:	e04b      	b.n	8002418 <HAL_DMA_Start_IT+0xb8>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d13a      	bne.n	800240a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f937 	bl	800262c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 020e 	orr.w	r2, r2, #14
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	e00f      	b.n	80023f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0204 	bic.w	r2, r2, #4
 80023e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 020a 	orr.w	r2, r2, #10
 80023f6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e005      	b.n	8002416 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002412:	2302      	movs	r3, #2
 8002414:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002416:	7dfb      	ldrb	r3, [r7, #23]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2204      	movs	r2, #4
 800243e:	409a      	lsls	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d04f      	beq.n	80024e8 <HAL_DMA_IRQHandler+0xc8>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	d04a      	beq.n	80024e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d107      	bne.n	8002470 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0204 	bic.w	r2, r2, #4
 800246e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a66      	ldr	r2, [pc, #408]	; (8002610 <HAL_DMA_IRQHandler+0x1f0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d029      	beq.n	80024ce <HAL_DMA_IRQHandler+0xae>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a65      	ldr	r2, [pc, #404]	; (8002614 <HAL_DMA_IRQHandler+0x1f4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d022      	beq.n	80024ca <HAL_DMA_IRQHandler+0xaa>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a63      	ldr	r2, [pc, #396]	; (8002618 <HAL_DMA_IRQHandler+0x1f8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01a      	beq.n	80024c4 <HAL_DMA_IRQHandler+0xa4>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a62      	ldr	r2, [pc, #392]	; (800261c <HAL_DMA_IRQHandler+0x1fc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d012      	beq.n	80024be <HAL_DMA_IRQHandler+0x9e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a60      	ldr	r2, [pc, #384]	; (8002620 <HAL_DMA_IRQHandler+0x200>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00a      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x98>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a5f      	ldr	r2, [pc, #380]	; (8002624 <HAL_DMA_IRQHandler+0x204>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d102      	bne.n	80024b2 <HAL_DMA_IRQHandler+0x92>
 80024ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024b0:	e00e      	b.n	80024d0 <HAL_DMA_IRQHandler+0xb0>
 80024b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80024b6:	e00b      	b.n	80024d0 <HAL_DMA_IRQHandler+0xb0>
 80024b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024bc:	e008      	b.n	80024d0 <HAL_DMA_IRQHandler+0xb0>
 80024be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024c2:	e005      	b.n	80024d0 <HAL_DMA_IRQHandler+0xb0>
 80024c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c8:	e002      	b.n	80024d0 <HAL_DMA_IRQHandler+0xb0>
 80024ca:	2340      	movs	r3, #64	; 0x40
 80024cc:	e000      	b.n	80024d0 <HAL_DMA_IRQHandler+0xb0>
 80024ce:	2304      	movs	r3, #4
 80024d0:	4a55      	ldr	r2, [pc, #340]	; (8002628 <HAL_DMA_IRQHandler+0x208>)
 80024d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8094 	beq.w	8002606 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80024e6:	e08e      	b.n	8002606 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2202      	movs	r2, #2
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d056      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x186>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d051      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10b      	bne.n	8002528 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 020a 	bic.w	r2, r2, #10
 800251e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a38      	ldr	r2, [pc, #224]	; (8002610 <HAL_DMA_IRQHandler+0x1f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d029      	beq.n	8002586 <HAL_DMA_IRQHandler+0x166>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a37      	ldr	r2, [pc, #220]	; (8002614 <HAL_DMA_IRQHandler+0x1f4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <HAL_DMA_IRQHandler+0x162>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a35      	ldr	r2, [pc, #212]	; (8002618 <HAL_DMA_IRQHandler+0x1f8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01a      	beq.n	800257c <HAL_DMA_IRQHandler+0x15c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a34      	ldr	r2, [pc, #208]	; (800261c <HAL_DMA_IRQHandler+0x1fc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d012      	beq.n	8002576 <HAL_DMA_IRQHandler+0x156>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a32      	ldr	r2, [pc, #200]	; (8002620 <HAL_DMA_IRQHandler+0x200>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00a      	beq.n	8002570 <HAL_DMA_IRQHandler+0x150>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a31      	ldr	r2, [pc, #196]	; (8002624 <HAL_DMA_IRQHandler+0x204>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d102      	bne.n	800256a <HAL_DMA_IRQHandler+0x14a>
 8002564:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002568:	e00e      	b.n	8002588 <HAL_DMA_IRQHandler+0x168>
 800256a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800256e:	e00b      	b.n	8002588 <HAL_DMA_IRQHandler+0x168>
 8002570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002574:	e008      	b.n	8002588 <HAL_DMA_IRQHandler+0x168>
 8002576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800257a:	e005      	b.n	8002588 <HAL_DMA_IRQHandler+0x168>
 800257c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002580:	e002      	b.n	8002588 <HAL_DMA_IRQHandler+0x168>
 8002582:	2320      	movs	r3, #32
 8002584:	e000      	b.n	8002588 <HAL_DMA_IRQHandler+0x168>
 8002586:	2302      	movs	r3, #2
 8002588:	4a27      	ldr	r2, [pc, #156]	; (8002628 <HAL_DMA_IRQHandler+0x208>)
 800258a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	d034      	beq.n	8002606 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025a4:	e02f      	b.n	8002606 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2208      	movs	r2, #8
 80025ac:	409a      	lsls	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d028      	beq.n	8002608 <HAL_DMA_IRQHandler+0x1e8>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d023      	beq.n	8002608 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 020e 	bic.w	r2, r2, #14
 80025ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	2101      	movs	r1, #1
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d004      	beq.n	8002608 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
    }
  }
  return;
 8002606:	bf00      	nop
 8002608:	bf00      	nop
}
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40020008 	.word	0x40020008
 8002614:	4002001c 	.word	0x4002001c
 8002618:	40020030 	.word	0x40020030
 800261c:	40020044 	.word	0x40020044
 8002620:	40020058 	.word	0x40020058
 8002624:	4002006c 	.word	0x4002006c
 8002628:	40020000 	.word	0x40020000

0800262c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	2101      	movs	r1, #1
 8002644:	fa01 f202 	lsl.w	r2, r1, r2
 8002648:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b10      	cmp	r3, #16
 8002658:	d108      	bne.n	800266c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800266a:	e007      	b.n	800267c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	60da      	str	r2, [r3, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
	...

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b480      	push	{r7}
 800268a:	b08b      	sub	sp, #44	; 0x2c
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269a:	e169      	b.n	8002970 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800269c:	2201      	movs	r2, #1
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f040 8158 	bne.w	800296a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a9a      	ldr	r2, [pc, #616]	; (8002928 <HAL_GPIO_Init+0x2a0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d05e      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
 80026c4:	4a98      	ldr	r2, [pc, #608]	; (8002928 <HAL_GPIO_Init+0x2a0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d875      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 80026ca:	4a98      	ldr	r2, [pc, #608]	; (800292c <HAL_GPIO_Init+0x2a4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d058      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
 80026d0:	4a96      	ldr	r2, [pc, #600]	; (800292c <HAL_GPIO_Init+0x2a4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d86f      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 80026d6:	4a96      	ldr	r2, [pc, #600]	; (8002930 <HAL_GPIO_Init+0x2a8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d052      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
 80026dc:	4a94      	ldr	r2, [pc, #592]	; (8002930 <HAL_GPIO_Init+0x2a8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d869      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 80026e2:	4a94      	ldr	r2, [pc, #592]	; (8002934 <HAL_GPIO_Init+0x2ac>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d04c      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
 80026e8:	4a92      	ldr	r2, [pc, #584]	; (8002934 <HAL_GPIO_Init+0x2ac>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d863      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 80026ee:	4a92      	ldr	r2, [pc, #584]	; (8002938 <HAL_GPIO_Init+0x2b0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d046      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
 80026f4:	4a90      	ldr	r2, [pc, #576]	; (8002938 <HAL_GPIO_Init+0x2b0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d85d      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 80026fa:	2b12      	cmp	r3, #18
 80026fc:	d82a      	bhi.n	8002754 <HAL_GPIO_Init+0xcc>
 80026fe:	2b12      	cmp	r3, #18
 8002700:	d859      	bhi.n	80027b6 <HAL_GPIO_Init+0x12e>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <HAL_GPIO_Init+0x80>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002783 	.word	0x08002783
 800270c:	0800275d 	.word	0x0800275d
 8002710:	0800276f 	.word	0x0800276f
 8002714:	080027b1 	.word	0x080027b1
 8002718:	080027b7 	.word	0x080027b7
 800271c:	080027b7 	.word	0x080027b7
 8002720:	080027b7 	.word	0x080027b7
 8002724:	080027b7 	.word	0x080027b7
 8002728:	080027b7 	.word	0x080027b7
 800272c:	080027b7 	.word	0x080027b7
 8002730:	080027b7 	.word	0x080027b7
 8002734:	080027b7 	.word	0x080027b7
 8002738:	080027b7 	.word	0x080027b7
 800273c:	080027b7 	.word	0x080027b7
 8002740:	080027b7 	.word	0x080027b7
 8002744:	080027b7 	.word	0x080027b7
 8002748:	080027b7 	.word	0x080027b7
 800274c:	08002765 	.word	0x08002765
 8002750:	08002779 	.word	0x08002779
 8002754:	4a79      	ldr	r2, [pc, #484]	; (800293c <HAL_GPIO_Init+0x2b4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800275a:	e02c      	b.n	80027b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	623b      	str	r3, [r7, #32]
          break;
 8002762:	e029      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	3304      	adds	r3, #4
 800276a:	623b      	str	r3, [r7, #32]
          break;
 800276c:	e024      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	3308      	adds	r3, #8
 8002774:	623b      	str	r3, [r7, #32]
          break;
 8002776:	e01f      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	330c      	adds	r3, #12
 800277e:	623b      	str	r3, [r7, #32]
          break;
 8002780:	e01a      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800278a:	2304      	movs	r3, #4
 800278c:	623b      	str	r3, [r7, #32]
          break;
 800278e:	e013      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002798:	2308      	movs	r3, #8
 800279a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	611a      	str	r2, [r3, #16]
          break;
 80027a2:	e009      	b.n	80027b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a4:	2308      	movs	r3, #8
 80027a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	615a      	str	r2, [r3, #20]
          break;
 80027ae:	e003      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
          break;
 80027b4:	e000      	b.n	80027b8 <HAL_GPIO_Init+0x130>
          break;
 80027b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2bff      	cmp	r3, #255	; 0xff
 80027bc:	d801      	bhi.n	80027c2 <HAL_GPIO_Init+0x13a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	e001      	b.n	80027c6 <HAL_GPIO_Init+0x13e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2bff      	cmp	r3, #255	; 0xff
 80027cc:	d802      	bhi.n	80027d4 <HAL_GPIO_Init+0x14c>
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	e002      	b.n	80027da <HAL_GPIO_Init+0x152>
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	3b08      	subs	r3, #8
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	210f      	movs	r1, #15
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	401a      	ands	r2, r3
 80027ec:	6a39      	ldr	r1, [r7, #32]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	431a      	orrs	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80b1 	beq.w	800296a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002808:	4b4d      	ldr	r3, [pc, #308]	; (8002940 <HAL_GPIO_Init+0x2b8>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a4c      	ldr	r2, [pc, #304]	; (8002940 <HAL_GPIO_Init+0x2b8>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6193      	str	r3, [r2, #24]
 8002814:	4b4a      	ldr	r3, [pc, #296]	; (8002940 <HAL_GPIO_Init+0x2b8>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002820:	4a48      	ldr	r2, [pc, #288]	; (8002944 <HAL_GPIO_Init+0x2bc>)
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3302      	adds	r3, #2
 8002828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	220f      	movs	r2, #15
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a40      	ldr	r2, [pc, #256]	; (8002948 <HAL_GPIO_Init+0x2c0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_GPIO_Init+0x1ec>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3f      	ldr	r2, [pc, #252]	; (800294c <HAL_GPIO_Init+0x2c4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00d      	beq.n	8002870 <HAL_GPIO_Init+0x1e8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3e      	ldr	r2, [pc, #248]	; (8002950 <HAL_GPIO_Init+0x2c8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d007      	beq.n	800286c <HAL_GPIO_Init+0x1e4>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3d      	ldr	r2, [pc, #244]	; (8002954 <HAL_GPIO_Init+0x2cc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_GPIO_Init+0x1e0>
 8002864:	2303      	movs	r3, #3
 8002866:	e006      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 8002868:	2304      	movs	r3, #4
 800286a:	e004      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 800286c:	2302      	movs	r3, #2
 800286e:	e002      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_GPIO_Init+0x1ee>
 8002874:	2300      	movs	r3, #0
 8002876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002878:	f002 0203 	and.w	r2, r2, #3
 800287c:	0092      	lsls	r2, r2, #2
 800287e:	4093      	lsls	r3, r2
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002886:	492f      	ldr	r1, [pc, #188]	; (8002944 <HAL_GPIO_Init+0x2bc>)
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d006      	beq.n	80028ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	492c      	ldr	r1, [pc, #176]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4928      	ldr	r1, [pc, #160]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028c8:	4b23      	ldr	r3, [pc, #140]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	4922      	ldr	r1, [pc, #136]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
 80028d4:	e006      	b.n	80028e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	43db      	mvns	r3, r3
 80028de:	491e      	ldr	r1, [pc, #120]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d006      	beq.n	80028fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4918      	ldr	r1, [pc, #96]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	43db      	mvns	r3, r3
 8002906:	4914      	ldr	r1, [pc, #80]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 8002908:	4013      	ands	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d021      	beq.n	800295c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	490e      	ldr	r1, [pc, #56]	; (8002958 <HAL_GPIO_Init+0x2d0>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
 8002924:	e021      	b.n	800296a <HAL_GPIO_Init+0x2e2>
 8002926:	bf00      	nop
 8002928:	10320000 	.word	0x10320000
 800292c:	10310000 	.word	0x10310000
 8002930:	10220000 	.word	0x10220000
 8002934:	10210000 	.word	0x10210000
 8002938:	10120000 	.word	0x10120000
 800293c:	10110000 	.word	0x10110000
 8002940:	40021000 	.word	0x40021000
 8002944:	40010000 	.word	0x40010000
 8002948:	40010800 	.word	0x40010800
 800294c:	40010c00 	.word	0x40010c00
 8002950:	40011000 	.word	0x40011000
 8002954:	40011400 	.word	0x40011400
 8002958:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_GPIO_Init+0x304>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	43db      	mvns	r3, r3
 8002964:	4909      	ldr	r1, [pc, #36]	; (800298c <HAL_GPIO_Init+0x304>)
 8002966:	4013      	ands	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	3301      	adds	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	f47f ae8e 	bne.w	800269c <HAL_GPIO_Init+0x14>
  }
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	372c      	adds	r7, #44	; 0x2c
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	40010400 	.word	0x40010400

08002990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e001      	b.n	80029b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	807b      	strh	r3, [r7, #2]
 80029ca:	4613      	mov	r3, r2
 80029cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ce:	787b      	ldrb	r3, [r7, #1]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d4:	887a      	ldrh	r2, [r7, #2]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029da:	e003      	b.n	80029e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	041a      	lsls	r2, r3, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	611a      	str	r2, [r3, #16]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e272      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8087 	beq.w	8002b1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a10:	4b92      	ldr	r3, [pc, #584]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d00c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a1c:	4b8f      	ldr	r3, [pc, #572]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d112      	bne.n	8002a4e <HAL_RCC_OscConfig+0x5e>
 8002a28:	4b8c      	ldr	r3, [pc, #560]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a34:	d10b      	bne.n	8002a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a36:	4b89      	ldr	r3, [pc, #548]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d06c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x12c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d168      	bne.n	8002b1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e24c      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_OscConfig+0x76>
 8002a58:	4b80      	ldr	r3, [pc, #512]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a7f      	ldr	r2, [pc, #508]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	e02e      	b.n	8002ac4 <HAL_RCC_OscConfig+0xd4>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x98>
 8002a6e:	4b7b      	ldr	r3, [pc, #492]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7a      	ldr	r2, [pc, #488]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b78      	ldr	r3, [pc, #480]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a77      	ldr	r2, [pc, #476]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e01d      	b.n	8002ac4 <HAL_RCC_OscConfig+0xd4>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0xbc>
 8002a92:	4b72      	ldr	r3, [pc, #456]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a71      	ldr	r2, [pc, #452]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b6f      	ldr	r3, [pc, #444]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6e      	ldr	r2, [pc, #440]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCC_OscConfig+0xd4>
 8002aac:	4b6b      	ldr	r3, [pc, #428]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a6a      	ldr	r2, [pc, #424]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b68      	ldr	r3, [pc, #416]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a67      	ldr	r2, [pc, #412]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe fe50 	bl	8001770 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fe4c 	bl	8001770 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e200      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b5d      	ldr	r3, [pc, #372]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xe4>
 8002af2:	e014      	b.n	8002b1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe fe3c 	bl	8001770 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002afc:	f7fe fe38 	bl	8001770 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e1ec      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x10c>
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d063      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b2a:	4b4c      	ldr	r3, [pc, #304]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b36:	4b49      	ldr	r3, [pc, #292]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d11c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x18c>
 8002b42:	4b46      	ldr	r3, [pc, #280]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	4b43      	ldr	r3, [pc, #268]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_RCC_OscConfig+0x176>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e1c0      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4939      	ldr	r1, [pc, #228]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	e03a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b84:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fdf1 	bl	8001770 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b92:	f7fe fded 	bl	8001770 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1a1      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4927      	ldr	r1, [pc, #156]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc6:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fdd0 	bl	8001770 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fdcc 	bl	8001770 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e180      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d03a      	beq.n	8002c74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d019      	beq.n	8002c3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c06:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fdb0 	bl	8001770 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c14:	f7fe fdac 	bl	8001770 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e160      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c32:	2001      	movs	r0, #1
 8002c34:	f000 face 	bl	80031d4 <RCC_Delay>
 8002c38:	e01c      	b.n	8002c74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7fe fd96 	bl	8001770 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c46:	e00f      	b.n	8002c68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c48:	f7fe fd92 	bl	8001770 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d908      	bls.n	8002c68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e146      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	42420000 	.word	0x42420000
 8002c64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c68:	4b92      	ldr	r3, [pc, #584]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e9      	bne.n	8002c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a6 	beq.w	8002dce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c86:	4b8b      	ldr	r3, [pc, #556]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10d      	bne.n	8002cae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4a87      	ldr	r2, [pc, #540]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	61d3      	str	r3, [r2, #28]
 8002c9e:	4b85      	ldr	r3, [pc, #532]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002caa:	2301      	movs	r3, #1
 8002cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cae:	4b82      	ldr	r3, [pc, #520]	; (8002eb8 <HAL_RCC_OscConfig+0x4c8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d118      	bne.n	8002cec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cba:	4b7f      	ldr	r3, [pc, #508]	; (8002eb8 <HAL_RCC_OscConfig+0x4c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a7e      	ldr	r2, [pc, #504]	; (8002eb8 <HAL_RCC_OscConfig+0x4c8>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fd53 	bl	8001770 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cce:	f7fe fd4f 	bl	8001770 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b64      	cmp	r3, #100	; 0x64
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e103      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	4b75      	ldr	r3, [pc, #468]	; (8002eb8 <HAL_RCC_OscConfig+0x4c8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCC_OscConfig+0x312>
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4a6e      	ldr	r2, [pc, #440]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6213      	str	r3, [r2, #32]
 8002d00:	e02d      	b.n	8002d5e <HAL_RCC_OscConfig+0x36e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x334>
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	6213      	str	r3, [r2, #32]
 8002d16:	4b67      	ldr	r3, [pc, #412]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4a66      	ldr	r2, [pc, #408]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	f023 0304 	bic.w	r3, r3, #4
 8002d20:	6213      	str	r3, [r2, #32]
 8002d22:	e01c      	b.n	8002d5e <HAL_RCC_OscConfig+0x36e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x356>
 8002d2c:	4b61      	ldr	r3, [pc, #388]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4a60      	ldr	r2, [pc, #384]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	f043 0304 	orr.w	r3, r3, #4
 8002d36:	6213      	str	r3, [r2, #32]
 8002d38:	4b5e      	ldr	r3, [pc, #376]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4a5d      	ldr	r2, [pc, #372]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6213      	str	r3, [r2, #32]
 8002d44:	e00b      	b.n	8002d5e <HAL_RCC_OscConfig+0x36e>
 8002d46:	4b5b      	ldr	r3, [pc, #364]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4a5a      	ldr	r2, [pc, #360]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6213      	str	r3, [r2, #32]
 8002d52:	4b58      	ldr	r3, [pc, #352]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a57      	ldr	r2, [pc, #348]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7fe fd03 	bl	8001770 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7fe fcff 	bl	8001770 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e0b1      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ee      	beq.n	8002d6e <HAL_RCC_OscConfig+0x37e>
 8002d90:	e014      	b.n	8002dbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fced 	bl	8001770 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fe fce9 	bl	8001770 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e09b      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	4b40      	ldr	r3, [pc, #256]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ee      	bne.n	8002d9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d105      	bne.n	8002dce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc2:	4b3c      	ldr	r3, [pc, #240]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4a3b      	ldr	r2, [pc, #236]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8087 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd8:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d061      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d146      	bne.n	8002e7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4b33      	ldr	r3, [pc, #204]	; (8002ebc <HAL_RCC_OscConfig+0x4cc>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fe fcbd 	bl	8001770 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fe fcb9 	bl	8001770 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e06d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0c:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d108      	bne.n	8002e34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e22:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4921      	ldr	r1, [pc, #132]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e34:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a19      	ldr	r1, [r3, #32]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	430b      	orrs	r3, r1
 8002e46:	491b      	ldr	r1, [pc, #108]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_RCC_OscConfig+0x4cc>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7fe fc8d 	bl	8001770 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe fc89 	bl	8001770 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e03d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x46a>
 8002e78:	e035      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_RCC_OscConfig+0x4cc>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fc76 	bl	8001770 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe fc72 	bl	8001770 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e026      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x498>
 8002ea6:	e01e      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e019      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x500>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0d0      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d910      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	4965      	ldr	r1, [pc, #404]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b63      	ldr	r3, [pc, #396]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0b8      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d020      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f50:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a58      	ldr	r2, [pc, #352]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	494d      	ldr	r1, [pc, #308]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d040      	beq.n	8003014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d115      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e07f      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e073      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06b      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4936      	ldr	r1, [pc, #216]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fbc4 	bl	8001770 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe fbc0 	bl	8001770 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e053      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d210      	bcs.n	8003044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 0207 	bic.w	r2, r3, #7
 800302a:	4922      	ldr	r1, [pc, #136]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e032      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4916      	ldr	r1, [pc, #88]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	490e      	ldr	r1, [pc, #56]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003082:	f000 f821 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003086:	4602      	mov	r2, r0
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	490a      	ldr	r1, [pc, #40]	; (80030bc <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	5ccb      	ldrb	r3, [r1, r3]
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	4a09      	ldr	r2, [pc, #36]	; (80030c0 <HAL_RCC_ClockConfig+0x1cc>)
 800309c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_RCC_ClockConfig+0x1d0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fb22 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40022000 	.word	0x40022000
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08004200 	.word	0x08004200
 80030c0:	20000000 	.word	0x20000000
 80030c4:	20000004 	.word	0x20000004

080030c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030e2:	4b1e      	ldr	r3, [pc, #120]	; (800315c <HAL_RCC_GetSysClockFreq+0x94>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d002      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x30>
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x36>
 80030f6:	e027      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030f8:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_RCC_GetSysClockFreq+0x98>)
 80030fa:	613b      	str	r3, [r7, #16]
      break;
 80030fc:	e027      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	0c9b      	lsrs	r3, r3, #18
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	4a17      	ldr	r2, [pc, #92]	; (8003164 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003108:	5cd3      	ldrb	r3, [r2, r3]
 800310a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d010      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <HAL_RCC_GetSysClockFreq+0x94>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	0c5b      	lsrs	r3, r3, #17
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	4a11      	ldr	r2, [pc, #68]	; (8003168 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003122:	5cd3      	ldrb	r3, [r2, r3]
 8003124:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <HAL_RCC_GetSysClockFreq+0x98>)
 800312a:	fb03 f202 	mul.w	r2, r3, r2
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e004      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <HAL_RCC_GetSysClockFreq+0xa4>)
 800313c:	fb02 f303 	mul.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	613b      	str	r3, [r7, #16]
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetSysClockFreq+0x98>)
 800314a:	613b      	str	r3, [r7, #16]
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	693b      	ldr	r3, [r7, #16]
}
 8003150:	4618      	mov	r0, r3
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	007a1200 	.word	0x007a1200
 8003164:	08004218 	.word	0x08004218
 8003168:	08004228 	.word	0x08004228
 800316c:	003d0900 	.word	0x003d0900

08003170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003174:	4b02      	ldr	r3, [pc, #8]	; (8003180 <HAL_RCC_GetHCLKFreq+0x10>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	20000000 	.word	0x20000000

08003184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003188:	f7ff fff2 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4903      	ldr	r1, [pc, #12]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	08004210 	.word	0x08004210

080031ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031b0:	f7ff ffde 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	0adb      	lsrs	r3, r3, #11
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4903      	ldr	r1, [pc, #12]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	08004210 	.word	0x08004210

080031d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031dc:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <RCC_Delay+0x34>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <RCC_Delay+0x38>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0a5b      	lsrs	r3, r3, #9
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031f0:	bf00      	nop
  }
  while (Delay --);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	60fa      	str	r2, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f9      	bne.n	80031f0 <RCC_Delay+0x1c>
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	20000000 	.word	0x20000000
 800320c:	10624dd3 	.word	0x10624dd3

08003210 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d07d      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003230:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10d      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323c:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	4a4b      	ldr	r2, [pc, #300]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003246:	61d3      	str	r3, [r2, #28]
 8003248:	4b49      	ldr	r3, [pc, #292]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d118      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003264:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a42      	ldr	r2, [pc, #264]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800326a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003270:	f7fe fa7e 	bl	8001770 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	e008      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003278:	f7fe fa7a 	bl	8001770 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	; 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e06d      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003296:	4b36      	ldr	r3, [pc, #216]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d02e      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d027      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b4:	4b2e      	ldr	r3, [pc, #184]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032be:	4b2e      	ldr	r3, [pc, #184]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032c4:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ca:	4a29      	ldr	r2, [pc, #164]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d014      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fe fa49 	bl	8001770 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fe fa45 	bl	8001770 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e036      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ee      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003304:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4917      	ldr	r1, [pc, #92]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	4313      	orrs	r3, r2
 8003314:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4a13      	ldr	r2, [pc, #76]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003326:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	490b      	ldr	r1, [pc, #44]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003352:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4904      	ldr	r1, [pc, #16]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
 8003378:	42420440 	.word	0x42420440

0800337c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e041      	b.n	8003412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd fd54 	bl	8000e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f000 fafc 	bl	80039b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d001      	beq.n	8003434 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e032      	b.n	800349a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a18      	ldr	r2, [pc, #96]	; (80034a4 <HAL_TIM_Base_Start+0x88>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_TIM_Base_Start+0x48>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344e:	d009      	beq.n	8003464 <HAL_TIM_Base_Start+0x48>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <HAL_TIM_Base_Start+0x8c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_Base_Start+0x48>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <HAL_TIM_Base_Start+0x90>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d010      	beq.n	8003498 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	e007      	b.n	8003498 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40000400 	.word	0x40000400
 80034ac:	40000800 	.word	0x40000800

080034b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e041      	b.n	8003546 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f839 	bl	800354e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f000 fa62 	bl	80039b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_TIM_PWM_Start+0x24>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e022      	b.n	80035ca <HAL_TIM_PWM_Start+0x6a>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b04      	cmp	r3, #4
 8003588:	d109      	bne.n	800359e <HAL_TIM_PWM_Start+0x3e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	bf14      	ite	ne
 8003596:	2301      	movne	r3, #1
 8003598:	2300      	moveq	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	e015      	b.n	80035ca <HAL_TIM_PWM_Start+0x6a>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d109      	bne.n	80035b8 <HAL_TIM_PWM_Start+0x58>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	bf14      	ite	ne
 80035b0:	2301      	movne	r3, #1
 80035b2:	2300      	moveq	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e008      	b.n	80035ca <HAL_TIM_PWM_Start+0x6a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e05e      	b.n	8003690 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_PWM_Start+0x82>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	e013      	b.n	800360a <HAL_TIM_PWM_Start+0xaa>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x92>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f0:	e00b      	b.n	800360a <HAL_TIM_PWM_Start+0xaa>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_PWM_Start+0xa2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003600:	e003      	b.n	800360a <HAL_TIM_PWM_Start+0xaa>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fc5c 	bl	8003ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <HAL_TIM_PWM_Start+0x138>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d107      	bne.n	8003632 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_TIM_PWM_Start+0x138>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00e      	beq.n	800365a <HAL_TIM_PWM_Start+0xfa>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d009      	beq.n	800365a <HAL_TIM_PWM_Start+0xfa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a14      	ldr	r2, [pc, #80]	; (800369c <HAL_TIM_PWM_Start+0x13c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d004      	beq.n	800365a <HAL_TIM_PWM_Start+0xfa>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <HAL_TIM_PWM_Start+0x140>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d111      	bne.n	800367e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b06      	cmp	r3, #6
 800366a:	d010      	beq.n	800368e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367c:	e007      	b.n	800368e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0201 	orr.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800

080036a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036be:	2302      	movs	r3, #2
 80036c0:	e0ae      	b.n	8003820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b0c      	cmp	r3, #12
 80036ce:	f200 809f 	bhi.w	8003810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	0800370d 	.word	0x0800370d
 80036dc:	08003811 	.word	0x08003811
 80036e0:	08003811 	.word	0x08003811
 80036e4:	08003811 	.word	0x08003811
 80036e8:	0800374d 	.word	0x0800374d
 80036ec:	08003811 	.word	0x08003811
 80036f0:	08003811 	.word	0x08003811
 80036f4:	08003811 	.word	0x08003811
 80036f8:	0800378f 	.word	0x0800378f
 80036fc:	08003811 	.word	0x08003811
 8003700:	08003811 	.word	0x08003811
 8003704:	08003811 	.word	0x08003811
 8003708:	080037cf 	.word	0x080037cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f9be 	bl	8003a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0208 	orr.w	r2, r2, #8
 8003726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0204 	bic.w	r2, r2, #4
 8003736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6999      	ldr	r1, [r3, #24]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	619a      	str	r2, [r3, #24]
      break;
 800374a:	e064      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fa04 	bl	8003b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6999      	ldr	r1, [r3, #24]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	021a      	lsls	r2, r3, #8
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	619a      	str	r2, [r3, #24]
      break;
 800378c:	e043      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fa4d 	bl	8003c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0208 	orr.w	r2, r2, #8
 80037a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0204 	bic.w	r2, r2, #4
 80037b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69d9      	ldr	r1, [r3, #28]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	61da      	str	r2, [r3, #28]
      break;
 80037cc:	e023      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fa97 	bl	8003d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69d9      	ldr	r1, [r3, #28]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	021a      	lsls	r2, r3, #8
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	61da      	str	r2, [r3, #28]
      break;
 800380e:	e002      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	75fb      	strb	r3, [r7, #23]
      break;
 8003814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_TIM_ConfigClockSource+0x1c>
 8003840:	2302      	movs	r3, #2
 8003842:	e0b4      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x186>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387c:	d03e      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0xd4>
 800387e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003882:	f200 8087 	bhi.w	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 8003886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388a:	f000 8086 	beq.w	800399a <HAL_TIM_ConfigClockSource+0x172>
 800388e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003892:	d87f      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 8003894:	2b70      	cmp	r3, #112	; 0x70
 8003896:	d01a      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0xa6>
 8003898:	2b70      	cmp	r3, #112	; 0x70
 800389a:	d87b      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 800389c:	2b60      	cmp	r3, #96	; 0x60
 800389e:	d050      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0x11a>
 80038a0:	2b60      	cmp	r3, #96	; 0x60
 80038a2:	d877      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038a4:	2b50      	cmp	r3, #80	; 0x50
 80038a6:	d03c      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0xfa>
 80038a8:	2b50      	cmp	r3, #80	; 0x50
 80038aa:	d873      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d058      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x13a>
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d86f      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b30      	cmp	r3, #48	; 0x30
 80038b6:	d064      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038b8:	2b30      	cmp	r3, #48	; 0x30
 80038ba:	d86b      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d060      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d867      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d05c      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d05a      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038cc:	e062      	b.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038de:	f000 fad8 	bl	8003e92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	609a      	str	r2, [r3, #8]
      break;
 80038fa:	e04f      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800390c:	f000 fac1 	bl	8003e92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800391e:	609a      	str	r2, [r3, #8]
      break;
 8003920:	e03c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800392e:	461a      	mov	r2, r3
 8003930:	f000 fa38 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2150      	movs	r1, #80	; 0x50
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fa8f 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003940:	e02c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800394e:	461a      	mov	r2, r3
 8003950:	f000 fa56 	bl	8003e00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2160      	movs	r1, #96	; 0x60
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fa7f 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003960:	e01c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396e:	461a      	mov	r2, r3
 8003970:	f000 fa18 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2140      	movs	r1, #64	; 0x40
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fa6f 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003980:	e00c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	f000 fa66 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003992:	e003      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
      break;
 8003998:	e000      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800399a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <TIM_Base_SetConfig+0xd0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00b      	beq.n	80039e8 <TIM_Base_SetConfig+0x30>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d6:	d007      	beq.n	80039e8 <TIM_Base_SetConfig+0x30>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <TIM_Base_SetConfig+0xd4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <TIM_Base_SetConfig+0x30>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a2b      	ldr	r2, [pc, #172]	; (8003a90 <TIM_Base_SetConfig+0xd8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d108      	bne.n	80039fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <TIM_Base_SetConfig+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <TIM_Base_SetConfig+0x62>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0x62>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <TIM_Base_SetConfig+0xd4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0x62>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <TIM_Base_SetConfig+0xd8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <TIM_Base_SetConfig+0xd0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f023 0201 	bic.w	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	611a      	str	r2, [r3, #16]
  }
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800

08003a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f023 0201 	bic.w	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 0302 	bic.w	r3, r3, #2
 8003adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <TIM_OC1_SetConfig+0xc8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10c      	bne.n	8003b0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0308 	bic.w	r3, r3, #8
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 0304 	bic.w	r3, r3, #4
 8003b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <TIM_OC1_SetConfig+0xc8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d111      	bne.n	8003b36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40012c00 	.word	0x40012c00

08003b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f023 0210 	bic.w	r2, r3, #16
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f023 0320 	bic.w	r3, r3, #32
 8003baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <TIM_OC2_SetConfig+0xd0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d10d      	bne.n	8003bdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <TIM_OC2_SetConfig+0xd0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d113      	bne.n	8003c0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	40012c00 	.word	0x40012c00

08003c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <TIM_OC3_SetConfig+0xd0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10d      	bne.n	8003cae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <TIM_OC3_SetConfig+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d113      	bne.n	8003cde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	621a      	str	r2, [r3, #32]
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40012c00 	.word	0x40012c00

08003d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	031b      	lsls	r3, r3, #12
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a0f      	ldr	r2, [pc, #60]	; (8003da0 <TIM_OC4_SetConfig+0x98>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d109      	bne.n	8003d7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	40012c00 	.word	0x40012c00

08003da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 030a 	bic.w	r3, r3, #10
 8003de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f023 0210 	bic.w	r2, r3, #16
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	031b      	lsls	r3, r3, #12
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f043 0307 	orr.w	r3, r3, #7
 8003e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	021a      	lsls	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	609a      	str	r2, [r3, #8]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e046      	b.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d009      	beq.n	8003f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a10      	ldr	r2, [pc, #64]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d10c      	bne.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800

08003fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e042      	b.n	800406c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc ff8e 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2224      	movs	r2, #36	; 0x24
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f82b 	bl	8004074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800402c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800403c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800404c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040ae:	f023 030c 	bic.w	r3, r3, #12
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <UART_SetConfig+0x114>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040dc:	f7ff f866 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	e002      	b.n	80040ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7ff f84e 	bl	8003184 <HAL_RCC_GetPCLK1Freq>
 80040e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009a      	lsls	r2, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	4a22      	ldr	r2, [pc, #136]	; (800418c <UART_SetConfig+0x118>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	0119      	lsls	r1, r3, #4
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009a      	lsls	r2, r3, #2
 8004114:	441a      	add	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004120:	4b1a      	ldr	r3, [pc, #104]	; (800418c <UART_SetConfig+0x118>)
 8004122:	fba3 0302 	umull	r0, r3, r3, r2
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2064      	movs	r0, #100	; 0x64
 800412a:	fb00 f303 	mul.w	r3, r0, r3
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	3332      	adds	r3, #50	; 0x32
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <UART_SetConfig+0x118>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004140:	4419      	add	r1, r3
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	009a      	lsls	r2, r3, #2
 800414c:	441a      	add	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	fbb2 f2f3 	udiv	r2, r2, r3
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <UART_SetConfig+0x118>)
 800415a:	fba3 0302 	umull	r0, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2064      	movs	r0, #100	; 0x64
 8004162:	fb00 f303 	mul.w	r3, r0, r3
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	3332      	adds	r3, #50	; 0x32
 800416c:	4a07      	ldr	r2, [pc, #28]	; (800418c <UART_SetConfig+0x118>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	f003 020f 	and.w	r2, r3, #15
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	440a      	add	r2, r1
 800417e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40013800 	.word	0x40013800
 800418c:	51eb851f 	.word	0x51eb851f

08004190 <memset>:
 8004190:	4603      	mov	r3, r0
 8004192:	4402      	add	r2, r0
 8004194:	4293      	cmp	r3, r2
 8004196:	d100      	bne.n	800419a <memset+0xa>
 8004198:	4770      	bx	lr
 800419a:	f803 1b01 	strb.w	r1, [r3], #1
 800419e:	e7f9      	b.n	8004194 <memset+0x4>

080041a0 <__libc_init_array>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	2600      	movs	r6, #0
 80041a4:	4d0c      	ldr	r5, [pc, #48]	; (80041d8 <__libc_init_array+0x38>)
 80041a6:	4c0d      	ldr	r4, [pc, #52]	; (80041dc <__libc_init_array+0x3c>)
 80041a8:	1b64      	subs	r4, r4, r5
 80041aa:	10a4      	asrs	r4, r4, #2
 80041ac:	42a6      	cmp	r6, r4
 80041ae:	d109      	bne.n	80041c4 <__libc_init_array+0x24>
 80041b0:	f000 f81a 	bl	80041e8 <_init>
 80041b4:	2600      	movs	r6, #0
 80041b6:	4d0a      	ldr	r5, [pc, #40]	; (80041e0 <__libc_init_array+0x40>)
 80041b8:	4c0a      	ldr	r4, [pc, #40]	; (80041e4 <__libc_init_array+0x44>)
 80041ba:	1b64      	subs	r4, r4, r5
 80041bc:	10a4      	asrs	r4, r4, #2
 80041be:	42a6      	cmp	r6, r4
 80041c0:	d105      	bne.n	80041ce <__libc_init_array+0x2e>
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c8:	4798      	blx	r3
 80041ca:	3601      	adds	r6, #1
 80041cc:	e7ee      	b.n	80041ac <__libc_init_array+0xc>
 80041ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d2:	4798      	blx	r3
 80041d4:	3601      	adds	r6, #1
 80041d6:	e7f2      	b.n	80041be <__libc_init_array+0x1e>
 80041d8:	0800422c 	.word	0x0800422c
 80041dc:	0800422c 	.word	0x0800422c
 80041e0:	0800422c 	.word	0x0800422c
 80041e4:	08004230 	.word	0x08004230

080041e8 <_init>:
 80041e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ea:	bf00      	nop
 80041ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ee:	bc08      	pop	{r3}
 80041f0:	469e      	mov	lr, r3
 80041f2:	4770      	bx	lr

080041f4 <_fini>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	bf00      	nop
 80041f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fa:	bc08      	pop	{r3}
 80041fc:	469e      	mov	lr, r3
 80041fe:	4770      	bx	lr
