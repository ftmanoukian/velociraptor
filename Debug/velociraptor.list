
velociraptor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005e00  08005e00  00015e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e2c  08005e2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e2c  08005e2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e2c  08005e2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000000c  08005e40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08005e40  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010548  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002729  00000000  00000000  000305c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  00032cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8f  00000000  00000000  00033cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f3f  00000000  00000000  00034987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011bf5  00000000  00000000  0004c8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d7f3  00000000  00000000  0005e4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004444  00000000  00000000  000ebcb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f00f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005de8 	.word	0x08005de8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08005de8 	.word	0x08005de8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <ADXL345_Select>:
extern SPI_HandleTypeDef hspi1;

adxl_data_t adxl_data;
//adxl_data2_t adxl_data2;

void ADXL345_Select(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADXL345_SPI_CS_PORT, ADXL345_SPI_CS_PIN, GPIO_PIN_RESET); // CS low
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073e:	4802      	ldr	r0, [pc, #8]	; (8000748 <ADXL345_Select+0x14>)
 8000740:	f002 fbfd 	bl	8002f3e <HAL_GPIO_WritePin>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40010800 	.word	0x40010800

0800074c <ADXL345_Deselect>:

void ADXL345_Deselect(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ADXL345_SPI_CS_PORT, ADXL345_SPI_CS_PIN, GPIO_PIN_SET); // CS high
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000756:	4802      	ldr	r0, [pc, #8]	; (8000760 <ADXL345_Deselect+0x14>)
 8000758:	f002 fbf1 	bl	8002f3e <HAL_GPIO_WritePin>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40010800 	.word	0x40010800

08000764 <ADXL345_Init>:

void ADXL345_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	ADXL345_WriteRegister(0x2D, 0x08); // POWER_CTL register (0x2D): Set to measurement mode
 8000768:	2108      	movs	r1, #8
 800076a:	202d      	movs	r0, #45	; 0x2d
 800076c:	f000 f846 	bl	80007fc <ADXL345_WriteRegister>

	// Set the output data rate (ODR) and range
	ADXL345_WriteRegister(0x2C, 0x0A); // BW_RATE register (0x2C): Set ODR to 100 Hz (0x0A)
 8000770:	210a      	movs	r1, #10
 8000772:	202c      	movs	r0, #44	; 0x2c
 8000774:	f000 f842 	bl	80007fc <ADXL345_WriteRegister>

	// Set the full-scale range
	ADXL345_WriteRegister(0x31, 0x09); // DATA_FORMAT register (0x31): Full-resolution, ±16g (0x0B)
 8000778:	2109      	movs	r1, #9
 800077a:	2031      	movs	r0, #49	; 0x31
 800077c:	f000 f83e 	bl	80007fc <ADXL345_WriteRegister>

	// Ensure FIFO is in bypass mode
	ADXL345_WriteRegister(0x38, 0x00); // FIFO_CTL register (0x38): FIFO in bypass mode
 8000780:	2100      	movs	r1, #0
 8000782:	2038      	movs	r0, #56	; 0x38
 8000784:	f000 f83a 	bl	80007fc <ADXL345_WriteRegister>

	// Enable Data Ready interrupt
	ADXL345_WriteRegister(0x2E, 0x80); // INT_ENABLE register (0x2E): Enable Data Ready interrupt
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	202e      	movs	r0, #46	; 0x2e
 800078c:	f000 f836 	bl	80007fc <ADXL345_WriteRegister>

	// Map Data Ready interrupt to INT1
	ADXL345_WriteRegister(0x2F, 0x00); // INT_MAP register (0x2F): Route Data Ready to INT1 (bit 0 = 0)
 8000790:	2100      	movs	r1, #0
 8000792:	202f      	movs	r0, #47	; 0x2f
 8000794:	f000 f832 	bl	80007fc <ADXL345_WriteRegister>

	// lectura inicial para disparar el modo continuo (si no no anda!)
	ADXL345_ReadXYZ(&(adxl_data.accel[0].x), &(adxl_data.accel[0].y), &(adxl_data.accel[0].z));
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <ADXL345_Init+0x44>)
 800079a:	4904      	ldr	r1, [pc, #16]	; (80007ac <ADXL345_Init+0x48>)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <ADXL345_Init+0x4c>)
 800079e:	f000 f84b 	bl	8000838 <ADXL345_ReadXYZ>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000002e 	.word	0x2000002e
 80007ac:	2000002c 	.word	0x2000002c
 80007b0:	2000002a 	.word	0x2000002a

080007b4 <ADXL345_ReadRegister>:

uint8_t ADXL345_ReadRegister(uint8_t reg) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
    uint8_t receivedData;
    reg |= 0x80; // Set MSB to 1 for read operation
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	71fb      	strb	r3, [r7, #7]

    ADXL345_Select();
 80007c8:	f7ff ffb4 	bl	8000734 <ADXL345_Select>
    HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);   // Send register address
 80007cc:	1df9      	adds	r1, r7, #7
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007d2:	2201      	movs	r2, #1
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <ADXL345_ReadRegister+0x44>)
 80007d6:	f003 f937 	bl	8003a48 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &receivedData, 1, HAL_MAX_DELAY); // Read register value
 80007da:	f107 010f 	add.w	r1, r7, #15
 80007de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007e2:	2201      	movs	r2, #1
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <ADXL345_ReadRegister+0x44>)
 80007e6:	f003 fa73 	bl	8003cd0 <HAL_SPI_Receive>
    ADXL345_Deselect();
 80007ea:	f7ff ffaf 	bl	800074c <ADXL345_Deselect>

    return receivedData;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000068 	.word	0x20000068

080007fc <ADXL345_WriteRegister>:

void ADXL345_WriteRegister(uint8_t reg, uint8_t value) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	460a      	mov	r2, r1
 8000806:	71fb      	strb	r3, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2];

    // Combine register address and value into a transmission array
    txData[0] = reg;       // Register address
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	733b      	strb	r3, [r7, #12]
    txData[1] = value;     // Data to write
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	737b      	strb	r3, [r7, #13]

    ADXL345_Select();
 8000814:	f7ff ff8e 	bl	8000734 <ADXL345_Select>
    HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY); // Transmit register address and data
 8000818:	f107 010c 	add.w	r1, r7, #12
 800081c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000820:	2202      	movs	r2, #2
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <ADXL345_WriteRegister+0x38>)
 8000824:	f003 f910 	bl	8003a48 <HAL_SPI_Transmit>
    ADXL345_Deselect();
 8000828:	f7ff ff90 	bl	800074c <ADXL345_Deselect>
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000068 	.word	0x20000068

08000838 <ADXL345_ReadXYZ>:

void ADXL345_ReadXYZ(int16_t *x, int16_t *y, int16_t *z) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
    uint8_t x0, x1, y0, y1, z0, z1;

    // Read X-axis
    x0 = ADXL345_ReadRegister(0x32); // X0
 8000844:	2032      	movs	r0, #50	; 0x32
 8000846:	f7ff ffb5 	bl	80007b4 <ADXL345_ReadRegister>
 800084a:	4603      	mov	r3, r0
 800084c:	75fb      	strb	r3, [r7, #23]
    x1 = ADXL345_ReadRegister(0x33); // X1
 800084e:	2033      	movs	r0, #51	; 0x33
 8000850:	f7ff ffb0 	bl	80007b4 <ADXL345_ReadRegister>
 8000854:	4603      	mov	r3, r0
 8000856:	75bb      	strb	r3, [r7, #22]

    // Read Y-axis
    y0 = ADXL345_ReadRegister(0x34); // Y0
 8000858:	2034      	movs	r0, #52	; 0x34
 800085a:	f7ff ffab 	bl	80007b4 <ADXL345_ReadRegister>
 800085e:	4603      	mov	r3, r0
 8000860:	757b      	strb	r3, [r7, #21]
    y1 = ADXL345_ReadRegister(0x35); // Y1
 8000862:	2035      	movs	r0, #53	; 0x35
 8000864:	f7ff ffa6 	bl	80007b4 <ADXL345_ReadRegister>
 8000868:	4603      	mov	r3, r0
 800086a:	753b      	strb	r3, [r7, #20]

    // Read Z-axis
    z0 = ADXL345_ReadRegister(0x36); // Z0
 800086c:	2036      	movs	r0, #54	; 0x36
 800086e:	f7ff ffa1 	bl	80007b4 <ADXL345_ReadRegister>
 8000872:	4603      	mov	r3, r0
 8000874:	74fb      	strb	r3, [r7, #19]
    z1 = ADXL345_ReadRegister(0x37); // Z1
 8000876:	2037      	movs	r0, #55	; 0x37
 8000878:	f7ff ff9c 	bl	80007b4 <ADXL345_ReadRegister>
 800087c:	4603      	mov	r3, r0
 800087e:	74bb      	strb	r3, [r7, #18]

    // Combine high and low bytes
    *x = (int16_t)((x1 << 8) | x0);
 8000880:	7dbb      	ldrb	r3, [r7, #22]
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	b21a      	sxth	r2, r3
 8000886:	7dfb      	ldrb	r3, [r7, #23]
 8000888:	b21b      	sxth	r3, r3
 800088a:	4313      	orrs	r3, r2
 800088c:	b21a      	sxth	r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)((y1 << 8) | y0);
 8000892:	7d3b      	ldrb	r3, [r7, #20]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b21a      	sxth	r2, r3
 8000898:	7d7b      	ldrb	r3, [r7, #21]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21a      	sxth	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)((z1 << 8) | z0);
 80008a4:	7cbb      	ldrb	r3, [r7, #18]
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	7cfb      	ldrb	r3, [r7, #19]
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b21a      	sxth	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	801a      	strh	r2, [r3, #0]
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <ADXL345_CheckDevice>:

uint8_t ADXL345_CheckDevice(void) {
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
    uint8_t deviceID = ADXL345_ReadRegister(0x00); // 0x00 is the DEVID register
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff ff75 	bl	80007b4 <ADXL345_ReadRegister>
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
    if (deviceID == 0xE5) {
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2be5      	cmp	r3, #229	; 0xe5
 80008d2:	d101      	bne.n	80008d8 <ADXL345_CheckDevice+0x1a>
        return 1; // Device is present and responding correctly
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <ADXL345_CheckDevice+0x1c>
    } else {
        return 0; // Device is not responding
 80008d8:	2300      	movs	r3, #0
    }
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <ADXL345_IRQHandler>:

void ADXL345_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
	int16_t *x, *y, *z;

	//escritura en buffer inactivo
	x = &(adxl_data.accel[!adxl_data.active_buffer].x);
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <ADXL345_IRQHandler+0x8c>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	461a      	mov	r2, r3
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <ADXL345_IRQHandler+0x8c>)
 8000904:	4413      	add	r3, r2
 8000906:	3302      	adds	r3, #2
 8000908:	60fb      	str	r3, [r7, #12]
	y = &(adxl_data.accel[!adxl_data.active_buffer].y);
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <ADXL345_IRQHandler+0x8c>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf0c      	ite	eq
 8000912:	2301      	moveq	r3, #1
 8000914:	2300      	movne	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	461a      	mov	r2, r3
 800091a:	4613      	mov	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <ADXL345_IRQHandler+0x8c>)
 8000924:	4413      	add	r3, r2
 8000926:	3304      	adds	r3, #4
 8000928:	60bb      	str	r3, [r7, #8]
	z = &(adxl_data.accel[!adxl_data.active_buffer].z);
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <ADXL345_IRQHandler+0x8c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	bf0c      	ite	eq
 8000932:	2301      	moveq	r3, #1
 8000934:	2300      	movne	r3, #0
 8000936:	b2db      	uxtb	r3, r3
 8000938:	461a      	mov	r2, r3
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <ADXL345_IRQHandler+0x8c>)
 8000944:	4413      	add	r3, r2
 8000946:	3306      	adds	r3, #6
 8000948:	607b      	str	r3, [r7, #4]

	ADXL345_ReadXYZ(x, y, z);
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f7ff ff72 	bl	8000838 <ADXL345_ReadXYZ>

	adxl_data.active_buffer = !adxl_data.active_buffer;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <ADXL345_IRQHandler+0x8c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	bf0c      	ite	eq
 800095c:	2301      	moveq	r3, #1
 800095e:	2300      	movne	r3, #0
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <ADXL345_IRQHandler+0x8c>)
 8000966:	701a      	strb	r2, [r3, #0]
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000028 	.word	0x20000028

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f001 fa78 	bl	8001e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f815 	bl	80009aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f000 fa64 	bl	8000e4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000984:	f000 fa3c 	bl	8000e00 <MX_DMA_Init>
  MX_TIM4_Init();
 8000988:	f000 f978 	bl	8000c7c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800098c:	f000 fa0e 	bl	8000dac <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000990:	f000 f926 	bl	8000be0 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000994:	f000 f864 	bl	8000a60 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000998:	f000 f8d6 	bl	8000b48 <MX_TIM2_Init>
  MX_SPI1_Init();
 800099c:	f000 f89e 	bl	8000adc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  velociraptor3_init();
 80009a0:	f000 fd5e 	bl	8001460 <velociraptor3_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	velociraptor3_main_loop();
 80009a4:	f000 fe92 	bl	80016cc <velociraptor3_main_loop>
 80009a8:	e7fc      	b.n	80009a4 <main+0x30>

080009aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b094      	sub	sp, #80	; 0x50
 80009ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b4:	2228      	movs	r2, #40	; 0x28
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f005 f9e9 	bl	8005d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009da:	2301      	movs	r3, #1
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 fad7 	bl	8002fb4 <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a0c:	f000 face 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a20:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fd43 	bl	80034b8 <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a38:	f000 fab8 	bl	8000fac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a44:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fec3 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a54:	f000 faaa 	bl	8000fac <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3750      	adds	r7, #80	; 0x50
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_ADC2_Init+0x74>)
 8000a72:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <MX_ADC2_Init+0x78>)
 8000a74:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_ADC2_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_ADC2_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_ADC2_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_ADC2_Init+0x74>)
 8000a8a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a8e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_ADC2_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_ADC2_Init+0x74>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_ADC2_Init+0x74>)
 8000a9e:	f001 fa6b 	bl	8001f78 <HAL_ADC_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 fa80 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_ADC2_Init+0x74>)
 8000abe:	f001 fbed 	bl	800229c <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000ac8:	f000 fa70 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000038 	.word	0x20000038
 8000ad8:	40012800 	.word	0x40012800

08000adc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000ae2:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <MX_SPI1_Init+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000ae8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000b10:	2218      	movs	r2, #24
 8000b12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000b28:	220a      	movs	r2, #10
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_SPI1_Init+0x64>)
 8000b2e:	f002 ff07 	bl	8003940 <HAL_SPI_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b38:	f000 fa38 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000068 	.word	0x20000068
 8000b44:	40013000 	.word	0x40013000

08000b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b6e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b7c:	2209      	movs	r2, #9
 8000b7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8c:	4813      	ldr	r0, [pc, #76]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b8e:	f003 fc6c 	bl	800446a <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b98:	f000 fa08 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000baa:	f003 ffab 	bl	8004b04 <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bb4:	f000 f9fa 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000bc6:	f004 fb41 	bl	800524c <HAL_TIMEx_MasterConfigSynchronization>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bd0:	f000 f9ec 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200000c0 	.word	0x200000c0

08000be0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_TIM3_Init+0x94>)
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <MX_TIM3_Init+0x98>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_TIM3_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_TIM3_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1080-1;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_TIM3_Init+0x94>)
 8000c10:	f240 4237 	movw	r2, #1079	; 0x437
 8000c14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_TIM3_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_TIM3_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c22:	4814      	ldr	r0, [pc, #80]	; (8000c74 <MX_TIM3_Init+0x94>)
 8000c24:	f003 fc21 	bl	800446a <HAL_TIM_Base_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f000 f9bd 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_TIM3_Init+0x94>)
 8000c40:	f003 ff60 	bl	8004b04 <HAL_TIM_ConfigClockSource>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c4a:	f000 f9af 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c4e:	2320      	movs	r3, #32
 8000c50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_TIM3_Init+0x94>)
 8000c5c:	f004 faf6 	bl	800524c <HAL_TIMEx_MasterConfigSynchronization>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c66:	f000 f9a1 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000108 	.word	0x20000108
 8000c78:	40000400 	.word	0x40000400

08000c7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	; 0x38
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	f107 0320 	add.w	r3, r7, #32
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
 8000ca8:	615a      	str	r2, [r3, #20]
 8000caa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cac:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000cae:	4a3e      	ldr	r2, [pc, #248]	; (8000da8 <MX_TIM4_Init+0x12c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cb2:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 720-1;
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000cc0:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000cc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cd2:	4834      	ldr	r0, [pc, #208]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000cd4:	f003 fbc9 	bl	800446a <HAL_TIM_Base_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000cde:	f000 f965 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ce8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cec:	4619      	mov	r1, r3
 8000cee:	482d      	ldr	r0, [pc, #180]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000cf0:	f003 ff08 	bl	8004b04 <HAL_TIM_ConfigClockSource>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000cfa:	f000 f957 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cfe:	4829      	ldr	r0, [pc, #164]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000d00:	f003 fc54 	bl	80045ac <HAL_TIM_PWM_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d0a:	f000 f94f 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d16:	f107 0320 	add.w	r3, r7, #32
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4821      	ldr	r0, [pc, #132]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000d1e:	f004 fa95 	bl	800524c <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d28:	f000 f940 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d2c:	2360      	movs	r3, #96	; 0x60
 8000d2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4619      	mov	r1, r3
 8000d42:	4818      	ldr	r0, [pc, #96]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000d44:	f003 fe1c 	bl	8004980 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d4e:	f000 f92d 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2204      	movs	r2, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4812      	ldr	r0, [pc, #72]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000d5a:	f003 fe11 	bl	8004980 <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000d64:	f000 f922 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000d70:	f003 fe06 	bl	8004980 <HAL_TIM_PWM_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000d7a:	f000 f917 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	220c      	movs	r2, #12
 8000d82:	4619      	mov	r1, r3
 8000d84:	4807      	ldr	r0, [pc, #28]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000d86:	f003 fdfb 	bl	8004980 <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000d90:	f000 f90c 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <MX_TIM4_Init+0x128>)
 8000d96:	f000 fa23 	bl	80011e0 <HAL_TIM_MspPostInit>

}
 8000d9a:	bf00      	nop
 8000d9c:	3738      	adds	r7, #56	; 0x38
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000150 	.word	0x20000150
 8000da8:	40000800 	.word	0x40000800

08000dac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <MX_USART1_UART_Init+0x50>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_USART1_UART_Init+0x4c>)
 8000de4:	f004 faa2 	bl	800532c <HAL_UART_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dee:	f000 f8dd 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000198 	.word	0x20000198
 8000dfc:	40013800 	.word	0x40013800

08000e00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <MX_DMA_Init+0x48>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <MX_DMA_Init+0x48>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <MX_DMA_Init+0x48>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	200e      	movs	r0, #14
 8000e24:	f001 fca5 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e28:	200e      	movs	r0, #14
 8000e2a:	f001 fcbe 	bl	80027aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	200f      	movs	r0, #15
 8000e34:	f001 fc9d 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e38:	200f      	movs	r0, #15
 8000e3a:	f001 fcb6 	bl	80027aa <HAL_NVIC_EnableIRQ>

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e60:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a4c      	ldr	r2, [pc, #304]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b4a      	ldr	r3, [pc, #296]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0310 	and.w	r3, r3, #16
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e78:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e7e:	f043 0320 	orr.w	r3, r3, #32
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a40      	ldr	r2, [pc, #256]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a3a      	ldr	r2, [pc, #232]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <MX_GPIO_Init+0x14c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec6:	4835      	ldr	r0, [pc, #212]	; (8000f9c <MX_GPIO_Init+0x150>)
 8000ec8:	f002 f839 	bl	8002f3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f248 111e 	movw	r1, #33054	; 0x811e
 8000ed2:	4833      	ldr	r0, [pc, #204]	; (8000fa0 <MX_GPIO_Init+0x154>)
 8000ed4:	f002 f833 	bl	8002f3e <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4619      	mov	r1, r3
 8000ef0:	482a      	ldr	r0, [pc, #168]	; (8000f9c <MX_GPIO_Init+0x150>)
 8000ef2:	f001 fe89 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ef6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4824      	ldr	r0, [pc, #144]	; (8000f9c <MX_GPIO_Init+0x150>)
 8000f0c:	f001 fe7c 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f10:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8000f14:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4619      	mov	r1, r3
 8000f28:	481d      	ldr	r0, [pc, #116]	; (8000fa0 <MX_GPIO_Init+0x154>)
 8000f2a:	f001 fe6d 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4619      	mov	r1, r3
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <MX_GPIO_Init+0x158>)
 8000f44:	f001 fe60 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_GPIO_Init+0x15c>)
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <MX_GPIO_Init+0x154>)
 8000f5e:	f001 fe53 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <MX_GPIO_Init+0x154>)
 8000f7c:	f001 fe44 	bl	8002c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2028      	movs	r0, #40	; 0x28
 8000f86:	f001 fbf4 	bl	8002772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f8a:	2028      	movs	r0, #40	; 0x28
 8000f8c:	f001 fc0d 	bl	80027aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40011000 	.word	0x40011000
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	10110000 	.word	0x10110000

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_MspInit+0x5c>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4a14      	ldr	r2, [pc, #80]	; (8001014 <HAL_MspInit+0x5c>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6193      	str	r3, [r2, #24]
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_MspInit+0x5c>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_MspInit+0x5c>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <HAL_MspInit+0x5c>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_MspInit+0x5c>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_MspInit+0x60>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_MspInit+0x60>)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	40021000 	.word	0x40021000
 8001018:	40010000 	.word	0x40010000

0800101c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_ADC_MspInit+0x6c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d121      	bne.n	8001080 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_ADC_MspInit+0x70>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <HAL_ADC_MspInit+0x70>)
 8001042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_ADC_MspInit+0x70>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_ADC_MspInit+0x70>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a0c      	ldr	r2, [pc, #48]	; (800108c <HAL_ADC_MspInit+0x70>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_ADC_MspInit+0x70>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0-WKUP     ------> ADC2_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001070:	2303      	movs	r3, #3
 8001072:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_ADC_MspInit+0x74>)
 800107c:	f001 fdc4 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40012800 	.word	0x40012800
 800108c:	40021000 	.word	0x40021000
 8001090:	40010800 	.word	0x40010800

08001094 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a22      	ldr	r2, [pc, #136]	; (8001138 <HAL_SPI_MspInit+0xa4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d13d      	bne.n	8001130 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <HAL_SPI_MspInit+0xa8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a20      	ldr	r2, [pc, #128]	; (800113c <HAL_SPI_MspInit+0xa8>)
 80010ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <HAL_SPI_MspInit+0xa8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_SPI_MspInit+0xa8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_SPI_MspInit+0xa8>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_SPI_MspInit+0xa8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80010e4:	2328      	movs	r3, #40	; 0x28
 80010e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4812      	ldr	r0, [pc, #72]	; (8001140 <HAL_SPI_MspInit+0xac>)
 80010f8:	f001 fd86 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010fc:	2310      	movs	r3, #16
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <HAL_SPI_MspInit+0xac>)
 8001110:	f001 fd7a 	bl	8002c08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_SPI_MspInit+0xb0>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
 800112a:	4a06      	ldr	r2, [pc, #24]	; (8001144 <HAL_SPI_MspInit+0xb0>)
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40013000 	.word	0x40013000
 800113c:	40021000 	.word	0x40021000
 8001140:	40010c00 	.word	0x40010c00
 8001144:	40010000 	.word	0x40010000

08001148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001158:	d114      	bne.n	8001184 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <HAL_TIM_Base_MspInit+0x8c>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <HAL_TIM_Base_MspInit+0x8c>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <HAL_TIM_Base_MspInit+0x8c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	201c      	movs	r0, #28
 8001178:	f001 fafb 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800117c:	201c      	movs	r0, #28
 800117e:	f001 fb14 	bl	80027aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001182:	e022      	b.n	80011ca <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_TIM_Base_MspInit+0x90>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d10c      	bne.n	80011a8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_TIM_Base_MspInit+0x8c>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_TIM_Base_MspInit+0x8c>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_TIM_Base_MspInit+0x8c>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
}
 80011a6:	e010      	b.n	80011ca <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_TIM_Base_MspInit+0x94>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10b      	bne.n	80011ca <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_TIM_Base_MspInit+0x8c>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_TIM_Base_MspInit+0x8c>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_TIM_Base_MspInit+0x8c>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40000400 	.word	0x40000400
 80011dc:	40000800 	.word	0x40000800

080011e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_TIM_MspPostInit+0x5c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d118      	bne.n	8001232 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_TIM_MspPostInit+0x60>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_TIM_MspPostInit+0x60>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_TIM_MspPostInit+0x60>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001218:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800121c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2302      	movs	r3, #2
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_TIM_MspPostInit+0x64>)
 800122e:	f001 fceb 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40000800 	.word	0x40000800
 8001240:	40021000 	.word	0x40021000
 8001244:	40010c00 	.word	0x40010c00

08001248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a47      	ldr	r2, [pc, #284]	; (8001380 <HAL_UART_MspInit+0x138>)
 8001264:	4293      	cmp	r3, r2
 8001266:	f040 8086 	bne.w	8001376 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800126a:	4b46      	ldr	r3, [pc, #280]	; (8001384 <HAL_UART_MspInit+0x13c>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	4a45      	ldr	r2, [pc, #276]	; (8001384 <HAL_UART_MspInit+0x13c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6193      	str	r3, [r2, #24]
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <HAL_UART_MspInit+0x13c>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b40      	ldr	r3, [pc, #256]	; (8001384 <HAL_UART_MspInit+0x13c>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a3f      	ldr	r2, [pc, #252]	; (8001384 <HAL_UART_MspInit+0x13c>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6193      	str	r3, [r2, #24]
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <HAL_UART_MspInit+0x13c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800129a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	4836      	ldr	r0, [pc, #216]	; (8001388 <HAL_UART_MspInit+0x140>)
 80012b0:	f001 fcaa 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4619      	mov	r1, r3
 80012c8:	482f      	ldr	r0, [pc, #188]	; (8001388 <HAL_UART_MspInit+0x140>)
 80012ca:	f001 fc9d 	bl	8002c08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_UART_MspInit+0x144>)
 80012d0:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <HAL_UART_MspInit+0x148>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_UART_MspInit+0x144>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012da:	4b2c      	ldr	r3, [pc, #176]	; (800138c <HAL_UART_MspInit+0x144>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012e0:	4b2a      	ldr	r3, [pc, #168]	; (800138c <HAL_UART_MspInit+0x144>)
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <HAL_UART_MspInit+0x144>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_UART_MspInit+0x144>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_UART_MspInit+0x144>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_UART_MspInit+0x144>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012fe:	4823      	ldr	r0, [pc, #140]	; (800138c <HAL_UART_MspInit+0x144>)
 8001300:	f001 fa6e 	bl	80027e0 <HAL_DMA_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800130a:	f7ff fe4f 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a1e      	ldr	r2, [pc, #120]	; (800138c <HAL_UART_MspInit+0x144>)
 8001312:	63da      	str	r2, [r3, #60]	; 0x3c
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_UART_MspInit+0x144>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_UART_MspInit+0x14c>)
 800131c:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <HAL_UART_MspInit+0x150>)
 800131e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_UART_MspInit+0x14c>)
 8001322:	2210      	movs	r2, #16
 8001324:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_UART_MspInit+0x14c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_UART_MspInit+0x14c>)
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_UART_MspInit+0x14c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_UART_MspInit+0x14c>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_UART_MspInit+0x14c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_UART_MspInit+0x14c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800134a:	4812      	ldr	r0, [pc, #72]	; (8001394 <HAL_UART_MspInit+0x14c>)
 800134c:	f001 fa48 	bl	80027e0 <HAL_DMA_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001356:	f7ff fe29 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <HAL_UART_MspInit+0x14c>)
 800135e:	639a      	str	r2, [r3, #56]	; 0x38
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <HAL_UART_MspInit+0x14c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2025      	movs	r0, #37	; 0x25
 800136c:	f001 fa01 	bl	8002772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001370:	2025      	movs	r0, #37	; 0x25
 8001372:	f001 fa1a 	bl	80027aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40013800 	.word	0x40013800
 8001384:	40021000 	.word	0x40021000
 8001388:	40010800 	.word	0x40010800
 800138c:	200001e0 	.word	0x200001e0
 8001390:	40020058 	.word	0x40020058
 8001394:	20000224 	.word	0x20000224
 8001398:	40020044 	.word	0x40020044

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e2:	f000 fd89 	bl	8001ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <DMA1_Channel4_IRQHandler+0x10>)
 80013f2:	f001 fb03 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000224 	.word	0x20000224

08001400 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <DMA1_Channel5_IRQHandler+0x10>)
 8001406:	f001 faf9 	bl	80029fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  //rx_process_flag = 1;
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200001e0 	.word	0x200001e0

08001414 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <TIM2_IRQHandler+0x14>)
 800141a:	f003 f9c1 	bl	80047a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  velociraptor3_timer_handler();
 800141e:	f000 f9a1 	bl	8001764 <velociraptor3_timer_handler>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200000c0 	.word	0x200000c0

0800142c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <USART1_IRQHandler+0x10>)
 8001432:	f003 ffcb 	bl	80053cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000198 	.word	0x20000198

08001440 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001444:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001448:	f001 fd92 	bl	8002f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  ADXL345_IRQHandler();
 800144c:	f7ff fa4a 	bl	80008e4 <ADXL345_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <velociraptor3_init>:
	float l_speed, r_speed;
	float brake_factor;
} speed;

void velociraptor3_init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	ADXL345_Deselect();
 8001466:	f7ff f971 	bl	800074c <ADXL345_Deselect>
	if (ADXL345_CheckDevice())
 800146a:	f7ff fa28 	bl	80008be <ADXL345_CheckDevice>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d01b      	beq.n	80014ac <velociraptor3_init+0x4c>
	{
		for(uint8_t i = 0; i < 2; i++)
 8001474:	2300      	movs	r3, #0
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	e014      	b.n	80014a4 <velociraptor3_init+0x44>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001480:	481a      	ldr	r0, [pc, #104]	; (80014ec <velociraptor3_init+0x8c>)
 8001482:	f001 fd5c 	bl	8002f3e <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8001486:	2032      	movs	r0, #50	; 0x32
 8001488:	f000 fd52 	bl	8001f30 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001492:	4816      	ldr	r0, [pc, #88]	; (80014ec <velociraptor3_init+0x8c>)
 8001494:	f001 fd53 	bl	8002f3e <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8001498:	2032      	movs	r0, #50	; 0x32
 800149a:	f000 fd49 	bl	8001f30 <HAL_Delay>
		for(uint8_t i = 0; i < 2; i++)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	3301      	adds	r3, #1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d9e7      	bls.n	800147a <velociraptor3_init+0x1a>
 80014aa:	e00e      	b.n	80014ca <velociraptor3_init+0x6a>
		}
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <velociraptor3_init+0x8c>)
 80014b4:	f001 fd43 	bl	8002f3e <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80014b8:	2032      	movs	r0, #50	; 0x32
 80014ba:	f000 fd39 	bl	8001f30 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <velociraptor3_init+0x8c>)
 80014c6:	f001 fd3a 	bl	8002f3e <HAL_GPIO_WritePin>
	}
	ADXL345_Init();
 80014ca:	f7ff f94b 	bl	8000764 <ADXL345_Init>

	velociraptor3_debounce_init();
 80014ce:	f000 f82b 	bl	8001528 <velociraptor3_debounce_init>
	velociraptor3_sensors_init();
 80014d2:	f000 f8bf 	bl	8001654 <velociraptor3_sensors_init>
	velociraptor3_pid_init();
 80014d6:	f000 f897 	bl	8001608 <velociraptor3_pid_init>
	velociraptor3_speed_init();
 80014da:	f000 f881 	bl	80015e0 <velociraptor3_speed_init>
	velociraptor3_timers_init();
 80014de:	f000 f807 	bl	80014f0 <velociraptor3_timers_init>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40010800 	.word	0x40010800

080014f0 <velociraptor3_timers_init>:

void velociraptor3_timers_init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	// Timer ADC
	HAL_TIM_Base_Start_IT(&htim2);
 80014f4:	480a      	ldr	r0, [pc, #40]	; (8001520 <velociraptor3_timers_init+0x30>)
 80014f6:	f003 f807 	bl	8004508 <HAL_TIM_Base_Start_IT>

	// Timer Motores
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80014fa:	2100      	movs	r1, #0
 80014fc:	4809      	ldr	r0, [pc, #36]	; (8001524 <velociraptor3_timers_init+0x34>)
 80014fe:	f003 f8ad 	bl	800465c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001502:	2104      	movs	r1, #4
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <velociraptor3_timers_init+0x34>)
 8001506:	f003 f8a9 	bl	800465c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800150a:	2108      	movs	r1, #8
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <velociraptor3_timers_init+0x34>)
 800150e:	f003 f8a5 	bl	800465c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001512:	210c      	movs	r1, #12
 8001514:	4803      	ldr	r0, [pc, #12]	; (8001524 <velociraptor3_timers_init+0x34>)
 8001516:	f003 f8a1 	bl	800465c <HAL_TIM_PWM_Start>
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200000c0 	.word	0x200000c0
 8001524:	20000150 	.word	0x20000150

08001528 <velociraptor3_debounce_init>:

void velociraptor3_debounce_init(void)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
	debounce[0].gpio = GPIOB;
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 8001530:	4a29      	ldr	r2, [pc, #164]	; (80015d8 <velociraptor3_debounce_init+0xb0>)
 8001532:	601a      	str	r2, [r3, #0]
	debounce[1].gpio = GPIOB;
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 8001536:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <velociraptor3_debounce_init+0xb0>)
 8001538:	60da      	str	r2, [r3, #12]
	debounce[2].gpio = GPIOC;
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 800153c:	4a27      	ldr	r2, [pc, #156]	; (80015dc <velociraptor3_debounce_init+0xb4>)
 800153e:	619a      	str	r2, [r3, #24]
	debounce[3].gpio = GPIOC;
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 8001542:	4a26      	ldr	r2, [pc, #152]	; (80015dc <velociraptor3_debounce_init+0xb4>)
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
	debounce[0].pin = GPIO_PIN_11;
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 8001548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800154c:	809a      	strh	r2, [r3, #4]
	debounce[1].pin = GPIO_PIN_10;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 8001550:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001554:	821a      	strh	r2, [r3, #16]
	debounce[2].pin = GPIO_PIN_15;
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 8001558:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800155c:	839a      	strh	r2, [r3, #28]
	debounce[3].pin = GPIO_PIN_14;
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 8001560:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001564:	851a      	strh	r2, [r3, #40]	; 0x28

	for(uint8_t i = 0; i < 4; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	e02a      	b.n	80015c2 <velociraptor3_debounce_init+0x9a>
	{
		debounce[i].state = GPIO_PIN_SET;
 800156c:	79fa      	ldrb	r2, [r7, #7]
 800156e:	4919      	ldr	r1, [pc, #100]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	3306      	adds	r3, #6
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
		debounce[i].prev_state = GPIO_PIN_SET;
 8001580:	79fa      	ldrb	r2, [r7, #7]
 8001582:	4914      	ldr	r1, [pc, #80]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	3307      	adds	r3, #7
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
		debounce[i].flag = 0;
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	490f      	ldr	r1, [pc, #60]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	3308      	adds	r3, #8
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
		debounce[i].ticks = 0;
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	490a      	ldr	r1, [pc, #40]	; (80015d4 <velociraptor3_debounce_init+0xac>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3309      	adds	r3, #9
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	3301      	adds	r3, #1
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d9d1      	bls.n	800156c <velociraptor3_debounce_init+0x44>
	}
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	2000026c 	.word	0x2000026c
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	40011000 	.word	0x40011000

080015e0 <velociraptor3_speed_init>:

void velociraptor3_speed_init(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
	speed.max_speed = 1.0f;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <velociraptor3_speed_init+0x24>)
 80015e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015ea:	601a      	str	r2, [r3, #0]
	speed.brake_factor = 1.0f;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <velociraptor3_speed_init+0x24>)
 80015ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015f2:	615a      	str	r2, [r3, #20]
	speed.slope_correction = 0.0f;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <velociraptor3_speed_init+0x24>)
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	200002e8 	.word	0x200002e8

08001608 <velociraptor3_pid_init>:

void velociraptor3_pid_init(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	pid.correction = 0.f;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <velociraptor3_pid_init+0x44>)
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
	pid.error_dv = 0.f;
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <velociraptor3_pid_init+0x44>)
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
	pid.error_int = 0.f;
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <velociraptor3_pid_init+0x44>)
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	609a      	str	r2, [r3, #8]

	// TODO: cargar desde mem
	pid.kp = 1.f;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <velociraptor3_pid_init+0x44>)
 8001626:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800162a:	611a      	str	r2, [r3, #16]
	pid.ki = 0.f;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <velociraptor3_pid_init+0x44>)
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
	pid.kd = 0.6f;
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <velociraptor3_pid_init+0x44>)
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <velociraptor3_pid_init+0x48>)
 8001638:	615a      	str	r2, [r3, #20]

	pid.prev_error = 0.f;
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <velociraptor3_pid_init+0x44>)
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	2000029c 	.word	0x2000029c
 8001650:	3f19999a 	.word	0x3f19999a

08001654 <velociraptor3_sensors_init>:

void velociraptor3_sensors_init(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
	sensors.active_sensor = 0;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2020 	strb.w	r2, [r3, #32]
	sensors.active_buffer = BUFFER_0;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	sensors.flag_data_ready = 0;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	sensors.prev_error = 0.f;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
	sensors.track_color = B_OVER_W;		// TODO: cargar desde mem
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 800167a:	2201      	movs	r2, #1
 800167c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	
	sensors.threshold[0] = 1000;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 8001682:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001686:	821a      	strh	r2, [r3, #16]
	sensors.threshold[1] = 1500;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 800168a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800168e:	825a      	strh	r2, [r3, #18]
	sensors.threshold[2] = 1500;
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 8001692:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001696:	829a      	strh	r2, [r3, #20]
	sensors.threshold[3] = 1800;
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 800169a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800169e:	82da      	strh	r2, [r3, #22]
	sensors.threshold[4] = 2000;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 80016a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016a6:	831a      	strh	r2, [r3, #24]
	sensors.threshold[5] = 1500;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 80016aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016ae:	835a      	strh	r2, [r3, #26]
	sensors.threshold[6] = 1500;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 80016b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016b6:	839a      	strh	r2, [r3, #28]
	sensors.threshold[7] = 1500;
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <velociraptor3_sensors_init+0x74>)
 80016ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016be:	83da      	strh	r2, [r3, #30]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	200002b8 	.word	0x200002b8

080016cc <velociraptor3_main_loop>:

void velociraptor3_main_loop(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	velociraptor3_debounce_loop();
 80016d0:	f000 fb1e 	bl	8001d10 <velociraptor3_debounce_loop>

	switch(robot_state)
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <velociraptor3_main_loop+0x88>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <velociraptor3_main_loop+0x16>
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d015      	beq.n	800170c <velociraptor3_main_loop+0x40>
			robot_state = stopped;
		}

		break;
	}
}
 80016e0:	e036      	b.n	8001750 <velociraptor3_main_loop+0x84>
		if(debounce[2].flag && !debounce[2].state)
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <velociraptor3_main_loop+0x8c>)
 80016e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d02e      	beq.n	800174a <velociraptor3_main_loop+0x7e>
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <velociraptor3_main_loop+0x8c>)
 80016ee:	7f9b      	ldrb	r3, [r3, #30]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d12a      	bne.n	800174a <velociraptor3_main_loop+0x7e>
			debounce[2].flag = 0;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <velociraptor3_main_loop+0x8c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2020 	strb.w	r2, [r3, #32]
			pid.error_int = 0.f;
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <velociraptor3_main_loop+0x90>)
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
			robot_state = running;
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <velociraptor3_main_loop+0x88>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
		break;
 800170a:	e01e      	b.n	800174a <velociraptor3_main_loop+0x7e>
		if(sensors.flag_data_ready)
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <velociraptor3_main_loop+0x94>)
 800170e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <velociraptor3_main_loop+0x56>
			sensors.flag_data_ready = 0;
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <velociraptor3_main_loop+0x94>)
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			velociraptor3_motors_pid();
 800171e:	f000 f89b 	bl	8001858 <velociraptor3_motors_pid>
		if(debounce[3].flag && !debounce[3].state)
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <velociraptor3_main_loop+0x8c>)
 8001724:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001728:	2b00      	cmp	r3, #0
 800172a:	d010      	beq.n	800174e <velociraptor3_main_loop+0x82>
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <velociraptor3_main_loop+0x8c>)
 800172e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10b      	bne.n	800174e <velociraptor3_main_loop+0x82>
			debounce[3].flag = 0;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <velociraptor3_main_loop+0x8c>)
 8001738:	2200      	movs	r2, #0
 800173a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			velociraptor3_brake();
 800173e:	f000 f9d1 	bl	8001ae4 <velociraptor3_brake>
			robot_state = stopped;
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <velociraptor3_main_loop+0x88>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
		break;
 8001748:	e001      	b.n	800174e <velociraptor3_main_loop+0x82>
		break;
 800174a:	bf00      	nop
 800174c:	e000      	b.n	8001750 <velociraptor3_main_loop+0x84>
		break;
 800174e:	bf00      	nop
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000268 	.word	0x20000268
 8001758:	2000026c 	.word	0x2000026c
 800175c:	2000029c 	.word	0x2000029c
 8001760:	200002b8 	.word	0x200002b8

08001764 <velociraptor3_timer_handler>:

void velociraptor3_timer_handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	velociraptor3_sensors_routine();
 8001768:	f000 f802 	bl	8001770 <velociraptor3_sensors_routine>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <velociraptor3_sensors_routine>:

void velociraptor3_sensors_routine(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	uint16_t adc_read = HAL_ADC_GetValue(&hadc2);
 8001776:	4835      	ldr	r0, [pc, #212]	; (800184c <velociraptor3_sensors_routine+0xdc>)
 8001778:	f000 fd84 	bl	8002284 <HAL_ADC_GetValue>
 800177c:	4603      	mov	r3, r0
 800177e:	80fb      	strh	r3, [r7, #6]
	sensors.sensor_val[sensors.active_sensor] = (uint8_t) (adc_read > sensors.threshold[sensors.active_sensor]);
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 8001782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001786:	4a32      	ldr	r2, [pc, #200]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 8001788:	3308      	adds	r3, #8
 800178a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800178e:	88fa      	ldrh	r2, [r7, #6]
 8001790:	429a      	cmp	r2, r3
 8001792:	bf8c      	ite	hi
 8001794:	2301      	movhi	r3, #1
 8001796:	2300      	movls	r3, #0
 8001798:	b2d9      	uxtb	r1, r3
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 800179c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 80017a4:	5499      	strb	r1, [r3, r2]

	sensors.active_sensor += 1;
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 80017a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ac:	3301      	adds	r3, #1
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 80017b2:	f883 2020 	strb.w	r2, [r3, #32]
	sensors.active_sensor %= 16;
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 80017b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 80017c4:	f883 2020 	strb.w	r2, [r3, #32]

	if(!(sensors.active_sensor % 8))
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 80017ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d111      	bne.n	80017fc <velociraptor3_sensors_routine+0x8c>
	{
		if(!sensors.active_sensor) sensors.active_buffer = BUFFER_0;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 80017da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d104      	bne.n	80017ec <velociraptor3_sensors_routine+0x7c>
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80017ea:	e003      	b.n	80017f4 <velociraptor3_sensors_routine+0x84>
		else sensors.active_buffer = BUFFER_1;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		sensors.flag_data_ready = 1;
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, sensors.active_sensor & 1);
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 80017fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	2102      	movs	r1, #2
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <velociraptor3_sensors_routine+0xe4>)
 800180e:	f001 fb96 	bl	8002f3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, sensors.active_sensor & 2);
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 8001814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	2104      	movs	r1, #4
 8001822:	480c      	ldr	r0, [pc, #48]	; (8001854 <velociraptor3_sensors_routine+0xe4>)
 8001824:	f001 fb8b 	bl	8002f3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, sensors.active_sensor & 4);
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <velociraptor3_sensors_routine+0xe0>)
 800182a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	2108      	movs	r1, #8
 8001838:	4806      	ldr	r0, [pc, #24]	; (8001854 <velociraptor3_sensors_routine+0xe4>)
 800183a:	f001 fb80 	bl	8002f3e <HAL_GPIO_WritePin>

	HAL_ADC_Start(&hadc2);
 800183e:	4803      	ldr	r0, [pc, #12]	; (800184c <velociraptor3_sensors_routine+0xdc>)
 8001840:	f000 fc72 	bl	8002128 <HAL_ADC_Start>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000038 	.word	0x20000038
 8001850:	200002b8 	.word	0x200002b8
 8001854:	40010800 	.word	0x40010800

08001858 <velociraptor3_motors_pid>:

void velociraptor3_motors_pid(void)
{
 8001858:	b598      	push	{r3, r4, r7, lr}
 800185a:	af00      	add	r7, sp, #0
	velociraptor3_calc_error();
 800185c:	f000 f89e 	bl	800199c <velociraptor3_calc_error>

	pid.error_int += sensors.error;
 8001860:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <velociraptor3_motors_pid+0x138>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a4b      	ldr	r2, [pc, #300]	; (8001994 <velociraptor3_motors_pid+0x13c>)
 8001866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fc74 	bl	8000158 <__addsf3>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	4b46      	ldr	r3, [pc, #280]	; (8001990 <velociraptor3_motors_pid+0x138>)
 8001876:	609a      	str	r2, [r3, #8]
	pid.error_dv = sensors.error - pid.prev_error;
 8001878:	4b46      	ldr	r3, [pc, #280]	; (8001994 <velociraptor3_motors_pid+0x13c>)
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	4a44      	ldr	r2, [pc, #272]	; (8001990 <velociraptor3_motors_pid+0x138>)
 800187e:	6852      	ldr	r2, [r2, #4]
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fc66 	bl	8000154 <__aeabi_fsub>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	4b40      	ldr	r3, [pc, #256]	; (8001990 <velociraptor3_motors_pid+0x138>)
 800188e:	60da      	str	r2, [r3, #12]

	pid.correction = pid.kp * sensors.error;
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <velociraptor3_motors_pid+0x138>)
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	4a3f      	ldr	r2, [pc, #252]	; (8001994 <velociraptor3_motors_pid+0x13c>)
 8001896:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fd64 	bl	8000368 <__aeabi_fmul>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <velociraptor3_motors_pid+0x138>)
 80018a6:	601a      	str	r2, [r3, #0]
	pid.correction += pid.ki * pid.error_int;
 80018a8:	4b39      	ldr	r3, [pc, #228]	; (8001990 <velociraptor3_motors_pid+0x138>)
 80018aa:	681c      	ldr	r4, [r3, #0]
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <velociraptor3_motors_pid+0x138>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a37      	ldr	r2, [pc, #220]	; (8001990 <velociraptor3_motors_pid+0x138>)
 80018b2:	6892      	ldr	r2, [r2, #8]
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fd56 	bl	8000368 <__aeabi_fmul>
 80018bc:	4603      	mov	r3, r0
 80018be:	4619      	mov	r1, r3
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7fe fc49 	bl	8000158 <__addsf3>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <velociraptor3_motors_pid+0x138>)
 80018cc:	601a      	str	r2, [r3, #0]
	pid.correction += pid.kd * pid.error_dv;
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <velociraptor3_motors_pid+0x138>)
 80018d0:	681c      	ldr	r4, [r3, #0]
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <velociraptor3_motors_pid+0x138>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4a2e      	ldr	r2, [pc, #184]	; (8001990 <velociraptor3_motors_pid+0x138>)
 80018d8:	68d2      	ldr	r2, [r2, #12]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fd43 	bl	8000368 <__aeabi_fmul>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4619      	mov	r1, r3
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7fe fc36 	bl	8000158 <__addsf3>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <velociraptor3_motors_pid+0x138>)
 80018f2:	601a      	str	r2, [r3, #0]

	speed.base_speed = 1.0f - pid.correction * speed.brake_factor;
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <velociraptor3_motors_pid+0x138>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a27      	ldr	r2, [pc, #156]	; (8001998 <velociraptor3_motors_pid+0x140>)
 80018fa:	6952      	ldr	r2, [r2, #20]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fd32 	bl	8000368 <__aeabi_fmul>
 8001904:	4603      	mov	r3, r0
 8001906:	4619      	mov	r1, r3
 8001908:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800190c:	f7fe fc22 	bl	8000154 <__aeabi_fsub>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	4b20      	ldr	r3, [pc, #128]	; (8001998 <velociraptor3_motors_pid+0x140>)
 8001916:	605a      	str	r2, [r3, #4]
	speed.base_speed *= (1.0f - speed.slope_correction);
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <velociraptor3_motors_pid+0x140>)
 800191a:	685c      	ldr	r4, [r3, #4]
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <velociraptor3_motors_pid+0x140>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001926:	f7fe fc15 	bl	8000154 <__aeabi_fsub>
 800192a:	4603      	mov	r3, r0
 800192c:	4619      	mov	r1, r3
 800192e:	4620      	mov	r0, r4
 8001930:	f7fe fd1a 	bl	8000368 <__aeabi_fmul>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <velociraptor3_motors_pid+0x140>)
 800193a:	605a      	str	r2, [r3, #4]

	speed.l_speed = speed.max_speed * (speed.base_speed + pid.correction);
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <velociraptor3_motors_pid+0x140>)
 800193e:	681c      	ldr	r4, [r3, #0]
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <velociraptor3_motors_pid+0x140>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a12      	ldr	r2, [pc, #72]	; (8001990 <velociraptor3_motors_pid+0x138>)
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fc04 	bl	8000158 <__addsf3>
 8001950:	4603      	mov	r3, r0
 8001952:	4619      	mov	r1, r3
 8001954:	4620      	mov	r0, r4
 8001956:	f7fe fd07 	bl	8000368 <__aeabi_fmul>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <velociraptor3_motors_pid+0x140>)
 8001960:	60da      	str	r2, [r3, #12]
	speed.r_speed = speed.max_speed * (speed.base_speed - pid.correction);
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <velociraptor3_motors_pid+0x140>)
 8001964:	681c      	ldr	r4, [r3, #0]
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <velociraptor3_motors_pid+0x140>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <velociraptor3_motors_pid+0x138>)
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fbef 	bl	8000154 <__aeabi_fsub>
 8001976:	4603      	mov	r3, r0
 8001978:	4619      	mov	r1, r3
 800197a:	4620      	mov	r0, r4
 800197c:	f7fe fcf4 	bl	8000368 <__aeabi_fmul>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <velociraptor3_motors_pid+0x140>)
 8001986:	611a      	str	r2, [r3, #16]

	velociraptor3_setpwm();
 8001988:	f000 f8ca 	bl	8001b20 <velociraptor3_setpwm>
}
 800198c:	bf00      	nop
 800198e:	bd98      	pop	{r3, r4, r7, pc}
 8001990:	2000029c 	.word	0x2000029c
 8001994:	200002b8 	.word	0x200002b8
 8001998:	200002e8 	.word	0x200002e8

0800199c <velociraptor3_calc_error>:

void velociraptor3_calc_error(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
	uint8_t * buffer_ptr;
	uint8_t white_count = 0, black_count;
 80019a2:	2300      	movs	r3, #0
 80019a4:	75fb      	strb	r3, [r7, #23]
	float white_sum = 0, black_sum = 0;
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]

	// buffer apuntando a la posición de lectura (buffer inact.)
	buffer_ptr = sensors.sensor_val;
 80019b2:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <velociraptor3_calc_error+0x140>)
 80019b4:	607b      	str	r3, [r7, #4]
	buffer_ptr += 8 * (sensors.active_buffer == BUFFER_1);
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <velociraptor3_calc_error+0x140>)
 80019b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <velociraptor3_calc_error+0x28>
 80019c0:	2308      	movs	r3, #8
 80019c2:	e000      	b.n	80019c6 <velociraptor3_calc_error+0x2a>
 80019c4:	2300      	movs	r3, #0
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	607b      	str	r3, [r7, #4]

	// análisis de sensores
	for(uint8_t n = 0; n < 8; n++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	72fb      	strb	r3, [r7, #11]
 80019d0:	e02e      	b.n	8001a30 <velociraptor3_calc_error+0x94>
	{
		white_count += sensors.sensor_val[n];
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	4a41      	ldr	r2, [pc, #260]	; (8001adc <velociraptor3_calc_error+0x140>)
 80019d6:	5cd2      	ldrb	r2, [r2, r3]
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	4413      	add	r3, r2
 80019dc:	75fb      	strb	r3, [r7, #23]
		
		if(!sensors.sensor_val[n]) black_sum += ((float) n - 3.5f);
 80019de:	7afb      	ldrb	r3, [r7, #11]
 80019e0:	4a3e      	ldr	r2, [pc, #248]	; (8001adc <velociraptor3_calc_error+0x140>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d110      	bne.n	8001a0a <velociraptor3_calc_error+0x6e>
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fc64 	bl	80002b8 <__aeabi_ui2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	493b      	ldr	r1, [pc, #236]	; (8001ae0 <velociraptor3_calc_error+0x144>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fbad 	bl	8000154 <__aeabi_fsub>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4619      	mov	r1, r3
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7fe fbaa 	bl	8000158 <__addsf3>
 8001a04:	4603      	mov	r3, r0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e00f      	b.n	8001a2a <velociraptor3_calc_error+0x8e>
		else white_sum += ((float) n - 3.5f);
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fc53 	bl	80002b8 <__aeabi_ui2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4932      	ldr	r1, [pc, #200]	; (8001ae0 <velociraptor3_calc_error+0x144>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fb9c 	bl	8000154 <__aeabi_fsub>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6938      	ldr	r0, [r7, #16]
 8001a22:	f7fe fb99 	bl	8000158 <__addsf3>
 8001a26:	4603      	mov	r3, r0
 8001a28:	613b      	str	r3, [r7, #16]
	for(uint8_t n = 0; n < 8; n++)
 8001a2a:	7afb      	ldrb	r3, [r7, #11]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	72fb      	strb	r3, [r7, #11]
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	2b07      	cmp	r3, #7
 8001a34:	d9cd      	bls.n	80019d2 <velociraptor3_calc_error+0x36>
	}

	// auxiliar nomá
	black_count = 7 - white_count;
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
 8001a38:	f1c3 0307 	rsb	r3, r3, #7
 8001a3c:	70fb      	strb	r3, [r7, #3]

	// si es auto, determino a cuál corresponde según mayoría de sensores activos
	if(sensors.track_color == AUTO)
 8001a3e:	4b27      	ldr	r3, [pc, #156]	; (8001adc <velociraptor3_calc_error+0x140>)
 8001a40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d10b      	bne.n	8001a60 <velociraptor3_calc_error+0xc4>
	{
		if(white_count < 4) sensors.track_color = W_OVER_B;
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d804      	bhi.n	8001a58 <velociraptor3_calc_error+0xbc>
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <velociraptor3_calc_error+0x140>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001a56:	e003      	b.n	8001a60 <velociraptor3_calc_error+0xc4>
		else sensors.track_color = B_OVER_W;
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <velociraptor3_calc_error+0x140>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}

	// división sólo si hay sensores activos!!!
	if(sensors.track_color == W_OVER_B && white_count > 0)
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <velociraptor3_calc_error+0x140>)
 8001a62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d115      	bne.n	8001a96 <velociraptor3_calc_error+0xfa>
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d012      	beq.n	8001a96 <velociraptor3_calc_error+0xfa>
	{
		sensors.error = (float) white_sum / ((float) white_count * 3.5f);
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fc20 	bl	80002b8 <__aeabi_ui2f>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4919      	ldr	r1, [pc, #100]	; (8001ae0 <velociraptor3_calc_error+0x144>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fc73 	bl	8000368 <__aeabi_fmul>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4619      	mov	r1, r3
 8001a86:	6938      	ldr	r0, [r7, #16]
 8001a88:	f7fe fd22 	bl	80004d0 <__aeabi_fdiv>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <velociraptor3_calc_error+0x140>)
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
 8001a94:	e019      	b.n	8001aca <velociraptor3_calc_error+0x12e>
	}
	else if(sensors.track_color == B_OVER_W && black_count > 0)
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <velociraptor3_calc_error+0x140>)
 8001a98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d114      	bne.n	8001aca <velociraptor3_calc_error+0x12e>
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d011      	beq.n	8001aca <velociraptor3_calc_error+0x12e>
	{
		sensors.error = (float) black_sum / ((float) black_count * 3.5f);
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fc05 	bl	80002b8 <__aeabi_ui2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	490b      	ldr	r1, [pc, #44]	; (8001ae0 <velociraptor3_calc_error+0x144>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fc58 	bl	8000368 <__aeabi_fmul>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4619      	mov	r1, r3
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f7fe fd07 	bl	80004d0 <__aeabi_fdiv>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <velociraptor3_calc_error+0x140>)
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
	}

	sensors.prev_error = sensors.error;
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <velociraptor3_calc_error+0x140>)
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	4a03      	ldr	r2, [pc, #12]	; (8001adc <velociraptor3_calc_error+0x140>)
 8001ad0:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200002b8 	.word	0x200002b8
 8001ae0:	40600000 	.word	0x40600000

08001ae4 <velociraptor3_brake>:

void velociraptor3_brake(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
	uint32_t aux_arrel = __HAL_TIM_GET_AUTORELOAD(&htim4);
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <velociraptor3_brake+0x38>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, aux_arrel);
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <velociraptor3_brake+0x38>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, aux_arrel);
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <velociraptor3_brake+0x38>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, aux_arrel);
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <velociraptor3_brake+0x38>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, aux_arrel);
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <velociraptor3_brake+0x38>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000150 	.word	0x20000150

08001b20 <velociraptor3_setpwm>:

void velociraptor3_setpwm(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
	float local_speed;
	const float lower_lim = (float) MIN_SPEED / (float) MAX_SPEED;
 8001b26:	4b75      	ldr	r3, [pc, #468]	; (8001cfc <velociraptor3_setpwm+0x1dc>)
 8001b28:	607b      	str	r3, [r7, #4]

	for(uint8_t n_motor = MOTOR_L; n_motor <= MOTOR_R; n_motor++)
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	72fb      	strb	r3, [r7, #11]
 8001b2e:	e0db      	b.n	8001ce8 <velociraptor3_setpwm+0x1c8>
	{
		local_speed = (n_motor == MOTOR_L) ? speed.l_speed : speed.r_speed;
 8001b30:	7afb      	ldrb	r3, [r7, #11]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d102      	bne.n	8001b3c <velociraptor3_setpwm+0x1c>
 8001b36:	4b72      	ldr	r3, [pc, #456]	; (8001d00 <velociraptor3_setpwm+0x1e0>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	e001      	b.n	8001b40 <velociraptor3_setpwm+0x20>
 8001b3c:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <velociraptor3_setpwm+0x1e0>)
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	60fb      	str	r3, [r7, #12]

		if(local_speed > 1.0f) local_speed = 1.0f;
 8001b42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7fe fdca 	bl	80006e0 <__aeabi_fcmpgt>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <velociraptor3_setpwm+0x38>
 8001b52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b56:	60fb      	str	r3, [r7, #12]
		if(local_speed < -1.0f) local_speed = -1.0f;
 8001b58:	496a      	ldr	r1, [pc, #424]	; (8001d04 <velociraptor3_setpwm+0x1e4>)
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7fe fda2 	bl	80006a4 <__aeabi_fcmplt>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <velociraptor3_setpwm+0x4a>
 8001b66:	4b67      	ldr	r3, [pc, #412]	; (8001d04 <velociraptor3_setpwm+0x1e4>)
 8001b68:	60fb      	str	r3, [r7, #12]

		if(local_speed < 0.0f)
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7fe fd98 	bl	80006a4 <__aeabi_fcmplt>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d04a      	beq.n	8001c10 <velociraptor3_setpwm+0xf0>
		{
			local_speed *= -1;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b80:	60fb      	str	r3, [r7, #12]
			local_speed *= (1.0f - lower_lim);
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001b88:	f7fe fae4 	bl	8000154 <__aeabi_fsub>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7fe fbe9 	bl	8000368 <__aeabi_fmul>
 8001b96:	4603      	mov	r3, r0
 8001b98:	60fb      	str	r3, [r7, #12]
			local_speed += lower_lim;
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fadb 	bl	8000158 <__addsf3>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	60fb      	str	r3, [r7, #12]
			local_speed *= (MAX_SPEED - 1);
 8001ba6:	4958      	ldr	r1, [pc, #352]	; (8001d08 <velociraptor3_setpwm+0x1e8>)
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7fe fbdd 	bl	8000368 <__aeabi_fmul>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	60fb      	str	r3, [r7, #12]

			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_3 : TIM_CHANNEL_2, (uint16_t) local_speed);
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d008      	beq.n	8001bca <velociraptor3_setpwm+0xaa>
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7fe fd9b 	bl	80006f4 <__aeabi_f2uiz>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b52      	ldr	r3, [pc, #328]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8001bc8:	e015      	b.n	8001bf6 <velociraptor3_setpwm+0xd6>
 8001bca:	7afb      	ldrb	r3, [r7, #11]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d109      	bne.n	8001be4 <velociraptor3_setpwm+0xc4>
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7fe fd8f 	bl	80006f4 <__aeabi_f2uiz>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	b299      	uxth	r1, r3
 8001bda:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	460b      	mov	r3, r1
 8001be0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001be2:	e008      	b.n	8001bf6 <velociraptor3_setpwm+0xd6>
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7fe fd85 	bl	80006f4 <__aeabi_f2uiz>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b299      	uxth	r1, r3
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_4 : TIM_CHANNEL_1, 0);
 8001bf6:	7afb      	ldrb	r3, [r7, #11]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d004      	beq.n	8001c06 <velociraptor3_setpwm+0xe6>
 8001bfc:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34
 8001c04:	e06d      	b.n	8001ce2 <velociraptor3_setpwm+0x1c2>
 8001c06:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c0e:	e068      	b.n	8001ce2 <velociraptor3_setpwm+0x1c2>
		}
		else if(local_speed > 0.0f)
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7fe fd63 	bl	80006e0 <__aeabi_fcmpgt>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d040      	beq.n	8001ca2 <velociraptor3_setpwm+0x182>
		{
			local_speed *= (1.0f - lower_lim);
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001c26:	f7fe fa95 	bl	8000154 <__aeabi_fsub>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7fe fb9a 	bl	8000368 <__aeabi_fmul>
 8001c34:	4603      	mov	r3, r0
 8001c36:	60fb      	str	r3, [r7, #12]
			local_speed += lower_lim;
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7fe fa8c 	bl	8000158 <__addsf3>
 8001c40:	4603      	mov	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
			local_speed *= (MAX_SPEED - 1);
 8001c44:	4930      	ldr	r1, [pc, #192]	; (8001d08 <velociraptor3_setpwm+0x1e8>)
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f7fe fb8e 	bl	8000368 <__aeabi_fmul>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60fb      	str	r3, [r7, #12]

			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_4 : TIM_CHANNEL_1, (uint16_t) local_speed);
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d008      	beq.n	8001c68 <velociraptor3_setpwm+0x148>
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7fe fd4c 	bl	80006f4 <__aeabi_f2uiz>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34
 8001c66:	e007      	b.n	8001c78 <velociraptor3_setpwm+0x158>
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7fe fd43 	bl	80006f4 <__aeabi_f2uiz>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_3 : TIM_CHANNEL_2, 0);
 8001c78:	7afb      	ldrb	r3, [r7, #11]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d004      	beq.n	8001c88 <velociraptor3_setpwm+0x168>
 8001c7e:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2200      	movs	r2, #0
 8001c84:	639a      	str	r2, [r3, #56]	; 0x38
 8001c86:	e02c      	b.n	8001ce2 <velociraptor3_setpwm+0x1c2>
 8001c88:	7afb      	ldrb	r3, [r7, #11]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d104      	bne.n	8001c98 <velociraptor3_setpwm+0x178>
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	2300      	movs	r3, #0
 8001c94:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c96:	e024      	b.n	8001ce2 <velociraptor3_setpwm+0x1c2>
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca0:	e01f      	b.n	8001ce2 <velociraptor3_setpwm+0x1c2>
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_1 : TIM_CHANNEL_3, 0);
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d104      	bne.n	8001cb2 <velociraptor3_setpwm+0x192>
 8001ca8:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb0:	e00b      	b.n	8001cca <velociraptor3_setpwm+0x1aa>
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d004      	beq.n	8001cc2 <velociraptor3_setpwm+0x1a2>
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001cc0:	e003      	b.n	8001cca <velociraptor3_setpwm+0x1aa>
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, (n_motor == MOTOR_L) ? TIM_CHANNEL_2 : TIM_CHANNEL_4, 0);
 8001cca:	7afb      	ldrb	r3, [r7, #11]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d104      	bne.n	8001cda <velociraptor3_setpwm+0x1ba>
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38
 8001cd8:	e003      	b.n	8001ce2 <velociraptor3_setpwm+0x1c2>
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <velociraptor3_setpwm+0x1ec>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
	for(uint8_t n_motor = MOTOR_L; n_motor <= MOTOR_R; n_motor++)
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	72fb      	strb	r3, [r7, #11]
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	f67f af20 	bls.w	8001b30 <velociraptor3_setpwm+0x10>
		}
	}
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	3ef8e38e 	.word	0x3ef8e38e
 8001d00:	200002e8 	.word	0x200002e8
 8001d04:	bf800000 	.word	0xbf800000
 8001d08:	4433c000 	.word	0x4433c000
 8001d0c:	20000150 	.word	0x20000150

08001d10 <velociraptor3_debounce_loop>:

void velociraptor3_debounce_loop(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	71fb      	strb	r3, [r7, #7]
 8001d1a:	e076      	b.n	8001e0a <velociraptor3_debounce_loop+0xfa>
	{
		GPIO_PinState current_state = HAL_GPIO_ReadPin(debounce[i].gpio, debounce[i].pin);
 8001d1c:	79fa      	ldrb	r2, [r7, #7]
 8001d1e:	493f      	ldr	r1, [pc, #252]	; (8001e1c <velociraptor3_debounce_loop+0x10c>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	79fa      	ldrb	r2, [r7, #7]
 8001d2e:	493b      	ldr	r1, [pc, #236]	; (8001e1c <velociraptor3_debounce_loop+0x10c>)
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f001 f8e6 	bl	8002f10 <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	71bb      	strb	r3, [r7, #6]
		if(current_state != debounce[i].prev_state)
 8001d48:	79fa      	ldrb	r2, [r7, #7]
 8001d4a:	4934      	ldr	r1, [pc, #208]	; (8001e1c <velociraptor3_debounce_loop+0x10c>)
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	3307      	adds	r3, #7
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	79ba      	ldrb	r2, [r7, #6]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d013      	beq.n	8001d88 <velociraptor3_debounce_loop+0x78>
		{
			debounce[i].prev_state = current_state;
 8001d60:	79fa      	ldrb	r2, [r7, #7]
 8001d62:	492e      	ldr	r1, [pc, #184]	; (8001e1c <velociraptor3_debounce_loop+0x10c>)
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3307      	adds	r3, #7
 8001d70:	79ba      	ldrb	r2, [r7, #6]
 8001d72:	701a      	strb	r2, [r3, #0]
			debounce[i].ticks = DEBOUNCE_TICKS;
 8001d74:	79fa      	ldrb	r2, [r7, #7]
 8001d76:	4929      	ldr	r1, [pc, #164]	; (8001e1c <velociraptor3_debounce_loop+0x10c>)
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	3309      	adds	r3, #9
 8001d84:	2214      	movs	r2, #20
 8001d86:	701a      	strb	r2, [r3, #0]
		}
		if(debounce[i].ticks)
 8001d88:	79fa      	ldrb	r2, [r7, #7]
 8001d8a:	4924      	ldr	r1, [pc, #144]	; (8001e1c <velociraptor3_debounce_loop+0x10c>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	3309      	adds	r3, #9
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d032      	beq.n	8001e04 <velociraptor3_debounce_loop+0xf4>
		{
			debounce[i].ticks--;
 8001d9e:	79fa      	ldrb	r2, [r7, #7]
 8001da0:	491e      	ldr	r1, [pc, #120]	; (8001e1c <velociraptor3_debounce_loop+0x10c>)
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	3309      	adds	r3, #9
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b2d8      	uxtb	r0, r3
 8001db4:	4919      	ldr	r1, [pc, #100]	; (8001e1c <velociraptor3_debounce_loop+0x10c>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3309      	adds	r3, #9
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	701a      	strb	r2, [r3, #0]
			if(!debounce[i].ticks)
 8001dc6:	79fa      	ldrb	r2, [r7, #7]
 8001dc8:	4914      	ldr	r1, [pc, #80]	; (8001e1c <velociraptor3_debounce_loop+0x10c>)
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3309      	adds	r3, #9
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d113      	bne.n	8001e04 <velociraptor3_debounce_loop+0xf4>
			{
				debounce[i].state = current_state;
 8001ddc:	79fa      	ldrb	r2, [r7, #7]
 8001dde:	490f      	ldr	r1, [pc, #60]	; (8001e1c <velociraptor3_debounce_loop+0x10c>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	3306      	adds	r3, #6
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	701a      	strb	r2, [r3, #0]
				debounce[i].flag = 1;
 8001df0:	79fa      	ldrb	r2, [r7, #7]
 8001df2:	490a      	ldr	r1, [pc, #40]	; (8001e1c <velociraptor3_debounce_loop+0x10c>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3308      	adds	r3, #8
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	3301      	adds	r3, #1
 8001e08:	71fb      	strb	r3, [r7, #7]
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d985      	bls.n	8001d1c <velociraptor3_debounce_loop+0xc>
			}
		}
	}
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000026c 	.word	0x2000026c

08001e20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e20:	f7ff fb18 	bl	8001454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e24:	480b      	ldr	r0, [pc, #44]	; (8001e54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e26:	490c      	ldr	r1, [pc, #48]	; (8001e58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e28:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e3c:	4c09      	ldr	r4, [pc, #36]	; (8001e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f003 ffa9 	bl	8005da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e4e:	f7fe fd91 	bl	8000974 <main>
  bx lr
 8001e52:	4770      	bx	lr
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e5c:	08005e34 	.word	0x08005e34
  ldr r2, =_sbss
 8001e60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e64:	20000304 	.word	0x20000304

08001e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC1_2_IRQHandler>
	...

08001e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_Init+0x28>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_Init+0x28>)
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f000 fc6d 	bl	800275c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e82:	200f      	movs	r0, #15
 8001e84:	f000 f808 	bl	8001e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e88:	f7ff f896 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40022000 	.word	0x40022000

08001e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_InitTick+0x54>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x58>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fc85 	bl	80027c6 <HAL_SYSTICK_Config>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00e      	b.n	8001ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b0f      	cmp	r3, #15
 8001eca:	d80a      	bhi.n	8001ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ed4:	f000 fc4d 	bl	8002772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed8:	4a06      	ldr	r2, [pc, #24]	; (8001ef4 <HAL_InitTick+0x5c>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_IncTick+0x1c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_IncTick+0x20>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a03      	ldr	r2, [pc, #12]	; (8001f18 <HAL_IncTick+0x20>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000300 	.word	0x20000300

08001f1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <HAL_GetTick+0x10>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	20000300 	.word	0x20000300

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff fff0 	bl	8001f1c <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_Delay+0x44>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffe0 	bl	8001f1c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008

08001f78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0be      	b.n	8002118 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff f830 	bl	800101c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fabf 	bl	8002540 <ADC_ConversionStop_Disable>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 8099 	bne.w	8002106 <HAL_ADC_Init+0x18e>
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 8095 	bne.w	8002106 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fe4:	f023 0302 	bic.w	r3, r3, #2
 8001fe8:	f043 0202 	orr.w	r2, r3, #2
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ff8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7b1b      	ldrb	r3, [r3, #12]
 8001ffe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002000:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	4313      	orrs	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002010:	d003      	beq.n	800201a <HAL_ADC_Init+0xa2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d102      	bne.n	8002020 <HAL_ADC_Init+0xa8>
 800201a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201e:	e000      	b.n	8002022 <HAL_ADC_Init+0xaa>
 8002020:	2300      	movs	r3, #0
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7d1b      	ldrb	r3, [r3, #20]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d119      	bne.n	8002064 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7b1b      	ldrb	r3, [r3, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	3b01      	subs	r3, #1
 800203e:	035a      	lsls	r2, r3, #13
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	e00b      	b.n	8002064 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	f043 0220 	orr.w	r2, r3, #32
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	430a      	orrs	r2, r1
 8002076:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	4b28      	ldr	r3, [pc, #160]	; (8002120 <HAL_ADC_Init+0x1a8>)
 8002080:	4013      	ands	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	430b      	orrs	r3, r1
 800208a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002094:	d003      	beq.n	800209e <HAL_ADC_Init+0x126>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d104      	bne.n	80020a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	051b      	lsls	r3, r3, #20
 80020a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_ADC_Init+0x1ac>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d10b      	bne.n	80020e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020e2:	e018      	b.n	8002116 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	f023 0312 	bic.w	r3, r3, #18
 80020ec:	f043 0210 	orr.w	r2, r3, #16
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002104:	e007      	b.n	8002116 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	f043 0210 	orr.w	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002116:	7dfb      	ldrb	r3, [r7, #23]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	ffe1f7fd 	.word	0xffe1f7fd
 8002124:	ff1f0efe 	.word	0xff1f0efe

08002128 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_ADC_Start+0x1a>
 800213e:	2302      	movs	r3, #2
 8002140:	e098      	b.n	8002274 <HAL_ADC_Start+0x14c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f99e 	bl	800248c <ADC_Enable>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 8087 	bne.w	800226a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a41      	ldr	r2, [pc, #260]	; (800227c <HAL_ADC_Start+0x154>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d105      	bne.n	8002186 <HAL_ADC_Start+0x5e>
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_ADC_Start+0x158>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d115      	bne.n	80021b2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219c:	2b00      	cmp	r3, #0
 800219e:	d026      	beq.n	80021ee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021b0:	e01d      	b.n	80021ee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a2f      	ldr	r2, [pc, #188]	; (8002280 <HAL_ADC_Start+0x158>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d004      	beq.n	80021d2 <HAL_ADC_Start+0xaa>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2b      	ldr	r2, [pc, #172]	; (800227c <HAL_ADC_Start+0x154>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d10d      	bne.n	80021ee <HAL_ADC_Start+0xc6>
 80021d2:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <HAL_ADC_Start+0x158>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f023 0206 	bic.w	r2, r3, #6
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
 8002206:	e002      	b.n	800220e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f06f 0202 	mvn.w	r2, #2
 800221e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800222a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800222e:	d113      	bne.n	8002258 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002234:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_ADC_Start+0x154>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d105      	bne.n	8002246 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_ADC_Start+0x158>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002242:	2b00      	cmp	r3, #0
 8002244:	d108      	bne.n	8002258 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	e00c      	b.n	8002272 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	e003      	b.n	8002272 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40012800 	.word	0x40012800
 8002280:	40012400 	.word	0x40012400

08002284 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x20>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e0dc      	b.n	8002476 <HAL_ADC_ConfigChannel+0x1da>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	d81c      	bhi.n	8002306 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	3b05      	subs	r3, #5
 80022de:	221f      	movs	r2, #31
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4019      	ands	r1, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b05      	subs	r3, #5
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	635a      	str	r2, [r3, #52]	; 0x34
 8002304:	e03c      	b.n	8002380 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b0c      	cmp	r3, #12
 800230c:	d81c      	bhi.n	8002348 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	3b23      	subs	r3, #35	; 0x23
 8002320:	221f      	movs	r2, #31
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	4019      	ands	r1, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	3b23      	subs	r3, #35	; 0x23
 800233a:	fa00 f203 	lsl.w	r2, r0, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
 8002346:	e01b      	b.n	8002380 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	3b41      	subs	r3, #65	; 0x41
 800235a:	221f      	movs	r2, #31
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	4019      	ands	r1, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	3b41      	subs	r3, #65	; 0x41
 8002374:	fa00 f203 	lsl.w	r2, r0, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b09      	cmp	r3, #9
 8002386:	d91c      	bls.n	80023c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68d9      	ldr	r1, [r3, #12]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	3b1e      	subs	r3, #30
 800239a:	2207      	movs	r2, #7
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4019      	ands	r1, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6898      	ldr	r0, [r3, #8]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	3b1e      	subs	r3, #30
 80023b4:	fa00 f203 	lsl.w	r2, r0, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	60da      	str	r2, [r3, #12]
 80023c0:	e019      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6919      	ldr	r1, [r3, #16]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	2207      	movs	r2, #7
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	4019      	ands	r1, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6898      	ldr	r0, [r3, #8]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	fa00 f203 	lsl.w	r2, r0, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d003      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002402:	2b11      	cmp	r3, #17
 8002404:	d132      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <HAL_ADC_ConfigChannel+0x1e4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d125      	bne.n	800245c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d126      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800242c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b10      	cmp	r3, #16
 8002434:	d11a      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_ADC_ConfigChannel+0x1e8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a13      	ldr	r2, [pc, #76]	; (8002488 <HAL_ADC_ConfigChannel+0x1ec>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	0c9a      	lsrs	r2, r3, #18
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800244c:	e002      	b.n	8002454 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3b01      	subs	r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f9      	bne.n	800244e <HAL_ADC_ConfigChannel+0x1b2>
 800245a:	e007      	b.n	800246c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	40012400 	.word	0x40012400
 8002484:	20000000 	.word	0x20000000
 8002488:	431bde83 	.word	0x431bde83

0800248c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d040      	beq.n	800252c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024ba:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <ADC_Enable+0xac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1f      	ldr	r2, [pc, #124]	; (800253c <ADC_Enable+0xb0>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	0c9b      	lsrs	r3, r3, #18
 80024c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024c8:	e002      	b.n	80024d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f9      	bne.n	80024ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024d6:	f7ff fd21 	bl	8001f1c <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024dc:	e01f      	b.n	800251e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024de:	f7ff fd1d 	bl	8001f1c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d918      	bls.n	800251e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d011      	beq.n	800251e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	f043 0210 	orr.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e007      	b.n	800252e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d1d8      	bne.n	80024de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000000 	.word	0x20000000
 800253c:	431bde83 	.word	0x431bde83

08002540 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d12e      	bne.n	80025b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800256a:	f7ff fcd7 	bl	8001f1c <HAL_GetTick>
 800256e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002570:	e01b      	b.n	80025aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002572:	f7ff fcd3 	bl	8001f1c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d914      	bls.n	80025aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d10d      	bne.n	80025aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	f043 0210 	orr.w	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	f043 0201 	orr.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e007      	b.n	80025ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d0dc      	beq.n	8002572 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f6:	4a04      	ldr	r2, [pc, #16]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	60d3      	str	r3, [r2, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <__NVIC_GetPriorityGrouping+0x18>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 0307 	and.w	r3, r3, #7
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	2b00      	cmp	r3, #0
 8002638:	db0b      	blt.n	8002652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	4906      	ldr	r1, [pc, #24]	; (800265c <__NVIC_EnableIRQ+0x34>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2001      	movs	r0, #1
 800264a:	fa00 f202 	lsl.w	r2, r0, r2
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100

08002660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	db0a      	blt.n	800268a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	490c      	ldr	r1, [pc, #48]	; (80026ac <__NVIC_SetPriority+0x4c>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	440b      	add	r3, r1
 8002684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002688:	e00a      	b.n	80026a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4908      	ldr	r1, [pc, #32]	; (80026b0 <__NVIC_SetPriority+0x50>)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3b04      	subs	r3, #4
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	440b      	add	r3, r1
 800269e:	761a      	strb	r2, [r3, #24]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f1c3 0307 	rsb	r3, r3, #7
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	bf28      	it	cs
 80026d2:	2304      	movcs	r3, #4
 80026d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3304      	adds	r3, #4
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d902      	bls.n	80026e4 <NVIC_EncodePriority+0x30>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3b03      	subs	r3, #3
 80026e2:	e000      	b.n	80026e6 <NVIC_EncodePriority+0x32>
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	401a      	ands	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43d9      	mvns	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	4313      	orrs	r3, r2
         );
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002728:	d301      	bcc.n	800272e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272a:	2301      	movs	r3, #1
 800272c:	e00f      	b.n	800274e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <SysTick_Config+0x40>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002736:	210f      	movs	r1, #15
 8002738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800273c:	f7ff ff90 	bl	8002660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Config+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002746:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SysTick_Config+0x40>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff2d 	bl	80025c4 <__NVIC_SetPriorityGrouping>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002784:	f7ff ff42 	bl	800260c <__NVIC_GetPriorityGrouping>
 8002788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7ff ff90 	bl	80026b4 <NVIC_EncodePriority>
 8002794:	4602      	mov	r2, r0
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff5f 	bl	8002660 <__NVIC_SetPriority>
}
 80027a2:	bf00      	nop
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff35 	bl	8002628 <__NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffa2 	bl	8002718 <SysTick_Config>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e043      	b.n	800287e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_DMA_Init+0xa8>)
 80027fe:	4413      	add	r3, r2
 8002800:	4a22      	ldr	r2, [pc, #136]	; (800288c <HAL_DMA_Init+0xac>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	009a      	lsls	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <HAL_DMA_Init+0xb0>)
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800282a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800282e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002838:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002844:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002850:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	bffdfff8 	.word	0xbffdfff8
 800288c:	cccccccd 	.word	0xcccccccd
 8002890:	40020000 	.word	0x40020000

08002894 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d008      	beq.n	80028be <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2204      	movs	r2, #4
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e020      	b.n	8002900 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 020e 	bic.w	r2, r2, #14
 80028cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	2101      	movs	r1, #1
 80028e8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
	...

0800290c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d005      	beq.n	8002930 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2204      	movs	r2, #4
 8002928:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	e051      	b.n	80029d4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 020e 	bic.w	r2, r2, #14
 800293e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a22      	ldr	r2, [pc, #136]	; (80029e0 <HAL_DMA_Abort_IT+0xd4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d029      	beq.n	80029ae <HAL_DMA_Abort_IT+0xa2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <HAL_DMA_Abort_IT+0xd8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d022      	beq.n	80029aa <HAL_DMA_Abort_IT+0x9e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <HAL_DMA_Abort_IT+0xdc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01a      	beq.n	80029a4 <HAL_DMA_Abort_IT+0x98>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <HAL_DMA_Abort_IT+0xe0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d012      	beq.n	800299e <HAL_DMA_Abort_IT+0x92>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <HAL_DMA_Abort_IT+0xe4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00a      	beq.n	8002998 <HAL_DMA_Abort_IT+0x8c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <HAL_DMA_Abort_IT+0xe8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d102      	bne.n	8002992 <HAL_DMA_Abort_IT+0x86>
 800298c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002990:	e00e      	b.n	80029b0 <HAL_DMA_Abort_IT+0xa4>
 8002992:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002996:	e00b      	b.n	80029b0 <HAL_DMA_Abort_IT+0xa4>
 8002998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800299c:	e008      	b.n	80029b0 <HAL_DMA_Abort_IT+0xa4>
 800299e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a2:	e005      	b.n	80029b0 <HAL_DMA_Abort_IT+0xa4>
 80029a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a8:	e002      	b.n	80029b0 <HAL_DMA_Abort_IT+0xa4>
 80029aa:	2310      	movs	r3, #16
 80029ac:	e000      	b.n	80029b0 <HAL_DMA_Abort_IT+0xa4>
 80029ae:	2301      	movs	r3, #1
 80029b0:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <HAL_DMA_Abort_IT+0xec>)
 80029b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
    } 
  }
  return status;
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40020008 	.word	0x40020008
 80029e4:	4002001c 	.word	0x4002001c
 80029e8:	40020030 	.word	0x40020030
 80029ec:	40020044 	.word	0x40020044
 80029f0:	40020058 	.word	0x40020058
 80029f4:	4002006c 	.word	0x4002006c
 80029f8:	40020000 	.word	0x40020000

080029fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2204      	movs	r2, #4
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d04f      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc8>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d04a      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0204 	bic.w	r2, r2, #4
 8002a4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a66      	ldr	r2, [pc, #408]	; (8002bec <HAL_DMA_IRQHandler+0x1f0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d029      	beq.n	8002aaa <HAL_DMA_IRQHandler+0xae>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a65      	ldr	r2, [pc, #404]	; (8002bf0 <HAL_DMA_IRQHandler+0x1f4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d022      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xaa>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a63      	ldr	r2, [pc, #396]	; (8002bf4 <HAL_DMA_IRQHandler+0x1f8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01a      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0xa4>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a62      	ldr	r2, [pc, #392]	; (8002bf8 <HAL_DMA_IRQHandler+0x1fc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d012      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x9e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a60      	ldr	r2, [pc, #384]	; (8002bfc <HAL_DMA_IRQHandler+0x200>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00a      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x98>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a5f      	ldr	r2, [pc, #380]	; (8002c00 <HAL_DMA_IRQHandler+0x204>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d102      	bne.n	8002a8e <HAL_DMA_IRQHandler+0x92>
 8002a88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a8c:	e00e      	b.n	8002aac <HAL_DMA_IRQHandler+0xb0>
 8002a8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a92:	e00b      	b.n	8002aac <HAL_DMA_IRQHandler+0xb0>
 8002a94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a98:	e008      	b.n	8002aac <HAL_DMA_IRQHandler+0xb0>
 8002a9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a9e:	e005      	b.n	8002aac <HAL_DMA_IRQHandler+0xb0>
 8002aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa4:	e002      	b.n	8002aac <HAL_DMA_IRQHandler+0xb0>
 8002aa6:	2340      	movs	r3, #64	; 0x40
 8002aa8:	e000      	b.n	8002aac <HAL_DMA_IRQHandler+0xb0>
 8002aaa:	2304      	movs	r3, #4
 8002aac:	4a55      	ldr	r2, [pc, #340]	; (8002c04 <HAL_DMA_IRQHandler+0x208>)
 8002aae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8094 	beq.w	8002be2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ac2:	e08e      	b.n	8002be2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	2202      	movs	r2, #2
 8002aca:	409a      	lsls	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d056      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x186>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d051      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10b      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 020a 	bic.w	r2, r2, #10
 8002afa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a38      	ldr	r2, [pc, #224]	; (8002bec <HAL_DMA_IRQHandler+0x1f0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d029      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x166>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a37      	ldr	r2, [pc, #220]	; (8002bf0 <HAL_DMA_IRQHandler+0x1f4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d022      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x162>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a35      	ldr	r2, [pc, #212]	; (8002bf4 <HAL_DMA_IRQHandler+0x1f8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01a      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x15c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a34      	ldr	r2, [pc, #208]	; (8002bf8 <HAL_DMA_IRQHandler+0x1fc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d012      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x156>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a32      	ldr	r2, [pc, #200]	; (8002bfc <HAL_DMA_IRQHandler+0x200>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00a      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x150>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a31      	ldr	r2, [pc, #196]	; (8002c00 <HAL_DMA_IRQHandler+0x204>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d102      	bne.n	8002b46 <HAL_DMA_IRQHandler+0x14a>
 8002b40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b44:	e00e      	b.n	8002b64 <HAL_DMA_IRQHandler+0x168>
 8002b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4a:	e00b      	b.n	8002b64 <HAL_DMA_IRQHandler+0x168>
 8002b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b50:	e008      	b.n	8002b64 <HAL_DMA_IRQHandler+0x168>
 8002b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b56:	e005      	b.n	8002b64 <HAL_DMA_IRQHandler+0x168>
 8002b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b5c:	e002      	b.n	8002b64 <HAL_DMA_IRQHandler+0x168>
 8002b5e:	2320      	movs	r3, #32
 8002b60:	e000      	b.n	8002b64 <HAL_DMA_IRQHandler+0x168>
 8002b62:	2302      	movs	r3, #2
 8002b64:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <HAL_DMA_IRQHandler+0x208>)
 8002b66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d034      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b80:	e02f      	b.n	8002be2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2208      	movs	r2, #8
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d028      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x1e8>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 020e 	bic.w	r2, r2, #14
 8002baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
    }
  }
  return;
 8002be2:	bf00      	nop
 8002be4:	bf00      	nop
}
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40020008 	.word	0x40020008
 8002bf0:	4002001c 	.word	0x4002001c
 8002bf4:	40020030 	.word	0x40020030
 8002bf8:	40020044 	.word	0x40020044
 8002bfc:	40020058 	.word	0x40020058
 8002c00:	4002006c 	.word	0x4002006c
 8002c04:	40020000 	.word	0x40020000

08002c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b08b      	sub	sp, #44	; 0x2c
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c1a:	e169      	b.n	8002ef0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	f040 8158 	bne.w	8002eea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4a9a      	ldr	r2, [pc, #616]	; (8002ea8 <HAL_GPIO_Init+0x2a0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d05e      	beq.n	8002d02 <HAL_GPIO_Init+0xfa>
 8002c44:	4a98      	ldr	r2, [pc, #608]	; (8002ea8 <HAL_GPIO_Init+0x2a0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d875      	bhi.n	8002d36 <HAL_GPIO_Init+0x12e>
 8002c4a:	4a98      	ldr	r2, [pc, #608]	; (8002eac <HAL_GPIO_Init+0x2a4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d058      	beq.n	8002d02 <HAL_GPIO_Init+0xfa>
 8002c50:	4a96      	ldr	r2, [pc, #600]	; (8002eac <HAL_GPIO_Init+0x2a4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d86f      	bhi.n	8002d36 <HAL_GPIO_Init+0x12e>
 8002c56:	4a96      	ldr	r2, [pc, #600]	; (8002eb0 <HAL_GPIO_Init+0x2a8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d052      	beq.n	8002d02 <HAL_GPIO_Init+0xfa>
 8002c5c:	4a94      	ldr	r2, [pc, #592]	; (8002eb0 <HAL_GPIO_Init+0x2a8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d869      	bhi.n	8002d36 <HAL_GPIO_Init+0x12e>
 8002c62:	4a94      	ldr	r2, [pc, #592]	; (8002eb4 <HAL_GPIO_Init+0x2ac>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d04c      	beq.n	8002d02 <HAL_GPIO_Init+0xfa>
 8002c68:	4a92      	ldr	r2, [pc, #584]	; (8002eb4 <HAL_GPIO_Init+0x2ac>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d863      	bhi.n	8002d36 <HAL_GPIO_Init+0x12e>
 8002c6e:	4a92      	ldr	r2, [pc, #584]	; (8002eb8 <HAL_GPIO_Init+0x2b0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d046      	beq.n	8002d02 <HAL_GPIO_Init+0xfa>
 8002c74:	4a90      	ldr	r2, [pc, #576]	; (8002eb8 <HAL_GPIO_Init+0x2b0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d85d      	bhi.n	8002d36 <HAL_GPIO_Init+0x12e>
 8002c7a:	2b12      	cmp	r3, #18
 8002c7c:	d82a      	bhi.n	8002cd4 <HAL_GPIO_Init+0xcc>
 8002c7e:	2b12      	cmp	r3, #18
 8002c80:	d859      	bhi.n	8002d36 <HAL_GPIO_Init+0x12e>
 8002c82:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <HAL_GPIO_Init+0x80>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002d03 	.word	0x08002d03
 8002c8c:	08002cdd 	.word	0x08002cdd
 8002c90:	08002cef 	.word	0x08002cef
 8002c94:	08002d31 	.word	0x08002d31
 8002c98:	08002d37 	.word	0x08002d37
 8002c9c:	08002d37 	.word	0x08002d37
 8002ca0:	08002d37 	.word	0x08002d37
 8002ca4:	08002d37 	.word	0x08002d37
 8002ca8:	08002d37 	.word	0x08002d37
 8002cac:	08002d37 	.word	0x08002d37
 8002cb0:	08002d37 	.word	0x08002d37
 8002cb4:	08002d37 	.word	0x08002d37
 8002cb8:	08002d37 	.word	0x08002d37
 8002cbc:	08002d37 	.word	0x08002d37
 8002cc0:	08002d37 	.word	0x08002d37
 8002cc4:	08002d37 	.word	0x08002d37
 8002cc8:	08002d37 	.word	0x08002d37
 8002ccc:	08002ce5 	.word	0x08002ce5
 8002cd0:	08002cf9 	.word	0x08002cf9
 8002cd4:	4a79      	ldr	r2, [pc, #484]	; (8002ebc <HAL_GPIO_Init+0x2b4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cda:	e02c      	b.n	8002d36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	623b      	str	r3, [r7, #32]
          break;
 8002ce2:	e029      	b.n	8002d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	623b      	str	r3, [r7, #32]
          break;
 8002cec:	e024      	b.n	8002d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	623b      	str	r3, [r7, #32]
          break;
 8002cf6:	e01f      	b.n	8002d38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	623b      	str	r3, [r7, #32]
          break;
 8002d00:	e01a      	b.n	8002d38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	623b      	str	r3, [r7, #32]
          break;
 8002d0e:	e013      	b.n	8002d38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d18:	2308      	movs	r3, #8
 8002d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	611a      	str	r2, [r3, #16]
          break;
 8002d22:	e009      	b.n	8002d38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d24:	2308      	movs	r3, #8
 8002d26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	615a      	str	r2, [r3, #20]
          break;
 8002d2e:	e003      	b.n	8002d38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d30:	2300      	movs	r3, #0
 8002d32:	623b      	str	r3, [r7, #32]
          break;
 8002d34:	e000      	b.n	8002d38 <HAL_GPIO_Init+0x130>
          break;
 8002d36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2bff      	cmp	r3, #255	; 0xff
 8002d3c:	d801      	bhi.n	8002d42 <HAL_GPIO_Init+0x13a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	e001      	b.n	8002d46 <HAL_GPIO_Init+0x13e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3304      	adds	r3, #4
 8002d46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2bff      	cmp	r3, #255	; 0xff
 8002d4c:	d802      	bhi.n	8002d54 <HAL_GPIO_Init+0x14c>
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	e002      	b.n	8002d5a <HAL_GPIO_Init+0x152>
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	3b08      	subs	r3, #8
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	210f      	movs	r1, #15
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	fa01 f303 	lsl.w	r3, r1, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	6a39      	ldr	r1, [r7, #32]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	431a      	orrs	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80b1 	beq.w	8002eea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d88:	4b4d      	ldr	r3, [pc, #308]	; (8002ec0 <HAL_GPIO_Init+0x2b8>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	4a4c      	ldr	r2, [pc, #304]	; (8002ec0 <HAL_GPIO_Init+0x2b8>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6193      	str	r3, [r2, #24]
 8002d94:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_GPIO_Init+0x2b8>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002da0:	4a48      	ldr	r2, [pc, #288]	; (8002ec4 <HAL_GPIO_Init+0x2bc>)
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3302      	adds	r3, #2
 8002da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	220f      	movs	r2, #15
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a40      	ldr	r2, [pc, #256]	; (8002ec8 <HAL_GPIO_Init+0x2c0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d013      	beq.n	8002df4 <HAL_GPIO_Init+0x1ec>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a3f      	ldr	r2, [pc, #252]	; (8002ecc <HAL_GPIO_Init+0x2c4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00d      	beq.n	8002df0 <HAL_GPIO_Init+0x1e8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a3e      	ldr	r2, [pc, #248]	; (8002ed0 <HAL_GPIO_Init+0x2c8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d007      	beq.n	8002dec <HAL_GPIO_Init+0x1e4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a3d      	ldr	r2, [pc, #244]	; (8002ed4 <HAL_GPIO_Init+0x2cc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <HAL_GPIO_Init+0x1e0>
 8002de4:	2303      	movs	r3, #3
 8002de6:	e006      	b.n	8002df6 <HAL_GPIO_Init+0x1ee>
 8002de8:	2304      	movs	r3, #4
 8002dea:	e004      	b.n	8002df6 <HAL_GPIO_Init+0x1ee>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e002      	b.n	8002df6 <HAL_GPIO_Init+0x1ee>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_GPIO_Init+0x1ee>
 8002df4:	2300      	movs	r3, #0
 8002df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df8:	f002 0203 	and.w	r2, r2, #3
 8002dfc:	0092      	lsls	r2, r2, #2
 8002dfe:	4093      	lsls	r3, r2
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e06:	492f      	ldr	r1, [pc, #188]	; (8002ec4 <HAL_GPIO_Init+0x2bc>)
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d006      	beq.n	8002e2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e20:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	492c      	ldr	r1, [pc, #176]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	608b      	str	r3, [r1, #8]
 8002e2c:	e006      	b.n	8002e3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	4928      	ldr	r1, [pc, #160]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	4922      	ldr	r1, [pc, #136]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60cb      	str	r3, [r1, #12]
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	491e      	ldr	r1, [pc, #120]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d006      	beq.n	8002e7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	4918      	ldr	r1, [pc, #96]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
 8002e7c:	e006      	b.n	8002e8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	4914      	ldr	r1, [pc, #80]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d021      	beq.n	8002edc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e98:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	490e      	ldr	r1, [pc, #56]	; (8002ed8 <HAL_GPIO_Init+0x2d0>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]
 8002ea4:	e021      	b.n	8002eea <HAL_GPIO_Init+0x2e2>
 8002ea6:	bf00      	nop
 8002ea8:	10320000 	.word	0x10320000
 8002eac:	10310000 	.word	0x10310000
 8002eb0:	10220000 	.word	0x10220000
 8002eb4:	10210000 	.word	0x10210000
 8002eb8:	10120000 	.word	0x10120000
 8002ebc:	10110000 	.word	0x10110000
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	40010800 	.word	0x40010800
 8002ecc:	40010c00 	.word	0x40010c00
 8002ed0:	40011000 	.word	0x40011000
 8002ed4:	40011400 	.word	0x40011400
 8002ed8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_GPIO_Init+0x304>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	4909      	ldr	r1, [pc, #36]	; (8002f0c <HAL_GPIO_Init+0x304>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	3301      	adds	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f47f ae8e 	bne.w	8002c1c <HAL_GPIO_Init+0x14>
  }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	372c      	adds	r7, #44	; 0x2c
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	40010400 	.word	0x40010400

08002f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	e001      	b.n	8002f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	807b      	strh	r3, [r7, #2]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f4e:	787b      	ldrb	r3, [r7, #1]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f54:	887a      	ldrh	r2, [r7, #2]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f5a:	e003      	b.n	8002f64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	041a      	lsls	r2, r3, #16
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	611a      	str	r2, [r3, #16]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d006      	beq.n	8002f94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f86:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f806 	bl	8002fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e272      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8087 	beq.w	80030e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd4:	4b92      	ldr	r3, [pc, #584]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d00c      	beq.n	8002ffa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fe0:	4b8f      	ldr	r3, [pc, #572]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d112      	bne.n	8003012 <HAL_RCC_OscConfig+0x5e>
 8002fec:	4b8c      	ldr	r3, [pc, #560]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff8:	d10b      	bne.n	8003012 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffa:	4b89      	ldr	r3, [pc, #548]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d06c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x12c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d168      	bne.n	80030e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e24c      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x76>
 800301c:	4b80      	ldr	r3, [pc, #512]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a7f      	ldr	r2, [pc, #508]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	e02e      	b.n	8003088 <HAL_RCC_OscConfig+0xd4>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x98>
 8003032:	4b7b      	ldr	r3, [pc, #492]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a7a      	ldr	r2, [pc, #488]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b78      	ldr	r3, [pc, #480]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a77      	ldr	r2, [pc, #476]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e01d      	b.n	8003088 <HAL_RCC_OscConfig+0xd4>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003054:	d10c      	bne.n	8003070 <HAL_RCC_OscConfig+0xbc>
 8003056:	4b72      	ldr	r3, [pc, #456]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a71      	ldr	r2, [pc, #452]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 800305c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	4b6f      	ldr	r3, [pc, #444]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a6e      	ldr	r2, [pc, #440]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e00b      	b.n	8003088 <HAL_RCC_OscConfig+0xd4>
 8003070:	4b6b      	ldr	r3, [pc, #428]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a6a      	ldr	r2, [pc, #424]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b68      	ldr	r3, [pc, #416]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a67      	ldr	r2, [pc, #412]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003086:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d013      	beq.n	80030b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7fe ff44 	bl	8001f1c <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003098:	f7fe ff40 	bl	8001f1c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	; 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e200      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030aa:	4b5d      	ldr	r3, [pc, #372]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0xe4>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fe ff30 	bl	8001f1c <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fe ff2c 	bl	8001f1c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e1ec      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d2:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x10c>
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d063      	beq.n	80031b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ee:	4b4c      	ldr	r3, [pc, #304]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030fa:	4b49      	ldr	r3, [pc, #292]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b08      	cmp	r3, #8
 8003104:	d11c      	bne.n	8003140 <HAL_RCC_OscConfig+0x18c>
 8003106:	4b46      	ldr	r3, [pc, #280]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d116      	bne.n	8003140 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003112:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d005      	beq.n	800312a <HAL_RCC_OscConfig+0x176>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d001      	beq.n	800312a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e1c0      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312a:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4939      	ldr	r1, [pc, #228]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313e:	e03a      	b.n	80031b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d020      	beq.n	800318a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003148:	4b36      	ldr	r3, [pc, #216]	; (8003224 <HAL_RCC_OscConfig+0x270>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fe fee5 	bl	8001f1c <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003156:	f7fe fee1 	bl	8001f1c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e1a1      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003168:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003174:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4927      	ldr	r1, [pc, #156]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 8003184:	4313      	orrs	r3, r2
 8003186:	600b      	str	r3, [r1, #0]
 8003188:	e015      	b.n	80031b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318a:	4b26      	ldr	r3, [pc, #152]	; (8003224 <HAL_RCC_OscConfig+0x270>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fe fec4 	bl	8001f1c <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003198:	f7fe fec0 	bl	8001f1c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e180      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031aa:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d03a      	beq.n	8003238 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d019      	beq.n	80031fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ca:	4b17      	ldr	r3, [pc, #92]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d0:	f7fe fea4 	bl	8001f1c <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d8:	f7fe fea0 	bl	8001f1c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e160      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031f6:	2001      	movs	r0, #1
 80031f8:	f000 face 	bl	8003798 <RCC_Delay>
 80031fc:	e01c      	b.n	8003238 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003204:	f7fe fe8a 	bl	8001f1c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320a:	e00f      	b.n	800322c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320c:	f7fe fe86 	bl	8001f1c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d908      	bls.n	800322c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e146      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	42420000 	.word	0x42420000
 8003228:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800322c:	4b92      	ldr	r3, [pc, #584]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e9      	bne.n	800320c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80a6 	beq.w	8003392 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324a:	4b8b      	ldr	r3, [pc, #556]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10d      	bne.n	8003272 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	4b88      	ldr	r3, [pc, #544]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	4a87      	ldr	r2, [pc, #540]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003260:	61d3      	str	r3, [r2, #28]
 8003262:	4b85      	ldr	r3, [pc, #532]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326e:	2301      	movs	r3, #1
 8003270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b82      	ldr	r3, [pc, #520]	; (800347c <HAL_RCC_OscConfig+0x4c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d118      	bne.n	80032b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327e:	4b7f      	ldr	r3, [pc, #508]	; (800347c <HAL_RCC_OscConfig+0x4c8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a7e      	ldr	r2, [pc, #504]	; (800347c <HAL_RCC_OscConfig+0x4c8>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328a:	f7fe fe47 	bl	8001f1c <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003292:	f7fe fe43 	bl	8001f1c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b64      	cmp	r3, #100	; 0x64
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e103      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a4:	4b75      	ldr	r3, [pc, #468]	; (800347c <HAL_RCC_OscConfig+0x4c8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x312>
 80032b8:	4b6f      	ldr	r3, [pc, #444]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4a6e      	ldr	r2, [pc, #440]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6213      	str	r3, [r2, #32]
 80032c4:	e02d      	b.n	8003322 <HAL_RCC_OscConfig+0x36e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x334>
 80032ce:	4b6a      	ldr	r3, [pc, #424]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	4a69      	ldr	r2, [pc, #420]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	6213      	str	r3, [r2, #32]
 80032da:	4b67      	ldr	r3, [pc, #412]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4a66      	ldr	r2, [pc, #408]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	6213      	str	r3, [r2, #32]
 80032e6:	e01c      	b.n	8003322 <HAL_RCC_OscConfig+0x36e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b05      	cmp	r3, #5
 80032ee:	d10c      	bne.n	800330a <HAL_RCC_OscConfig+0x356>
 80032f0:	4b61      	ldr	r3, [pc, #388]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4a60      	ldr	r2, [pc, #384]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	6213      	str	r3, [r2, #32]
 80032fc:	4b5e      	ldr	r3, [pc, #376]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4a5d      	ldr	r2, [pc, #372]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6213      	str	r3, [r2, #32]
 8003308:	e00b      	b.n	8003322 <HAL_RCC_OscConfig+0x36e>
 800330a:	4b5b      	ldr	r3, [pc, #364]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4a5a      	ldr	r2, [pc, #360]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6213      	str	r3, [r2, #32]
 8003316:	4b58      	ldr	r3, [pc, #352]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4a57      	ldr	r2, [pc, #348]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d015      	beq.n	8003356 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332a:	f7fe fdf7 	bl	8001f1c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	e00a      	b.n	8003348 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fe fdf3 	bl	8001f1c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e0b1      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	4b4b      	ldr	r3, [pc, #300]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ee      	beq.n	8003332 <HAL_RCC_OscConfig+0x37e>
 8003354:	e014      	b.n	8003380 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003356:	f7fe fde1 	bl	8001f1c <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335c:	e00a      	b.n	8003374 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335e:	f7fe fddd 	bl	8001f1c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	; 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e09b      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003374:	4b40      	ldr	r3, [pc, #256]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1ee      	bne.n	800335e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d105      	bne.n	8003392 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003386:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4a3b      	ldr	r2, [pc, #236]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003390:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8087 	beq.w	80034aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800339c:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d061      	beq.n	800346c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d146      	bne.n	800343e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b0:	4b33      	ldr	r3, [pc, #204]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7fe fdb1 	bl	8001f1c <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033be:	f7fe fdad 	bl	8001f1c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e06d      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d0:	4b29      	ldr	r3, [pc, #164]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d108      	bne.n	80033f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	4921      	ldr	r1, [pc, #132]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f8:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a19      	ldr	r1, [r3, #32]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	430b      	orrs	r3, r1
 800340a:	491b      	ldr	r1, [pc, #108]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe fd81 	bl	8001f1c <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341e:	f7fe fd7d 	bl	8001f1c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e03d      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x46a>
 800343c:	e035      	b.n	80034aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_RCC_OscConfig+0x4cc>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe fd6a 	bl	8001f1c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe fd66 	bl	8001f1c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e026      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x498>
 800346a:	e01e      	b.n	80034aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d107      	bne.n	8003484 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e019      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
 8003480:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_OscConfig+0x500>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	429a      	cmp	r2, r3
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000

080034b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0d0      	b.n	800366e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d910      	bls.n	80034fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b67      	ldr	r3, [pc, #412]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 0207 	bic.w	r2, r3, #7
 80034e2:	4965      	ldr	r1, [pc, #404]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b63      	ldr	r3, [pc, #396]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0b8      	b.n	800366e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d020      	beq.n	800354a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003514:	4b59      	ldr	r3, [pc, #356]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a58      	ldr	r2, [pc, #352]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800351e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800352c:	4b53      	ldr	r3, [pc, #332]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a52      	ldr	r2, [pc, #328]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003536:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003538:	4b50      	ldr	r3, [pc, #320]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	494d      	ldr	r1, [pc, #308]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d040      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b47      	ldr	r3, [pc, #284]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d115      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e07f      	b.n	800366e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003576:	4b41      	ldr	r3, [pc, #260]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e073      	b.n	800366e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003586:	4b3d      	ldr	r3, [pc, #244]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e06b      	b.n	800366e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003596:	4b39      	ldr	r3, [pc, #228]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f023 0203 	bic.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4936      	ldr	r1, [pc, #216]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a8:	f7fe fcb8 	bl	8001f1c <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b0:	f7fe fcb4 	bl	8001f1c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e053      	b.n	800366e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	4b2d      	ldr	r3, [pc, #180]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 020c 	and.w	r2, r3, #12
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d1eb      	bne.n	80035b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035d8:	4b27      	ldr	r3, [pc, #156]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d210      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b24      	ldr	r3, [pc, #144]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 0207 	bic.w	r2, r3, #7
 80035ee:	4922      	ldr	r1, [pc, #136]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e032      	b.n	800366e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4916      	ldr	r1, [pc, #88]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	490e      	ldr	r1, [pc, #56]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	4313      	orrs	r3, r2
 8003644:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003646:	f000 f821 	bl	800368c <HAL_RCC_GetSysClockFreq>
 800364a:	4602      	mov	r2, r0
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	490a      	ldr	r1, [pc, #40]	; (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	5ccb      	ldrb	r3, [r1, r3]
 800365a:	fa22 f303 	lsr.w	r3, r2, r3
 800365e:	4a09      	ldr	r2, [pc, #36]	; (8003684 <HAL_RCC_ClockConfig+0x1cc>)
 8003660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1d0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fc16 	bl	8001e98 <HAL_InitTick>

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40022000 	.word	0x40022000
 800367c:	40021000 	.word	0x40021000
 8003680:	08005e00 	.word	0x08005e00
 8003684:	20000000 	.word	0x20000000
 8003688:	20000004 	.word	0x20000004

0800368c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCC_GetSysClockFreq+0x94>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d002      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x30>
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x36>
 80036ba:	e027      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_RCC_GetSysClockFreq+0x98>)
 80036be:	613b      	str	r3, [r7, #16]
      break;
 80036c0:	e027      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	0c9b      	lsrs	r3, r3, #18
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	4a17      	ldr	r2, [pc, #92]	; (8003728 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036cc:	5cd3      	ldrb	r3, [r2, r3]
 80036ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d010      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_RCC_GetSysClockFreq+0x94>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	0c5b      	lsrs	r3, r3, #17
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	4a11      	ldr	r2, [pc, #68]	; (800372c <HAL_RCC_GetSysClockFreq+0xa0>)
 80036e6:	5cd3      	ldrb	r3, [r2, r3]
 80036e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a0d      	ldr	r2, [pc, #52]	; (8003724 <HAL_RCC_GetSysClockFreq+0x98>)
 80036ee:	fb03 f202 	mul.w	r2, r3, r2
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e004      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003700:	fb02 f303 	mul.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	613b      	str	r3, [r7, #16]
      break;
 800370a:	e002      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetSysClockFreq+0x98>)
 800370e:	613b      	str	r3, [r7, #16]
      break;
 8003710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003712:	693b      	ldr	r3, [r7, #16]
}
 8003714:	4618      	mov	r0, r3
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	007a1200 	.word	0x007a1200
 8003728:	08005e18 	.word	0x08005e18
 800372c:	08005e28 	.word	0x08005e28
 8003730:	003d0900 	.word	0x003d0900

08003734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003738:	4b02      	ldr	r3, [pc, #8]	; (8003744 <HAL_RCC_GetHCLKFreq+0x10>)
 800373a:	681b      	ldr	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	20000000 	.word	0x20000000

08003748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800374c:	f7ff fff2 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4903      	ldr	r1, [pc, #12]	; (800376c <HAL_RCC_GetPCLK1Freq+0x24>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40021000 	.word	0x40021000
 800376c:	08005e10 	.word	0x08005e10

08003770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003774:	f7ff ffde 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	0adb      	lsrs	r3, r3, #11
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	4903      	ldr	r1, [pc, #12]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	08005e10 	.word	0x08005e10

08003798 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <RCC_Delay+0x34>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <RCC_Delay+0x38>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	0a5b      	lsrs	r3, r3, #9
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037b4:	bf00      	nop
  }
  while (Delay --);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1e5a      	subs	r2, r3, #1
 80037ba:	60fa      	str	r2, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f9      	bne.n	80037b4 <RCC_Delay+0x1c>
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	20000000 	.word	0x20000000
 80037d0:	10624dd3 	.word	0x10624dd3

080037d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d07d      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037f0:	2300      	movs	r3, #0
 80037f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f4:	4b4f      	ldr	r3, [pc, #316]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10d      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003800:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	4a4b      	ldr	r2, [pc, #300]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380a:	61d3      	str	r3, [r2, #28]
 800380c:	4b49      	ldr	r3, [pc, #292]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003818:	2301      	movs	r3, #1
 800381a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b46      	ldr	r3, [pc, #280]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d118      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003828:	4b43      	ldr	r3, [pc, #268]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a42      	ldr	r2, [pc, #264]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003832:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003834:	f7fe fb72 	bl	8001f1c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383a:	e008      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383c:	f7fe fb6e 	bl	8001f1c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e06d      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b3a      	ldr	r3, [pc, #232]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800385a:	4b36      	ldr	r3, [pc, #216]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d02e      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	429a      	cmp	r2, r3
 8003876:	d027      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003878:	4b2e      	ldr	r3, [pc, #184]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003880:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003882:	4b2e      	ldr	r3, [pc, #184]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003888:	4b2c      	ldr	r3, [pc, #176]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800388e:	4a29      	ldr	r2, [pc, #164]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d014      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389e:	f7fe fb3d 	bl	8001f1c <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fe fb39 	bl	8001f1c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e036      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ee      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4917      	ldr	r1, [pc, #92]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	490b      	ldr	r1, [pc, #44]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	4904      	ldr	r1, [pc, #16]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	40007000 	.word	0x40007000
 800393c:	42420440 	.word	0x42420440

08003940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e076      	b.n	8003a40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	2b00      	cmp	r3, #0
 8003958:	d108      	bne.n	800396c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003962:	d009      	beq.n	8003978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	61da      	str	r2, [r3, #28]
 800396a:	e005      	b.n	8003978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd fb7e 	bl	8001094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	ea42 0103 	orr.w	r1, r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	0c1a      	lsrs	r2, r3, #16
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f002 0204 	and.w	r2, r2, #4
 8003a1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a58:	f7fe fa60 	bl	8001f1c <HAL_GetTick>
 8003a5c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d001      	beq.n	8003a72 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e12a      	b.n	8003cc8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_SPI_Transmit+0x36>
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e122      	b.n	8003cc8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_SPI_Transmit+0x48>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e11b      	b.n	8003cc8 <HAL_SPI_Transmit+0x280>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	88fa      	ldrh	r2, [r7, #6]
 8003ab0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ade:	d10f      	bne.n	8003b00 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003afe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d007      	beq.n	8003b1e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b26:	d152      	bne.n	8003bce <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_SPI_Transmit+0xee>
 8003b30:	8b7b      	ldrh	r3, [r7, #26]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d145      	bne.n	8003bc2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	881a      	ldrh	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	1c9a      	adds	r2, r3, #2
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b5a:	e032      	b.n	8003bc2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d112      	bne.n	8003b90 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b8e:	e018      	b.n	8003bc2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b90:	f7fe f9c4 	bl	8001f1c <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d803      	bhi.n	8003ba8 <HAL_SPI_Transmit+0x160>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ba6:	d102      	bne.n	8003bae <HAL_SPI_Transmit+0x166>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e082      	b.n	8003cc8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1c7      	bne.n	8003b5c <HAL_SPI_Transmit+0x114>
 8003bcc:	e053      	b.n	8003c76 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_SPI_Transmit+0x194>
 8003bd6:	8b7b      	ldrh	r3, [r7, #26]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d147      	bne.n	8003c6c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	7812      	ldrb	r2, [r2, #0]
 8003be8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c02:	e033      	b.n	8003c6c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d113      	bne.n	8003c3a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c38:	e018      	b.n	8003c6c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c3a:	f7fe f96f 	bl	8001f1c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d803      	bhi.n	8003c52 <HAL_SPI_Transmit+0x20a>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c50:	d102      	bne.n	8003c58 <HAL_SPI_Transmit+0x210>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e02d      	b.n	8003cc8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1c6      	bne.n	8003c04 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	6839      	ldr	r1, [r7, #0]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fbc4 	bl	8004408 <SPI_EndRxTxTransaction>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
  }
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d001      	beq.n	8003cf0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
 8003cee:	e104      	b.n	8003efa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cf8:	d112      	bne.n	8003d20 <HAL_SPI_Receive+0x50>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10e      	bne.n	8003d20 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2204      	movs	r2, #4
 8003d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f8f3 	bl	8003f02 <HAL_SPI_TransmitReceive>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	e0ec      	b.n	8003efa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d20:	f7fe f8fc 	bl	8001f1c <HAL_GetTick>
 8003d24:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_SPI_Receive+0x62>
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0e1      	b.n	8003efa <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_SPI_Receive+0x74>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e0da      	b.n	8003efa <HAL_SPI_Receive+0x22a>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	88fa      	ldrh	r2, [r7, #6]
 8003d64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	88fa      	ldrh	r2, [r7, #6]
 8003d6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d92:	d10f      	bne.n	8003db4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003db2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d007      	beq.n	8003dd2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d170      	bne.n	8003ebc <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003dda:	e035      	b.n	8003e48 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d115      	bne.n	8003e16 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f103 020c 	add.w	r2, r3, #12
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e14:	e018      	b.n	8003e48 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e16:	f7fe f881 	bl	8001f1c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d803      	bhi.n	8003e2e <HAL_SPI_Receive+0x15e>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e2c:	d102      	bne.n	8003e34 <HAL_SPI_Receive+0x164>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e058      	b.n	8003efa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1c4      	bne.n	8003ddc <HAL_SPI_Receive+0x10c>
 8003e52:	e038      	b.n	8003ec6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d113      	bne.n	8003e8a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	b292      	uxth	r2, r2
 8003e6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	1c9a      	adds	r2, r3, #2
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e88:	e018      	b.n	8003ebc <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8a:	f7fe f847 	bl	8001f1c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d803      	bhi.n	8003ea2 <HAL_SPI_Receive+0x1d2>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea0:	d102      	bne.n	8003ea8 <HAL_SPI_Receive+0x1d8>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e01e      	b.n	8003efa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1c6      	bne.n	8003e54 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fa4a 	bl	8004364 <SPI_EndRxTransaction>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b08a      	sub	sp, #40	; 0x28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f10:	2301      	movs	r3, #1
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f14:	f7fe f802 	bl	8001f1c <HAL_GetTick>
 8003f18:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f20:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003f28:	887b      	ldrh	r3, [r7, #2]
 8003f2a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f2c:	7ffb      	ldrb	r3, [r7, #31]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d00c      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x4a>
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f38:	d106      	bne.n	8003f48 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <HAL_SPI_TransmitReceive+0x46>
 8003f42:	7ffb      	ldrb	r3, [r7, #31]
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d001      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e17f      	b.n	800424c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x5c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x5c>
 8003f58:	887b      	ldrh	r3, [r7, #2]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e174      	b.n	800424c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x6e>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e16d      	b.n	800424c <HAL_SPI_TransmitReceive+0x34a>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d003      	beq.n	8003f8c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2205      	movs	r2, #5
 8003f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	887a      	ldrh	r2, [r7, #2]
 8003f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	887a      	ldrh	r2, [r7, #2]
 8003fa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	887a      	ldrh	r2, [r7, #2]
 8003fae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	887a      	ldrh	r2, [r7, #2]
 8003fb4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d007      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe8:	d17e      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_SPI_TransmitReceive+0xf6>
 8003ff2:	8afb      	ldrh	r3, [r7, #22]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d16c      	bne.n	80040d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	881a      	ldrh	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	1c9a      	adds	r2, r3, #2
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800401c:	e059      	b.n	80040d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d11b      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x162>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <HAL_SPI_TransmitReceive+0x162>
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	2b01      	cmp	r3, #1
 800403a:	d113      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	881a      	ldrh	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	1c9a      	adds	r2, r3, #2
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d119      	bne.n	80040a6 <HAL_SPI_TransmitReceive+0x1a4>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d014      	beq.n	80040a6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	b292      	uxth	r2, r2
 8004088:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	1c9a      	adds	r2, r3, #2
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040a2:	2301      	movs	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040a6:	f7fd ff39 	bl	8001f1c <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d80d      	bhi.n	80040d2 <HAL_SPI_TransmitReceive+0x1d0>
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040bc:	d009      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e0bc      	b.n	800424c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1a0      	bne.n	800401e <HAL_SPI_TransmitReceive+0x11c>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d19b      	bne.n	800401e <HAL_SPI_TransmitReceive+0x11c>
 80040e6:	e082      	b.n	80041ee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_SPI_TransmitReceive+0x1f4>
 80040f0:	8afb      	ldrh	r3, [r7, #22]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d171      	bne.n	80041da <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	7812      	ldrb	r2, [r2, #0]
 8004102:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800411c:	e05d      	b.n	80041da <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d11c      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x264>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d017      	beq.n	8004166 <HAL_SPI_TransmitReceive+0x264>
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	2b01      	cmp	r3, #1
 800413a:	d114      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	7812      	ldrb	r2, [r2, #0]
 8004148:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d119      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x2a6>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d014      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041a4:	2301      	movs	r3, #1
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041a8:	f7fd feb8 	bl	8001f1c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d803      	bhi.n	80041c0 <HAL_SPI_TransmitReceive+0x2be>
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041be:	d102      	bne.n	80041c6 <HAL_SPI_TransmitReceive+0x2c4>
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e038      	b.n	800424c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d19c      	bne.n	800411e <HAL_SPI_TransmitReceive+0x21c>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d197      	bne.n	800411e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ee:	6a3a      	ldr	r2, [r7, #32]
 80041f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f908 	bl	8004408 <SPI_EndRxTxTransaction>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d008      	beq.n	8004210 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e01d      	b.n	800424c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004218:	2300      	movs	r3, #0
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800424a:	2300      	movs	r3, #0
  }
}
 800424c:	4618      	mov	r0, r3
 800424e:	3728      	adds	r7, #40	; 0x28
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004264:	f7fd fe5a 	bl	8001f1c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4413      	add	r3, r2
 8004272:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004274:	f7fd fe52 	bl	8001f1c <HAL_GetTick>
 8004278:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800427a:	4b39      	ldr	r3, [pc, #228]	; (8004360 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	015b      	lsls	r3, r3, #5
 8004280:	0d1b      	lsrs	r3, r3, #20
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	fb02 f303 	mul.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800428a:	e054      	b.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004292:	d050      	beq.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004294:	f7fd fe42 	bl	8001f1c <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d902      	bls.n	80042aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d13d      	bne.n	8004326 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c2:	d111      	bne.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042cc:	d004      	beq.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	d107      	bne.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f0:	d10f      	bne.n	8004312 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004310:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e017      	b.n	8004356 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3b01      	subs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	429a      	cmp	r2, r3
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	429a      	cmp	r2, r3
 8004352:	d19b      	bne.n	800428c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000000 	.word	0x20000000

08004364 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004378:	d111      	bne.n	800439e <SPI_EndRxTransaction+0x3a>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004382:	d004      	beq.n	800438e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438c:	d107      	bne.n	800439e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800439c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a6:	d117      	bne.n	80043d8 <SPI_EndRxTransaction+0x74>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b0:	d112      	bne.n	80043d8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2101      	movs	r1, #1
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff ff49 	bl	8004254 <SPI_WaitFlagStateUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01a      	beq.n	80043fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f043 0220 	orr.w	r2, r3, #32
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e013      	b.n	8004400 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	2180      	movs	r1, #128	; 0x80
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff ff36 	bl	8004254 <SPI_WaitFlagStateUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f2:	f043 0220 	orr.w	r2, r3, #32
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e000      	b.n	8004400 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2201      	movs	r2, #1
 800441c:	2102      	movs	r1, #2
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7ff ff18 	bl	8004254 <SPI_WaitFlagStateUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e013      	b.n	8004462 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2200      	movs	r2, #0
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7ff ff05 	bl	8004254 <SPI_WaitFlagStateUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e000      	b.n	8004462 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e041      	b.n	8004500 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7fc fe59 	bl	8001148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3304      	adds	r3, #4
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f000 fc1f 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d001      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e03a      	b.n	8004596 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <HAL_TIM_Base_Start_IT+0x98>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00e      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x58>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454a:	d009      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x58>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a14      	ldr	r2, [pc, #80]	; (80045a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d004      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x58>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d111      	bne.n	8004584 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b06      	cmp	r3, #6
 8004570:	d010      	beq.n	8004594 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004582:	e007      	b.n	8004594 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800

080045ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e041      	b.n	8004642 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f839 	bl	800464a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f000 fb7e 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <HAL_TIM_PWM_Start+0x24>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e022      	b.n	80046c6 <HAL_TIM_PWM_Start+0x6a>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b04      	cmp	r3, #4
 8004684:	d109      	bne.n	800469a <HAL_TIM_PWM_Start+0x3e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	bf14      	ite	ne
 8004692:	2301      	movne	r3, #1
 8004694:	2300      	moveq	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	e015      	b.n	80046c6 <HAL_TIM_PWM_Start+0x6a>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d109      	bne.n	80046b4 <HAL_TIM_PWM_Start+0x58>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e008      	b.n	80046c6 <HAL_TIM_PWM_Start+0x6a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e05e      	b.n	800478c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <HAL_TIM_PWM_Start+0x82>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046dc:	e013      	b.n	8004706 <HAL_TIM_PWM_Start+0xaa>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_PWM_Start+0x92>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ec:	e00b      	b.n	8004706 <HAL_TIM_PWM_Start+0xaa>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_PWM_Start+0xa2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fc:	e003      	b.n	8004706 <HAL_TIM_PWM_Start+0xaa>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2201      	movs	r2, #1
 800470c:	6839      	ldr	r1, [r7, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fd78 	bl	8005204 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <HAL_TIM_PWM_Start+0x138>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d107      	bne.n	800472e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800472c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a18      	ldr	r2, [pc, #96]	; (8004794 <HAL_TIM_PWM_Start+0x138>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_TIM_PWM_Start+0xfa>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004740:	d009      	beq.n	8004756 <HAL_TIM_PWM_Start+0xfa>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a14      	ldr	r2, [pc, #80]	; (8004798 <HAL_TIM_PWM_Start+0x13c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_TIM_PWM_Start+0xfa>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a12      	ldr	r2, [pc, #72]	; (800479c <HAL_TIM_PWM_Start+0x140>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d111      	bne.n	800477a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b06      	cmp	r3, #6
 8004766:	d010      	beq.n	800478a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004778:	e007      	b.n	800478a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800

080047a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d020      	beq.n	8004804 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01b      	beq.n	8004804 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0202 	mvn.w	r2, #2
 80047d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fa63 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 80047f0:	e005      	b.n	80047fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fa56 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fa65 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d020      	beq.n	8004850 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01b      	beq.n	8004850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0204 	mvn.w	r2, #4
 8004820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa3d 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 800483c:	e005      	b.n	800484a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fa30 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fa3f 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d020      	beq.n	800489c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01b      	beq.n	800489c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0208 	mvn.w	r2, #8
 800486c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2204      	movs	r2, #4
 8004872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fa17 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa0a 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fa19 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d020      	beq.n	80048e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01b      	beq.n	80048e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0210 	mvn.w	r2, #16
 80048b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2208      	movs	r2, #8
 80048be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f9f1 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f9e4 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f9f3 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00c      	beq.n	800490c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0201 	mvn.w	r2, #1
 8004904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f9c3 	bl	8004c92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00c      	beq.n	8004930 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fcf5 	bl	800531a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00c      	beq.n	8004954 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800494c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f9c3 	bl	8004cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0220 	mvn.w	r2, #32
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fcc8 	bl	8005308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800499a:	2302      	movs	r3, #2
 800499c:	e0ae      	b.n	8004afc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	f200 809f 	bhi.w	8004aec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049ae:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	08004aed 	.word	0x08004aed
 80049bc:	08004aed 	.word	0x08004aed
 80049c0:	08004aed 	.word	0x08004aed
 80049c4:	08004a29 	.word	0x08004a29
 80049c8:	08004aed 	.word	0x08004aed
 80049cc:	08004aed 	.word	0x08004aed
 80049d0:	08004aed 	.word	0x08004aed
 80049d4:	08004a6b 	.word	0x08004a6b
 80049d8:	08004aed 	.word	0x08004aed
 80049dc:	08004aed 	.word	0x08004aed
 80049e0:	08004aed 	.word	0x08004aed
 80049e4:	08004aab 	.word	0x08004aab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 f9ea 	bl	8004dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0208 	orr.w	r2, r2, #8
 8004a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0204 	bic.w	r2, r2, #4
 8004a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6999      	ldr	r1, [r3, #24]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	619a      	str	r2, [r3, #24]
      break;
 8004a26:	e064      	b.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fa30 	bl	8004e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6999      	ldr	r1, [r3, #24]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	021a      	lsls	r2, r3, #8
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	619a      	str	r2, [r3, #24]
      break;
 8004a68:	e043      	b.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fa79 	bl	8004f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0208 	orr.w	r2, r2, #8
 8004a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0204 	bic.w	r2, r2, #4
 8004a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69d9      	ldr	r1, [r3, #28]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	61da      	str	r2, [r3, #28]
      break;
 8004aa8:	e023      	b.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fac3 	bl	800503c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69d9      	ldr	r1, [r3, #28]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	021a      	lsls	r2, r3, #8
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	61da      	str	r2, [r3, #28]
      break;
 8004aea:	e002      	b.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
      break;
 8004af0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_TIM_ConfigClockSource+0x1c>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e0b4      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x186>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b58:	d03e      	beq.n	8004bd8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5e:	f200 8087 	bhi.w	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b66:	f000 8086 	beq.w	8004c76 <HAL_TIM_ConfigClockSource+0x172>
 8004b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6e:	d87f      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b70      	cmp	r3, #112	; 0x70
 8004b72:	d01a      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0xa6>
 8004b74:	2b70      	cmp	r3, #112	; 0x70
 8004b76:	d87b      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b60      	cmp	r3, #96	; 0x60
 8004b7a:	d050      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x11a>
 8004b7c:	2b60      	cmp	r3, #96	; 0x60
 8004b7e:	d877      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b50      	cmp	r3, #80	; 0x50
 8004b82:	d03c      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0xfa>
 8004b84:	2b50      	cmp	r3, #80	; 0x50
 8004b86:	d873      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d058      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x13a>
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d86f      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b90:	2b30      	cmp	r3, #48	; 0x30
 8004b92:	d064      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x15a>
 8004b94:	2b30      	cmp	r3, #48	; 0x30
 8004b96:	d86b      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d060      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x15a>
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d867      	bhi.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d05c      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	d05a      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ba8:	e062      	b.n	8004c70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bba:	f000 fb04 	bl	80051c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	609a      	str	r2, [r3, #8]
      break;
 8004bd6:	e04f      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004be8:	f000 faed 	bl	80051c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bfa:	609a      	str	r2, [r3, #8]
      break;
 8004bfc:	e03c      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 fa64 	bl	80050d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2150      	movs	r1, #80	; 0x50
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fabb 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e02c      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f000 fa82 	bl	8005134 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2160      	movs	r1, #96	; 0x60
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 faab 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004c3c:	e01c      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f000 fa44 	bl	80050d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2140      	movs	r1, #64	; 0x40
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fa9b 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004c5c:	e00c      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f000 fa92 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004c6e:	e003      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
      break;
 8004c74:	e000      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a2f      	ldr	r2, [pc, #188]	; (8004dbc <TIM_Base_SetConfig+0xd0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <TIM_Base_SetConfig+0x30>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0a:	d007      	beq.n	8004d1c <TIM_Base_SetConfig+0x30>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a2c      	ldr	r2, [pc, #176]	; (8004dc0 <TIM_Base_SetConfig+0xd4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_Base_SetConfig+0x30>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a2b      	ldr	r2, [pc, #172]	; (8004dc4 <TIM_Base_SetConfig+0xd8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d108      	bne.n	8004d2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a22      	ldr	r2, [pc, #136]	; (8004dbc <TIM_Base_SetConfig+0xd0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_Base_SetConfig+0x62>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3c:	d007      	beq.n	8004d4e <TIM_Base_SetConfig+0x62>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a1f      	ldr	r2, [pc, #124]	; (8004dc0 <TIM_Base_SetConfig+0xd4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_Base_SetConfig+0x62>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <TIM_Base_SetConfig+0xd8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d108      	bne.n	8004d60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <TIM_Base_SetConfig+0xd0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d103      	bne.n	8004d94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f023 0201 	bic.w	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	611a      	str	r2, [r3, #16]
  }
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800

08004dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f023 0201 	bic.w	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0303 	bic.w	r3, r3, #3
 8004dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f023 0302 	bic.w	r3, r3, #2
 8004e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	; (8004e90 <TIM_OC1_SetConfig+0xc8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d10c      	bne.n	8004e3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 0308 	bic.w	r3, r3, #8
 8004e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f023 0304 	bic.w	r3, r3, #4
 8004e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <TIM_OC1_SetConfig+0xc8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d111      	bne.n	8004e6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	621a      	str	r2, [r3, #32]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40012c00 	.word	0x40012c00

08004e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f023 0210 	bic.w	r2, r3, #16
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0320 	bic.w	r3, r3, #32
 8004ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <TIM_OC2_SetConfig+0xd0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d10d      	bne.n	8004f10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a14      	ldr	r2, [pc, #80]	; (8004f64 <TIM_OC2_SetConfig+0xd0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d113      	bne.n	8004f40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr
 8004f64:	40012c00 	.word	0x40012c00

08004f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	; (8005038 <TIM_OC3_SetConfig+0xd0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d10d      	bne.n	8004fe2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a14      	ldr	r2, [pc, #80]	; (8005038 <TIM_OC3_SetConfig+0xd0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d113      	bne.n	8005012 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	621a      	str	r2, [r3, #32]
}
 800502c:	bf00      	nop
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40012c00 	.word	0x40012c00

0800503c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	031b      	lsls	r3, r3, #12
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a0f      	ldr	r2, [pc, #60]	; (80050d4 <TIM_OC4_SetConfig+0x98>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d109      	bne.n	80050b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr
 80050d4:	40012c00 	.word	0x40012c00

080050d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0201 	bic.w	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f023 030a 	bic.w	r3, r3, #10
 8005114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f023 0210 	bic.w	r2, r3, #16
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800515e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	031b      	lsls	r3, r3, #12
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005170:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	621a      	str	r2, [r3, #32]
}
 8005188:	bf00      	nop
 800518a:	371c      	adds	r7, #28
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f043 0307 	orr.w	r3, r3, #7
 80051b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr

080051c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b087      	sub	sp, #28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	021a      	lsls	r2, r3, #8
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	431a      	orrs	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	609a      	str	r2, [r3, #8]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	2201      	movs	r2, #1
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1a      	ldr	r2, [r3, #32]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	43db      	mvns	r3, r3
 8005226:	401a      	ands	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	fa01 f303 	lsl.w	r3, r1, r3
 800523c:	431a      	orrs	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005260:	2302      	movs	r3, #2
 8005262:	e046      	b.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a16      	ldr	r2, [pc, #88]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00e      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b0:	d009      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a12      	ldr	r2, [pc, #72]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a10      	ldr	r2, [pc, #64]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10c      	bne.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800

08005308 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr

0800532c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e042      	b.n	80053c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fb ff78 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2224      	movs	r2, #36	; 0x24
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800536e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fc7f 	bl	8005c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b0ba      	sub	sp, #232	; 0xe8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800540a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10f      	bne.n	8005432 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <HAL_UART_IRQHandler+0x66>
 800541e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fb63 	bl	8005af6 <UART_Receive_IT>
      return;
 8005430:	e25b      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 80de 	beq.w	80055f8 <HAL_UART_IRQHandler+0x22c>
 800543c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d106      	bne.n	8005456 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800544c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80d1 	beq.w	80055f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <HAL_UART_IRQHandler+0xae>
 8005462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	f043 0201 	orr.w	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_UART_IRQHandler+0xd2>
 8005486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	f043 0202 	orr.w	r2, r3, #2
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800549e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <HAL_UART_IRQHandler+0xf6>
 80054aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	f043 0204 	orr.w	r2, r3, #4
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d011      	beq.n	80054f2 <HAL_UART_IRQHandler+0x126>
 80054ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d105      	bne.n	80054e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ea:	f043 0208 	orr.w	r2, r3, #8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 81f2 	beq.w	80058e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_UART_IRQHandler+0x14e>
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 faee 	bl	8005af6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <HAL_UART_IRQHandler+0x17a>
 800553e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d04f      	beq.n	80055e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9f8 	bl	800593c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d041      	beq.n	80055de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3314      	adds	r3, #20
 8005560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3314      	adds	r3, #20
 8005582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005586:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800558a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800559e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1d9      	bne.n	800555a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d013      	beq.n	80055d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b2:	4a7e      	ldr	r2, [pc, #504]	; (80057ac <HAL_UART_IRQHandler+0x3e0>)
 80055b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fd f9a6 	bl	800290c <HAL_DMA_Abort_IT>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d4:	e00e      	b.n	80055f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f99c 	bl	8005914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	e00a      	b.n	80055f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f998 	bl	8005914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	e006      	b.n	80055f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f994 	bl	8005914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80055f2:	e175      	b.n	80058e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	bf00      	nop
    return;
 80055f6:	e173      	b.n	80058e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	f040 814f 	bne.w	80058a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8148 	beq.w	80058a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8141 	beq.w	80058a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	60bb      	str	r3, [r7, #8]
 8005632:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80b6 	beq.w	80057b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8145 	beq.w	80058e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800565e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005662:	429a      	cmp	r2, r3
 8005664:	f080 813e 	bcs.w	80058e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800566e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b20      	cmp	r3, #32
 8005678:	f000 8088 	beq.w	800578c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005692:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800569a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1d9      	bne.n	800567c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3314      	adds	r3, #20
 80056ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056da:	f023 0301 	bic.w	r3, r3, #1
 80056de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3314      	adds	r3, #20
 80056e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e1      	bne.n	80056c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3314      	adds	r3, #20
 800570a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800571a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3314      	adds	r3, #20
 8005724:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005728:	66fa      	str	r2, [r7, #108]	; 0x6c
 800572a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800572e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e3      	bne.n	8005704 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	330c      	adds	r3, #12
 8005750:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800575a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800575c:	f023 0310 	bic.w	r3, r3, #16
 8005760:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800576e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005770:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005774:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800577c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e3      	bne.n	800574a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005786:	4618      	mov	r0, r3
 8005788:	f7fd f884 	bl	8002894 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800579a:	b29b      	uxth	r3, r3
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	b29b      	uxth	r3, r3
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f8bf 	bl	8005926 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057a8:	e09c      	b.n	80058e4 <HAL_UART_IRQHandler+0x518>
 80057aa:	bf00      	nop
 80057ac:	08005a01 	.word	0x08005a01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 808e 	beq.w	80058e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8089 	beq.w	80058e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057fa:	647a      	str	r2, [r7, #68]	; 0x44
 80057fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e3      	bne.n	80057d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3314      	adds	r3, #20
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	623b      	str	r3, [r7, #32]
   return(result);
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3314      	adds	r3, #20
 800582e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005832:	633a      	str	r2, [r7, #48]	; 0x30
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e3      	bne.n	800580e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	60fb      	str	r3, [r7, #12]
   return(result);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0310 	bic.w	r3, r3, #16
 800586a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	330c      	adds	r3, #12
 8005874:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005878:	61fa      	str	r2, [r7, #28]
 800587a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	69b9      	ldr	r1, [r7, #24]
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	617b      	str	r3, [r7, #20]
   return(result);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e3      	bne.n	8005854 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f844 	bl	8005926 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800589e:	e023      	b.n	80058e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d009      	beq.n	80058c0 <HAL_UART_IRQHandler+0x4f4>
 80058ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f8b5 	bl	8005a28 <UART_Transmit_IT>
    return;
 80058be:	e014      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00e      	beq.n	80058ea <HAL_UART_IRQHandler+0x51e>
 80058cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f8f4 	bl	8005ac6 <UART_EndTransmit_IT>
    return;
 80058de:	e004      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
    return;
 80058e0:	bf00      	nop
 80058e2:	e002      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
      return;
 80058e4:	bf00      	nop
 80058e6:	e000      	b.n	80058ea <HAL_UART_IRQHandler+0x51e>
      return;
 80058e8:	bf00      	nop
  }
}
 80058ea:	37e8      	adds	r7, #232	; 0xe8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr

08005902 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr

08005914 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b095      	sub	sp, #84	; 0x54
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800595a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005964:	643a      	str	r2, [r7, #64]	; 0x40
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800596a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e5      	bne.n	8005944 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	61fb      	str	r3, [r7, #28]
   return(result);
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3314      	adds	r3, #20
 8005996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005998:	62fa      	str	r2, [r7, #44]	; 0x2c
 800599a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800599e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e5      	bne.n	8005978 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d119      	bne.n	80059e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	330c      	adds	r3, #12
 80059ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f023 0310 	bic.w	r3, r3, #16
 80059ca:	647b      	str	r3, [r7, #68]	; 0x44
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059d4:	61ba      	str	r2, [r7, #24]
 80059d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6979      	ldr	r1, [r7, #20]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	613b      	str	r3, [r7, #16]
   return(result);
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e5      	bne.n	80059b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059f6:	bf00      	nop
 80059f8:	3754      	adds	r7, #84	; 0x54
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7ff ff7a 	bl	8005914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b21      	cmp	r3, #33	; 0x21
 8005a3a:	d13e      	bne.n	8005aba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a44:	d114      	bne.n	8005a70 <UART_Transmit_IT+0x48>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d110      	bne.n	8005a70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	1c9a      	adds	r2, r3, #2
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]
 8005a6e:	e008      	b.n	8005a82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	1c59      	adds	r1, r3, #1
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6211      	str	r1, [r2, #32]
 8005a7a:	781a      	ldrb	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	4619      	mov	r1, r3
 8005a90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10f      	bne.n	8005ab6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aa4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e000      	b.n	8005abc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005aba:	2302      	movs	r3, #2
  }
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr

08005ac6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005adc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff ff02 	bl	80058f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b08c      	sub	sp, #48	; 0x30
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b22      	cmp	r3, #34	; 0x22
 8005b08:	f040 80ae 	bne.w	8005c68 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b14:	d117      	bne.n	8005b46 <UART_Receive_IT+0x50>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d113      	bne.n	8005b46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	1c9a      	adds	r2, r3, #2
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	629a      	str	r2, [r3, #40]	; 0x28
 8005b44:	e026      	b.n	8005b94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b58:	d007      	beq.n	8005b6a <UART_Receive_IT+0x74>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <UART_Receive_IT+0x82>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	e008      	b.n	8005b8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d15d      	bne.n	8005c64 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0220 	bic.w	r2, r2, #32
 8005bb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695a      	ldr	r2, [r3, #20]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0201 	bic.w	r2, r2, #1
 8005bd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d135      	bne.n	8005c5a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	613b      	str	r3, [r7, #16]
   return(result);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f023 0310 	bic.w	r3, r3, #16
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c14:	623a      	str	r2, [r7, #32]
 8005c16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	69f9      	ldr	r1, [r7, #28]
 8005c1a:	6a3a      	ldr	r2, [r7, #32]
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e5      	bne.n	8005bf4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0310 	and.w	r3, r3, #16
 8005c32:	2b10      	cmp	r3, #16
 8005c34:	d10a      	bne.n	8005c4c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff fe67 	bl	8005926 <HAL_UARTEx_RxEventCallback>
 8005c58:	e002      	b.n	8005c60 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff fe51 	bl	8005902 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e002      	b.n	8005c6a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	e000      	b.n	8005c6a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c68:	2302      	movs	r3, #2
  }
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3730      	adds	r7, #48	; 0x30
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005cae:	f023 030c 	bic.w	r3, r3, #12
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a2c      	ldr	r2, [pc, #176]	; (8005d88 <UART_SetConfig+0x114>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d103      	bne.n	8005ce4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005cdc:	f7fd fd48 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	e002      	b.n	8005cea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ce4:	f7fd fd30 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8005ce8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009a      	lsls	r2, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d00:	4a22      	ldr	r2, [pc, #136]	; (8005d8c <UART_SetConfig+0x118>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	0119      	lsls	r1, r3, #4
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009a      	lsls	r2, r3, #2
 8005d14:	441a      	add	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d20:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <UART_SetConfig+0x118>)
 8005d22:	fba3 0302 	umull	r0, r3, r3, r2
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	2064      	movs	r0, #100	; 0x64
 8005d2a:	fb00 f303 	mul.w	r3, r0, r3
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	3332      	adds	r3, #50	; 0x32
 8005d34:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <UART_SetConfig+0x118>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d40:	4419      	add	r1, r3
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	009a      	lsls	r2, r3, #2
 8005d4c:	441a      	add	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <UART_SetConfig+0x118>)
 8005d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	2064      	movs	r0, #100	; 0x64
 8005d62:	fb00 f303 	mul.w	r3, r0, r3
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	3332      	adds	r3, #50	; 0x32
 8005d6c:	4a07      	ldr	r2, [pc, #28]	; (8005d8c <UART_SetConfig+0x118>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d80:	bf00      	nop
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40013800 	.word	0x40013800
 8005d8c:	51eb851f 	.word	0x51eb851f

08005d90 <memset>:
 8005d90:	4603      	mov	r3, r0
 8005d92:	4402      	add	r2, r0
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d100      	bne.n	8005d9a <memset+0xa>
 8005d98:	4770      	bx	lr
 8005d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d9e:	e7f9      	b.n	8005d94 <memset+0x4>

08005da0 <__libc_init_array>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	2600      	movs	r6, #0
 8005da4:	4d0c      	ldr	r5, [pc, #48]	; (8005dd8 <__libc_init_array+0x38>)
 8005da6:	4c0d      	ldr	r4, [pc, #52]	; (8005ddc <__libc_init_array+0x3c>)
 8005da8:	1b64      	subs	r4, r4, r5
 8005daa:	10a4      	asrs	r4, r4, #2
 8005dac:	42a6      	cmp	r6, r4
 8005dae:	d109      	bne.n	8005dc4 <__libc_init_array+0x24>
 8005db0:	f000 f81a 	bl	8005de8 <_init>
 8005db4:	2600      	movs	r6, #0
 8005db6:	4d0a      	ldr	r5, [pc, #40]	; (8005de0 <__libc_init_array+0x40>)
 8005db8:	4c0a      	ldr	r4, [pc, #40]	; (8005de4 <__libc_init_array+0x44>)
 8005dba:	1b64      	subs	r4, r4, r5
 8005dbc:	10a4      	asrs	r4, r4, #2
 8005dbe:	42a6      	cmp	r6, r4
 8005dc0:	d105      	bne.n	8005dce <__libc_init_array+0x2e>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc8:	4798      	blx	r3
 8005dca:	3601      	adds	r6, #1
 8005dcc:	e7ee      	b.n	8005dac <__libc_init_array+0xc>
 8005dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd2:	4798      	blx	r3
 8005dd4:	3601      	adds	r6, #1
 8005dd6:	e7f2      	b.n	8005dbe <__libc_init_array+0x1e>
 8005dd8:	08005e2c 	.word	0x08005e2c
 8005ddc:	08005e2c 	.word	0x08005e2c
 8005de0:	08005e2c 	.word	0x08005e2c
 8005de4:	08005e30 	.word	0x08005e30

08005de8 <_init>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	bf00      	nop
 8005dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dee:	bc08      	pop	{r3}
 8005df0:	469e      	mov	lr, r3
 8005df2:	4770      	bx	lr

08005df4 <_fini>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr
